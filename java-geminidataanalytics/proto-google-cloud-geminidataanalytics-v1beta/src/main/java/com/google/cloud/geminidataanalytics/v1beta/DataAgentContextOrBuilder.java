/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/geminidataanalytics/v1beta/data_chat_service.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.geminidataanalytics.v1beta;

public interface DataAgentContextOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.geminidataanalytics.v1beta.DataAgentContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The name of the data agent resource.
   * </pre>
   *
   * <code>
   * string data_agent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The dataAgent.
   */
  java.lang.String getDataAgent();

  /**
   *
   *
   * <pre>
   * Required. The name of the data agent resource.
   * </pre>
   *
   * <code>
   * string data_agent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for dataAgent.
   */
  com.google.protobuf.ByteString getDataAgentBytes();

  /**
   *
   *
   * <pre>
   * Optional. The credentials to use when calling the looker datasource
   *
   * Currently supports both oauth token and api keys based credentials, as
   * described in
   * https://cloud.google.com/looker/docs/api-auth#authentication_with_an_sdk
   * </pre>
   *
   * <code>
   * .google.cloud.geminidataanalytics.v1beta.Credentials credentials = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the credentials field is set.
   */
  boolean hasCredentials();

  /**
   *
   *
   * <pre>
   * Optional. The credentials to use when calling the looker datasource
   *
   * Currently supports both oauth token and api keys based credentials, as
   * described in
   * https://cloud.google.com/looker/docs/api-auth#authentication_with_an_sdk
   * </pre>
   *
   * <code>
   * .google.cloud.geminidataanalytics.v1beta.Credentials credentials = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The credentials.
   */
  com.google.cloud.geminidataanalytics.v1beta.Credentials getCredentials();

  /**
   *
   *
   * <pre>
   * Optional. The credentials to use when calling the looker datasource
   *
   * Currently supports both oauth token and api keys based credentials, as
   * described in
   * https://cloud.google.com/looker/docs/api-auth#authentication_with_an_sdk
   * </pre>
   *
   * <code>
   * .google.cloud.geminidataanalytics.v1beta.Credentials credentials = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.geminidataanalytics.v1beta.CredentialsOrBuilder getCredentialsOrBuilder();

  /**
   *
   *
   * <pre>
   * Optional. Version of context to be used by DCS (e.g. STAGING, PUBLISHED)
   * </pre>
   *
   * <code>
   * .google.cloud.geminidataanalytics.v1beta.DataAgentContext.ContextVersion context_version = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for contextVersion.
   */
  int getContextVersionValue();

  /**
   *
   *
   * <pre>
   * Optional. Version of context to be used by DCS (e.g. STAGING, PUBLISHED)
   * </pre>
   *
   * <code>
   * .google.cloud.geminidataanalytics.v1beta.DataAgentContext.ContextVersion context_version = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The contextVersion.
   */
  com.google.cloud.geminidataanalytics.v1beta.DataAgentContext.ContextVersion getContextVersion();
}
