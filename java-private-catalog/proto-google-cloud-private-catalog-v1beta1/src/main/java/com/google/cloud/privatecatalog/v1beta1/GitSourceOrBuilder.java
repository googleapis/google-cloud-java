/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/privatecatalog/v1beta1/private_catalog.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.privatecatalog.v1beta1;

public interface GitSourceOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.privatecatalog.v1beta1.GitSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Location of the Git repo to build.
   * </pre>
   *
   * <code>string repo = 1;</code>
   *
   * @return The repo.
   */
  java.lang.String getRepo();
  /**
   *
   *
   * <pre>
   * Location of the Git repo to build.
   * </pre>
   *
   * <code>string repo = 1;</code>
   *
   * @return The bytes for repo.
   */
  com.google.protobuf.ByteString getRepoBytes();

  /**
   *
   *
   * <pre>
   * Directory, relative to the source root, in which to run the build.
   *
   * This must be a relative path. If a step's `dir` is specified and is an
   * absolute path, this value is ignored for that step's execution.
   * </pre>
   *
   * <code>string dir = 2;</code>
   *
   * @return The dir.
   */
  java.lang.String getDir();
  /**
   *
   *
   * <pre>
   * Directory, relative to the source root, in which to run the build.
   *
   * This must be a relative path. If a step's `dir` is specified and is an
   * absolute path, this value is ignored for that step's execution.
   * </pre>
   *
   * <code>string dir = 2;</code>
   *
   * @return The bytes for dir.
   */
  com.google.protobuf.ByteString getDirBytes();

  /**
   *
   *
   * <pre>
   * The revision commit to use.
   * </pre>
   *
   * <code>string commit = 3;</code>
   *
   * @return Whether the commit field is set.
   */
  boolean hasCommit();
  /**
   *
   *
   * <pre>
   * The revision commit to use.
   * </pre>
   *
   * <code>string commit = 3;</code>
   *
   * @return The commit.
   */
  java.lang.String getCommit();
  /**
   *
   *
   * <pre>
   * The revision commit to use.
   * </pre>
   *
   * <code>string commit = 3;</code>
   *
   * @return The bytes for commit.
   */
  com.google.protobuf.ByteString getCommitBytes();

  /**
   *
   *
   * <pre>
   * The revision branch to use.
   * </pre>
   *
   * <code>string branch = 4;</code>
   *
   * @return Whether the branch field is set.
   */
  boolean hasBranch();
  /**
   *
   *
   * <pre>
   * The revision branch to use.
   * </pre>
   *
   * <code>string branch = 4;</code>
   *
   * @return The branch.
   */
  java.lang.String getBranch();
  /**
   *
   *
   * <pre>
   * The revision branch to use.
   * </pre>
   *
   * <code>string branch = 4;</code>
   *
   * @return The bytes for branch.
   */
  com.google.protobuf.ByteString getBranchBytes();

  /**
   *
   *
   * <pre>
   * The revision tag to use.
   * </pre>
   *
   * <code>string tag = 5;</code>
   *
   * @return Whether the tag field is set.
   */
  boolean hasTag();
  /**
   *
   *
   * <pre>
   * The revision tag to use.
   * </pre>
   *
   * <code>string tag = 5;</code>
   *
   * @return The tag.
   */
  java.lang.String getTag();
  /**
   *
   *
   * <pre>
   * The revision tag to use.
   * </pre>
   *
   * <code>string tag = 5;</code>
   *
   * @return The bytes for tag.
   */
  com.google.protobuf.ByteString getTagBytes();

  com.google.cloud.privatecatalog.v1beta1.GitSource.RefCase getRefCase();
}
