/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/scorecard.proto

// Protobuf Java Version: 3.25.5
package com.google.monitoring.dashboard.v1;

/**
 *
 *
 * <pre>
 * A widget showing the latest value of a metric, and how this value relates to
 * one or more thresholds.
 * </pre>
 *
 * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard}
 */
public final class Scorecard extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.monitoring.dashboard.v1.Scorecard)
    ScorecardOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Scorecard.newBuilder() to construct.
  private Scorecard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Scorecard() {
    thresholds_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Scorecard();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.monitoring.dashboard.v1.ScorecardProto
        .internal_static_google_monitoring_dashboard_v1_Scorecard_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.monitoring.dashboard.v1.ScorecardProto
        .internal_static_google_monitoring_dashboard_v1_Scorecard_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.monitoring.dashboard.v1.Scorecard.class,
            com.google.monitoring.dashboard.v1.Scorecard.Builder.class);
  }

  public interface GaugeViewOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.monitoring.dashboard.v1.Scorecard.GaugeView)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The lower bound for this gauge chart. The value of the chart should
     * always be greater than or equal to this.
     * </pre>
     *
     * <code>double lower_bound = 1;</code>
     *
     * @return The lowerBound.
     */
    double getLowerBound();

    /**
     *
     *
     * <pre>
     * The upper bound for this gauge chart. The value of the chart should
     * always be less than or equal to this.
     * </pre>
     *
     * <code>double upper_bound = 2;</code>
     *
     * @return The upperBound.
     */
    double getUpperBound();
  }
  /**
   *
   *
   * <pre>
   * A gauge chart shows where the current value sits within a pre-defined
   * range. The upper and lower bounds should define the possible range of
   * values for the scorecard's query (inclusive).
   * </pre>
   *
   * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard.GaugeView}
   */
  public static final class GaugeView extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.monitoring.dashboard.v1.Scorecard.GaugeView)
      GaugeViewOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use GaugeView.newBuilder() to construct.
    private GaugeView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private GaugeView() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new GaugeView();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_GaugeView_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_GaugeView_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.monitoring.dashboard.v1.Scorecard.GaugeView.class,
              com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder.class);
    }

    public static final int LOWER_BOUND_FIELD_NUMBER = 1;
    private double lowerBound_ = 0D;
    /**
     *
     *
     * <pre>
     * The lower bound for this gauge chart. The value of the chart should
     * always be greater than or equal to this.
     * </pre>
     *
     * <code>double lower_bound = 1;</code>
     *
     * @return The lowerBound.
     */
    @java.lang.Override
    public double getLowerBound() {
      return lowerBound_;
    }

    public static final int UPPER_BOUND_FIELD_NUMBER = 2;
    private double upperBound_ = 0D;
    /**
     *
     *
     * <pre>
     * The upper bound for this gauge chart. The value of the chart should
     * always be less than or equal to this.
     * </pre>
     *
     * <code>double upper_bound = 2;</code>
     *
     * @return The upperBound.
     */
    @java.lang.Override
    public double getUpperBound() {
      return upperBound_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(lowerBound_) != 0) {
        output.writeDouble(1, lowerBound_);
      }
      if (java.lang.Double.doubleToRawLongBits(upperBound_) != 0) {
        output.writeDouble(2, upperBound_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(lowerBound_) != 0) {
        size += com.google.protobuf.CodedOutputStream.computeDoubleSize(1, lowerBound_);
      }
      if (java.lang.Double.doubleToRawLongBits(upperBound_) != 0) {
        size += com.google.protobuf.CodedOutputStream.computeDoubleSize(2, upperBound_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.monitoring.dashboard.v1.Scorecard.GaugeView)) {
        return super.equals(obj);
      }
      com.google.monitoring.dashboard.v1.Scorecard.GaugeView other =
          (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) obj;

      if (java.lang.Double.doubleToLongBits(getLowerBound())
          != java.lang.Double.doubleToLongBits(other.getLowerBound())) return false;
      if (java.lang.Double.doubleToLongBits(getUpperBound())
          != java.lang.Double.doubleToLongBits(other.getUpperBound())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LOWER_BOUND_FIELD_NUMBER;
      hash =
          (53 * hash)
              + com.google.protobuf.Internal.hashLong(
                  java.lang.Double.doubleToLongBits(getLowerBound()));
      hash = (37 * hash) + UPPER_BOUND_FIELD_NUMBER;
      hash =
          (53 * hash)
              + com.google.protobuf.Internal.hashLong(
                  java.lang.Double.doubleToLongBits(getUpperBound()));
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.monitoring.dashboard.v1.Scorecard.GaugeView prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A gauge chart shows where the current value sits within a pre-defined
     * range. The upper and lower bounds should define the possible range of
     * values for the scorecard's query (inclusive).
     * </pre>
     *
     * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard.GaugeView}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.monitoring.dashboard.v1.Scorecard.GaugeView)
        com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_GaugeView_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_GaugeView_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.monitoring.dashboard.v1.Scorecard.GaugeView.class,
                com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder.class);
      }

      // Construct using com.google.monitoring.dashboard.v1.Scorecard.GaugeView.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        lowerBound_ = 0D;
        upperBound_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_GaugeView_descriptor;
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.GaugeView getDefaultInstanceForType() {
        return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.GaugeView build() {
        com.google.monitoring.dashboard.v1.Scorecard.GaugeView result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.GaugeView buildPartial() {
        com.google.monitoring.dashboard.v1.Scorecard.GaugeView result =
            new com.google.monitoring.dashboard.v1.Scorecard.GaugeView(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.monitoring.dashboard.v1.Scorecard.GaugeView result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.lowerBound_ = lowerBound_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.upperBound_ = upperBound_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.monitoring.dashboard.v1.Scorecard.GaugeView) {
          return mergeFrom((com.google.monitoring.dashboard.v1.Scorecard.GaugeView) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.monitoring.dashboard.v1.Scorecard.GaugeView other) {
        if (other == com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance())
          return this;
        if (other.getLowerBound() != 0D) {
          setLowerBound(other.getLowerBound());
        }
        if (other.getUpperBound() != 0D) {
          setUpperBound(other.getUpperBound());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9:
                {
                  lowerBound_ = input.readDouble();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 9
              case 17:
                {
                  upperBound_ = input.readDouble();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 17
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private double lowerBound_;
      /**
       *
       *
       * <pre>
       * The lower bound for this gauge chart. The value of the chart should
       * always be greater than or equal to this.
       * </pre>
       *
       * <code>double lower_bound = 1;</code>
       *
       * @return The lowerBound.
       */
      @java.lang.Override
      public double getLowerBound() {
        return lowerBound_;
      }
      /**
       *
       *
       * <pre>
       * The lower bound for this gauge chart. The value of the chart should
       * always be greater than or equal to this.
       * </pre>
       *
       * <code>double lower_bound = 1;</code>
       *
       * @param value The lowerBound to set.
       * @return This builder for chaining.
       */
      public Builder setLowerBound(double value) {

        lowerBound_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The lower bound for this gauge chart. The value of the chart should
       * always be greater than or equal to this.
       * </pre>
       *
       * <code>double lower_bound = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearLowerBound() {
        bitField0_ = (bitField0_ & ~0x00000001);
        lowerBound_ = 0D;
        onChanged();
        return this;
      }

      private double upperBound_;
      /**
       *
       *
       * <pre>
       * The upper bound for this gauge chart. The value of the chart should
       * always be less than or equal to this.
       * </pre>
       *
       * <code>double upper_bound = 2;</code>
       *
       * @return The upperBound.
       */
      @java.lang.Override
      public double getUpperBound() {
        return upperBound_;
      }
      /**
       *
       *
       * <pre>
       * The upper bound for this gauge chart. The value of the chart should
       * always be less than or equal to this.
       * </pre>
       *
       * <code>double upper_bound = 2;</code>
       *
       * @param value The upperBound to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBound(double value) {

        upperBound_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The upper bound for this gauge chart. The value of the chart should
       * always be less than or equal to this.
       * </pre>
       *
       * <code>double upper_bound = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearUpperBound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        upperBound_ = 0D;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.monitoring.dashboard.v1.Scorecard.GaugeView)
    }

    // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard.GaugeView)
    private static final com.google.monitoring.dashboard.v1.Scorecard.GaugeView DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.monitoring.dashboard.v1.Scorecard.GaugeView();
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.GaugeView getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GaugeView> PARSER =
        new com.google.protobuf.AbstractParser<GaugeView>() {
          @java.lang.Override
          public GaugeView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<GaugeView> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GaugeView> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.GaugeView getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface SparkChartViewOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Required. The type of sparkchart to show in this chartView.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for sparkChartType.
     */
    int getSparkChartTypeValue();
    /**
     *
     *
     * <pre>
     * Required. The type of sparkchart to show in this chartView.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The sparkChartType.
     */
    com.google.monitoring.dashboard.v1.SparkChartType getSparkChartType();

    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     *
     * @return Whether the minAlignmentPeriod field is set.
     */
    boolean hasMinAlignmentPeriod();
    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     *
     * @return The minAlignmentPeriod.
     */
    com.google.protobuf.Duration getMinAlignmentPeriod();
    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     */
    com.google.protobuf.DurationOrBuilder getMinAlignmentPeriodOrBuilder();
  }
  /**
   *
   *
   * <pre>
   * A sparkChart is a small chart suitable for inclusion in a table-cell or
   * inline in text. This message contains the configuration for a sparkChart
   * to show up on a Scorecard, showing recent trends of the scorecard's
   * timeseries.
   * </pre>
   *
   * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard.SparkChartView}
   */
  public static final class SparkChartView extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
      SparkChartViewOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use SparkChartView.newBuilder() to construct.
    private SparkChartView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private SparkChartView() {
      sparkChartType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new SparkChartView();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_SparkChartView_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_SparkChartView_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.class,
              com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder.class);
    }

    private int bitField0_;
    public static final int SPARK_CHART_TYPE_FIELD_NUMBER = 1;
    private int sparkChartType_ = 0;
    /**
     *
     *
     * <pre>
     * Required. The type of sparkchart to show in this chartView.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for sparkChartType.
     */
    @java.lang.Override
    public int getSparkChartTypeValue() {
      return sparkChartType_;
    }
    /**
     *
     *
     * <pre>
     * Required. The type of sparkchart to show in this chartView.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The sparkChartType.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.SparkChartType getSparkChartType() {
      com.google.monitoring.dashboard.v1.SparkChartType result =
          com.google.monitoring.dashboard.v1.SparkChartType.forNumber(sparkChartType_);
      return result == null
          ? com.google.monitoring.dashboard.v1.SparkChartType.UNRECOGNIZED
          : result;
    }

    public static final int MIN_ALIGNMENT_PERIOD_FIELD_NUMBER = 2;
    private com.google.protobuf.Duration minAlignmentPeriod_;
    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     *
     * @return Whether the minAlignmentPeriod field is set.
     */
    @java.lang.Override
    public boolean hasMinAlignmentPeriod() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     *
     * @return The minAlignmentPeriod.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getMinAlignmentPeriod() {
      return minAlignmentPeriod_ == null
          ? com.google.protobuf.Duration.getDefaultInstance()
          : minAlignmentPeriod_;
    }
    /**
     *
     *
     * <pre>
     * The lower bound on data point frequency in the chart implemented by
     * specifying the minimum alignment period to use in a time series query.
     * For example, if the data is published once every 10 minutes it would not
     * make sense to fetch and align data at one minute intervals. This field is
     * optional and exists only as a hint.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getMinAlignmentPeriodOrBuilder() {
      return minAlignmentPeriod_ == null
          ? com.google.protobuf.Duration.getDefaultInstance()
          : minAlignmentPeriod_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (sparkChartType_
          != com.google.monitoring.dashboard.v1.SparkChartType.SPARK_CHART_TYPE_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(1, sparkChartType_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getMinAlignmentPeriod());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (sparkChartType_
          != com.google.monitoring.dashboard.v1.SparkChartType.SPARK_CHART_TYPE_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, sparkChartType_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(2, getMinAlignmentPeriod());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.monitoring.dashboard.v1.Scorecard.SparkChartView)) {
        return super.equals(obj);
      }
      com.google.monitoring.dashboard.v1.Scorecard.SparkChartView other =
          (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) obj;

      if (sparkChartType_ != other.sparkChartType_) return false;
      if (hasMinAlignmentPeriod() != other.hasMinAlignmentPeriod()) return false;
      if (hasMinAlignmentPeriod()) {
        if (!getMinAlignmentPeriod().equals(other.getMinAlignmentPeriod())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SPARK_CHART_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + sparkChartType_;
      if (hasMinAlignmentPeriod()) {
        hash = (37 * hash) + MIN_ALIGNMENT_PERIOD_FIELD_NUMBER;
        hash = (53 * hash) + getMinAlignmentPeriod().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A sparkChart is a small chart suitable for inclusion in a table-cell or
     * inline in text. This message contains the configuration for a sparkChart
     * to show up on a Scorecard, showing recent trends of the scorecard's
     * timeseries.
     * </pre>
     *
     * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard.SparkChartView}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_SparkChartView_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_SparkChartView_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.class,
                com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder.class);
      }

      // Construct using com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getMinAlignmentPeriodFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        sparkChartType_ = 0;
        minAlignmentPeriod_ = null;
        if (minAlignmentPeriodBuilder_ != null) {
          minAlignmentPeriodBuilder_.dispose();
          minAlignmentPeriodBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.monitoring.dashboard.v1.ScorecardProto
            .internal_static_google_monitoring_dashboard_v1_Scorecard_SparkChartView_descriptor;
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView
          getDefaultInstanceForType() {
        return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView build() {
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView buildPartial() {
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView result =
            new com.google.monitoring.dashboard.v1.Scorecard.SparkChartView(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(
          com.google.monitoring.dashboard.v1.Scorecard.SparkChartView result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.sparkChartType_ = sparkChartType_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.minAlignmentPeriod_ =
              minAlignmentPeriodBuilder_ == null
                  ? minAlignmentPeriod_
                  : minAlignmentPeriodBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) {
          return mergeFrom((com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.monitoring.dashboard.v1.Scorecard.SparkChartView other) {
        if (other
            == com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance())
          return this;
        if (other.sparkChartType_ != 0) {
          setSparkChartTypeValue(other.getSparkChartTypeValue());
        }
        if (other.hasMinAlignmentPeriod()) {
          mergeMinAlignmentPeriod(other.getMinAlignmentPeriod());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  sparkChartType_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
              case 18:
                {
                  input.readMessage(
                      getMinAlignmentPeriodFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private int sparkChartType_ = 0;
      /**
       *
       *
       * <pre>
       * Required. The type of sparkchart to show in this chartView.
       * </pre>
       *
       * <code>
       * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The enum numeric value on the wire for sparkChartType.
       */
      @java.lang.Override
      public int getSparkChartTypeValue() {
        return sparkChartType_;
      }
      /**
       *
       *
       * <pre>
       * Required. The type of sparkchart to show in this chartView.
       * </pre>
       *
       * <code>
       * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @param value The enum numeric value on the wire for sparkChartType to set.
       * @return This builder for chaining.
       */
      public Builder setSparkChartTypeValue(int value) {
        sparkChartType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Required. The type of sparkchart to show in this chartView.
       * </pre>
       *
       * <code>
       * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The sparkChartType.
       */
      @java.lang.Override
      public com.google.monitoring.dashboard.v1.SparkChartType getSparkChartType() {
        com.google.monitoring.dashboard.v1.SparkChartType result =
            com.google.monitoring.dashboard.v1.SparkChartType.forNumber(sparkChartType_);
        return result == null
            ? com.google.monitoring.dashboard.v1.SparkChartType.UNRECOGNIZED
            : result;
      }
      /**
       *
       *
       * <pre>
       * Required. The type of sparkchart to show in this chartView.
       * </pre>
       *
       * <code>
       * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @param value The sparkChartType to set.
       * @return This builder for chaining.
       */
      public Builder setSparkChartType(com.google.monitoring.dashboard.v1.SparkChartType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        sparkChartType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Required. The type of sparkchart to show in this chartView.
       * </pre>
       *
       * <code>
       * .google.monitoring.dashboard.v1.SparkChartType spark_chart_type = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearSparkChartType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sparkChartType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Duration minAlignmentPeriod_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration,
              com.google.protobuf.Duration.Builder,
              com.google.protobuf.DurationOrBuilder>
          minAlignmentPeriodBuilder_;
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       *
       * @return Whether the minAlignmentPeriod field is set.
       */
      public boolean hasMinAlignmentPeriod() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       *
       * @return The minAlignmentPeriod.
       */
      public com.google.protobuf.Duration getMinAlignmentPeriod() {
        if (minAlignmentPeriodBuilder_ == null) {
          return minAlignmentPeriod_ == null
              ? com.google.protobuf.Duration.getDefaultInstance()
              : minAlignmentPeriod_;
        } else {
          return minAlignmentPeriodBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public Builder setMinAlignmentPeriod(com.google.protobuf.Duration value) {
        if (minAlignmentPeriodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minAlignmentPeriod_ = value;
        } else {
          minAlignmentPeriodBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public Builder setMinAlignmentPeriod(com.google.protobuf.Duration.Builder builderForValue) {
        if (minAlignmentPeriodBuilder_ == null) {
          minAlignmentPeriod_ = builderForValue.build();
        } else {
          minAlignmentPeriodBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public Builder mergeMinAlignmentPeriod(com.google.protobuf.Duration value) {
        if (minAlignmentPeriodBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)
              && minAlignmentPeriod_ != null
              && minAlignmentPeriod_ != com.google.protobuf.Duration.getDefaultInstance()) {
            getMinAlignmentPeriodBuilder().mergeFrom(value);
          } else {
            minAlignmentPeriod_ = value;
          }
        } else {
          minAlignmentPeriodBuilder_.mergeFrom(value);
        }
        if (minAlignmentPeriod_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public Builder clearMinAlignmentPeriod() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minAlignmentPeriod_ = null;
        if (minAlignmentPeriodBuilder_ != null) {
          minAlignmentPeriodBuilder_.dispose();
          minAlignmentPeriodBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public com.google.protobuf.Duration.Builder getMinAlignmentPeriodBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMinAlignmentPeriodFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      public com.google.protobuf.DurationOrBuilder getMinAlignmentPeriodOrBuilder() {
        if (minAlignmentPeriodBuilder_ != null) {
          return minAlignmentPeriodBuilder_.getMessageOrBuilder();
        } else {
          return minAlignmentPeriod_ == null
              ? com.google.protobuf.Duration.getDefaultInstance()
              : minAlignmentPeriod_;
        }
      }
      /**
       *
       *
       * <pre>
       * The lower bound on data point frequency in the chart implemented by
       * specifying the minimum alignment period to use in a time series query.
       * For example, if the data is published once every 10 minutes it would not
       * make sense to fetch and align data at one minute intervals. This field is
       * optional and exists only as a hint.
       * </pre>
       *
       * <code>.google.protobuf.Duration min_alignment_period = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration,
              com.google.protobuf.Duration.Builder,
              com.google.protobuf.DurationOrBuilder>
          getMinAlignmentPeriodFieldBuilder() {
        if (minAlignmentPeriodBuilder_ == null) {
          minAlignmentPeriodBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Duration,
                  com.google.protobuf.Duration.Builder,
                  com.google.protobuf.DurationOrBuilder>(
                  getMinAlignmentPeriod(), getParentForChildren(), isClean());
          minAlignmentPeriod_ = null;
        }
        return minAlignmentPeriodBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
    }

    // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard.SparkChartView)
    private static final com.google.monitoring.dashboard.v1.Scorecard.SparkChartView
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.monitoring.dashboard.v1.Scorecard.SparkChartView();
    }

    public static com.google.monitoring.dashboard.v1.Scorecard.SparkChartView getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SparkChartView> PARSER =
        new com.google.protobuf.AbstractParser<SparkChartView>() {
          @java.lang.Override
          public SparkChartView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<SparkChartView> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SparkChartView> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int bitField0_;
  private int dataViewCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object dataView_;

  public enum DataViewCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    GAUGE_VIEW(4),
    SPARK_CHART_VIEW(5),
    BLANK_VIEW(7),
    DATAVIEW_NOT_SET(0);
    private final int value;

    private DataViewCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataViewCase valueOf(int value) {
      return forNumber(value);
    }

    public static DataViewCase forNumber(int value) {
      switch (value) {
        case 4:
          return GAUGE_VIEW;
        case 5:
          return SPARK_CHART_VIEW;
        case 7:
          return BLANK_VIEW;
        case 0:
          return DATAVIEW_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public DataViewCase getDataViewCase() {
    return DataViewCase.forNumber(dataViewCase_);
  }

  public static final int TIME_SERIES_QUERY_FIELD_NUMBER = 1;
  private com.google.monitoring.dashboard.v1.TimeSeriesQuery timeSeriesQuery_;
  /**
   *
   *
   * <pre>
   * Required. Fields for querying time series data from the
   * Stackdriver metrics API.
   * </pre>
   *
   * <code>
   * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the timeSeriesQuery field is set.
   */
  @java.lang.Override
  public boolean hasTimeSeriesQuery() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Required. Fields for querying time series data from the
   * Stackdriver metrics API.
   * </pre>
   *
   * <code>
   * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The timeSeriesQuery.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.TimeSeriesQuery getTimeSeriesQuery() {
    return timeSeriesQuery_ == null
        ? com.google.monitoring.dashboard.v1.TimeSeriesQuery.getDefaultInstance()
        : timeSeriesQuery_;
  }
  /**
   *
   *
   * <pre>
   * Required. Fields for querying time series data from the
   * Stackdriver metrics API.
   * </pre>
   *
   * <code>
   * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.TimeSeriesQueryOrBuilder getTimeSeriesQueryOrBuilder() {
    return timeSeriesQuery_ == null
        ? com.google.monitoring.dashboard.v1.TimeSeriesQuery.getDefaultInstance()
        : timeSeriesQuery_;
  }

  public static final int GAUGE_VIEW_FIELD_NUMBER = 4;
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a gauge chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
   *
   * @return Whether the gaugeView field is set.
   */
  @java.lang.Override
  public boolean hasGaugeView() {
    return dataViewCase_ == 4;
  }
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a gauge chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
   *
   * @return The gaugeView.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Scorecard.GaugeView getGaugeView() {
    if (dataViewCase_ == 4) {
      return (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_;
    }
    return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a gauge chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder getGaugeViewOrBuilder() {
    if (dataViewCase_ == 4) {
      return (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_;
    }
    return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
  }

  public static final int SPARK_CHART_VIEW_FIELD_NUMBER = 5;
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a spark chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
   *
   * @return Whether the sparkChartView field is set.
   */
  @java.lang.Override
  public boolean hasSparkChartView() {
    return dataViewCase_ == 5;
  }
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a spark chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
   *
   * @return The sparkChartView.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView getSparkChartView() {
    if (dataViewCase_ == 5) {
      return (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_;
    }
    return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Will cause the scorecard to show a spark chart.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder
      getSparkChartViewOrBuilder() {
    if (dataViewCase_ == 5) {
      return (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_;
    }
    return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
  }

  public static final int BLANK_VIEW_FIELD_NUMBER = 7;
  /**
   *
   *
   * <pre>
   * Will cause the `Scorecard` to show only the value, with no indicator to
   * its value relative to its thresholds.
   * </pre>
   *
   * <code>.google.protobuf.Empty blank_view = 7;</code>
   *
   * @return Whether the blankView field is set.
   */
  @java.lang.Override
  public boolean hasBlankView() {
    return dataViewCase_ == 7;
  }
  /**
   *
   *
   * <pre>
   * Will cause the `Scorecard` to show only the value, with no indicator to
   * its value relative to its thresholds.
   * </pre>
   *
   * <code>.google.protobuf.Empty blank_view = 7;</code>
   *
   * @return The blankView.
   */
  @java.lang.Override
  public com.google.protobuf.Empty getBlankView() {
    if (dataViewCase_ == 7) {
      return (com.google.protobuf.Empty) dataView_;
    }
    return com.google.protobuf.Empty.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Will cause the `Scorecard` to show only the value, with no indicator to
   * its value relative to its thresholds.
   * </pre>
   *
   * <code>.google.protobuf.Empty blank_view = 7;</code>
   */
  @java.lang.Override
  public com.google.protobuf.EmptyOrBuilder getBlankViewOrBuilder() {
    if (dataViewCase_ == 7) {
      return (com.google.protobuf.Empty) dataView_;
    }
    return com.google.protobuf.Empty.getDefaultInstance();
  }

  public static final int THRESHOLDS_FIELD_NUMBER = 6;

  @SuppressWarnings("serial")
  private java.util.List<com.google.monitoring.dashboard.v1.Threshold> thresholds_;
  /**
   *
   *
   * <pre>
   * The thresholds used to determine the state of the scorecard given the
   * time series' current value. For an actual value x, the scorecard is in a
   * danger state if x is less than or equal to a danger threshold that triggers
   * below, or greater than or equal to a danger threshold that triggers above.
   * Similarly, if x is above/below a warning threshold that triggers
   * above/below, then the scorecard is in a warning state - unless x also puts
   * it in a danger state. (Danger trumps warning.)
   *
   * As an example, consider a scorecard with the following four thresholds:
   *
   * ```
   * {
   *   value: 90,
   *   category: 'DANGER',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 70,
   *   category: 'WARNING',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 10,
   *   category: 'DANGER',
   *   trigger: 'BELOW',
   * },
   * {
   *   value: 20,
   *   category: 'WARNING',
   *   trigger: 'BELOW',
   * }
   * ```
   *
   * Then: values less than or equal to 10 would put the scorecard in a DANGER
   * state, values greater than 10 but less than or equal to 20 a WARNING state,
   * values strictly between 20 and 70 an OK state, values greater than or equal
   * to 70 but less than 90 a WARNING state, and values greater than or equal to
   * 90 a DANGER state.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.monitoring.dashboard.v1.Threshold> getThresholdsList() {
    return thresholds_;
  }
  /**
   *
   *
   * <pre>
   * The thresholds used to determine the state of the scorecard given the
   * time series' current value. For an actual value x, the scorecard is in a
   * danger state if x is less than or equal to a danger threshold that triggers
   * below, or greater than or equal to a danger threshold that triggers above.
   * Similarly, if x is above/below a warning threshold that triggers
   * above/below, then the scorecard is in a warning state - unless x also puts
   * it in a danger state. (Danger trumps warning.)
   *
   * As an example, consider a scorecard with the following four thresholds:
   *
   * ```
   * {
   *   value: 90,
   *   category: 'DANGER',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 70,
   *   category: 'WARNING',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 10,
   *   category: 'DANGER',
   *   trigger: 'BELOW',
   * },
   * {
   *   value: 20,
   *   category: 'WARNING',
   *   trigger: 'BELOW',
   * }
   * ```
   *
   * Then: values less than or equal to 10 would put the scorecard in a DANGER
   * state, values greater than 10 but less than or equal to 20 a WARNING state,
   * values strictly between 20 and 70 an OK state, values greater than or equal
   * to 70 but less than 90 a WARNING state, and values greater than or equal to
   * 90 a DANGER state.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.monitoring.dashboard.v1.ThresholdOrBuilder>
      getThresholdsOrBuilderList() {
    return thresholds_;
  }
  /**
   *
   *
   * <pre>
   * The thresholds used to determine the state of the scorecard given the
   * time series' current value. For an actual value x, the scorecard is in a
   * danger state if x is less than or equal to a danger threshold that triggers
   * below, or greater than or equal to a danger threshold that triggers above.
   * Similarly, if x is above/below a warning threshold that triggers
   * above/below, then the scorecard is in a warning state - unless x also puts
   * it in a danger state. (Danger trumps warning.)
   *
   * As an example, consider a scorecard with the following four thresholds:
   *
   * ```
   * {
   *   value: 90,
   *   category: 'DANGER',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 70,
   *   category: 'WARNING',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 10,
   *   category: 'DANGER',
   *   trigger: 'BELOW',
   * },
   * {
   *   value: 20,
   *   category: 'WARNING',
   *   trigger: 'BELOW',
   * }
   * ```
   *
   * Then: values less than or equal to 10 would put the scorecard in a DANGER
   * state, values greater than 10 but less than or equal to 20 a WARNING state,
   * values strictly between 20 and 70 an OK state, values greater than or equal
   * to 70 but less than 90 a WARNING state, and values greater than or equal to
   * 90 a DANGER state.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
   */
  @java.lang.Override
  public int getThresholdsCount() {
    return thresholds_.size();
  }
  /**
   *
   *
   * <pre>
   * The thresholds used to determine the state of the scorecard given the
   * time series' current value. For an actual value x, the scorecard is in a
   * danger state if x is less than or equal to a danger threshold that triggers
   * below, or greater than or equal to a danger threshold that triggers above.
   * Similarly, if x is above/below a warning threshold that triggers
   * above/below, then the scorecard is in a warning state - unless x also puts
   * it in a danger state. (Danger trumps warning.)
   *
   * As an example, consider a scorecard with the following four thresholds:
   *
   * ```
   * {
   *   value: 90,
   *   category: 'DANGER',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 70,
   *   category: 'WARNING',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 10,
   *   category: 'DANGER',
   *   trigger: 'BELOW',
   * },
   * {
   *   value: 20,
   *   category: 'WARNING',
   *   trigger: 'BELOW',
   * }
   * ```
   *
   * Then: values less than or equal to 10 would put the scorecard in a DANGER
   * state, values greater than 10 but less than or equal to 20 a WARNING state,
   * values strictly between 20 and 70 an OK state, values greater than or equal
   * to 70 but less than 90 a WARNING state, and values greater than or equal to
   * 90 a DANGER state.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Threshold getThresholds(int index) {
    return thresholds_.get(index);
  }
  /**
   *
   *
   * <pre>
   * The thresholds used to determine the state of the scorecard given the
   * time series' current value. For an actual value x, the scorecard is in a
   * danger state if x is less than or equal to a danger threshold that triggers
   * below, or greater than or equal to a danger threshold that triggers above.
   * Similarly, if x is above/below a warning threshold that triggers
   * above/below, then the scorecard is in a warning state - unless x also puts
   * it in a danger state. (Danger trumps warning.)
   *
   * As an example, consider a scorecard with the following four thresholds:
   *
   * ```
   * {
   *   value: 90,
   *   category: 'DANGER',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 70,
   *   category: 'WARNING',
   *   trigger: 'ABOVE',
   * },
   * {
   *   value: 10,
   *   category: 'DANGER',
   *   trigger: 'BELOW',
   * },
   * {
   *   value: 20,
   *   category: 'WARNING',
   *   trigger: 'BELOW',
   * }
   * ```
   *
   * Then: values less than or equal to 10 would put the scorecard in a DANGER
   * state, values greater than 10 but less than or equal to 20 a WARNING state,
   * values strictly between 20 and 70 an OK state, values greater than or equal
   * to 70 but less than 90 a WARNING state, and values greater than or equal to
   * 90 a DANGER state.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.ThresholdOrBuilder getThresholdsOrBuilder(int index) {
    return thresholds_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getTimeSeriesQuery());
    }
    if (dataViewCase_ == 4) {
      output.writeMessage(4, (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_);
    }
    if (dataViewCase_ == 5) {
      output.writeMessage(
          5, (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_);
    }
    for (int i = 0; i < thresholds_.size(); i++) {
      output.writeMessage(6, thresholds_.get(i));
    }
    if (dataViewCase_ == 7) {
      output.writeMessage(7, (com.google.protobuf.Empty) dataView_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getTimeSeriesQuery());
    }
    if (dataViewCase_ == 4) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              4, (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_);
    }
    if (dataViewCase_ == 5) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              5, (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_);
    }
    for (int i = 0; i < thresholds_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, thresholds_.get(i));
    }
    if (dataViewCase_ == 7) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              7, (com.google.protobuf.Empty) dataView_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.monitoring.dashboard.v1.Scorecard)) {
      return super.equals(obj);
    }
    com.google.monitoring.dashboard.v1.Scorecard other =
        (com.google.monitoring.dashboard.v1.Scorecard) obj;

    if (hasTimeSeriesQuery() != other.hasTimeSeriesQuery()) return false;
    if (hasTimeSeriesQuery()) {
      if (!getTimeSeriesQuery().equals(other.getTimeSeriesQuery())) return false;
    }
    if (!getThresholdsList().equals(other.getThresholdsList())) return false;
    if (!getDataViewCase().equals(other.getDataViewCase())) return false;
    switch (dataViewCase_) {
      case 4:
        if (!getGaugeView().equals(other.getGaugeView())) return false;
        break;
      case 5:
        if (!getSparkChartView().equals(other.getSparkChartView())) return false;
        break;
      case 7:
        if (!getBlankView().equals(other.getBlankView())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTimeSeriesQuery()) {
      hash = (37 * hash) + TIME_SERIES_QUERY_FIELD_NUMBER;
      hash = (53 * hash) + getTimeSeriesQuery().hashCode();
    }
    if (getThresholdsCount() > 0) {
      hash = (37 * hash) + THRESHOLDS_FIELD_NUMBER;
      hash = (53 * hash) + getThresholdsList().hashCode();
    }
    switch (dataViewCase_) {
      case 4:
        hash = (37 * hash) + GAUGE_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getGaugeView().hashCode();
        break;
      case 5:
        hash = (37 * hash) + SPARK_CHART_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getSparkChartView().hashCode();
        break;
      case 7:
        hash = (37 * hash) + BLANK_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getBlankView().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Scorecard parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.monitoring.dashboard.v1.Scorecard prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A widget showing the latest value of a metric, and how this value relates to
   * one or more thresholds.
   * </pre>
   *
   * Protobuf type {@code google.monitoring.dashboard.v1.Scorecard}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.monitoring.dashboard.v1.Scorecard)
      com.google.monitoring.dashboard.v1.ScorecardOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.monitoring.dashboard.v1.Scorecard.class,
              com.google.monitoring.dashboard.v1.Scorecard.Builder.class);
    }

    // Construct using com.google.monitoring.dashboard.v1.Scorecard.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getTimeSeriesQueryFieldBuilder();
        getThresholdsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      timeSeriesQuery_ = null;
      if (timeSeriesQueryBuilder_ != null) {
        timeSeriesQueryBuilder_.dispose();
        timeSeriesQueryBuilder_ = null;
      }
      if (gaugeViewBuilder_ != null) {
        gaugeViewBuilder_.clear();
      }
      if (sparkChartViewBuilder_ != null) {
        sparkChartViewBuilder_.clear();
      }
      if (blankViewBuilder_ != null) {
        blankViewBuilder_.clear();
      }
      if (thresholdsBuilder_ == null) {
        thresholds_ = java.util.Collections.emptyList();
      } else {
        thresholds_ = null;
        thresholdsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      dataViewCase_ = 0;
      dataView_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.monitoring.dashboard.v1.ScorecardProto
          .internal_static_google_monitoring_dashboard_v1_Scorecard_descriptor;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard getDefaultInstanceForType() {
      return com.google.monitoring.dashboard.v1.Scorecard.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard build() {
      com.google.monitoring.dashboard.v1.Scorecard result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard buildPartial() {
      com.google.monitoring.dashboard.v1.Scorecard result =
          new com.google.monitoring.dashboard.v1.Scorecard(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.monitoring.dashboard.v1.Scorecard result) {
      if (thresholdsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          thresholds_ = java.util.Collections.unmodifiableList(thresholds_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.thresholds_ = thresholds_;
      } else {
        result.thresholds_ = thresholdsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.monitoring.dashboard.v1.Scorecard result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.timeSeriesQuery_ =
            timeSeriesQueryBuilder_ == null ? timeSeriesQuery_ : timeSeriesQueryBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(com.google.monitoring.dashboard.v1.Scorecard result) {
      result.dataViewCase_ = dataViewCase_;
      result.dataView_ = this.dataView_;
      if (dataViewCase_ == 4 && gaugeViewBuilder_ != null) {
        result.dataView_ = gaugeViewBuilder_.build();
      }
      if (dataViewCase_ == 5 && sparkChartViewBuilder_ != null) {
        result.dataView_ = sparkChartViewBuilder_.build();
      }
      if (dataViewCase_ == 7 && blankViewBuilder_ != null) {
        result.dataView_ = blankViewBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.monitoring.dashboard.v1.Scorecard) {
        return mergeFrom((com.google.monitoring.dashboard.v1.Scorecard) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.monitoring.dashboard.v1.Scorecard other) {
      if (other == com.google.monitoring.dashboard.v1.Scorecard.getDefaultInstance()) return this;
      if (other.hasTimeSeriesQuery()) {
        mergeTimeSeriesQuery(other.getTimeSeriesQuery());
      }
      if (thresholdsBuilder_ == null) {
        if (!other.thresholds_.isEmpty()) {
          if (thresholds_.isEmpty()) {
            thresholds_ = other.thresholds_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureThresholdsIsMutable();
            thresholds_.addAll(other.thresholds_);
          }
          onChanged();
        }
      } else {
        if (!other.thresholds_.isEmpty()) {
          if (thresholdsBuilder_.isEmpty()) {
            thresholdsBuilder_.dispose();
            thresholdsBuilder_ = null;
            thresholds_ = other.thresholds_;
            bitField0_ = (bitField0_ & ~0x00000010);
            thresholdsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getThresholdsFieldBuilder()
                    : null;
          } else {
            thresholdsBuilder_.addAllMessages(other.thresholds_);
          }
        }
      }
      switch (other.getDataViewCase()) {
        case GAUGE_VIEW:
          {
            mergeGaugeView(other.getGaugeView());
            break;
          }
        case SPARK_CHART_VIEW:
          {
            mergeSparkChartView(other.getSparkChartView());
            break;
          }
        case BLANK_VIEW:
          {
            mergeBlankView(other.getBlankView());
            break;
          }
        case DATAVIEW_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getTimeSeriesQueryFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 34:
              {
                input.readMessage(getGaugeViewFieldBuilder().getBuilder(), extensionRegistry);
                dataViewCase_ = 4;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getSparkChartViewFieldBuilder().getBuilder(), extensionRegistry);
                dataViewCase_ = 5;
                break;
              } // case 42
            case 50:
              {
                com.google.monitoring.dashboard.v1.Threshold m =
                    input.readMessage(
                        com.google.monitoring.dashboard.v1.Threshold.parser(), extensionRegistry);
                if (thresholdsBuilder_ == null) {
                  ensureThresholdsIsMutable();
                  thresholds_.add(m);
                } else {
                  thresholdsBuilder_.addMessage(m);
                }
                break;
              } // case 50
            case 58:
              {
                input.readMessage(getBlankViewFieldBuilder().getBuilder(), extensionRegistry);
                dataViewCase_ = 7;
                break;
              } // case 58
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int dataViewCase_ = 0;
    private java.lang.Object dataView_;

    public DataViewCase getDataViewCase() {
      return DataViewCase.forNumber(dataViewCase_);
    }

    public Builder clearDataView() {
      dataViewCase_ = 0;
      dataView_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.monitoring.dashboard.v1.TimeSeriesQuery timeSeriesQuery_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.TimeSeriesQuery,
            com.google.monitoring.dashboard.v1.TimeSeriesQuery.Builder,
            com.google.monitoring.dashboard.v1.TimeSeriesQueryOrBuilder>
        timeSeriesQueryBuilder_;
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the timeSeriesQuery field is set.
     */
    public boolean hasTimeSeriesQuery() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The timeSeriesQuery.
     */
    public com.google.monitoring.dashboard.v1.TimeSeriesQuery getTimeSeriesQuery() {
      if (timeSeriesQueryBuilder_ == null) {
        return timeSeriesQuery_ == null
            ? com.google.monitoring.dashboard.v1.TimeSeriesQuery.getDefaultInstance()
            : timeSeriesQuery_;
      } else {
        return timeSeriesQueryBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setTimeSeriesQuery(com.google.monitoring.dashboard.v1.TimeSeriesQuery value) {
      if (timeSeriesQueryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        timeSeriesQuery_ = value;
      } else {
        timeSeriesQueryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setTimeSeriesQuery(
        com.google.monitoring.dashboard.v1.TimeSeriesQuery.Builder builderForValue) {
      if (timeSeriesQueryBuilder_ == null) {
        timeSeriesQuery_ = builderForValue.build();
      } else {
        timeSeriesQueryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeTimeSeriesQuery(com.google.monitoring.dashboard.v1.TimeSeriesQuery value) {
      if (timeSeriesQueryBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && timeSeriesQuery_ != null
            && timeSeriesQuery_
                != com.google.monitoring.dashboard.v1.TimeSeriesQuery.getDefaultInstance()) {
          getTimeSeriesQueryBuilder().mergeFrom(value);
        } else {
          timeSeriesQuery_ = value;
        }
      } else {
        timeSeriesQueryBuilder_.mergeFrom(value);
      }
      if (timeSeriesQuery_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearTimeSeriesQuery() {
      bitField0_ = (bitField0_ & ~0x00000001);
      timeSeriesQuery_ = null;
      if (timeSeriesQueryBuilder_ != null) {
        timeSeriesQueryBuilder_.dispose();
        timeSeriesQueryBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.monitoring.dashboard.v1.TimeSeriesQuery.Builder getTimeSeriesQueryBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getTimeSeriesQueryFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.monitoring.dashboard.v1.TimeSeriesQueryOrBuilder
        getTimeSeriesQueryOrBuilder() {
      if (timeSeriesQueryBuilder_ != null) {
        return timeSeriesQueryBuilder_.getMessageOrBuilder();
      } else {
        return timeSeriesQuery_ == null
            ? com.google.monitoring.dashboard.v1.TimeSeriesQuery.getDefaultInstance()
            : timeSeriesQuery_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Fields for querying time series data from the
     * Stackdriver metrics API.
     * </pre>
     *
     * <code>
     * .google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.TimeSeriesQuery,
            com.google.monitoring.dashboard.v1.TimeSeriesQuery.Builder,
            com.google.monitoring.dashboard.v1.TimeSeriesQueryOrBuilder>
        getTimeSeriesQueryFieldBuilder() {
      if (timeSeriesQueryBuilder_ == null) {
        timeSeriesQueryBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.TimeSeriesQuery,
                com.google.monitoring.dashboard.v1.TimeSeriesQuery.Builder,
                com.google.monitoring.dashboard.v1.TimeSeriesQueryOrBuilder>(
                getTimeSeriesQuery(), getParentForChildren(), isClean());
        timeSeriesQuery_ = null;
      }
      return timeSeriesQueryBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Scorecard.GaugeView,
            com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder,
            com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder>
        gaugeViewBuilder_;
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     *
     * @return Whether the gaugeView field is set.
     */
    @java.lang.Override
    public boolean hasGaugeView() {
      return dataViewCase_ == 4;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     *
     * @return The gaugeView.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.GaugeView getGaugeView() {
      if (gaugeViewBuilder_ == null) {
        if (dataViewCase_ == 4) {
          return (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_;
        }
        return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
      } else {
        if (dataViewCase_ == 4) {
          return gaugeViewBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    public Builder setGaugeView(com.google.monitoring.dashboard.v1.Scorecard.GaugeView value) {
      if (gaugeViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dataView_ = value;
        onChanged();
      } else {
        gaugeViewBuilder_.setMessage(value);
      }
      dataViewCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    public Builder setGaugeView(
        com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder builderForValue) {
      if (gaugeViewBuilder_ == null) {
        dataView_ = builderForValue.build();
        onChanged();
      } else {
        gaugeViewBuilder_.setMessage(builderForValue.build());
      }
      dataViewCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    public Builder mergeGaugeView(com.google.monitoring.dashboard.v1.Scorecard.GaugeView value) {
      if (gaugeViewBuilder_ == null) {
        if (dataViewCase_ == 4
            && dataView_
                != com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance()) {
          dataView_ =
              com.google.monitoring.dashboard.v1.Scorecard.GaugeView.newBuilder(
                      (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          dataView_ = value;
        }
        onChanged();
      } else {
        if (dataViewCase_ == 4) {
          gaugeViewBuilder_.mergeFrom(value);
        } else {
          gaugeViewBuilder_.setMessage(value);
        }
      }
      dataViewCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    public Builder clearGaugeView() {
      if (gaugeViewBuilder_ == null) {
        if (dataViewCase_ == 4) {
          dataViewCase_ = 0;
          dataView_ = null;
          onChanged();
        }
      } else {
        if (dataViewCase_ == 4) {
          dataViewCase_ = 0;
          dataView_ = null;
        }
        gaugeViewBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    public com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder getGaugeViewBuilder() {
      return getGaugeViewFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder getGaugeViewOrBuilder() {
      if ((dataViewCase_ == 4) && (gaugeViewBuilder_ != null)) {
        return gaugeViewBuilder_.getMessageOrBuilder();
      } else {
        if (dataViewCase_ == 4) {
          return (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_;
        }
        return com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a gauge chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.GaugeView gauge_view = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Scorecard.GaugeView,
            com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder,
            com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder>
        getGaugeViewFieldBuilder() {
      if (gaugeViewBuilder_ == null) {
        if (!(dataViewCase_ == 4)) {
          dataView_ = com.google.monitoring.dashboard.v1.Scorecard.GaugeView.getDefaultInstance();
        }
        gaugeViewBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.Scorecard.GaugeView,
                com.google.monitoring.dashboard.v1.Scorecard.GaugeView.Builder,
                com.google.monitoring.dashboard.v1.Scorecard.GaugeViewOrBuilder>(
                (com.google.monitoring.dashboard.v1.Scorecard.GaugeView) dataView_,
                getParentForChildren(),
                isClean());
        dataView_ = null;
      }
      dataViewCase_ = 4;
      onChanged();
      return gaugeViewBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartView,
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder,
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder>
        sparkChartViewBuilder_;
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     *
     * @return Whether the sparkChartView field is set.
     */
    @java.lang.Override
    public boolean hasSparkChartView() {
      return dataViewCase_ == 5;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     *
     * @return The sparkChartView.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView getSparkChartView() {
      if (sparkChartViewBuilder_ == null) {
        if (dataViewCase_ == 5) {
          return (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_;
        }
        return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
      } else {
        if (dataViewCase_ == 5) {
          return sparkChartViewBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    public Builder setSparkChartView(
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView value) {
      if (sparkChartViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dataView_ = value;
        onChanged();
      } else {
        sparkChartViewBuilder_.setMessage(value);
      }
      dataViewCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    public Builder setSparkChartView(
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder builderForValue) {
      if (sparkChartViewBuilder_ == null) {
        dataView_ = builderForValue.build();
        onChanged();
      } else {
        sparkChartViewBuilder_.setMessage(builderForValue.build());
      }
      dataViewCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    public Builder mergeSparkChartView(
        com.google.monitoring.dashboard.v1.Scorecard.SparkChartView value) {
      if (sparkChartViewBuilder_ == null) {
        if (dataViewCase_ == 5
            && dataView_
                != com.google.monitoring.dashboard.v1.Scorecard.SparkChartView
                    .getDefaultInstance()) {
          dataView_ =
              com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.newBuilder(
                      (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          dataView_ = value;
        }
        onChanged();
      } else {
        if (dataViewCase_ == 5) {
          sparkChartViewBuilder_.mergeFrom(value);
        } else {
          sparkChartViewBuilder_.setMessage(value);
        }
      }
      dataViewCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    public Builder clearSparkChartView() {
      if (sparkChartViewBuilder_ == null) {
        if (dataViewCase_ == 5) {
          dataViewCase_ = 0;
          dataView_ = null;
          onChanged();
        }
      } else {
        if (dataViewCase_ == 5) {
          dataViewCase_ = 0;
          dataView_ = null;
        }
        sparkChartViewBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    public com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder
        getSparkChartViewBuilder() {
      return getSparkChartViewFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder
        getSparkChartViewOrBuilder() {
      if ((dataViewCase_ == 5) && (sparkChartViewBuilder_ != null)) {
        return sparkChartViewBuilder_.getMessageOrBuilder();
      } else {
        if (dataViewCase_ == 5) {
          return (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_;
        }
        return com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the scorecard to show a spark chart.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.Scorecard.SparkChartView spark_chart_view = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartView,
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder,
            com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder>
        getSparkChartViewFieldBuilder() {
      if (sparkChartViewBuilder_ == null) {
        if (!(dataViewCase_ == 5)) {
          dataView_ =
              com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.getDefaultInstance();
        }
        sparkChartViewBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.Scorecard.SparkChartView,
                com.google.monitoring.dashboard.v1.Scorecard.SparkChartView.Builder,
                com.google.monitoring.dashboard.v1.Scorecard.SparkChartViewOrBuilder>(
                (com.google.monitoring.dashboard.v1.Scorecard.SparkChartView) dataView_,
                getParentForChildren(),
                isClean());
        dataView_ = null;
      }
      dataViewCase_ = 5;
      onChanged();
      return sparkChartViewBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Empty,
            com.google.protobuf.Empty.Builder,
            com.google.protobuf.EmptyOrBuilder>
        blankViewBuilder_;
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     *
     * @return Whether the blankView field is set.
     */
    @java.lang.Override
    public boolean hasBlankView() {
      return dataViewCase_ == 7;
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     *
     * @return The blankView.
     */
    @java.lang.Override
    public com.google.protobuf.Empty getBlankView() {
      if (blankViewBuilder_ == null) {
        if (dataViewCase_ == 7) {
          return (com.google.protobuf.Empty) dataView_;
        }
        return com.google.protobuf.Empty.getDefaultInstance();
      } else {
        if (dataViewCase_ == 7) {
          return blankViewBuilder_.getMessage();
        }
        return com.google.protobuf.Empty.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    public Builder setBlankView(com.google.protobuf.Empty value) {
      if (blankViewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dataView_ = value;
        onChanged();
      } else {
        blankViewBuilder_.setMessage(value);
      }
      dataViewCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    public Builder setBlankView(com.google.protobuf.Empty.Builder builderForValue) {
      if (blankViewBuilder_ == null) {
        dataView_ = builderForValue.build();
        onChanged();
      } else {
        blankViewBuilder_.setMessage(builderForValue.build());
      }
      dataViewCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    public Builder mergeBlankView(com.google.protobuf.Empty value) {
      if (blankViewBuilder_ == null) {
        if (dataViewCase_ == 7 && dataView_ != com.google.protobuf.Empty.getDefaultInstance()) {
          dataView_ =
              com.google.protobuf.Empty.newBuilder((com.google.protobuf.Empty) dataView_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          dataView_ = value;
        }
        onChanged();
      } else {
        if (dataViewCase_ == 7) {
          blankViewBuilder_.mergeFrom(value);
        } else {
          blankViewBuilder_.setMessage(value);
        }
      }
      dataViewCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    public Builder clearBlankView() {
      if (blankViewBuilder_ == null) {
        if (dataViewCase_ == 7) {
          dataViewCase_ = 0;
          dataView_ = null;
          onChanged();
        }
      } else {
        if (dataViewCase_ == 7) {
          dataViewCase_ = 0;
          dataView_ = null;
        }
        blankViewBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    public com.google.protobuf.Empty.Builder getBlankViewBuilder() {
      return getBlankViewFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    @java.lang.Override
    public com.google.protobuf.EmptyOrBuilder getBlankViewOrBuilder() {
      if ((dataViewCase_ == 7) && (blankViewBuilder_ != null)) {
        return blankViewBuilder_.getMessageOrBuilder();
      } else {
        if (dataViewCase_ == 7) {
          return (com.google.protobuf.Empty) dataView_;
        }
        return com.google.protobuf.Empty.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Will cause the `Scorecard` to show only the value, with no indicator to
     * its value relative to its thresholds.
     * </pre>
     *
     * <code>.google.protobuf.Empty blank_view = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Empty,
            com.google.protobuf.Empty.Builder,
            com.google.protobuf.EmptyOrBuilder>
        getBlankViewFieldBuilder() {
      if (blankViewBuilder_ == null) {
        if (!(dataViewCase_ == 7)) {
          dataView_ = com.google.protobuf.Empty.getDefaultInstance();
        }
        blankViewBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Empty,
                com.google.protobuf.Empty.Builder,
                com.google.protobuf.EmptyOrBuilder>(
                (com.google.protobuf.Empty) dataView_, getParentForChildren(), isClean());
        dataView_ = null;
      }
      dataViewCase_ = 7;
      onChanged();
      return blankViewBuilder_;
    }

    private java.util.List<com.google.monitoring.dashboard.v1.Threshold> thresholds_ =
        java.util.Collections.emptyList();

    private void ensureThresholdsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        thresholds_ =
            new java.util.ArrayList<com.google.monitoring.dashboard.v1.Threshold>(thresholds_);
        bitField0_ |= 0x00000010;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Threshold,
            com.google.monitoring.dashboard.v1.Threshold.Builder,
            com.google.monitoring.dashboard.v1.ThresholdOrBuilder>
        thresholdsBuilder_;

    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public java.util.List<com.google.monitoring.dashboard.v1.Threshold> getThresholdsList() {
      if (thresholdsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(thresholds_);
      } else {
        return thresholdsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public int getThresholdsCount() {
      if (thresholdsBuilder_ == null) {
        return thresholds_.size();
      } else {
        return thresholdsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.Threshold getThresholds(int index) {
      if (thresholdsBuilder_ == null) {
        return thresholds_.get(index);
      } else {
        return thresholdsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder setThresholds(int index, com.google.monitoring.dashboard.v1.Threshold value) {
      if (thresholdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThresholdsIsMutable();
        thresholds_.set(index, value);
        onChanged();
      } else {
        thresholdsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder setThresholds(
        int index, com.google.monitoring.dashboard.v1.Threshold.Builder builderForValue) {
      if (thresholdsBuilder_ == null) {
        ensureThresholdsIsMutable();
        thresholds_.set(index, builderForValue.build());
        onChanged();
      } else {
        thresholdsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder addThresholds(com.google.monitoring.dashboard.v1.Threshold value) {
      if (thresholdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThresholdsIsMutable();
        thresholds_.add(value);
        onChanged();
      } else {
        thresholdsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder addThresholds(int index, com.google.monitoring.dashboard.v1.Threshold value) {
      if (thresholdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureThresholdsIsMutable();
        thresholds_.add(index, value);
        onChanged();
      } else {
        thresholdsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder addThresholds(
        com.google.monitoring.dashboard.v1.Threshold.Builder builderForValue) {
      if (thresholdsBuilder_ == null) {
        ensureThresholdsIsMutable();
        thresholds_.add(builderForValue.build());
        onChanged();
      } else {
        thresholdsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder addThresholds(
        int index, com.google.monitoring.dashboard.v1.Threshold.Builder builderForValue) {
      if (thresholdsBuilder_ == null) {
        ensureThresholdsIsMutable();
        thresholds_.add(index, builderForValue.build());
        onChanged();
      } else {
        thresholdsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder addAllThresholds(
        java.lang.Iterable<? extends com.google.monitoring.dashboard.v1.Threshold> values) {
      if (thresholdsBuilder_ == null) {
        ensureThresholdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, thresholds_);
        onChanged();
      } else {
        thresholdsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder clearThresholds() {
      if (thresholdsBuilder_ == null) {
        thresholds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        thresholdsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public Builder removeThresholds(int index) {
      if (thresholdsBuilder_ == null) {
        ensureThresholdsIsMutable();
        thresholds_.remove(index);
        onChanged();
      } else {
        thresholdsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.Threshold.Builder getThresholdsBuilder(int index) {
      return getThresholdsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.ThresholdOrBuilder getThresholdsOrBuilder(int index) {
      if (thresholdsBuilder_ == null) {
        return thresholds_.get(index);
      } else {
        return thresholdsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public java.util.List<? extends com.google.monitoring.dashboard.v1.ThresholdOrBuilder>
        getThresholdsOrBuilderList() {
      if (thresholdsBuilder_ != null) {
        return thresholdsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(thresholds_);
      }
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.Threshold.Builder addThresholdsBuilder() {
      return getThresholdsFieldBuilder()
          .addBuilder(com.google.monitoring.dashboard.v1.Threshold.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.Threshold.Builder addThresholdsBuilder(int index) {
      return getThresholdsFieldBuilder()
          .addBuilder(index, com.google.monitoring.dashboard.v1.Threshold.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * The thresholds used to determine the state of the scorecard given the
     * time series' current value. For an actual value x, the scorecard is in a
     * danger state if x is less than or equal to a danger threshold that triggers
     * below, or greater than or equal to a danger threshold that triggers above.
     * Similarly, if x is above/below a warning threshold that triggers
     * above/below, then the scorecard is in a warning state - unless x also puts
     * it in a danger state. (Danger trumps warning.)
     *
     * As an example, consider a scorecard with the following four thresholds:
     *
     * ```
     * {
     *   value: 90,
     *   category: 'DANGER',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 70,
     *   category: 'WARNING',
     *   trigger: 'ABOVE',
     * },
     * {
     *   value: 10,
     *   category: 'DANGER',
     *   trigger: 'BELOW',
     * },
     * {
     *   value: 20,
     *   category: 'WARNING',
     *   trigger: 'BELOW',
     * }
     * ```
     *
     * Then: values less than or equal to 10 would put the scorecard in a DANGER
     * state, values greater than 10 but less than or equal to 20 a WARNING state,
     * values strictly between 20 and 70 an OK state, values greater than or equal
     * to 70 but less than 90 a WARNING state, and values greater than or equal to
     * 90 a DANGER state.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.Threshold thresholds = 6;</code>
     */
    public java.util.List<com.google.monitoring.dashboard.v1.Threshold.Builder>
        getThresholdsBuilderList() {
      return getThresholdsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.monitoring.dashboard.v1.Threshold,
            com.google.monitoring.dashboard.v1.Threshold.Builder,
            com.google.monitoring.dashboard.v1.ThresholdOrBuilder>
        getThresholdsFieldBuilder() {
      if (thresholdsBuilder_ == null) {
        thresholdsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.monitoring.dashboard.v1.Threshold,
                com.google.monitoring.dashboard.v1.Threshold.Builder,
                com.google.monitoring.dashboard.v1.ThresholdOrBuilder>(
                thresholds_, ((bitField0_ & 0x00000010) != 0), getParentForChildren(), isClean());
        thresholds_ = null;
      }
      return thresholdsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.monitoring.dashboard.v1.Scorecard)
  }

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Scorecard)
  private static final com.google.monitoring.dashboard.v1.Scorecard DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.monitoring.dashboard.v1.Scorecard();
  }

  public static com.google.monitoring.dashboard.v1.Scorecard getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Scorecard> PARSER =
      new com.google.protobuf.AbstractParser<Scorecard>() {
        @java.lang.Override
        public Scorecard parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<Scorecard> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Scorecard> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Scorecard getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
