/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/dashboard/v1/dashboard.proto

// Protobuf Java Version: 3.25.5
package com.google.monitoring.dashboard.v1;

/**
 *
 *
 * <pre>
 * A Google Stackdriver dashboard. Dashboards define the content and layout
 * of pages in the Stackdriver web application.
 * </pre>
 *
 * Protobuf type {@code google.monitoring.dashboard.v1.Dashboard}
 */
public final class Dashboard extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.monitoring.dashboard.v1.Dashboard)
    DashboardOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Dashboard.newBuilder() to construct.
  private Dashboard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Dashboard() {
    name_ = "";
    displayName_ = "";
    etag_ = "";
    dashboardFilters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Dashboard();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.monitoring.dashboard.v1.DashboardsProto
        .internal_static_google_monitoring_dashboard_v1_Dashboard_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 12:
        return internalGetLabels();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.monitoring.dashboard.v1.DashboardsProto
        .internal_static_google_monitoring_dashboard_v1_Dashboard_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.monitoring.dashboard.v1.Dashboard.class,
            com.google.monitoring.dashboard.v1.Dashboard.Builder.class);
  }

  private int layoutCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object layout_;

  public enum LayoutCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    GRID_LAYOUT(5),
    MOSAIC_LAYOUT(6),
    ROW_LAYOUT(8),
    COLUMN_LAYOUT(9),
    LAYOUT_NOT_SET(0);
    private final int value;

    private LayoutCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LayoutCase valueOf(int value) {
      return forNumber(value);
    }

    public static LayoutCase forNumber(int value) {
      switch (value) {
        case 5:
          return GRID_LAYOUT;
        case 6:
          return MOSAIC_LAYOUT;
        case 8:
          return ROW_LAYOUT;
        case 9:
          return COLUMN_LAYOUT;
        case 0:
          return LAYOUT_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public LayoutCase getLayoutCase() {
    return LayoutCase.forNumber(layoutCase_);
  }

  public static final int NAME_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   *
   *
   * <pre>
   * Identifier. The resource name of the dashboard.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Identifier. The resource name of the dashboard.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object displayName_ = "";
  /**
   *
   *
   * <pre>
   * Required. The mutable, human-readable name.
   * </pre>
   *
   * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      displayName_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. The mutable, human-readable name.
   * </pre>
   *
   * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDisplayNameBytes() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      displayName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ETAG_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object etag_ = "";
  /**
   *
   *
   * <pre>
   * `etag` is used for optimistic concurrency control as a way to help
   * prevent simultaneous updates of a policy from overwriting each other.
   * An `etag` is returned in the response to `GetDashboard`, and
   * users are expected to put that etag in the request to `UpdateDashboard` to
   * ensure that their change will be applied to the same version of the
   * Dashboard configuration. The field should not be passed during
   * dashboard creation.
   * </pre>
   *
   * <code>string etag = 4;</code>
   *
   * @return The etag.
   */
  @java.lang.Override
  public java.lang.String getEtag() {
    java.lang.Object ref = etag_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      etag_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * `etag` is used for optimistic concurrency control as a way to help
   * prevent simultaneous updates of a policy from overwriting each other.
   * An `etag` is returned in the response to `GetDashboard`, and
   * users are expected to put that etag in the request to `UpdateDashboard` to
   * ensure that their change will be applied to the same version of the
   * Dashboard configuration. The field should not be passed during
   * dashboard creation.
   * </pre>
   *
   * <code>string etag = 4;</code>
   *
   * @return The bytes for etag.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getEtagBytes() {
    java.lang.Object ref = etag_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      etag_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GRID_LAYOUT_FIELD_NUMBER = 5;
  /**
   *
   *
   * <pre>
   * Content is arranged with a basic layout that re-flows a simple list of
   * informational elements like widgets or tiles.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
   *
   * @return Whether the gridLayout field is set.
   */
  @java.lang.Override
  public boolean hasGridLayout() {
    return layoutCase_ == 5;
  }
  /**
   *
   *
   * <pre>
   * Content is arranged with a basic layout that re-flows a simple list of
   * informational elements like widgets or tiles.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
   *
   * @return The gridLayout.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.GridLayout getGridLayout() {
    if (layoutCase_ == 5) {
      return (com.google.monitoring.dashboard.v1.GridLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Content is arranged with a basic layout that re-flows a simple list of
   * informational elements like widgets or tiles.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.GridLayoutOrBuilder getGridLayoutOrBuilder() {
    if (layoutCase_ == 5) {
      return (com.google.monitoring.dashboard.v1.GridLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
  }

  public static final int MOSAIC_LAYOUT_FIELD_NUMBER = 6;
  /**
   *
   *
   * <pre>
   * The content is arranged as a grid of tiles, with each content widget
   * occupying one or more grid blocks.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
   *
   * @return Whether the mosaicLayout field is set.
   */
  @java.lang.Override
  public boolean hasMosaicLayout() {
    return layoutCase_ == 6;
  }
  /**
   *
   *
   * <pre>
   * The content is arranged as a grid of tiles, with each content widget
   * occupying one or more grid blocks.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
   *
   * @return The mosaicLayout.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.MosaicLayout getMosaicLayout() {
    if (layoutCase_ == 6) {
      return (com.google.monitoring.dashboard.v1.MosaicLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * The content is arranged as a grid of tiles, with each content widget
   * occupying one or more grid blocks.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.MosaicLayoutOrBuilder getMosaicLayoutOrBuilder() {
    if (layoutCase_ == 6) {
      return (com.google.monitoring.dashboard.v1.MosaicLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
  }

  public static final int ROW_LAYOUT_FIELD_NUMBER = 8;
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced rows and the widgets are
   * arranged horizontally.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
   *
   * @return Whether the rowLayout field is set.
   */
  @java.lang.Override
  public boolean hasRowLayout() {
    return layoutCase_ == 8;
  }
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced rows and the widgets are
   * arranged horizontally.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
   *
   * @return The rowLayout.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.RowLayout getRowLayout() {
    if (layoutCase_ == 8) {
      return (com.google.monitoring.dashboard.v1.RowLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced rows and the widgets are
   * arranged horizontally.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.RowLayoutOrBuilder getRowLayoutOrBuilder() {
    if (layoutCase_ == 8) {
      return (com.google.monitoring.dashboard.v1.RowLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
  }

  public static final int COLUMN_LAYOUT_FIELD_NUMBER = 9;
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced columns and the widgets are
   * arranged vertically.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
   *
   * @return Whether the columnLayout field is set.
   */
  @java.lang.Override
  public boolean hasColumnLayout() {
    return layoutCase_ == 9;
  }
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced columns and the widgets are
   * arranged vertically.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
   *
   * @return The columnLayout.
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.ColumnLayout getColumnLayout() {
    if (layoutCase_ == 9) {
      return (com.google.monitoring.dashboard.v1.ColumnLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * The content is divided into equally spaced columns and the widgets are
   * arranged vertically.
   * </pre>
   *
   * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.ColumnLayoutOrBuilder getColumnLayoutOrBuilder() {
    if (layoutCase_ == 9) {
      return (com.google.monitoring.dashboard.v1.ColumnLayout) layout_;
    }
    return com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
  }

  public static final int DASHBOARD_FILTERS_FIELD_NUMBER = 11;

  @SuppressWarnings("serial")
  private java.util.List<com.google.monitoring.dashboard.v1.DashboardFilter> dashboardFilters_;
  /**
   *
   *
   * <pre>
   * Filters to reduce the amount of data charted based on the filter criteria.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.monitoring.dashboard.v1.DashboardFilter>
      getDashboardFiltersList() {
    return dashboardFilters_;
  }
  /**
   *
   *
   * <pre>
   * Filters to reduce the amount of data charted based on the filter criteria.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder>
      getDashboardFiltersOrBuilderList() {
    return dashboardFilters_;
  }
  /**
   *
   *
   * <pre>
   * Filters to reduce the amount of data charted based on the filter criteria.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
   */
  @java.lang.Override
  public int getDashboardFiltersCount() {
    return dashboardFilters_.size();
  }
  /**
   *
   *
   * <pre>
   * Filters to reduce the amount of data charted based on the filter criteria.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.DashboardFilter getDashboardFilters(int index) {
    return dashboardFilters_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Filters to reduce the amount of data charted based on the filter criteria.
   * </pre>
   *
   * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
   */
  @java.lang.Override
  public com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder getDashboardFiltersOrBuilder(
      int index) {
    return dashboardFilters_.get(index);
  }

  public static final int LABELS_FIELD_NUMBER = 12;

  private static final class LabelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            com.google.monitoring.dashboard.v1.DashboardsProto
                .internal_static_google_monitoring_dashboard_v1_Dashboard_LabelsEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<java.lang.String, java.lang.String> labels_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetLabels() {
    if (labels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(LabelsDefaultEntryHolder.defaultEntry);
    }
    return labels_;
  }

  public int getLabelsCount() {
    return internalGetLabels().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Labels applied to the dashboard
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 12;</code>
   */
  @java.lang.Override
  public boolean containsLabels(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetLabels().getMap().containsKey(key);
  }
  /** Use {@link #getLabelsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getLabels() {
    return getLabelsMap();
  }
  /**
   *
   *
   * <pre>
   * Labels applied to the dashboard
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 12;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
    return internalGetLabels().getMap();
  }
  /**
   *
   *
   * <pre>
   * Labels applied to the dashboard
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 12;</code>
   */
  @java.lang.Override
  public /* nullable */ java.lang.String getLabelsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetLabels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Labels applied to the dashboard
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 12;</code>
   */
  @java.lang.Override
  public java.lang.String getLabelsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetLabels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, displayName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(etag_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, etag_);
    }
    if (layoutCase_ == 5) {
      output.writeMessage(5, (com.google.monitoring.dashboard.v1.GridLayout) layout_);
    }
    if (layoutCase_ == 6) {
      output.writeMessage(6, (com.google.monitoring.dashboard.v1.MosaicLayout) layout_);
    }
    if (layoutCase_ == 8) {
      output.writeMessage(8, (com.google.monitoring.dashboard.v1.RowLayout) layout_);
    }
    if (layoutCase_ == 9) {
      output.writeMessage(9, (com.google.monitoring.dashboard.v1.ColumnLayout) layout_);
    }
    for (int i = 0; i < dashboardFilters_.size(); i++) {
      output.writeMessage(11, dashboardFilters_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetLabels(), LabelsDefaultEntryHolder.defaultEntry, 12);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, displayName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(etag_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, etag_);
    }
    if (layoutCase_ == 5) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              5, (com.google.monitoring.dashboard.v1.GridLayout) layout_);
    }
    if (layoutCase_ == 6) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              6, (com.google.monitoring.dashboard.v1.MosaicLayout) layout_);
    }
    if (layoutCase_ == 8) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              8, (com.google.monitoring.dashboard.v1.RowLayout) layout_);
    }
    if (layoutCase_ == 9) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              9, (com.google.monitoring.dashboard.v1.ColumnLayout) layout_);
    }
    for (int i = 0; i < dashboardFilters_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(11, dashboardFilters_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetLabels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> labels__ =
          LabelsDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(12, labels__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.monitoring.dashboard.v1.Dashboard)) {
      return super.equals(obj);
    }
    com.google.monitoring.dashboard.v1.Dashboard other =
        (com.google.monitoring.dashboard.v1.Dashboard) obj;

    if (!getName().equals(other.getName())) return false;
    if (!getDisplayName().equals(other.getDisplayName())) return false;
    if (!getEtag().equals(other.getEtag())) return false;
    if (!getDashboardFiltersList().equals(other.getDashboardFiltersList())) return false;
    if (!internalGetLabels().equals(other.internalGetLabels())) return false;
    if (!getLayoutCase().equals(other.getLayoutCase())) return false;
    switch (layoutCase_) {
      case 5:
        if (!getGridLayout().equals(other.getGridLayout())) return false;
        break;
      case 6:
        if (!getMosaicLayout().equals(other.getMosaicLayout())) return false;
        break;
      case 8:
        if (!getRowLayout().equals(other.getRowLayout())) return false;
        break;
      case 9:
        if (!getColumnLayout().equals(other.getColumnLayout())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDisplayName().hashCode();
    hash = (37 * hash) + ETAG_FIELD_NUMBER;
    hash = (53 * hash) + getEtag().hashCode();
    if (getDashboardFiltersCount() > 0) {
      hash = (37 * hash) + DASHBOARD_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getDashboardFiltersList().hashCode();
    }
    if (!internalGetLabels().getMap().isEmpty()) {
      hash = (37 * hash) + LABELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetLabels().hashCode();
    }
    switch (layoutCase_) {
      case 5:
        hash = (37 * hash) + GRID_LAYOUT_FIELD_NUMBER;
        hash = (53 * hash) + getGridLayout().hashCode();
        break;
      case 6:
        hash = (37 * hash) + MOSAIC_LAYOUT_FIELD_NUMBER;
        hash = (53 * hash) + getMosaicLayout().hashCode();
        break;
      case 8:
        hash = (37 * hash) + ROW_LAYOUT_FIELD_NUMBER;
        hash = (53 * hash) + getRowLayout().hashCode();
        break;
      case 9:
        hash = (37 * hash) + COLUMN_LAYOUT_FIELD_NUMBER;
        hash = (53 * hash) + getColumnLayout().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.monitoring.dashboard.v1.Dashboard parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.monitoring.dashboard.v1.Dashboard prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A Google Stackdriver dashboard. Dashboards define the content and layout
   * of pages in the Stackdriver web application.
   * </pre>
   *
   * Protobuf type {@code google.monitoring.dashboard.v1.Dashboard}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.monitoring.dashboard.v1.Dashboard)
      com.google.monitoring.dashboard.v1.DashboardOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.monitoring.dashboard.v1.DashboardsProto
          .internal_static_google_monitoring_dashboard_v1_Dashboard_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 12:
          return internalGetLabels();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 12:
          return internalGetMutableLabels();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.monitoring.dashboard.v1.DashboardsProto
          .internal_static_google_monitoring_dashboard_v1_Dashboard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.monitoring.dashboard.v1.Dashboard.class,
              com.google.monitoring.dashboard.v1.Dashboard.Builder.class);
    }

    // Construct using com.google.monitoring.dashboard.v1.Dashboard.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      displayName_ = "";
      etag_ = "";
      if (gridLayoutBuilder_ != null) {
        gridLayoutBuilder_.clear();
      }
      if (mosaicLayoutBuilder_ != null) {
        mosaicLayoutBuilder_.clear();
      }
      if (rowLayoutBuilder_ != null) {
        rowLayoutBuilder_.clear();
      }
      if (columnLayoutBuilder_ != null) {
        columnLayoutBuilder_.clear();
      }
      if (dashboardFiltersBuilder_ == null) {
        dashboardFilters_ = java.util.Collections.emptyList();
      } else {
        dashboardFilters_ = null;
        dashboardFiltersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000080);
      internalGetMutableLabels().clear();
      layoutCase_ = 0;
      layout_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.monitoring.dashboard.v1.DashboardsProto
          .internal_static_google_monitoring_dashboard_v1_Dashboard_descriptor;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Dashboard getDefaultInstanceForType() {
      return com.google.monitoring.dashboard.v1.Dashboard.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Dashboard build() {
      com.google.monitoring.dashboard.v1.Dashboard result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.monitoring.dashboard.v1.Dashboard buildPartial() {
      com.google.monitoring.dashboard.v1.Dashboard result =
          new com.google.monitoring.dashboard.v1.Dashboard(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.monitoring.dashboard.v1.Dashboard result) {
      if (dashboardFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)) {
          dashboardFilters_ = java.util.Collections.unmodifiableList(dashboardFilters_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.dashboardFilters_ = dashboardFilters_;
      } else {
        result.dashboardFilters_ = dashboardFiltersBuilder_.build();
      }
    }

    private void buildPartial0(com.google.monitoring.dashboard.v1.Dashboard result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.displayName_ = displayName_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.etag_ = etag_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.labels_ = internalGetLabels();
        result.labels_.makeImmutable();
      }
    }

    private void buildPartialOneofs(com.google.monitoring.dashboard.v1.Dashboard result) {
      result.layoutCase_ = layoutCase_;
      result.layout_ = this.layout_;
      if (layoutCase_ == 5 && gridLayoutBuilder_ != null) {
        result.layout_ = gridLayoutBuilder_.build();
      }
      if (layoutCase_ == 6 && mosaicLayoutBuilder_ != null) {
        result.layout_ = mosaicLayoutBuilder_.build();
      }
      if (layoutCase_ == 8 && rowLayoutBuilder_ != null) {
        result.layout_ = rowLayoutBuilder_.build();
      }
      if (layoutCase_ == 9 && columnLayoutBuilder_ != null) {
        result.layout_ = columnLayoutBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.monitoring.dashboard.v1.Dashboard) {
        return mergeFrom((com.google.monitoring.dashboard.v1.Dashboard) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.monitoring.dashboard.v1.Dashboard other) {
      if (other == com.google.monitoring.dashboard.v1.Dashboard.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getDisplayName().isEmpty()) {
        displayName_ = other.displayName_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getEtag().isEmpty()) {
        etag_ = other.etag_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (dashboardFiltersBuilder_ == null) {
        if (!other.dashboardFilters_.isEmpty()) {
          if (dashboardFilters_.isEmpty()) {
            dashboardFilters_ = other.dashboardFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureDashboardFiltersIsMutable();
            dashboardFilters_.addAll(other.dashboardFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.dashboardFilters_.isEmpty()) {
          if (dashboardFiltersBuilder_.isEmpty()) {
            dashboardFiltersBuilder_.dispose();
            dashboardFiltersBuilder_ = null;
            dashboardFilters_ = other.dashboardFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
            dashboardFiltersBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getDashboardFiltersFieldBuilder()
                    : null;
          } else {
            dashboardFiltersBuilder_.addAllMessages(other.dashboardFilters_);
          }
        }
      }
      internalGetMutableLabels().mergeFrom(other.internalGetLabels());
      bitField0_ |= 0x00000100;
      switch (other.getLayoutCase()) {
        case GRID_LAYOUT:
          {
            mergeGridLayout(other.getGridLayout());
            break;
          }
        case MOSAIC_LAYOUT:
          {
            mergeMosaicLayout(other.getMosaicLayout());
            break;
          }
        case ROW_LAYOUT:
          {
            mergeRowLayout(other.getRowLayout());
            break;
          }
        case COLUMN_LAYOUT:
          {
            mergeColumnLayout(other.getColumnLayout());
            break;
          }
        case LAYOUT_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                displayName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 34:
              {
                etag_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getGridLayoutFieldBuilder().getBuilder(), extensionRegistry);
                layoutCase_ = 5;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(getMosaicLayoutFieldBuilder().getBuilder(), extensionRegistry);
                layoutCase_ = 6;
                break;
              } // case 50
            case 66:
              {
                input.readMessage(getRowLayoutFieldBuilder().getBuilder(), extensionRegistry);
                layoutCase_ = 8;
                break;
              } // case 66
            case 74:
              {
                input.readMessage(getColumnLayoutFieldBuilder().getBuilder(), extensionRegistry);
                layoutCase_ = 9;
                break;
              } // case 74
            case 90:
              {
                com.google.monitoring.dashboard.v1.DashboardFilter m =
                    input.readMessage(
                        com.google.monitoring.dashboard.v1.DashboardFilter.parser(),
                        extensionRegistry);
                if (dashboardFiltersBuilder_ == null) {
                  ensureDashboardFiltersIsMutable();
                  dashboardFilters_.add(m);
                } else {
                  dashboardFiltersBuilder_.addMessage(m);
                }
                break;
              } // case 90
            case 98:
              {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String> labels__ =
                    input.readMessage(
                        LabelsDefaultEntryHolder.defaultEntry.getParserForType(),
                        extensionRegistry);
                internalGetMutableLabels()
                    .getMutableMap()
                    .put(labels__.getKey(), labels__.getValue());
                bitField0_ |= 0x00000100;
                break;
              } // case 98
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int layoutCase_ = 0;
    private java.lang.Object layout_;

    public LayoutCase getLayoutCase() {
      return LayoutCase.forNumber(layoutCase_);
    }

    public Builder clearLayout() {
      layoutCase_ = 0;
      layout_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     *
     *
     * <pre>
     * Identifier. The resource name of the dashboard.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
     *
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Identifier. The resource name of the dashboard.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
     *
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Identifier. The resource name of the dashboard.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Identifier. The resource name of the dashboard.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Identifier. The resource name of the dashboard.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object displayName_ = "";
    /**
     *
     *
     * <pre>
     * Required. The mutable, human-readable name.
     * </pre>
     *
     * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The displayName.
     */
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The mutable, human-readable name.
     * </pre>
     *
     * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The bytes for displayName.
     */
    public com.google.protobuf.ByteString getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The mutable, human-readable name.
     * </pre>
     *
     * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      displayName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The mutable, human-readable name.
     * </pre>
     *
     * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      displayName_ = getDefaultInstance().getDisplayName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The mutable, human-readable name.
     * </pre>
     *
     * <code>string display_name = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      displayName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object etag_ = "";
    /**
     *
     *
     * <pre>
     * `etag` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * An `etag` is returned in the response to `GetDashboard`, and
     * users are expected to put that etag in the request to `UpdateDashboard` to
     * ensure that their change will be applied to the same version of the
     * Dashboard configuration. The field should not be passed during
     * dashboard creation.
     * </pre>
     *
     * <code>string etag = 4;</code>
     *
     * @return The etag.
     */
    public java.lang.String getEtag() {
      java.lang.Object ref = etag_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        etag_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * `etag` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * An `etag` is returned in the response to `GetDashboard`, and
     * users are expected to put that etag in the request to `UpdateDashboard` to
     * ensure that their change will be applied to the same version of the
     * Dashboard configuration. The field should not be passed during
     * dashboard creation.
     * </pre>
     *
     * <code>string etag = 4;</code>
     *
     * @return The bytes for etag.
     */
    public com.google.protobuf.ByteString getEtagBytes() {
      java.lang.Object ref = etag_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        etag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * `etag` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * An `etag` is returned in the response to `GetDashboard`, and
     * users are expected to put that etag in the request to `UpdateDashboard` to
     * ensure that their change will be applied to the same version of the
     * Dashboard configuration. The field should not be passed during
     * dashboard creation.
     * </pre>
     *
     * <code>string etag = 4;</code>
     *
     * @param value The etag to set.
     * @return This builder for chaining.
     */
    public Builder setEtag(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      etag_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * `etag` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * An `etag` is returned in the response to `GetDashboard`, and
     * users are expected to put that etag in the request to `UpdateDashboard` to
     * ensure that their change will be applied to the same version of the
     * Dashboard configuration. The field should not be passed during
     * dashboard creation.
     * </pre>
     *
     * <code>string etag = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearEtag() {
      etag_ = getDefaultInstance().getEtag();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * `etag` is used for optimistic concurrency control as a way to help
     * prevent simultaneous updates of a policy from overwriting each other.
     * An `etag` is returned in the response to `GetDashboard`, and
     * users are expected to put that etag in the request to `UpdateDashboard` to
     * ensure that their change will be applied to the same version of the
     * Dashboard configuration. The field should not be passed during
     * dashboard creation.
     * </pre>
     *
     * <code>string etag = 4;</code>
     *
     * @param value The bytes for etag to set.
     * @return This builder for chaining.
     */
    public Builder setEtagBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      etag_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.GridLayout,
            com.google.monitoring.dashboard.v1.GridLayout.Builder,
            com.google.monitoring.dashboard.v1.GridLayoutOrBuilder>
        gridLayoutBuilder_;
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     *
     * @return Whether the gridLayout field is set.
     */
    @java.lang.Override
    public boolean hasGridLayout() {
      return layoutCase_ == 5;
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     *
     * @return The gridLayout.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.GridLayout getGridLayout() {
      if (gridLayoutBuilder_ == null) {
        if (layoutCase_ == 5) {
          return (com.google.monitoring.dashboard.v1.GridLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
      } else {
        if (layoutCase_ == 5) {
          return gridLayoutBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    public Builder setGridLayout(com.google.monitoring.dashboard.v1.GridLayout value) {
      if (gridLayoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        layout_ = value;
        onChanged();
      } else {
        gridLayoutBuilder_.setMessage(value);
      }
      layoutCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    public Builder setGridLayout(
        com.google.monitoring.dashboard.v1.GridLayout.Builder builderForValue) {
      if (gridLayoutBuilder_ == null) {
        layout_ = builderForValue.build();
        onChanged();
      } else {
        gridLayoutBuilder_.setMessage(builderForValue.build());
      }
      layoutCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    public Builder mergeGridLayout(com.google.monitoring.dashboard.v1.GridLayout value) {
      if (gridLayoutBuilder_ == null) {
        if (layoutCase_ == 5
            && layout_ != com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance()) {
          layout_ =
              com.google.monitoring.dashboard.v1.GridLayout.newBuilder(
                      (com.google.monitoring.dashboard.v1.GridLayout) layout_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          layout_ = value;
        }
        onChanged();
      } else {
        if (layoutCase_ == 5) {
          gridLayoutBuilder_.mergeFrom(value);
        } else {
          gridLayoutBuilder_.setMessage(value);
        }
      }
      layoutCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    public Builder clearGridLayout() {
      if (gridLayoutBuilder_ == null) {
        if (layoutCase_ == 5) {
          layoutCase_ = 0;
          layout_ = null;
          onChanged();
        }
      } else {
        if (layoutCase_ == 5) {
          layoutCase_ = 0;
          layout_ = null;
        }
        gridLayoutBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    public com.google.monitoring.dashboard.v1.GridLayout.Builder getGridLayoutBuilder() {
      return getGridLayoutFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.GridLayoutOrBuilder getGridLayoutOrBuilder() {
      if ((layoutCase_ == 5) && (gridLayoutBuilder_ != null)) {
        return gridLayoutBuilder_.getMessageOrBuilder();
      } else {
        if (layoutCase_ == 5) {
          return (com.google.monitoring.dashboard.v1.GridLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Content is arranged with a basic layout that re-flows a simple list of
     * informational elements like widgets or tiles.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.GridLayout grid_layout = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.GridLayout,
            com.google.monitoring.dashboard.v1.GridLayout.Builder,
            com.google.monitoring.dashboard.v1.GridLayoutOrBuilder>
        getGridLayoutFieldBuilder() {
      if (gridLayoutBuilder_ == null) {
        if (!(layoutCase_ == 5)) {
          layout_ = com.google.monitoring.dashboard.v1.GridLayout.getDefaultInstance();
        }
        gridLayoutBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.GridLayout,
                com.google.monitoring.dashboard.v1.GridLayout.Builder,
                com.google.monitoring.dashboard.v1.GridLayoutOrBuilder>(
                (com.google.monitoring.dashboard.v1.GridLayout) layout_,
                getParentForChildren(),
                isClean());
        layout_ = null;
      }
      layoutCase_ = 5;
      onChanged();
      return gridLayoutBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.MosaicLayout,
            com.google.monitoring.dashboard.v1.MosaicLayout.Builder,
            com.google.monitoring.dashboard.v1.MosaicLayoutOrBuilder>
        mosaicLayoutBuilder_;
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     *
     * @return Whether the mosaicLayout field is set.
     */
    @java.lang.Override
    public boolean hasMosaicLayout() {
      return layoutCase_ == 6;
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     *
     * @return The mosaicLayout.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.MosaicLayout getMosaicLayout() {
      if (mosaicLayoutBuilder_ == null) {
        if (layoutCase_ == 6) {
          return (com.google.monitoring.dashboard.v1.MosaicLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
      } else {
        if (layoutCase_ == 6) {
          return mosaicLayoutBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    public Builder setMosaicLayout(com.google.monitoring.dashboard.v1.MosaicLayout value) {
      if (mosaicLayoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        layout_ = value;
        onChanged();
      } else {
        mosaicLayoutBuilder_.setMessage(value);
      }
      layoutCase_ = 6;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    public Builder setMosaicLayout(
        com.google.monitoring.dashboard.v1.MosaicLayout.Builder builderForValue) {
      if (mosaicLayoutBuilder_ == null) {
        layout_ = builderForValue.build();
        onChanged();
      } else {
        mosaicLayoutBuilder_.setMessage(builderForValue.build());
      }
      layoutCase_ = 6;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    public Builder mergeMosaicLayout(com.google.monitoring.dashboard.v1.MosaicLayout value) {
      if (mosaicLayoutBuilder_ == null) {
        if (layoutCase_ == 6
            && layout_ != com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance()) {
          layout_ =
              com.google.monitoring.dashboard.v1.MosaicLayout.newBuilder(
                      (com.google.monitoring.dashboard.v1.MosaicLayout) layout_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          layout_ = value;
        }
        onChanged();
      } else {
        if (layoutCase_ == 6) {
          mosaicLayoutBuilder_.mergeFrom(value);
        } else {
          mosaicLayoutBuilder_.setMessage(value);
        }
      }
      layoutCase_ = 6;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    public Builder clearMosaicLayout() {
      if (mosaicLayoutBuilder_ == null) {
        if (layoutCase_ == 6) {
          layoutCase_ = 0;
          layout_ = null;
          onChanged();
        }
      } else {
        if (layoutCase_ == 6) {
          layoutCase_ = 0;
          layout_ = null;
        }
        mosaicLayoutBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    public com.google.monitoring.dashboard.v1.MosaicLayout.Builder getMosaicLayoutBuilder() {
      return getMosaicLayoutFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.MosaicLayoutOrBuilder getMosaicLayoutOrBuilder() {
      if ((layoutCase_ == 6) && (mosaicLayoutBuilder_ != null)) {
        return mosaicLayoutBuilder_.getMessageOrBuilder();
      } else {
        if (layoutCase_ == 6) {
          return (com.google.monitoring.dashboard.v1.MosaicLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is arranged as a grid of tiles, with each content widget
     * occupying one or more grid blocks.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.MosaicLayout mosaic_layout = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.MosaicLayout,
            com.google.monitoring.dashboard.v1.MosaicLayout.Builder,
            com.google.monitoring.dashboard.v1.MosaicLayoutOrBuilder>
        getMosaicLayoutFieldBuilder() {
      if (mosaicLayoutBuilder_ == null) {
        if (!(layoutCase_ == 6)) {
          layout_ = com.google.monitoring.dashboard.v1.MosaicLayout.getDefaultInstance();
        }
        mosaicLayoutBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.MosaicLayout,
                com.google.monitoring.dashboard.v1.MosaicLayout.Builder,
                com.google.monitoring.dashboard.v1.MosaicLayoutOrBuilder>(
                (com.google.monitoring.dashboard.v1.MosaicLayout) layout_,
                getParentForChildren(),
                isClean());
        layout_ = null;
      }
      layoutCase_ = 6;
      onChanged();
      return mosaicLayoutBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.RowLayout,
            com.google.monitoring.dashboard.v1.RowLayout.Builder,
            com.google.monitoring.dashboard.v1.RowLayoutOrBuilder>
        rowLayoutBuilder_;
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     *
     * @return Whether the rowLayout field is set.
     */
    @java.lang.Override
    public boolean hasRowLayout() {
      return layoutCase_ == 8;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     *
     * @return The rowLayout.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.RowLayout getRowLayout() {
      if (rowLayoutBuilder_ == null) {
        if (layoutCase_ == 8) {
          return (com.google.monitoring.dashboard.v1.RowLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
      } else {
        if (layoutCase_ == 8) {
          return rowLayoutBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    public Builder setRowLayout(com.google.monitoring.dashboard.v1.RowLayout value) {
      if (rowLayoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        layout_ = value;
        onChanged();
      } else {
        rowLayoutBuilder_.setMessage(value);
      }
      layoutCase_ = 8;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    public Builder setRowLayout(
        com.google.monitoring.dashboard.v1.RowLayout.Builder builderForValue) {
      if (rowLayoutBuilder_ == null) {
        layout_ = builderForValue.build();
        onChanged();
      } else {
        rowLayoutBuilder_.setMessage(builderForValue.build());
      }
      layoutCase_ = 8;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    public Builder mergeRowLayout(com.google.monitoring.dashboard.v1.RowLayout value) {
      if (rowLayoutBuilder_ == null) {
        if (layoutCase_ == 8
            && layout_ != com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance()) {
          layout_ =
              com.google.monitoring.dashboard.v1.RowLayout.newBuilder(
                      (com.google.monitoring.dashboard.v1.RowLayout) layout_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          layout_ = value;
        }
        onChanged();
      } else {
        if (layoutCase_ == 8) {
          rowLayoutBuilder_.mergeFrom(value);
        } else {
          rowLayoutBuilder_.setMessage(value);
        }
      }
      layoutCase_ = 8;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    public Builder clearRowLayout() {
      if (rowLayoutBuilder_ == null) {
        if (layoutCase_ == 8) {
          layoutCase_ = 0;
          layout_ = null;
          onChanged();
        }
      } else {
        if (layoutCase_ == 8) {
          layoutCase_ = 0;
          layout_ = null;
        }
        rowLayoutBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    public com.google.monitoring.dashboard.v1.RowLayout.Builder getRowLayoutBuilder() {
      return getRowLayoutFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.RowLayoutOrBuilder getRowLayoutOrBuilder() {
      if ((layoutCase_ == 8) && (rowLayoutBuilder_ != null)) {
        return rowLayoutBuilder_.getMessageOrBuilder();
      } else {
        if (layoutCase_ == 8) {
          return (com.google.monitoring.dashboard.v1.RowLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced rows and the widgets are
     * arranged horizontally.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.RowLayout row_layout = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.RowLayout,
            com.google.monitoring.dashboard.v1.RowLayout.Builder,
            com.google.monitoring.dashboard.v1.RowLayoutOrBuilder>
        getRowLayoutFieldBuilder() {
      if (rowLayoutBuilder_ == null) {
        if (!(layoutCase_ == 8)) {
          layout_ = com.google.monitoring.dashboard.v1.RowLayout.getDefaultInstance();
        }
        rowLayoutBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.RowLayout,
                com.google.monitoring.dashboard.v1.RowLayout.Builder,
                com.google.monitoring.dashboard.v1.RowLayoutOrBuilder>(
                (com.google.monitoring.dashboard.v1.RowLayout) layout_,
                getParentForChildren(),
                isClean());
        layout_ = null;
      }
      layoutCase_ = 8;
      onChanged();
      return rowLayoutBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.ColumnLayout,
            com.google.monitoring.dashboard.v1.ColumnLayout.Builder,
            com.google.monitoring.dashboard.v1.ColumnLayoutOrBuilder>
        columnLayoutBuilder_;
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     *
     * @return Whether the columnLayout field is set.
     */
    @java.lang.Override
    public boolean hasColumnLayout() {
      return layoutCase_ == 9;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     *
     * @return The columnLayout.
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.ColumnLayout getColumnLayout() {
      if (columnLayoutBuilder_ == null) {
        if (layoutCase_ == 9) {
          return (com.google.monitoring.dashboard.v1.ColumnLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
      } else {
        if (layoutCase_ == 9) {
          return columnLayoutBuilder_.getMessage();
        }
        return com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    public Builder setColumnLayout(com.google.monitoring.dashboard.v1.ColumnLayout value) {
      if (columnLayoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        layout_ = value;
        onChanged();
      } else {
        columnLayoutBuilder_.setMessage(value);
      }
      layoutCase_ = 9;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    public Builder setColumnLayout(
        com.google.monitoring.dashboard.v1.ColumnLayout.Builder builderForValue) {
      if (columnLayoutBuilder_ == null) {
        layout_ = builderForValue.build();
        onChanged();
      } else {
        columnLayoutBuilder_.setMessage(builderForValue.build());
      }
      layoutCase_ = 9;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    public Builder mergeColumnLayout(com.google.monitoring.dashboard.v1.ColumnLayout value) {
      if (columnLayoutBuilder_ == null) {
        if (layoutCase_ == 9
            && layout_ != com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance()) {
          layout_ =
              com.google.monitoring.dashboard.v1.ColumnLayout.newBuilder(
                      (com.google.monitoring.dashboard.v1.ColumnLayout) layout_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          layout_ = value;
        }
        onChanged();
      } else {
        if (layoutCase_ == 9) {
          columnLayoutBuilder_.mergeFrom(value);
        } else {
          columnLayoutBuilder_.setMessage(value);
        }
      }
      layoutCase_ = 9;
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    public Builder clearColumnLayout() {
      if (columnLayoutBuilder_ == null) {
        if (layoutCase_ == 9) {
          layoutCase_ = 0;
          layout_ = null;
          onChanged();
        }
      } else {
        if (layoutCase_ == 9) {
          layoutCase_ = 0;
          layout_ = null;
        }
        columnLayoutBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    public com.google.monitoring.dashboard.v1.ColumnLayout.Builder getColumnLayoutBuilder() {
      return getColumnLayoutFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    @java.lang.Override
    public com.google.monitoring.dashboard.v1.ColumnLayoutOrBuilder getColumnLayoutOrBuilder() {
      if ((layoutCase_ == 9) && (columnLayoutBuilder_ != null)) {
        return columnLayoutBuilder_.getMessageOrBuilder();
      } else {
        if (layoutCase_ == 9) {
          return (com.google.monitoring.dashboard.v1.ColumnLayout) layout_;
        }
        return com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * The content is divided into equally spaced columns and the widgets are
     * arranged vertically.
     * </pre>
     *
     * <code>.google.monitoring.dashboard.v1.ColumnLayout column_layout = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.monitoring.dashboard.v1.ColumnLayout,
            com.google.monitoring.dashboard.v1.ColumnLayout.Builder,
            com.google.monitoring.dashboard.v1.ColumnLayoutOrBuilder>
        getColumnLayoutFieldBuilder() {
      if (columnLayoutBuilder_ == null) {
        if (!(layoutCase_ == 9)) {
          layout_ = com.google.monitoring.dashboard.v1.ColumnLayout.getDefaultInstance();
        }
        columnLayoutBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.monitoring.dashboard.v1.ColumnLayout,
                com.google.monitoring.dashboard.v1.ColumnLayout.Builder,
                com.google.monitoring.dashboard.v1.ColumnLayoutOrBuilder>(
                (com.google.monitoring.dashboard.v1.ColumnLayout) layout_,
                getParentForChildren(),
                isClean());
        layout_ = null;
      }
      layoutCase_ = 9;
      onChanged();
      return columnLayoutBuilder_;
    }

    private java.util.List<com.google.monitoring.dashboard.v1.DashboardFilter> dashboardFilters_ =
        java.util.Collections.emptyList();

    private void ensureDashboardFiltersIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        dashboardFilters_ =
            new java.util.ArrayList<com.google.monitoring.dashboard.v1.DashboardFilter>(
                dashboardFilters_);
        bitField0_ |= 0x00000080;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.monitoring.dashboard.v1.DashboardFilter,
            com.google.monitoring.dashboard.v1.DashboardFilter.Builder,
            com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder>
        dashboardFiltersBuilder_;

    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public java.util.List<com.google.monitoring.dashboard.v1.DashboardFilter>
        getDashboardFiltersList() {
      if (dashboardFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(dashboardFilters_);
      } else {
        return dashboardFiltersBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public int getDashboardFiltersCount() {
      if (dashboardFiltersBuilder_ == null) {
        return dashboardFilters_.size();
      } else {
        return dashboardFiltersBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public com.google.monitoring.dashboard.v1.DashboardFilter getDashboardFilters(int index) {
      if (dashboardFiltersBuilder_ == null) {
        return dashboardFilters_.get(index);
      } else {
        return dashboardFiltersBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder setDashboardFilters(
        int index, com.google.monitoring.dashboard.v1.DashboardFilter value) {
      if (dashboardFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.set(index, value);
        onChanged();
      } else {
        dashboardFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder setDashboardFilters(
        int index, com.google.monitoring.dashboard.v1.DashboardFilter.Builder builderForValue) {
      if (dashboardFiltersBuilder_ == null) {
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        dashboardFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder addDashboardFilters(com.google.monitoring.dashboard.v1.DashboardFilter value) {
      if (dashboardFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.add(value);
        onChanged();
      } else {
        dashboardFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder addDashboardFilters(
        int index, com.google.monitoring.dashboard.v1.DashboardFilter value) {
      if (dashboardFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.add(index, value);
        onChanged();
      } else {
        dashboardFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder addDashboardFilters(
        com.google.monitoring.dashboard.v1.DashboardFilter.Builder builderForValue) {
      if (dashboardFiltersBuilder_ == null) {
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.add(builderForValue.build());
        onChanged();
      } else {
        dashboardFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder addDashboardFilters(
        int index, com.google.monitoring.dashboard.v1.DashboardFilter.Builder builderForValue) {
      if (dashboardFiltersBuilder_ == null) {
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        dashboardFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder addAllDashboardFilters(
        java.lang.Iterable<? extends com.google.monitoring.dashboard.v1.DashboardFilter> values) {
      if (dashboardFiltersBuilder_ == null) {
        ensureDashboardFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, dashboardFilters_);
        onChanged();
      } else {
        dashboardFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder clearDashboardFilters() {
      if (dashboardFiltersBuilder_ == null) {
        dashboardFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
      } else {
        dashboardFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public Builder removeDashboardFilters(int index) {
      if (dashboardFiltersBuilder_ == null) {
        ensureDashboardFiltersIsMutable();
        dashboardFilters_.remove(index);
        onChanged();
      } else {
        dashboardFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public com.google.monitoring.dashboard.v1.DashboardFilter.Builder getDashboardFiltersBuilder(
        int index) {
      return getDashboardFiltersFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder getDashboardFiltersOrBuilder(
        int index) {
      if (dashboardFiltersBuilder_ == null) {
        return dashboardFilters_.get(index);
      } else {
        return dashboardFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public java.util.List<? extends com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder>
        getDashboardFiltersOrBuilderList() {
      if (dashboardFiltersBuilder_ != null) {
        return dashboardFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(dashboardFilters_);
      }
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public com.google.monitoring.dashboard.v1.DashboardFilter.Builder addDashboardFiltersBuilder() {
      return getDashboardFiltersFieldBuilder()
          .addBuilder(com.google.monitoring.dashboard.v1.DashboardFilter.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public com.google.monitoring.dashboard.v1.DashboardFilter.Builder addDashboardFiltersBuilder(
        int index) {
      return getDashboardFiltersFieldBuilder()
          .addBuilder(
              index, com.google.monitoring.dashboard.v1.DashboardFilter.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Filters to reduce the amount of data charted based on the filter criteria.
     * </pre>
     *
     * <code>repeated .google.monitoring.dashboard.v1.DashboardFilter dashboard_filters = 11;</code>
     */
    public java.util.List<com.google.monitoring.dashboard.v1.DashboardFilter.Builder>
        getDashboardFiltersBuilderList() {
      return getDashboardFiltersFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.monitoring.dashboard.v1.DashboardFilter,
            com.google.monitoring.dashboard.v1.DashboardFilter.Builder,
            com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder>
        getDashboardFiltersFieldBuilder() {
      if (dashboardFiltersBuilder_ == null) {
        dashboardFiltersBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.monitoring.dashboard.v1.DashboardFilter,
                com.google.monitoring.dashboard.v1.DashboardFilter.Builder,
                com.google.monitoring.dashboard.v1.DashboardFilterOrBuilder>(
                dashboardFilters_,
                ((bitField0_ & 0x00000080) != 0),
                getParentForChildren(),
                isClean());
        dashboardFilters_ = null;
      }
      return dashboardFiltersBuilder_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> labels_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableLabels() {
      if (labels_ == null) {
        labels_ = com.google.protobuf.MapField.newMapField(LabelsDefaultEntryHolder.defaultEntry);
      }
      if (!labels_.isMutable()) {
        labels_ = labels_.copy();
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return labels_;
    }

    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    @java.lang.Override
    public boolean containsLabels(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetLabels().getMap().containsKey(key);
    }
    /** Use {@link #getLabelsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getLabels() {
      return getLabelsMap();
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    @java.lang.Override
    public /* nullable */ java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
        java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    @java.lang.Override
    public java.lang.String getLabelsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearLabels() {
      bitField0_ = (bitField0_ & ~0x00000100);
      internalGetMutableLabels().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    public Builder removeLabels(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableLabels().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableLabels() {
      bitField0_ |= 0x00000100;
      return internalGetMutableLabels().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    public Builder putLabels(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableLabels().getMutableMap().put(key, value);
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Labels applied to the dashboard
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 12;</code>
     */
    public Builder putAllLabels(java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableLabels().getMutableMap().putAll(values);
      bitField0_ |= 0x00000100;
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.monitoring.dashboard.v1.Dashboard)
  }

  // @@protoc_insertion_point(class_scope:google.monitoring.dashboard.v1.Dashboard)
  private static final com.google.monitoring.dashboard.v1.Dashboard DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.monitoring.dashboard.v1.Dashboard();
  }

  public static com.google.monitoring.dashboard.v1.Dashboard getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Dashboard> PARSER =
      new com.google.protobuf.AbstractParser<Dashboard>() {
        @java.lang.Override
        public Dashboard parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<Dashboard> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Dashboard> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.monitoring.dashboard.v1.Dashboard getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
