/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/visionai/v1/platform.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.visionai.v1;

/**
 *
 *
 * <pre>
 * Message describing Vision AI stream with application specific annotations.
 * All the StreamAnnotation object inside this message MUST have unique id.
 * </pre>
 *
 * Protobuf type {@code google.cloud.visionai.v1.StreamWithAnnotation}
 */
public final class StreamWithAnnotation extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.visionai.v1.StreamWithAnnotation)
    StreamWithAnnotationOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use StreamWithAnnotation.newBuilder() to construct.
  private StreamWithAnnotation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private StreamWithAnnotation() {
    stream_ = "";
    applicationAnnotations_ = java.util.Collections.emptyList();
    nodeAnnotations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new StreamWithAnnotation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.visionai.v1.PlatformProto
        .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.visionai.v1.PlatformProto
        .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.visionai.v1.StreamWithAnnotation.class,
            com.google.cloud.visionai.v1.StreamWithAnnotation.Builder.class);
  }

  public interface NodeAnnotationOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The node name of the application graph.
     * </pre>
     *
     * <code>string node = 1;</code>
     *
     * @return The node.
     */
    java.lang.String getNode();
    /**
     *
     *
     * <pre>
     * The node name of the application graph.
     * </pre>
     *
     * <code>string node = 1;</code>
     *
     * @return The bytes for node.
     */
    com.google.protobuf.ByteString getNodeBytes();

    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> getAnnotationsList();
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    com.google.cloud.visionai.v1.StreamAnnotation getAnnotations(int index);
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    int getAnnotationsCount();
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getAnnotationsOrBuilderList();
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    com.google.cloud.visionai.v1.StreamAnnotationOrBuilder getAnnotationsOrBuilder(int index);
  }
  /**
   *
   *
   * <pre>
   * Message describing annotations specific to application node.
   * </pre>
   *
   * Protobuf type {@code google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation}
   */
  public static final class NodeAnnotation extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)
      NodeAnnotationOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use NodeAnnotation.newBuilder() to construct.
    private NodeAnnotation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private NodeAnnotation() {
      node_ = "";
      annotations_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new NodeAnnotation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_NodeAnnotation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_NodeAnnotation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.class,
              com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder.class);
    }

    public static final int NODE_FIELD_NUMBER = 1;

    @SuppressWarnings("serial")
    private volatile java.lang.Object node_ = "";
    /**
     *
     *
     * <pre>
     * The node name of the application graph.
     * </pre>
     *
     * <code>string node = 1;</code>
     *
     * @return The node.
     */
    @java.lang.Override
    public java.lang.String getNode() {
      java.lang.Object ref = node_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        node_ = s;
        return s;
      }
    }
    /**
     *
     *
     * <pre>
     * The node name of the application graph.
     * </pre>
     *
     * <code>string node = 1;</code>
     *
     * @return The bytes for node.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNodeBytes() {
      java.lang.Object ref = node_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        node_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ANNOTATIONS_FIELD_NUMBER = 2;

    @SuppressWarnings("serial")
    private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> annotations_;
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> getAnnotationsList() {
      return annotations_;
    }
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getAnnotationsOrBuilderList() {
      return annotations_;
    }
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    @java.lang.Override
    public int getAnnotationsCount() {
      return annotations_.size();
    }
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamAnnotation getAnnotations(int index) {
      return annotations_.get(index);
    }
    /**
     *
     *
     * <pre>
     * The node specific stream annotations.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
     */
    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder getAnnotationsOrBuilder(
        int index) {
      return annotations_.get(index);
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(node_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, node_);
      }
      for (int i = 0; i < annotations_.size(); i++) {
        output.writeMessage(2, annotations_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(node_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, node_);
      }
      for (int i = 0; i < annotations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, annotations_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)) {
        return super.equals(obj);
      }
      com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation other =
          (com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation) obj;

      if (!getNode().equals(other.getNode())) return false;
      if (!getAnnotationsList().equals(other.getAnnotationsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NODE_FIELD_NUMBER;
      hash = (53 * hash) + getNode().hashCode();
      if (getAnnotationsCount() > 0) {
        hash = (37 * hash) + ANNOTATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * Message describing annotations specific to application node.
     * </pre>
     *
     * Protobuf type {@code google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.cloud.visionai.v1.PlatformProto
            .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_NodeAnnotation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.visionai.v1.PlatformProto
            .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_NodeAnnotation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.class,
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder.class);
      }

      // Construct using
      // com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        node_ = "";
        if (annotationsBuilder_ == null) {
          annotations_ = java.util.Collections.emptyList();
        } else {
          annotations_ = null;
          annotationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.cloud.visionai.v1.PlatformProto
            .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_NodeAnnotation_descriptor;
      }

      @java.lang.Override
      public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
          getDefaultInstanceForType() {
        return com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
            .getDefaultInstance();
      }

      @java.lang.Override
      public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation build() {
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation buildPartial() {
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation result =
            new com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(
          com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation result) {
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            annotations_ = java.util.Collections.unmodifiableList(annotations_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
      }

      private void buildPartial0(
          com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.node_ = node_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation) {
          return mergeFrom(
              (com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation other) {
        if (other
            == com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
                .getDefaultInstance()) return this;
        if (!other.getNode().isEmpty()) {
          node_ = other.node_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (annotationsBuilder_ == null) {
          if (!other.annotations_.isEmpty()) {
            if (annotations_.isEmpty()) {
              annotations_ = other.annotations_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAnnotationsIsMutable();
              annotations_.addAll(other.annotations_);
            }
            onChanged();
          }
        } else {
          if (!other.annotations_.isEmpty()) {
            if (annotationsBuilder_.isEmpty()) {
              annotationsBuilder_.dispose();
              annotationsBuilder_ = null;
              annotations_ = other.annotations_;
              bitField0_ = (bitField0_ & ~0x00000002);
              annotationsBuilder_ =
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                      ? getAnnotationsFieldBuilder()
                      : null;
            } else {
              annotationsBuilder_.addAllMessages(other.annotations_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  node_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
              case 18:
                {
                  com.google.cloud.visionai.v1.StreamAnnotation m =
                      input.readMessage(
                          com.google.cloud.visionai.v1.StreamAnnotation.parser(),
                          extensionRegistry);
                  if (annotationsBuilder_ == null) {
                    ensureAnnotationsIsMutable();
                    annotations_.add(m);
                  } else {
                    annotationsBuilder_.addMessage(m);
                  }
                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private java.lang.Object node_ = "";
      /**
       *
       *
       * <pre>
       * The node name of the application graph.
       * </pre>
       *
       * <code>string node = 1;</code>
       *
       * @return The node.
       */
      public java.lang.String getNode() {
        java.lang.Object ref = node_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          node_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * The node name of the application graph.
       * </pre>
       *
       * <code>string node = 1;</code>
       *
       * @return The bytes for node.
       */
      public com.google.protobuf.ByteString getNodeBytes() {
        java.lang.Object ref = node_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          node_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       *
       *
       * <pre>
       * The node name of the application graph.
       * </pre>
       *
       * <code>string node = 1;</code>
       *
       * @param value The node to set.
       * @return This builder for chaining.
       */
      public Builder setNode(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node name of the application graph.
       * </pre>
       *
       * <code>string node = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearNode() {
        node_ = getDefaultInstance().getNode();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node name of the application graph.
       * </pre>
       *
       * <code>string node = 1;</code>
       *
       * @param value The bytes for node to set.
       * @return This builder for chaining.
       */
      public Builder setNodeBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        node_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> annotations_ =
          java.util.Collections.emptyList();

      private void ensureAnnotationsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          annotations_ =
              new java.util.ArrayList<com.google.cloud.visionai.v1.StreamAnnotation>(annotations_);
          bitField0_ |= 0x00000002;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.cloud.visionai.v1.StreamAnnotation,
              com.google.cloud.visionai.v1.StreamAnnotation.Builder,
              com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
          annotationsBuilder_;

      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> getAnnotationsList() {
        if (annotationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotations_);
        } else {
          return annotationsBuilder_.getMessageList();
        }
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public int getAnnotationsCount() {
        if (annotationsBuilder_ == null) {
          return annotations_.size();
        } else {
          return annotationsBuilder_.getCount();
        }
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public com.google.cloud.visionai.v1.StreamAnnotation getAnnotations(int index) {
        if (annotationsBuilder_ == null) {
          return annotations_.get(index);
        } else {
          return annotationsBuilder_.getMessage(index);
        }
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder setAnnotations(
          int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.set(index, value);
          onChanged();
        } else {
          annotationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder setAnnotations(
          int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder addAnnotations(com.google.cloud.visionai.v1.StreamAnnotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.add(value);
          onChanged();
        } else {
          annotationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder addAnnotations(
          int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.add(index, value);
          onChanged();
        } else {
          annotationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder addAnnotations(
          com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.add(builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder addAnnotations(
          int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder addAllAnnotations(
          java.lang.Iterable<? extends com.google.cloud.visionai.v1.StreamAnnotation> values) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, annotations_);
          onChanged();
        } else {
          annotationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public Builder removeAnnotations(int index) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.remove(index);
          onChanged();
        } else {
          annotationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public com.google.cloud.visionai.v1.StreamAnnotation.Builder getAnnotationsBuilder(
          int index) {
        return getAnnotationsFieldBuilder().getBuilder(index);
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder getAnnotationsOrBuilder(
          int index) {
        if (annotationsBuilder_ == null) {
          return annotations_.get(index);
        } else {
          return annotationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
          getAnnotationsOrBuilderList() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotations_);
        }
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public com.google.cloud.visionai.v1.StreamAnnotation.Builder addAnnotationsBuilder() {
        return getAnnotationsFieldBuilder()
            .addBuilder(com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public com.google.cloud.visionai.v1.StreamAnnotation.Builder addAnnotationsBuilder(
          int index) {
        return getAnnotationsFieldBuilder()
            .addBuilder(index, com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * The node specific stream annotations.
       * </pre>
       *
       * <code>repeated .google.cloud.visionai.v1.StreamAnnotation annotations = 2;</code>
       */
      public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation.Builder>
          getAnnotationsBuilderList() {
        return getAnnotationsFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.cloud.visionai.v1.StreamAnnotation,
              com.google.cloud.visionai.v1.StreamAnnotation.Builder,
              com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<
                  com.google.cloud.visionai.v1.StreamAnnotation,
                  com.google.cloud.visionai.v1.StreamAnnotation.Builder,
                  com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>(
                  annotations_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)
    }

    // @@protoc_insertion_point(class_scope:google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation)
    private static final com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation();
    }

    public static com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NodeAnnotation> PARSER =
        new com.google.protobuf.AbstractParser<NodeAnnotation>() {
          @java.lang.Override
          public NodeAnnotation parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<NodeAnnotation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NodeAnnotation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public static final int STREAM_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object stream_ = "";
  /**
   *
   *
   * <pre>
   * Vision AI Stream resource name.
   * </pre>
   *
   * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The stream.
   */
  @java.lang.Override
  public java.lang.String getStream() {
    java.lang.Object ref = stream_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      stream_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Vision AI Stream resource name.
   * </pre>
   *
   * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The bytes for stream.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getStreamBytes() {
    java.lang.Object ref = stream_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      stream_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int APPLICATION_ANNOTATIONS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> applicationAnnotations_;
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation>
      getApplicationAnnotationsList() {
    return applicationAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
      getApplicationAnnotationsOrBuilderList() {
    return applicationAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
   */
  @java.lang.Override
  public int getApplicationAnnotationsCount() {
    return applicationAnnotations_.size();
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamAnnotation getApplicationAnnotations(int index) {
    return applicationAnnotations_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder getApplicationAnnotationsOrBuilder(
      int index) {
    return applicationAnnotations_.get(index);
  }

  public static final int NODE_ANNOTATIONS_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>
      nodeAnnotations_;
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>
      getNodeAnnotationsList() {
    return nodeAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
   * </code>
   */
  @java.lang.Override
  public java.util.List<
          ? extends com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder>
      getNodeAnnotationsOrBuilderList() {
    return nodeAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
   * </code>
   */
  @java.lang.Override
  public int getNodeAnnotationsCount() {
    return nodeAnnotations_.size();
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation getNodeAnnotations(
      int index) {
    return nodeAnnotations_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder
      getNodeAnnotationsOrBuilder(int index) {
    return nodeAnnotations_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stream_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stream_);
    }
    for (int i = 0; i < applicationAnnotations_.size(); i++) {
      output.writeMessage(2, applicationAnnotations_.get(i));
    }
    for (int i = 0; i < nodeAnnotations_.size(); i++) {
      output.writeMessage(3, nodeAnnotations_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stream_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stream_);
    }
    for (int i = 0; i < applicationAnnotations_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, applicationAnnotations_.get(i));
    }
    for (int i = 0; i < nodeAnnotations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, nodeAnnotations_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.visionai.v1.StreamWithAnnotation)) {
      return super.equals(obj);
    }
    com.google.cloud.visionai.v1.StreamWithAnnotation other =
        (com.google.cloud.visionai.v1.StreamWithAnnotation) obj;

    if (!getStream().equals(other.getStream())) return false;
    if (!getApplicationAnnotationsList().equals(other.getApplicationAnnotationsList()))
      return false;
    if (!getNodeAnnotationsList().equals(other.getNodeAnnotationsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STREAM_FIELD_NUMBER;
    hash = (53 * hash) + getStream().hashCode();
    if (getApplicationAnnotationsCount() > 0) {
      hash = (37 * hash) + APPLICATION_ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getApplicationAnnotationsList().hashCode();
    }
    if (getNodeAnnotationsCount() > 0) {
      hash = (37 * hash) + NODE_ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getNodeAnnotationsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.visionai.v1.StreamWithAnnotation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Message describing Vision AI stream with application specific annotations.
   * All the StreamAnnotation object inside this message MUST have unique id.
   * </pre>
   *
   * Protobuf type {@code google.cloud.visionai.v1.StreamWithAnnotation}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.visionai.v1.StreamWithAnnotation)
      com.google.cloud.visionai.v1.StreamWithAnnotationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.visionai.v1.StreamWithAnnotation.class,
              com.google.cloud.visionai.v1.StreamWithAnnotation.Builder.class);
    }

    // Construct using com.google.cloud.visionai.v1.StreamWithAnnotation.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      stream_ = "";
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotations_ = java.util.Collections.emptyList();
      } else {
        applicationAnnotations_ = null;
        applicationAnnotationsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotations_ = java.util.Collections.emptyList();
      } else {
        nodeAnnotations_ = null;
        nodeAnnotationsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_StreamWithAnnotation_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamWithAnnotation getDefaultInstanceForType() {
      return com.google.cloud.visionai.v1.StreamWithAnnotation.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamWithAnnotation build() {
      com.google.cloud.visionai.v1.StreamWithAnnotation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.StreamWithAnnotation buildPartial() {
      com.google.cloud.visionai.v1.StreamWithAnnotation result =
          new com.google.cloud.visionai.v1.StreamWithAnnotation(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(
        com.google.cloud.visionai.v1.StreamWithAnnotation result) {
      if (applicationAnnotationsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          applicationAnnotations_ = java.util.Collections.unmodifiableList(applicationAnnotations_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.applicationAnnotations_ = applicationAnnotations_;
      } else {
        result.applicationAnnotations_ = applicationAnnotationsBuilder_.build();
      }
      if (nodeAnnotationsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          nodeAnnotations_ = java.util.Collections.unmodifiableList(nodeAnnotations_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.nodeAnnotations_ = nodeAnnotations_;
      } else {
        result.nodeAnnotations_ = nodeAnnotationsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.cloud.visionai.v1.StreamWithAnnotation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.stream_ = stream_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.visionai.v1.StreamWithAnnotation) {
        return mergeFrom((com.google.cloud.visionai.v1.StreamWithAnnotation) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.visionai.v1.StreamWithAnnotation other) {
      if (other == com.google.cloud.visionai.v1.StreamWithAnnotation.getDefaultInstance())
        return this;
      if (!other.getStream().isEmpty()) {
        stream_ = other.stream_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (applicationAnnotationsBuilder_ == null) {
        if (!other.applicationAnnotations_.isEmpty()) {
          if (applicationAnnotations_.isEmpty()) {
            applicationAnnotations_ = other.applicationAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureApplicationAnnotationsIsMutable();
            applicationAnnotations_.addAll(other.applicationAnnotations_);
          }
          onChanged();
        }
      } else {
        if (!other.applicationAnnotations_.isEmpty()) {
          if (applicationAnnotationsBuilder_.isEmpty()) {
            applicationAnnotationsBuilder_.dispose();
            applicationAnnotationsBuilder_ = null;
            applicationAnnotations_ = other.applicationAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000002);
            applicationAnnotationsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getApplicationAnnotationsFieldBuilder()
                    : null;
          } else {
            applicationAnnotationsBuilder_.addAllMessages(other.applicationAnnotations_);
          }
        }
      }
      if (nodeAnnotationsBuilder_ == null) {
        if (!other.nodeAnnotations_.isEmpty()) {
          if (nodeAnnotations_.isEmpty()) {
            nodeAnnotations_ = other.nodeAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNodeAnnotationsIsMutable();
            nodeAnnotations_.addAll(other.nodeAnnotations_);
          }
          onChanged();
        }
      } else {
        if (!other.nodeAnnotations_.isEmpty()) {
          if (nodeAnnotationsBuilder_.isEmpty()) {
            nodeAnnotationsBuilder_.dispose();
            nodeAnnotationsBuilder_ = null;
            nodeAnnotations_ = other.nodeAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000004);
            nodeAnnotationsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getNodeAnnotationsFieldBuilder()
                    : null;
          } else {
            nodeAnnotationsBuilder_.addAllMessages(other.nodeAnnotations_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                stream_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                com.google.cloud.visionai.v1.StreamAnnotation m =
                    input.readMessage(
                        com.google.cloud.visionai.v1.StreamAnnotation.parser(), extensionRegistry);
                if (applicationAnnotationsBuilder_ == null) {
                  ensureApplicationAnnotationsIsMutable();
                  applicationAnnotations_.add(m);
                } else {
                  applicationAnnotationsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            case 26:
              {
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation m =
                    input.readMessage(
                        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.parser(),
                        extensionRegistry);
                if (nodeAnnotationsBuilder_ == null) {
                  ensureNodeAnnotationsIsMutable();
                  nodeAnnotations_.add(m);
                } else {
                  nodeAnnotationsBuilder_.addMessage(m);
                }
                break;
              } // case 26
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object stream_ = "";
    /**
     *
     *
     * <pre>
     * Vision AI Stream resource name.
     * </pre>
     *
     * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return The stream.
     */
    public java.lang.String getStream() {
      java.lang.Object ref = stream_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stream_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Vision AI Stream resource name.
     * </pre>
     *
     * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return The bytes for stream.
     */
    public com.google.protobuf.ByteString getStreamBytes() {
      java.lang.Object ref = stream_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        stream_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Vision AI Stream resource name.
     * </pre>
     *
     * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @param value The stream to set.
     * @return This builder for chaining.
     */
    public Builder setStream(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      stream_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vision AI Stream resource name.
     * </pre>
     *
     * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearStream() {
      stream_ = getDefaultInstance().getStream();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vision AI Stream resource name.
     * </pre>
     *
     * <code>string stream = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @param value The bytes for stream to set.
     * @return This builder for chaining.
     */
    public Builder setStreamBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      stream_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> applicationAnnotations_ =
        java.util.Collections.emptyList();

    private void ensureApplicationAnnotationsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        applicationAnnotations_ =
            new java.util.ArrayList<com.google.cloud.visionai.v1.StreamAnnotation>(
                applicationAnnotations_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamAnnotation,
            com.google.cloud.visionai.v1.StreamAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        applicationAnnotationsBuilder_;

    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation>
        getApplicationAnnotationsList() {
      if (applicationAnnotationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(applicationAnnotations_);
      } else {
        return applicationAnnotationsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public int getApplicationAnnotationsCount() {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.size();
      } else {
        return applicationAnnotationsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation getApplicationAnnotations(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.get(index);
      } else {
        return applicationAnnotationsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder setApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.set(index, value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder setApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.set(index, builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder addApplicationAnnotations(com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder addApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(index, value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder addApplicationAnnotations(
        com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder addApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(index, builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder addAllApplicationAnnotations(
        java.lang.Iterable<? extends com.google.cloud.visionai.v1.StreamAnnotation> values) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, applicationAnnotations_);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder clearApplicationAnnotations() {
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public Builder removeApplicationAnnotations(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.remove(index);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder getApplicationAnnotationsBuilder(
        int index) {
      return getApplicationAnnotationsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder
        getApplicationAnnotationsOrBuilder(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.get(index);
      } else {
        return applicationAnnotationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getApplicationAnnotationsOrBuilderList() {
      if (applicationAnnotationsBuilder_ != null) {
        return applicationAnnotationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(applicationAnnotations_);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder
        addApplicationAnnotationsBuilder() {
      return getApplicationAnnotationsFieldBuilder()
          .addBuilder(com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder addApplicationAnnotationsBuilder(
        int index) {
      return getApplicationAnnotationsFieldBuilder()
          .addBuilder(index, com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 2;</code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation.Builder>
        getApplicationAnnotationsBuilderList() {
      return getApplicationAnnotationsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamAnnotation,
            com.google.cloud.visionai.v1.StreamAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getApplicationAnnotationsFieldBuilder() {
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotationsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.visionai.v1.StreamAnnotation,
                com.google.cloud.visionai.v1.StreamAnnotation.Builder,
                com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>(
                applicationAnnotations_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        applicationAnnotations_ = null;
      }
      return applicationAnnotationsBuilder_;
    }

    private java.util.List<com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>
        nodeAnnotations_ = java.util.Collections.emptyList();

    private void ensureNodeAnnotationsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        nodeAnnotations_ =
            new java.util.ArrayList<
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>(nodeAnnotations_);
        bitField0_ |= 0x00000004;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation,
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder>
        nodeAnnotationsBuilder_;

    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>
        getNodeAnnotationsList() {
      if (nodeAnnotationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nodeAnnotations_);
      } else {
        return nodeAnnotationsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public int getNodeAnnotationsCount() {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.size();
      } else {
        return nodeAnnotationsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation getNodeAnnotations(
        int index) {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.get(index);
      } else {
        return nodeAnnotationsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder setNodeAnnotations(
        int index, com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.set(index, value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder setNodeAnnotations(
        int index,
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.set(index, builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder addNodeAnnotations(
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder addNodeAnnotations(
        int index, com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(index, value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder addNodeAnnotations(
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder addNodeAnnotations(
        int index,
        com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(index, builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder addAllNodeAnnotations(
        java.lang.Iterable<
                ? extends com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation>
            values) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, nodeAnnotations_);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder clearNodeAnnotations() {
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public Builder removeNodeAnnotations(int index) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.remove(index);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder
        getNodeAnnotationsBuilder(int index) {
      return getNodeAnnotationsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder
        getNodeAnnotationsOrBuilder(int index) {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.get(index);
      } else {
        return nodeAnnotationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public java.util.List<
            ? extends com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder>
        getNodeAnnotationsOrBuilderList() {
      if (nodeAnnotationsBuilder_ != null) {
        return nodeAnnotationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nodeAnnotations_);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder
        addNodeAnnotationsBuilder() {
      return getNodeAnnotationsFieldBuilder()
          .addBuilder(
              com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder
        addNodeAnnotationsBuilder(int index) {
      return getNodeAnnotationsFieldBuilder()
          .addBuilder(
              index,
              com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation node_annotations = 3;
     * </code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder>
        getNodeAnnotationsBuilderList() {
      return getNodeAnnotationsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation,
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder>
        getNodeAnnotationsFieldBuilder() {
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotationsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation,
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotation.Builder,
                com.google.cloud.visionai.v1.StreamWithAnnotation.NodeAnnotationOrBuilder>(
                nodeAnnotations_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        nodeAnnotations_ = null;
      }
      return nodeAnnotationsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.visionai.v1.StreamWithAnnotation)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.visionai.v1.StreamWithAnnotation)
  private static final com.google.cloud.visionai.v1.StreamWithAnnotation DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.visionai.v1.StreamWithAnnotation();
  }

  public static com.google.cloud.visionai.v1.StreamWithAnnotation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StreamWithAnnotation> PARSER =
      new com.google.protobuf.AbstractParser<StreamWithAnnotation>() {
        @java.lang.Override
        public StreamWithAnnotation parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<StreamWithAnnotation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StreamWithAnnotation> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamWithAnnotation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
