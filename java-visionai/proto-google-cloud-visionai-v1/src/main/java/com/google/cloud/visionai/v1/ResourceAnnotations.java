/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/visionai/v1/platform.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.visionai.v1;

/**
 *
 *
 * <pre>
 * Message describing general annotation for resources.
 * </pre>
 *
 * Protobuf type {@code google.cloud.visionai.v1.ResourceAnnotations}
 */
public final class ResourceAnnotations extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.visionai.v1.ResourceAnnotations)
    ResourceAnnotationsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ResourceAnnotations.newBuilder() to construct.
  private ResourceAnnotations(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ResourceAnnotations() {
    applicationAnnotations_ = java.util.Collections.emptyList();
    nodeAnnotations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ResourceAnnotations();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.visionai.v1.PlatformProto
        .internal_static_google_cloud_visionai_v1_ResourceAnnotations_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.visionai.v1.PlatformProto
        .internal_static_google_cloud_visionai_v1_ResourceAnnotations_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.visionai.v1.ResourceAnnotations.class,
            com.google.cloud.visionai.v1.ResourceAnnotations.Builder.class);
  }

  public static final int APPLICATION_ANNOTATIONS_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> applicationAnnotations_;
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation>
      getApplicationAnnotationsList() {
    return applicationAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
      getApplicationAnnotationsOrBuilderList() {
    return applicationAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
   */
  @java.lang.Override
  public int getApplicationAnnotationsCount() {
    return applicationAnnotations_.size();
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamAnnotation getApplicationAnnotations(int index) {
    return applicationAnnotations_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the whole application.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder getApplicationAnnotationsOrBuilder(
      int index) {
    return applicationAnnotations_.get(index);
  }

  public static final int NODE_ANNOTATIONS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.visionai.v1.ApplicationNodeAnnotation> nodeAnnotations_;
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.visionai.v1.ApplicationNodeAnnotation>
      getNodeAnnotationsList() {
    return nodeAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder>
      getNodeAnnotationsOrBuilderList() {
    return nodeAnnotations_;
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;</code>
   */
  @java.lang.Override
  public int getNodeAnnotationsCount() {
    return nodeAnnotations_.size();
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.ApplicationNodeAnnotation getNodeAnnotations(int index) {
    return nodeAnnotations_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Annotations that will be applied to the specific node of the application.
   * If the same type of the annotations is applied to both application and
   * node, the node annotation will be added in addition to the global
   * application one.
   * For example, if there is one active zone annotation for the whole
   * application and one active zone annotation for the Occupancy Analytic
   * processor, then the Occupancy Analytic processor will have two active zones
   * defined.
   * </pre>
   *
   * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder
      getNodeAnnotationsOrBuilder(int index) {
    return nodeAnnotations_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < applicationAnnotations_.size(); i++) {
      output.writeMessage(1, applicationAnnotations_.get(i));
    }
    for (int i = 0; i < nodeAnnotations_.size(); i++) {
      output.writeMessage(2, nodeAnnotations_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < applicationAnnotations_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              1, applicationAnnotations_.get(i));
    }
    for (int i = 0; i < nodeAnnotations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, nodeAnnotations_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.visionai.v1.ResourceAnnotations)) {
      return super.equals(obj);
    }
    com.google.cloud.visionai.v1.ResourceAnnotations other =
        (com.google.cloud.visionai.v1.ResourceAnnotations) obj;

    if (!getApplicationAnnotationsList().equals(other.getApplicationAnnotationsList()))
      return false;
    if (!getNodeAnnotationsList().equals(other.getNodeAnnotationsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getApplicationAnnotationsCount() > 0) {
      hash = (37 * hash) + APPLICATION_ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getApplicationAnnotationsList().hashCode();
    }
    if (getNodeAnnotationsCount() > 0) {
      hash = (37 * hash) + NODE_ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getNodeAnnotationsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.visionai.v1.ResourceAnnotations prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Message describing general annotation for resources.
   * </pre>
   *
   * Protobuf type {@code google.cloud.visionai.v1.ResourceAnnotations}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.visionai.v1.ResourceAnnotations)
      com.google.cloud.visionai.v1.ResourceAnnotationsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_ResourceAnnotations_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_ResourceAnnotations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.visionai.v1.ResourceAnnotations.class,
              com.google.cloud.visionai.v1.ResourceAnnotations.Builder.class);
    }

    // Construct using com.google.cloud.visionai.v1.ResourceAnnotations.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotations_ = java.util.Collections.emptyList();
      } else {
        applicationAnnotations_ = null;
        applicationAnnotationsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotations_ = java.util.Collections.emptyList();
      } else {
        nodeAnnotations_ = null;
        nodeAnnotationsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.visionai.v1.PlatformProto
          .internal_static_google_cloud_visionai_v1_ResourceAnnotations_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.ResourceAnnotations getDefaultInstanceForType() {
      return com.google.cloud.visionai.v1.ResourceAnnotations.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.ResourceAnnotations build() {
      com.google.cloud.visionai.v1.ResourceAnnotations result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.visionai.v1.ResourceAnnotations buildPartial() {
      com.google.cloud.visionai.v1.ResourceAnnotations result =
          new com.google.cloud.visionai.v1.ResourceAnnotations(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(
        com.google.cloud.visionai.v1.ResourceAnnotations result) {
      if (applicationAnnotationsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          applicationAnnotations_ = java.util.Collections.unmodifiableList(applicationAnnotations_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.applicationAnnotations_ = applicationAnnotations_;
      } else {
        result.applicationAnnotations_ = applicationAnnotationsBuilder_.build();
      }
      if (nodeAnnotationsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          nodeAnnotations_ = java.util.Collections.unmodifiableList(nodeAnnotations_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.nodeAnnotations_ = nodeAnnotations_;
      } else {
        result.nodeAnnotations_ = nodeAnnotationsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.cloud.visionai.v1.ResourceAnnotations result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.visionai.v1.ResourceAnnotations) {
        return mergeFrom((com.google.cloud.visionai.v1.ResourceAnnotations) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.visionai.v1.ResourceAnnotations other) {
      if (other == com.google.cloud.visionai.v1.ResourceAnnotations.getDefaultInstance())
        return this;
      if (applicationAnnotationsBuilder_ == null) {
        if (!other.applicationAnnotations_.isEmpty()) {
          if (applicationAnnotations_.isEmpty()) {
            applicationAnnotations_ = other.applicationAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureApplicationAnnotationsIsMutable();
            applicationAnnotations_.addAll(other.applicationAnnotations_);
          }
          onChanged();
        }
      } else {
        if (!other.applicationAnnotations_.isEmpty()) {
          if (applicationAnnotationsBuilder_.isEmpty()) {
            applicationAnnotationsBuilder_.dispose();
            applicationAnnotationsBuilder_ = null;
            applicationAnnotations_ = other.applicationAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000001);
            applicationAnnotationsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getApplicationAnnotationsFieldBuilder()
                    : null;
          } else {
            applicationAnnotationsBuilder_.addAllMessages(other.applicationAnnotations_);
          }
        }
      }
      if (nodeAnnotationsBuilder_ == null) {
        if (!other.nodeAnnotations_.isEmpty()) {
          if (nodeAnnotations_.isEmpty()) {
            nodeAnnotations_ = other.nodeAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNodeAnnotationsIsMutable();
            nodeAnnotations_.addAll(other.nodeAnnotations_);
          }
          onChanged();
        }
      } else {
        if (!other.nodeAnnotations_.isEmpty()) {
          if (nodeAnnotationsBuilder_.isEmpty()) {
            nodeAnnotationsBuilder_.dispose();
            nodeAnnotationsBuilder_ = null;
            nodeAnnotations_ = other.nodeAnnotations_;
            bitField0_ = (bitField0_ & ~0x00000002);
            nodeAnnotationsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getNodeAnnotationsFieldBuilder()
                    : null;
          } else {
            nodeAnnotationsBuilder_.addAllMessages(other.nodeAnnotations_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.cloud.visionai.v1.StreamAnnotation m =
                    input.readMessage(
                        com.google.cloud.visionai.v1.StreamAnnotation.parser(), extensionRegistry);
                if (applicationAnnotationsBuilder_ == null) {
                  ensureApplicationAnnotationsIsMutable();
                  applicationAnnotations_.add(m);
                } else {
                  applicationAnnotationsBuilder_.addMessage(m);
                }
                break;
              } // case 10
            case 18:
              {
                com.google.cloud.visionai.v1.ApplicationNodeAnnotation m =
                    input.readMessage(
                        com.google.cloud.visionai.v1.ApplicationNodeAnnotation.parser(),
                        extensionRegistry);
                if (nodeAnnotationsBuilder_ == null) {
                  ensureNodeAnnotationsIsMutable();
                  nodeAnnotations_.add(m);
                } else {
                  nodeAnnotationsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.cloud.visionai.v1.StreamAnnotation> applicationAnnotations_ =
        java.util.Collections.emptyList();

    private void ensureApplicationAnnotationsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        applicationAnnotations_ =
            new java.util.ArrayList<com.google.cloud.visionai.v1.StreamAnnotation>(
                applicationAnnotations_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamAnnotation,
            com.google.cloud.visionai.v1.StreamAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        applicationAnnotationsBuilder_;

    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation>
        getApplicationAnnotationsList() {
      if (applicationAnnotationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(applicationAnnotations_);
      } else {
        return applicationAnnotationsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public int getApplicationAnnotationsCount() {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.size();
      } else {
        return applicationAnnotationsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation getApplicationAnnotations(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.get(index);
      } else {
        return applicationAnnotationsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder setApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.set(index, value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder setApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.set(index, builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder addApplicationAnnotations(com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder addApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation value) {
      if (applicationAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(index, value);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder addApplicationAnnotations(
        com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder addApplicationAnnotations(
        int index, com.google.cloud.visionai.v1.StreamAnnotation.Builder builderForValue) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.add(index, builderForValue.build());
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder addAllApplicationAnnotations(
        java.lang.Iterable<? extends com.google.cloud.visionai.v1.StreamAnnotation> values) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, applicationAnnotations_);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder clearApplicationAnnotations() {
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public Builder removeApplicationAnnotations(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        ensureApplicationAnnotationsIsMutable();
        applicationAnnotations_.remove(index);
        onChanged();
      } else {
        applicationAnnotationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder getApplicationAnnotationsBuilder(
        int index) {
      return getApplicationAnnotationsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotationOrBuilder
        getApplicationAnnotationsOrBuilder(int index) {
      if (applicationAnnotationsBuilder_ == null) {
        return applicationAnnotations_.get(index);
      } else {
        return applicationAnnotationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public java.util.List<? extends com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getApplicationAnnotationsOrBuilderList() {
      if (applicationAnnotationsBuilder_ != null) {
        return applicationAnnotationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(applicationAnnotations_);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder
        addApplicationAnnotationsBuilder() {
      return getApplicationAnnotationsFieldBuilder()
          .addBuilder(com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public com.google.cloud.visionai.v1.StreamAnnotation.Builder addApplicationAnnotationsBuilder(
        int index) {
      return getApplicationAnnotationsFieldBuilder()
          .addBuilder(index, com.google.cloud.visionai.v1.StreamAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the whole application.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.StreamAnnotation application_annotations = 1;</code>
     */
    public java.util.List<com.google.cloud.visionai.v1.StreamAnnotation.Builder>
        getApplicationAnnotationsBuilderList() {
      return getApplicationAnnotationsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.StreamAnnotation,
            com.google.cloud.visionai.v1.StreamAnnotation.Builder,
            com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>
        getApplicationAnnotationsFieldBuilder() {
      if (applicationAnnotationsBuilder_ == null) {
        applicationAnnotationsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.visionai.v1.StreamAnnotation,
                com.google.cloud.visionai.v1.StreamAnnotation.Builder,
                com.google.cloud.visionai.v1.StreamAnnotationOrBuilder>(
                applicationAnnotations_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        applicationAnnotations_ = null;
      }
      return applicationAnnotationsBuilder_;
    }

    private java.util.List<com.google.cloud.visionai.v1.ApplicationNodeAnnotation>
        nodeAnnotations_ = java.util.Collections.emptyList();

    private void ensureNodeAnnotationsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        nodeAnnotations_ =
            new java.util.ArrayList<com.google.cloud.visionai.v1.ApplicationNodeAnnotation>(
                nodeAnnotations_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.ApplicationNodeAnnotation,
            com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder,
            com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder>
        nodeAnnotationsBuilder_;

    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public java.util.List<com.google.cloud.visionai.v1.ApplicationNodeAnnotation>
        getNodeAnnotationsList() {
      if (nodeAnnotationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nodeAnnotations_);
      } else {
        return nodeAnnotationsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public int getNodeAnnotationsCount() {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.size();
      } else {
        return nodeAnnotationsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public com.google.cloud.visionai.v1.ApplicationNodeAnnotation getNodeAnnotations(int index) {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.get(index);
      } else {
        return nodeAnnotationsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder setNodeAnnotations(
        int index, com.google.cloud.visionai.v1.ApplicationNodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.set(index, value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder setNodeAnnotations(
        int index, com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.set(index, builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder addNodeAnnotations(
        com.google.cloud.visionai.v1.ApplicationNodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder addNodeAnnotations(
        int index, com.google.cloud.visionai.v1.ApplicationNodeAnnotation value) {
      if (nodeAnnotationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(index, value);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder addNodeAnnotations(
        com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder addNodeAnnotations(
        int index, com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder builderForValue) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.add(index, builderForValue.build());
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder addAllNodeAnnotations(
        java.lang.Iterable<? extends com.google.cloud.visionai.v1.ApplicationNodeAnnotation>
            values) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, nodeAnnotations_);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder clearNodeAnnotations() {
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public Builder removeNodeAnnotations(int index) {
      if (nodeAnnotationsBuilder_ == null) {
        ensureNodeAnnotationsIsMutable();
        nodeAnnotations_.remove(index);
        onChanged();
      } else {
        nodeAnnotationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder getNodeAnnotationsBuilder(
        int index) {
      return getNodeAnnotationsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder
        getNodeAnnotationsOrBuilder(int index) {
      if (nodeAnnotationsBuilder_ == null) {
        return nodeAnnotations_.get(index);
      } else {
        return nodeAnnotationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public java.util.List<? extends com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder>
        getNodeAnnotationsOrBuilderList() {
      if (nodeAnnotationsBuilder_ != null) {
        return nodeAnnotationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nodeAnnotations_);
      }
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder
        addNodeAnnotationsBuilder() {
      return getNodeAnnotationsFieldBuilder()
          .addBuilder(com.google.cloud.visionai.v1.ApplicationNodeAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder addNodeAnnotationsBuilder(
        int index) {
      return getNodeAnnotationsFieldBuilder()
          .addBuilder(
              index, com.google.cloud.visionai.v1.ApplicationNodeAnnotation.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Annotations that will be applied to the specific node of the application.
     * If the same type of the annotations is applied to both application and
     * node, the node annotation will be added in addition to the global
     * application one.
     * For example, if there is one active zone annotation for the whole
     * application and one active zone annotation for the Occupancy Analytic
     * processor, then the Occupancy Analytic processor will have two active zones
     * defined.
     * </pre>
     *
     * <code>repeated .google.cloud.visionai.v1.ApplicationNodeAnnotation node_annotations = 2;
     * </code>
     */
    public java.util.List<com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder>
        getNodeAnnotationsBuilderList() {
      return getNodeAnnotationsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.visionai.v1.ApplicationNodeAnnotation,
            com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder,
            com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder>
        getNodeAnnotationsFieldBuilder() {
      if (nodeAnnotationsBuilder_ == null) {
        nodeAnnotationsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.visionai.v1.ApplicationNodeAnnotation,
                com.google.cloud.visionai.v1.ApplicationNodeAnnotation.Builder,
                com.google.cloud.visionai.v1.ApplicationNodeAnnotationOrBuilder>(
                nodeAnnotations_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        nodeAnnotations_ = null;
      }
      return nodeAnnotationsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.visionai.v1.ResourceAnnotations)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.visionai.v1.ResourceAnnotations)
  private static final com.google.cloud.visionai.v1.ResourceAnnotations DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.visionai.v1.ResourceAnnotations();
  }

  public static com.google.cloud.visionai.v1.ResourceAnnotations getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ResourceAnnotations> PARSER =
      new com.google.protobuf.AbstractParser<ResourceAnnotations>() {
        @java.lang.Override
        public ResourceAnnotations parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ResourceAnnotations> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ResourceAnnotations> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.visionai.v1.ResourceAnnotations getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
