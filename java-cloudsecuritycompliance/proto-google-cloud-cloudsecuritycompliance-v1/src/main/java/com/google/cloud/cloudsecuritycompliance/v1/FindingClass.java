/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/cloudsecuritycompliance/v1/monitoring.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.cloudsecuritycompliance.v1;

/**
 *
 *
 * <pre>
 * A finding is a record of assessment data like security, risk, health, or
 * privacy.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.cloudsecuritycompliance.v1.FindingClass}
 */
public enum FindingClass implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>FINDING_CLASS_UNSPECIFIED = 0;</code>
   */
  FINDING_CLASS_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * The activity is unwanted or malicious.
   * </pre>
   *
   * <code>THREAT = 1;</code>
   */
  THREAT(1),
  /**
   *
   *
   * <pre>
   * A potential weakness in software that increases risk to
   * confidentiality, integrity, and availability.
   * </pre>
   *
   * <code>VULNERABILITY = 2;</code>
   */
  VULNERABILITY(2),
  /**
   *
   *
   * <pre>
   * A potential weakness in a cloud resource or asset configuration that
   * increases risk.
   * </pre>
   *
   * <code>MISCONFIGURATION = 3;</code>
   */
  MISCONFIGURATION(3),
  /**
   *
   *
   * <pre>
   * A security observation that is for informational purposes.
   * </pre>
   *
   * <code>OBSERVATION = 4;</code>
   */
  OBSERVATION(4),
  /**
   *
   *
   * <pre>
   * An error that prevents Security Command Center from functioning properly.
   * </pre>
   *
   * <code>SCC_ERROR = 5;</code>
   */
  SCC_ERROR(5),
  /**
   *
   *
   * <pre>
   * A potential security risk that's due to a change in the security
   * posture.
   * </pre>
   *
   * <code>POSTURE_VIOLATION = 6;</code>
   */
  POSTURE_VIOLATION(6),
  /**
   *
   *
   * <pre>
   * A combination of security issues that represent a more severe
   * security problem when taken together.
   * </pre>
   *
   * <code>TOXIC_COMBINATION = 7;</code>
   */
  TOXIC_COMBINATION(7),
  /**
   *
   *
   * <pre>
   * A potential security risk to data assets that contain sensitive
   * data.
   * </pre>
   *
   * <code>SENSITIVE_DATA_RISK = 8;</code>
   */
  SENSITIVE_DATA_RISK(8),
  /**
   *
   *
   * <pre>
   * A resource or resource group where high risk attack paths
   * converge, based on attack path simulations (APS).
   * </pre>
   *
   * <code>CHOKEPOINT = 9;</code>
   */
  CHOKEPOINT(9),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>FINDING_CLASS_UNSPECIFIED = 0;</code>
   */
  public static final int FINDING_CLASS_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * The activity is unwanted or malicious.
   * </pre>
   *
   * <code>THREAT = 1;</code>
   */
  public static final int THREAT_VALUE = 1;

  /**
   *
   *
   * <pre>
   * A potential weakness in software that increases risk to
   * confidentiality, integrity, and availability.
   * </pre>
   *
   * <code>VULNERABILITY = 2;</code>
   */
  public static final int VULNERABILITY_VALUE = 2;

  /**
   *
   *
   * <pre>
   * A potential weakness in a cloud resource or asset configuration that
   * increases risk.
   * </pre>
   *
   * <code>MISCONFIGURATION = 3;</code>
   */
  public static final int MISCONFIGURATION_VALUE = 3;

  /**
   *
   *
   * <pre>
   * A security observation that is for informational purposes.
   * </pre>
   *
   * <code>OBSERVATION = 4;</code>
   */
  public static final int OBSERVATION_VALUE = 4;

  /**
   *
   *
   * <pre>
   * An error that prevents Security Command Center from functioning properly.
   * </pre>
   *
   * <code>SCC_ERROR = 5;</code>
   */
  public static final int SCC_ERROR_VALUE = 5;

  /**
   *
   *
   * <pre>
   * A potential security risk that's due to a change in the security
   * posture.
   * </pre>
   *
   * <code>POSTURE_VIOLATION = 6;</code>
   */
  public static final int POSTURE_VIOLATION_VALUE = 6;

  /**
   *
   *
   * <pre>
   * A combination of security issues that represent a more severe
   * security problem when taken together.
   * </pre>
   *
   * <code>TOXIC_COMBINATION = 7;</code>
   */
  public static final int TOXIC_COMBINATION_VALUE = 7;

  /**
   *
   *
   * <pre>
   * A potential security risk to data assets that contain sensitive
   * data.
   * </pre>
   *
   * <code>SENSITIVE_DATA_RISK = 8;</code>
   */
  public static final int SENSITIVE_DATA_RISK_VALUE = 8;

  /**
   *
   *
   * <pre>
   * A resource or resource group where high risk attack paths
   * converge, based on attack path simulations (APS).
   * </pre>
   *
   * <code>CHOKEPOINT = 9;</code>
   */
  public static final int CHOKEPOINT_VALUE = 9;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FindingClass valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FindingClass forNumber(int value) {
    switch (value) {
      case 0:
        return FINDING_CLASS_UNSPECIFIED;
      case 1:
        return THREAT;
      case 2:
        return VULNERABILITY;
      case 3:
        return MISCONFIGURATION;
      case 4:
        return OBSERVATION;
      case 5:
        return SCC_ERROR;
      case 6:
        return POSTURE_VIOLATION;
      case 7:
        return TOXIC_COMBINATION;
      case 8:
        return SENSITIVE_DATA_RISK;
      case 9:
        return CHOKEPOINT;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FindingClass> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<FindingClass> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<FindingClass>() {
        public FindingClass findValueByNumber(int number) {
          return FindingClass.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.cloudsecuritycompliance.v1.MonitoringProto.getDescriptor()
        .getEnumTypes()
        .get(1);
  }

  private static final FindingClass[] VALUES = values();

  public static FindingClass valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FindingClass(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.cloudsecuritycompliance.v1.FindingClass)
}
