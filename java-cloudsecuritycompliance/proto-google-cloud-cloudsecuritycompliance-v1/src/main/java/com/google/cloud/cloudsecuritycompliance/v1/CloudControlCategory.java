/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/cloudsecuritycompliance/v1/common.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.cloudsecuritycompliance.v1;

/**
 *
 *
 * <pre>
 * The category of the cloud control.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.cloudsecuritycompliance.v1.CloudControlCategory}
 */
public enum CloudControlCategory implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>CLOUD_CONTROL_CATEGORY_UNSPECIFIED = 0;</code>
   */
  CLOUD_CONTROL_CATEGORY_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Infrastructure
   * </pre>
   *
   * <code>CC_CATEGORY_INFRASTRUCTURE = 1;</code>
   */
  CC_CATEGORY_INFRASTRUCTURE(1),
  /**
   *
   *
   * <pre>
   * Artificial Intelligence
   * </pre>
   *
   * <code>CC_CATEGORY_ARTIFICIAL_INTELLIGENCE = 2;</code>
   */
  CC_CATEGORY_ARTIFICIAL_INTELLIGENCE(2),
  /**
   *
   *
   * <pre>
   * Physical Security
   * </pre>
   *
   * <code>CC_CATEGORY_PHYSICAL_SECURITY = 3;</code>
   */
  CC_CATEGORY_PHYSICAL_SECURITY(3),
  /**
   *
   *
   * <pre>
   * Data Security
   * </pre>
   *
   * <code>CC_CATEGORY_DATA_SECURITY = 4;</code>
   */
  CC_CATEGORY_DATA_SECURITY(4),
  /**
   *
   *
   * <pre>
   * Network Security
   * </pre>
   *
   * <code>CC_CATEGORY_NETWORK_SECURITY = 5;</code>
   */
  CC_CATEGORY_NETWORK_SECURITY(5),
  /**
   *
   *
   * <pre>
   * Incident Management
   * </pre>
   *
   * <code>CC_CATEGORY_INCIDENT_MANAGEMENT = 6;</code>
   */
  CC_CATEGORY_INCIDENT_MANAGEMENT(6),
  /**
   *
   *
   * <pre>
   * Identity &amp; Access Management
   * </pre>
   *
   * <code>CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT = 7;</code>
   */
  CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT(7),
  /**
   *
   *
   * <pre>
   * Encryption
   * </pre>
   *
   * <code>CC_CATEGORY_ENCRYPTION = 8;</code>
   */
  CC_CATEGORY_ENCRYPTION(8),
  /**
   *
   *
   * <pre>
   * Logs Management &amp; Infrastructure
   * </pre>
   *
   * <code>CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE = 9;</code>
   */
  CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE(9),
  /**
   *
   *
   * <pre>
   * HR, Admin &amp; Processes
   * </pre>
   *
   * <code>CC_CATEGORY_HR_ADMIN_AND_PROCESSES = 10;</code>
   */
  CC_CATEGORY_HR_ADMIN_AND_PROCESSES(10),
  /**
   *
   *
   * <pre>
   * Third Party &amp; Sub-Processor Management
   * </pre>
   *
   * <code>CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT = 11;</code>
   */
  CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT(11),
  /**
   *
   *
   * <pre>
   * Legal &amp; Disclosures
   * </pre>
   *
   * <code>CC_CATEGORY_LEGAL_AND_DISCLOSURES = 12;</code>
   */
  CC_CATEGORY_LEGAL_AND_DISCLOSURES(12),
  /**
   *
   *
   * <pre>
   * Vulnerability Management
   * </pre>
   *
   * <code>CC_CATEGORY_VULNERABILITY_MANAGEMENT = 13;</code>
   */
  CC_CATEGORY_VULNERABILITY_MANAGEMENT(13),
  /**
   *
   *
   * <pre>
   * Privacy
   * </pre>
   *
   * <code>CC_CATEGORY_PRIVACY = 14;</code>
   */
  CC_CATEGORY_PRIVACY(14),
  /**
   *
   *
   * <pre>
   * BCDR (Business Continuity and Disaster Recovery)
   * </pre>
   *
   * <code>CC_CATEGORY_BCDR = 15;</code>
   */
  CC_CATEGORY_BCDR(15),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>CLOUD_CONTROL_CATEGORY_UNSPECIFIED = 0;</code>
   */
  public static final int CLOUD_CONTROL_CATEGORY_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * Infrastructure
   * </pre>
   *
   * <code>CC_CATEGORY_INFRASTRUCTURE = 1;</code>
   */
  public static final int CC_CATEGORY_INFRASTRUCTURE_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Artificial Intelligence
   * </pre>
   *
   * <code>CC_CATEGORY_ARTIFICIAL_INTELLIGENCE = 2;</code>
   */
  public static final int CC_CATEGORY_ARTIFICIAL_INTELLIGENCE_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Physical Security
   * </pre>
   *
   * <code>CC_CATEGORY_PHYSICAL_SECURITY = 3;</code>
   */
  public static final int CC_CATEGORY_PHYSICAL_SECURITY_VALUE = 3;

  /**
   *
   *
   * <pre>
   * Data Security
   * </pre>
   *
   * <code>CC_CATEGORY_DATA_SECURITY = 4;</code>
   */
  public static final int CC_CATEGORY_DATA_SECURITY_VALUE = 4;

  /**
   *
   *
   * <pre>
   * Network Security
   * </pre>
   *
   * <code>CC_CATEGORY_NETWORK_SECURITY = 5;</code>
   */
  public static final int CC_CATEGORY_NETWORK_SECURITY_VALUE = 5;

  /**
   *
   *
   * <pre>
   * Incident Management
   * </pre>
   *
   * <code>CC_CATEGORY_INCIDENT_MANAGEMENT = 6;</code>
   */
  public static final int CC_CATEGORY_INCIDENT_MANAGEMENT_VALUE = 6;

  /**
   *
   *
   * <pre>
   * Identity &amp; Access Management
   * </pre>
   *
   * <code>CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT = 7;</code>
   */
  public static final int CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT_VALUE = 7;

  /**
   *
   *
   * <pre>
   * Encryption
   * </pre>
   *
   * <code>CC_CATEGORY_ENCRYPTION = 8;</code>
   */
  public static final int CC_CATEGORY_ENCRYPTION_VALUE = 8;

  /**
   *
   *
   * <pre>
   * Logs Management &amp; Infrastructure
   * </pre>
   *
   * <code>CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE = 9;</code>
   */
  public static final int CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE_VALUE = 9;

  /**
   *
   *
   * <pre>
   * HR, Admin &amp; Processes
   * </pre>
   *
   * <code>CC_CATEGORY_HR_ADMIN_AND_PROCESSES = 10;</code>
   */
  public static final int CC_CATEGORY_HR_ADMIN_AND_PROCESSES_VALUE = 10;

  /**
   *
   *
   * <pre>
   * Third Party &amp; Sub-Processor Management
   * </pre>
   *
   * <code>CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT = 11;</code>
   */
  public static final int CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT_VALUE = 11;

  /**
   *
   *
   * <pre>
   * Legal &amp; Disclosures
   * </pre>
   *
   * <code>CC_CATEGORY_LEGAL_AND_DISCLOSURES = 12;</code>
   */
  public static final int CC_CATEGORY_LEGAL_AND_DISCLOSURES_VALUE = 12;

  /**
   *
   *
   * <pre>
   * Vulnerability Management
   * </pre>
   *
   * <code>CC_CATEGORY_VULNERABILITY_MANAGEMENT = 13;</code>
   */
  public static final int CC_CATEGORY_VULNERABILITY_MANAGEMENT_VALUE = 13;

  /**
   *
   *
   * <pre>
   * Privacy
   * </pre>
   *
   * <code>CC_CATEGORY_PRIVACY = 14;</code>
   */
  public static final int CC_CATEGORY_PRIVACY_VALUE = 14;

  /**
   *
   *
   * <pre>
   * BCDR (Business Continuity and Disaster Recovery)
   * </pre>
   *
   * <code>CC_CATEGORY_BCDR = 15;</code>
   */
  public static final int CC_CATEGORY_BCDR_VALUE = 15;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CloudControlCategory valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CloudControlCategory forNumber(int value) {
    switch (value) {
      case 0:
        return CLOUD_CONTROL_CATEGORY_UNSPECIFIED;
      case 1:
        return CC_CATEGORY_INFRASTRUCTURE;
      case 2:
        return CC_CATEGORY_ARTIFICIAL_INTELLIGENCE;
      case 3:
        return CC_CATEGORY_PHYSICAL_SECURITY;
      case 4:
        return CC_CATEGORY_DATA_SECURITY;
      case 5:
        return CC_CATEGORY_NETWORK_SECURITY;
      case 6:
        return CC_CATEGORY_INCIDENT_MANAGEMENT;
      case 7:
        return CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT;
      case 8:
        return CC_CATEGORY_ENCRYPTION;
      case 9:
        return CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE;
      case 10:
        return CC_CATEGORY_HR_ADMIN_AND_PROCESSES;
      case 11:
        return CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT;
      case 12:
        return CC_CATEGORY_LEGAL_AND_DISCLOSURES;
      case 13:
        return CC_CATEGORY_VULNERABILITY_MANAGEMENT;
      case 14:
        return CC_CATEGORY_PRIVACY;
      case 15:
        return CC_CATEGORY_BCDR;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CloudControlCategory>
      internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<CloudControlCategory>
      internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CloudControlCategory>() {
            public CloudControlCategory findValueByNumber(int number) {
              return CloudControlCategory.forNumber(number);
            }
          };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.cloudsecuritycompliance.v1.CommonProto.getDescriptor()
        .getEnumTypes()
        .get(3);
  }

  private static final CloudControlCategory[] VALUES = values();

  public static CloudControlCategory valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CloudControlCategory(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.cloudsecuritycompliance.v1.CloudControlCategory)
}
