/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/cloudsecuritycompliance/v1/common.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.cloudsecuritycompliance.v1;

/**
 *
 *
 * <pre>
 * The severity of the finding.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.cloudsecuritycompliance.v1.Severity}
 */
public enum Severity implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * This value is used for findings when a source doesn't write a severity
   * value.
   * </pre>
   *
   * <code>SEVERITY_UNSPECIFIED = 0;</code>
   */
  SEVERITY_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A critical vulnerability is easily discoverable by an external actor,
   * exploitable, and results in the direct ability to execute arbitrary code,
   * exfiltrate data, and otherwise gain additional access and privileges to
   * cloud resources and workloads. Examples include publicly accessible
   * unprotected user data and public SSH access with weak or no
   * passwords.
   *
   * Threat:
   * Indicates a threat that is able to access, modify, or delete data or
   * execute unauthorized code within existing resources.
   * </pre>
   *
   * <code>CRITICAL = 1;</code>
   */
  CRITICAL(1),
  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A high risk vulnerability can be easily discovered and exploited in
   * combination with other vulnerabilities in order to gain direct access and
   * the ability to execute arbitrary code, exfiltrate data, and otherwise
   * gain additional access and privileges to cloud resources and workloads.
   * An example is a database with weak or no passwords that is only
   * accessible internally. This database could easily be compromised by an
   * actor that had access to the internal network.
   *
   * Threat:
   * Indicates a threat that is able to create new computational resources in
   * an environment but not able to access data or execute code in existing
   * resources.
   * </pre>
   *
   * <code>HIGH = 2;</code>
   */
  HIGH(2),
  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A medium risk vulnerability could be used by an actor to gain access to
   * resources or privileges that enable them to eventually (through multiple
   * steps or a complex exploit) gain access and the ability to execute
   * arbitrary code or exfiltrate data. An example is a service account with
   * access to more projects than it should have. If an actor gains access to
   * the service account, they could potentially use that access to manipulate
   * a project the service account was not intended to.
   *
   * Threat:
   * Indicates a threat that is able to cause operational impact but may not
   * access data or execute unauthorized code.
   * </pre>
   *
   * <code>MEDIUM = 3;</code>
   */
  MEDIUM(3),
  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A low risk vulnerability hampers a security organization's ability to
   * detect vulnerabilities or active threats in their deployment, or prevents
   * the root cause investigation of security issues. An example is monitoring
   * and logs being disabled for resource configurations and access.
   *
   * Threat:
   * Indicates a threat that has obtained minimal access to an environment but
   * is not able to access data, execute code, or create resources.
   * </pre>
   *
   * <code>LOW = 4;</code>
   */
  LOW(4),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * This value is used for findings when a source doesn't write a severity
   * value.
   * </pre>
   *
   * <code>SEVERITY_UNSPECIFIED = 0;</code>
   */
  public static final int SEVERITY_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A critical vulnerability is easily discoverable by an external actor,
   * exploitable, and results in the direct ability to execute arbitrary code,
   * exfiltrate data, and otherwise gain additional access and privileges to
   * cloud resources and workloads. Examples include publicly accessible
   * unprotected user data and public SSH access with weak or no
   * passwords.
   *
   * Threat:
   * Indicates a threat that is able to access, modify, or delete data or
   * execute unauthorized code within existing resources.
   * </pre>
   *
   * <code>CRITICAL = 1;</code>
   */
  public static final int CRITICAL_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A high risk vulnerability can be easily discovered and exploited in
   * combination with other vulnerabilities in order to gain direct access and
   * the ability to execute arbitrary code, exfiltrate data, and otherwise
   * gain additional access and privileges to cloud resources and workloads.
   * An example is a database with weak or no passwords that is only
   * accessible internally. This database could easily be compromised by an
   * actor that had access to the internal network.
   *
   * Threat:
   * Indicates a threat that is able to create new computational resources in
   * an environment but not able to access data or execute code in existing
   * resources.
   * </pre>
   *
   * <code>HIGH = 2;</code>
   */
  public static final int HIGH_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A medium risk vulnerability could be used by an actor to gain access to
   * resources or privileges that enable them to eventually (through multiple
   * steps or a complex exploit) gain access and the ability to execute
   * arbitrary code or exfiltrate data. An example is a service account with
   * access to more projects than it should have. If an actor gains access to
   * the service account, they could potentially use that access to manipulate
   * a project the service account was not intended to.
   *
   * Threat:
   * Indicates a threat that is able to cause operational impact but may not
   * access data or execute unauthorized code.
   * </pre>
   *
   * <code>MEDIUM = 3;</code>
   */
  public static final int MEDIUM_VALUE = 3;

  /**
   *
   *
   * <pre>
   * Vulnerability:
   * A low risk vulnerability hampers a security organization's ability to
   * detect vulnerabilities or active threats in their deployment, or prevents
   * the root cause investigation of security issues. An example is monitoring
   * and logs being disabled for resource configurations and access.
   *
   * Threat:
   * Indicates a threat that has obtained minimal access to an environment but
   * is not able to access data, execute code, or create resources.
   * </pre>
   *
   * <code>LOW = 4;</code>
   */
  public static final int LOW_VALUE = 4;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Severity valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Severity forNumber(int value) {
    switch (value) {
      case 0:
        return SEVERITY_UNSPECIFIED;
      case 1:
        return CRITICAL;
      case 2:
        return HIGH;
      case 3:
        return MEDIUM;
      case 4:
        return LOW;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Severity> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<Severity> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<Severity>() {
        public Severity findValueByNumber(int number) {
          return Severity.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.cloudsecuritycompliance.v1.CommonProto.getDescriptor()
        .getEnumTypes()
        .get(4);
  }

  private static final Severity[] VALUES = values();

  public static Severity valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Severity(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.cloudsecuritycompliance.v1.Severity)
}
