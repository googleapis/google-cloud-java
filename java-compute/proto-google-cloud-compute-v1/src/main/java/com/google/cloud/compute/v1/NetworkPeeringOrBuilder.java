/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.compute.v1;

public interface NetworkPeeringOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.compute.v1.NetworkPeering)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
   * </pre>
   *
   * <code>optional bool auto_create_routes = 57454941;</code>
   *
   * @return Whether the autoCreateRoutes field is set.
   */
  boolean hasAutoCreateRoutes();
  /**
   *
   *
   * <pre>
   * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
   * </pre>
   *
   * <code>optional bool auto_create_routes = 57454941;</code>
   *
   * @return The autoCreateRoutes.
   */
  boolean getAutoCreateRoutes();

  /**
   *
   *
   * <pre>
   * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
   * </pre>
   *
   * <code>optional bool exchange_subnet_routes = 26322256;</code>
   *
   * @return Whether the exchangeSubnetRoutes field is set.
   */
  boolean hasExchangeSubnetRoutes();
  /**
   *
   *
   * <pre>
   * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
   * </pre>
   *
   * <code>optional bool exchange_subnet_routes = 26322256;</code>
   *
   * @return The exchangeSubnetRoutes.
   */
  boolean getExchangeSubnetRoutes();

  /**
   *
   *
   * <pre>
   * Whether to export the custom routes to peer network. The default value is false.
   * </pre>
   *
   * <code>optional bool export_custom_routes = 60281485;</code>
   *
   * @return Whether the exportCustomRoutes field is set.
   */
  boolean hasExportCustomRoutes();
  /**
   *
   *
   * <pre>
   * Whether to export the custom routes to peer network. The default value is false.
   * </pre>
   *
   * <code>optional bool export_custom_routes = 60281485;</code>
   *
   * @return The exportCustomRoutes.
   */
  boolean getExportCustomRoutes();

  /**
   *
   *
   * <pre>
   * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
   * </pre>
   *
   * <code>optional bool export_subnet_routes_with_public_ip = 97940834;</code>
   *
   * @return Whether the exportSubnetRoutesWithPublicIp field is set.
   */
  boolean hasExportSubnetRoutesWithPublicIp();
  /**
   *
   *
   * <pre>
   * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
   * </pre>
   *
   * <code>optional bool export_subnet_routes_with_public_ip = 97940834;</code>
   *
   * @return The exportSubnetRoutesWithPublicIp.
   */
  boolean getExportSubnetRoutesWithPublicIp();

  /**
   *
   *
   * <pre>
   * Whether to import the custom routes from peer network. The default value is false.
   * </pre>
   *
   * <code>optional bool import_custom_routes = 197982398;</code>
   *
   * @return Whether the importCustomRoutes field is set.
   */
  boolean hasImportCustomRoutes();
  /**
   *
   *
   * <pre>
   * Whether to import the custom routes from peer network. The default value is false.
   * </pre>
   *
   * <code>optional bool import_custom_routes = 197982398;</code>
   *
   * @return The importCustomRoutes.
   */
  boolean getImportCustomRoutes();

  /**
   *
   *
   * <pre>
   * Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
   * </pre>
   *
   * <code>optional bool import_subnet_routes_with_public_ip = 14419729;</code>
   *
   * @return Whether the importSubnetRoutesWithPublicIp field is set.
   */
  boolean hasImportSubnetRoutesWithPublicIp();
  /**
   *
   *
   * <pre>
   * Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
   * </pre>
   *
   * <code>optional bool import_subnet_routes_with_public_ip = 14419729;</code>
   *
   * @return The importSubnetRoutesWithPublicIp.
   */
  boolean getImportSubnetRoutesWithPublicIp();

  /**
   *
   *
   * <pre>
   * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   * </pre>
   *
   * <code>optional string name = 3373707;</code>
   *
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   *
   *
   * <pre>
   * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   * </pre>
   *
   * <code>optional string name = 3373707;</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   * </pre>
   *
   * <code>optional string name = 3373707;</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
   * </pre>
   *
   * <code>optional string network = 232872494;</code>
   *
   * @return Whether the network field is set.
   */
  boolean hasNetwork();
  /**
   *
   *
   * <pre>
   * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
   * </pre>
   *
   * <code>optional string network = 232872494;</code>
   *
   * @return The network.
   */
  java.lang.String getNetwork();
  /**
   *
   *
   * <pre>
   * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
   * </pre>
   *
   * <code>optional string network = 232872494;</code>
   *
   * @return The bytes for network.
   */
  com.google.protobuf.ByteString getNetworkBytes();

  /**
   *
   *
   * <pre>
   * Maximum Transmission Unit in bytes.
   * </pre>
   *
   * <code>optional int32 peer_mtu = 69584721;</code>
   *
   * @return Whether the peerMtu field is set.
   */
  boolean hasPeerMtu();
  /**
   *
   *
   * <pre>
   * Maximum Transmission Unit in bytes.
   * </pre>
   *
   * <code>optional int32 peer_mtu = 69584721;</code>
   *
   * @return The peerMtu.
   */
  int getPeerMtu();

  /**
   *
   *
   * <pre>
   * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
   * Check the StackType enum for the list of possible values.
   * </pre>
   *
   * <code>optional string stack_type = 425908881;</code>
   *
   * @return Whether the stackType field is set.
   */
  boolean hasStackType();
  /**
   *
   *
   * <pre>
   * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
   * Check the StackType enum for the list of possible values.
   * </pre>
   *
   * <code>optional string stack_type = 425908881;</code>
   *
   * @return The stackType.
   */
  java.lang.String getStackType();
  /**
   *
   *
   * <pre>
   * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
   * Check the StackType enum for the list of possible values.
   * </pre>
   *
   * <code>optional string stack_type = 425908881;</code>
   *
   * @return The bytes for stackType.
   */
  com.google.protobuf.ByteString getStackTypeBytes();

  /**
   *
   *
   * <pre>
   * [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
   * Check the State enum for the list of possible values.
   * </pre>
   *
   * <code>optional string state = 109757585;</code>
   *
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   *
   *
   * <pre>
   * [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
   * Check the State enum for the list of possible values.
   * </pre>
   *
   * <code>optional string state = 109757585;</code>
   *
   * @return The state.
   */
  java.lang.String getState();
  /**
   *
   *
   * <pre>
   * [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
   * Check the State enum for the list of possible values.
   * </pre>
   *
   * <code>optional string state = 109757585;</code>
   *
   * @return The bytes for state.
   */
  com.google.protobuf.ByteString getStateBytes();

  /**
   *
   *
   * <pre>
   * [Output Only] Details about the current state of the peering.
   * </pre>
   *
   * <code>optional string state_details = 95566996;</code>
   *
   * @return Whether the stateDetails field is set.
   */
  boolean hasStateDetails();
  /**
   *
   *
   * <pre>
   * [Output Only] Details about the current state of the peering.
   * </pre>
   *
   * <code>optional string state_details = 95566996;</code>
   *
   * @return The stateDetails.
   */
  java.lang.String getStateDetails();
  /**
   *
   *
   * <pre>
   * [Output Only] Details about the current state of the peering.
   * </pre>
   *
   * <code>optional string state_details = 95566996;</code>
   *
   * @return The bytes for stateDetails.
   */
  com.google.protobuf.ByteString getStateDetailsBytes();
}
