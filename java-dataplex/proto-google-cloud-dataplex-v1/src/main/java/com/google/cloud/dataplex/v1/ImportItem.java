/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataplex/v1/catalog.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.dataplex.v1;

/**
 *
 *
 * <pre>
 * An object that describes the values that you want to set for an entry and its
 * attached aspects when you import metadata. Used when you run a metadata
 * import job. See
 * [CreateMetadataJob][google.cloud.dataplex.v1.CatalogService.CreateMetadataJob].
 *
 * You provide a collection of import items in a metadata import file. For more
 * information about how to create a metadata import file, see [Metadata import
 * file](https://cloud.google.com/dataplex/docs/import-metadata#metadata-import-file).
 * </pre>
 *
 * Protobuf type {@code google.cloud.dataplex.v1.ImportItem}
 */
public final class ImportItem extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.dataplex.v1.ImportItem)
    ImportItemOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ImportItem.newBuilder() to construct.
  private ImportItem(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ImportItem() {
    aspectKeys_ = com.google.protobuf.LazyStringArrayList.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ImportItem();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.dataplex.v1.CatalogProto
        .internal_static_google_cloud_dataplex_v1_ImportItem_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.dataplex.v1.CatalogProto
        .internal_static_google_cloud_dataplex_v1_ImportItem_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.dataplex.v1.ImportItem.class,
            com.google.cloud.dataplex.v1.ImportItem.Builder.class);
  }

  private int bitField0_;
  public static final int ENTRY_FIELD_NUMBER = 1;
  private com.google.cloud.dataplex.v1.Entry entry_;
  /**
   *
   *
   * <pre>
   * Information about an entry and its attached aspects.
   * </pre>
   *
   * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
   *
   * @return Whether the entry field is set.
   */
  @java.lang.Override
  public boolean hasEntry() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Information about an entry and its attached aspects.
   * </pre>
   *
   * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
   *
   * @return The entry.
   */
  @java.lang.Override
  public com.google.cloud.dataplex.v1.Entry getEntry() {
    return entry_ == null ? com.google.cloud.dataplex.v1.Entry.getDefaultInstance() : entry_;
  }
  /**
   *
   *
   * <pre>
   * Information about an entry and its attached aspects.
   * </pre>
   *
   * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
   */
  @java.lang.Override
  public com.google.cloud.dataplex.v1.EntryOrBuilder getEntryOrBuilder() {
    return entry_ == null ? com.google.cloud.dataplex.v1.Entry.getDefaultInstance() : entry_;
  }

  public static final int UPDATE_MASK_FIELD_NUMBER = 2;
  private com.google.protobuf.FieldMask updateMask_;
  /**
   *
   *
   * <pre>
   * The fields to update, in paths that are relative to the `Entry` resource.
   * Separate each field with a comma.
   *
   * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
   * for an entry that can be modified, including aspects. This means that
   * Dataplex replaces the existing entry with the entry in the metadata import
   * file. All modifiable fields are updated, regardless of the fields that are
   * listed in the update mask, and regardless of whether a field is present
   * in the `entry` object.
   *
   * The `update_mask` field is ignored when an entry is created or re-created.
   *
   * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
   * value to `aspects`.
   *
   *
   * Dataplex also determines which entries and aspects to modify by comparing
   * the values and timestamps that you provide in the metadata import file with
   * the values and timestamps that exist in your project. For more information,
   * see [Comparison
   * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   *
   * @return Whether the updateMask field is set.
   */
  @java.lang.Override
  public boolean hasUpdateMask() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * The fields to update, in paths that are relative to the `Entry` resource.
   * Separate each field with a comma.
   *
   * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
   * for an entry that can be modified, including aspects. This means that
   * Dataplex replaces the existing entry with the entry in the metadata import
   * file. All modifiable fields are updated, regardless of the fields that are
   * listed in the update mask, and regardless of whether a field is present
   * in the `entry` object.
   *
   * The `update_mask` field is ignored when an entry is created or re-created.
   *
   * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
   * value to `aspects`.
   *
   *
   * Dataplex also determines which entries and aspects to modify by comparing
   * the values and timestamps that you provide in the metadata import file with
   * the values and timestamps that exist in your project. For more information,
   * see [Comparison
   * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   *
   * @return The updateMask.
   */
  @java.lang.Override
  public com.google.protobuf.FieldMask getUpdateMask() {
    return updateMask_ == null ? com.google.protobuf.FieldMask.getDefaultInstance() : updateMask_;
  }
  /**
   *
   *
   * <pre>
   * The fields to update, in paths that are relative to the `Entry` resource.
   * Separate each field with a comma.
   *
   * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
   * for an entry that can be modified, including aspects. This means that
   * Dataplex replaces the existing entry with the entry in the metadata import
   * file. All modifiable fields are updated, regardless of the fields that are
   * listed in the update mask, and regardless of whether a field is present
   * in the `entry` object.
   *
   * The `update_mask` field is ignored when an entry is created or re-created.
   *
   * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
   * value to `aspects`.
   *
   *
   * Dataplex also determines which entries and aspects to modify by comparing
   * the values and timestamps that you provide in the metadata import file with
   * the values and timestamps that exist in your project. For more information,
   * see [Comparison
   * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.FieldMaskOrBuilder getUpdateMaskOrBuilder() {
    return updateMask_ == null ? com.google.protobuf.FieldMask.getDefaultInstance() : updateMask_;
  }

  public static final int ASPECT_KEYS_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList aspectKeys_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   *
   *
   * <pre>
   * The aspects to modify. Supports the following syntaxes:
   *
   * * `{aspect_type_reference}`: matches aspects that belong to the specified
   * aspect type and are attached directly to the entry.
   * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
   * specified aspect type and path.
   * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
   * paths.
   * * `*&#64;path` : matches aspects of all types on the given path.
   *
   * Replace `{aspect_type_reference}` with a reference to the aspect type, in
   * the format
   * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
   *
   * In `FULL` entry sync mode, if you leave this field empty, it is treated as
   * specifying exactly those aspects that are present within the specified
   * entry. Dataplex implicitly adds the keys for all of the required aspects of
   * an entry.
   * </pre>
   *
   * <code>repeated string aspect_keys = 3;</code>
   *
   * @return A list containing the aspectKeys.
   */
  public com.google.protobuf.ProtocolStringList getAspectKeysList() {
    return aspectKeys_;
  }
  /**
   *
   *
   * <pre>
   * The aspects to modify. Supports the following syntaxes:
   *
   * * `{aspect_type_reference}`: matches aspects that belong to the specified
   * aspect type and are attached directly to the entry.
   * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
   * specified aspect type and path.
   * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
   * paths.
   * * `*&#64;path` : matches aspects of all types on the given path.
   *
   * Replace `{aspect_type_reference}` with a reference to the aspect type, in
   * the format
   * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
   *
   * In `FULL` entry sync mode, if you leave this field empty, it is treated as
   * specifying exactly those aspects that are present within the specified
   * entry. Dataplex implicitly adds the keys for all of the required aspects of
   * an entry.
   * </pre>
   *
   * <code>repeated string aspect_keys = 3;</code>
   *
   * @return The count of aspectKeys.
   */
  public int getAspectKeysCount() {
    return aspectKeys_.size();
  }
  /**
   *
   *
   * <pre>
   * The aspects to modify. Supports the following syntaxes:
   *
   * * `{aspect_type_reference}`: matches aspects that belong to the specified
   * aspect type and are attached directly to the entry.
   * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
   * specified aspect type and path.
   * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
   * paths.
   * * `*&#64;path` : matches aspects of all types on the given path.
   *
   * Replace `{aspect_type_reference}` with a reference to the aspect type, in
   * the format
   * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
   *
   * In `FULL` entry sync mode, if you leave this field empty, it is treated as
   * specifying exactly those aspects that are present within the specified
   * entry. Dataplex implicitly adds the keys for all of the required aspects of
   * an entry.
   * </pre>
   *
   * <code>repeated string aspect_keys = 3;</code>
   *
   * @param index The index of the element to return.
   * @return The aspectKeys at the given index.
   */
  public java.lang.String getAspectKeys(int index) {
    return aspectKeys_.get(index);
  }
  /**
   *
   *
   * <pre>
   * The aspects to modify. Supports the following syntaxes:
   *
   * * `{aspect_type_reference}`: matches aspects that belong to the specified
   * aspect type and are attached directly to the entry.
   * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
   * specified aspect type and path.
   * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
   * paths.
   * * `*&#64;path` : matches aspects of all types on the given path.
   *
   * Replace `{aspect_type_reference}` with a reference to the aspect type, in
   * the format
   * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
   *
   * In `FULL` entry sync mode, if you leave this field empty, it is treated as
   * specifying exactly those aspects that are present within the specified
   * entry. Dataplex implicitly adds the keys for all of the required aspects of
   * an entry.
   * </pre>
   *
   * <code>repeated string aspect_keys = 3;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the aspectKeys at the given index.
   */
  public com.google.protobuf.ByteString getAspectKeysBytes(int index) {
    return aspectKeys_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getEntry());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getUpdateMask());
    }
    for (int i = 0; i < aspectKeys_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, aspectKeys_.getRaw(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getEntry());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getUpdateMask());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < aspectKeys_.size(); i++) {
        dataSize += computeStringSizeNoTag(aspectKeys_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAspectKeysList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.dataplex.v1.ImportItem)) {
      return super.equals(obj);
    }
    com.google.cloud.dataplex.v1.ImportItem other = (com.google.cloud.dataplex.v1.ImportItem) obj;

    if (hasEntry() != other.hasEntry()) return false;
    if (hasEntry()) {
      if (!getEntry().equals(other.getEntry())) return false;
    }
    if (hasUpdateMask() != other.hasUpdateMask()) return false;
    if (hasUpdateMask()) {
      if (!getUpdateMask().equals(other.getUpdateMask())) return false;
    }
    if (!getAspectKeysList().equals(other.getAspectKeysList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEntry()) {
      hash = (37 * hash) + ENTRY_FIELD_NUMBER;
      hash = (53 * hash) + getEntry().hashCode();
    }
    if (hasUpdateMask()) {
      hash = (37 * hash) + UPDATE_MASK_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateMask().hashCode();
    }
    if (getAspectKeysCount() > 0) {
      hash = (37 * hash) + ASPECT_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getAspectKeysList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.dataplex.v1.ImportItem parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.dataplex.v1.ImportItem prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * An object that describes the values that you want to set for an entry and its
   * attached aspects when you import metadata. Used when you run a metadata
   * import job. See
   * [CreateMetadataJob][google.cloud.dataplex.v1.CatalogService.CreateMetadataJob].
   *
   * You provide a collection of import items in a metadata import file. For more
   * information about how to create a metadata import file, see [Metadata import
   * file](https://cloud.google.com/dataplex/docs/import-metadata#metadata-import-file).
   * </pre>
   *
   * Protobuf type {@code google.cloud.dataplex.v1.ImportItem}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.dataplex.v1.ImportItem)
      com.google.cloud.dataplex.v1.ImportItemOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.dataplex.v1.CatalogProto
          .internal_static_google_cloud_dataplex_v1_ImportItem_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.dataplex.v1.CatalogProto
          .internal_static_google_cloud_dataplex_v1_ImportItem_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.dataplex.v1.ImportItem.class,
              com.google.cloud.dataplex.v1.ImportItem.Builder.class);
    }

    // Construct using com.google.cloud.dataplex.v1.ImportItem.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getEntryFieldBuilder();
        getUpdateMaskFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      entry_ = null;
      if (entryBuilder_ != null) {
        entryBuilder_.dispose();
        entryBuilder_ = null;
      }
      updateMask_ = null;
      if (updateMaskBuilder_ != null) {
        updateMaskBuilder_.dispose();
        updateMaskBuilder_ = null;
      }
      aspectKeys_ = com.google.protobuf.LazyStringArrayList.emptyList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.dataplex.v1.CatalogProto
          .internal_static_google_cloud_dataplex_v1_ImportItem_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.dataplex.v1.ImportItem getDefaultInstanceForType() {
      return com.google.cloud.dataplex.v1.ImportItem.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.dataplex.v1.ImportItem build() {
      com.google.cloud.dataplex.v1.ImportItem result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.dataplex.v1.ImportItem buildPartial() {
      com.google.cloud.dataplex.v1.ImportItem result =
          new com.google.cloud.dataplex.v1.ImportItem(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.dataplex.v1.ImportItem result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.entry_ = entryBuilder_ == null ? entry_ : entryBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.updateMask_ = updateMaskBuilder_ == null ? updateMask_ : updateMaskBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        aspectKeys_.makeImmutable();
        result.aspectKeys_ = aspectKeys_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.dataplex.v1.ImportItem) {
        return mergeFrom((com.google.cloud.dataplex.v1.ImportItem) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.dataplex.v1.ImportItem other) {
      if (other == com.google.cloud.dataplex.v1.ImportItem.getDefaultInstance()) return this;
      if (other.hasEntry()) {
        mergeEntry(other.getEntry());
      }
      if (other.hasUpdateMask()) {
        mergeUpdateMask(other.getUpdateMask());
      }
      if (!other.aspectKeys_.isEmpty()) {
        if (aspectKeys_.isEmpty()) {
          aspectKeys_ = other.aspectKeys_;
          bitField0_ |= 0x00000004;
        } else {
          ensureAspectKeysIsMutable();
          aspectKeys_.addAll(other.aspectKeys_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getEntryFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getUpdateMaskFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                java.lang.String s = input.readStringRequireUtf8();
                ensureAspectKeysIsMutable();
                aspectKeys_.add(s);
                break;
              } // case 26
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.cloud.dataplex.v1.Entry entry_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.dataplex.v1.Entry,
            com.google.cloud.dataplex.v1.Entry.Builder,
            com.google.cloud.dataplex.v1.EntryOrBuilder>
        entryBuilder_;
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     *
     * @return Whether the entry field is set.
     */
    public boolean hasEntry() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     *
     * @return The entry.
     */
    public com.google.cloud.dataplex.v1.Entry getEntry() {
      if (entryBuilder_ == null) {
        return entry_ == null ? com.google.cloud.dataplex.v1.Entry.getDefaultInstance() : entry_;
      } else {
        return entryBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public Builder setEntry(com.google.cloud.dataplex.v1.Entry value) {
      if (entryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        entry_ = value;
      } else {
        entryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public Builder setEntry(com.google.cloud.dataplex.v1.Entry.Builder builderForValue) {
      if (entryBuilder_ == null) {
        entry_ = builderForValue.build();
      } else {
        entryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public Builder mergeEntry(com.google.cloud.dataplex.v1.Entry value) {
      if (entryBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && entry_ != null
            && entry_ != com.google.cloud.dataplex.v1.Entry.getDefaultInstance()) {
          getEntryBuilder().mergeFrom(value);
        } else {
          entry_ = value;
        }
      } else {
        entryBuilder_.mergeFrom(value);
      }
      if (entry_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public Builder clearEntry() {
      bitField0_ = (bitField0_ & ~0x00000001);
      entry_ = null;
      if (entryBuilder_ != null) {
        entryBuilder_.dispose();
        entryBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public com.google.cloud.dataplex.v1.Entry.Builder getEntryBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getEntryFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    public com.google.cloud.dataplex.v1.EntryOrBuilder getEntryOrBuilder() {
      if (entryBuilder_ != null) {
        return entryBuilder_.getMessageOrBuilder();
      } else {
        return entry_ == null ? com.google.cloud.dataplex.v1.Entry.getDefaultInstance() : entry_;
      }
    }
    /**
     *
     *
     * <pre>
     * Information about an entry and its attached aspects.
     * </pre>
     *
     * <code>.google.cloud.dataplex.v1.Entry entry = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.dataplex.v1.Entry,
            com.google.cloud.dataplex.v1.Entry.Builder,
            com.google.cloud.dataplex.v1.EntryOrBuilder>
        getEntryFieldBuilder() {
      if (entryBuilder_ == null) {
        entryBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.dataplex.v1.Entry,
                com.google.cloud.dataplex.v1.Entry.Builder,
                com.google.cloud.dataplex.v1.EntryOrBuilder>(
                getEntry(), getParentForChildren(), isClean());
        entry_ = null;
      }
      return entryBuilder_;
    }

    private com.google.protobuf.FieldMask updateMask_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.FieldMask,
            com.google.protobuf.FieldMask.Builder,
            com.google.protobuf.FieldMaskOrBuilder>
        updateMaskBuilder_;
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     *
     * @return Whether the updateMask field is set.
     */
    public boolean hasUpdateMask() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     *
     * @return The updateMask.
     */
    public com.google.protobuf.FieldMask getUpdateMask() {
      if (updateMaskBuilder_ == null) {
        return updateMask_ == null
            ? com.google.protobuf.FieldMask.getDefaultInstance()
            : updateMask_;
      } else {
        return updateMaskBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public Builder setUpdateMask(com.google.protobuf.FieldMask value) {
      if (updateMaskBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        updateMask_ = value;
      } else {
        updateMaskBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public Builder setUpdateMask(com.google.protobuf.FieldMask.Builder builderForValue) {
      if (updateMaskBuilder_ == null) {
        updateMask_ = builderForValue.build();
      } else {
        updateMaskBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public Builder mergeUpdateMask(com.google.protobuf.FieldMask value) {
      if (updateMaskBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && updateMask_ != null
            && updateMask_ != com.google.protobuf.FieldMask.getDefaultInstance()) {
          getUpdateMaskBuilder().mergeFrom(value);
        } else {
          updateMask_ = value;
        }
      } else {
        updateMaskBuilder_.mergeFrom(value);
      }
      if (updateMask_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public Builder clearUpdateMask() {
      bitField0_ = (bitField0_ & ~0x00000002);
      updateMask_ = null;
      if (updateMaskBuilder_ != null) {
        updateMaskBuilder_.dispose();
        updateMaskBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public com.google.protobuf.FieldMask.Builder getUpdateMaskBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getUpdateMaskFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public com.google.protobuf.FieldMaskOrBuilder getUpdateMaskOrBuilder() {
      if (updateMaskBuilder_ != null) {
        return updateMaskBuilder_.getMessageOrBuilder();
      } else {
        return updateMask_ == null
            ? com.google.protobuf.FieldMask.getDefaultInstance()
            : updateMask_;
      }
    }
    /**
     *
     *
     * <pre>
     * The fields to update, in paths that are relative to the `Entry` resource.
     * Separate each field with a comma.
     *
     * In `FULL` entry sync mode, Dataplex includes the paths of all of the fields
     * for an entry that can be modified, including aspects. This means that
     * Dataplex replaces the existing entry with the entry in the metadata import
     * file. All modifiable fields are updated, regardless of the fields that are
     * listed in the update mask, and regardless of whether a field is present
     * in the `entry` object.
     *
     * The `update_mask` field is ignored when an entry is created or re-created.
     *
     * In an aspect-only metadata job (when entry sync mode is `NONE`), set this
     * value to `aspects`.
     *
     *
     * Dataplex also determines which entries and aspects to modify by comparing
     * the values and timestamps that you provide in the metadata import file with
     * the values and timestamps that exist in your project. For more information,
     * see [Comparison
     * logic](https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.FieldMask,
            com.google.protobuf.FieldMask.Builder,
            com.google.protobuf.FieldMaskOrBuilder>
        getUpdateMaskFieldBuilder() {
      if (updateMaskBuilder_ == null) {
        updateMaskBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.FieldMask,
                com.google.protobuf.FieldMask.Builder,
                com.google.protobuf.FieldMaskOrBuilder>(
                getUpdateMask(), getParentForChildren(), isClean());
        updateMask_ = null;
      }
      return updateMaskBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList aspectKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();

    private void ensureAspectKeysIsMutable() {
      if (!aspectKeys_.isModifiable()) {
        aspectKeys_ = new com.google.protobuf.LazyStringArrayList(aspectKeys_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @return A list containing the aspectKeys.
     */
    public com.google.protobuf.ProtocolStringList getAspectKeysList() {
      aspectKeys_.makeImmutable();
      return aspectKeys_;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @return The count of aspectKeys.
     */
    public int getAspectKeysCount() {
      return aspectKeys_.size();
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param index The index of the element to return.
     * @return The aspectKeys at the given index.
     */
    public java.lang.String getAspectKeys(int index) {
      return aspectKeys_.get(index);
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the aspectKeys at the given index.
     */
    public com.google.protobuf.ByteString getAspectKeysBytes(int index) {
      return aspectKeys_.getByteString(index);
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param index The index to set the value at.
     * @param value The aspectKeys to set.
     * @return This builder for chaining.
     */
    public Builder setAspectKeys(int index, java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureAspectKeysIsMutable();
      aspectKeys_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param value The aspectKeys to add.
     * @return This builder for chaining.
     */
    public Builder addAspectKeys(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureAspectKeysIsMutable();
      aspectKeys_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param values The aspectKeys to add.
     * @return This builder for chaining.
     */
    public Builder addAllAspectKeys(java.lang.Iterable<java.lang.String> values) {
      ensureAspectKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, aspectKeys_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAspectKeys() {
      aspectKeys_ = com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      ;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The aspects to modify. Supports the following syntaxes:
     *
     * * `{aspect_type_reference}`: matches aspects that belong to the specified
     * aspect type and are attached directly to the entry.
     * * `{aspect_type_reference}&#64;{path}`: matches aspects that belong to the
     * specified aspect type and path.
     * * `{aspect_type_reference}&#64;*` : matches aspects of the given type for all
     * paths.
     * * `*&#64;path` : matches aspects of all types on the given path.
     *
     * Replace `{aspect_type_reference}` with a reference to the aspect type, in
     * the format
     * `{project_id_or_number}.{location_id}.{aspect_type_id}`.
     *
     * In `FULL` entry sync mode, if you leave this field empty, it is treated as
     * specifying exactly those aspects that are present within the specified
     * entry. Dataplex implicitly adds the keys for all of the required aspects of
     * an entry.
     * </pre>
     *
     * <code>repeated string aspect_keys = 3;</code>
     *
     * @param value The bytes of the aspectKeys to add.
     * @return This builder for chaining.
     */
    public Builder addAspectKeysBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      ensureAspectKeysIsMutable();
      aspectKeys_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.dataplex.v1.ImportItem)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.dataplex.v1.ImportItem)
  private static final com.google.cloud.dataplex.v1.ImportItem DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.dataplex.v1.ImportItem();
  }

  public static com.google.cloud.dataplex.v1.ImportItem getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ImportItem> PARSER =
      new com.google.protobuf.AbstractParser<ImportItem>() {
        @java.lang.Override
        public ImportItem parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ImportItem> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ImportItem> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.dataplex.v1.ImportItem getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
