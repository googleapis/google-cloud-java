/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/policytroubleshooter/iam/v3/troubleshooter.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.policytroubleshooter.iam.v3;

/**
 *
 *
 * <pre>
 * Details about how a deny rule in a deny policy affects a principal's ability
 * to use a permission.
 * </pre>
 *
 * Protobuf type {@code google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation}
 */
public final class DenyRuleExplanation extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)
    DenyRuleExplanationOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use DenyRuleExplanation.newBuilder() to construct.
  private DenyRuleExplanation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private DenyRuleExplanation() {
    denyAccessState_ = 0;
    relevance_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new DenyRuleExplanation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
        .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 3:
        return internalGetDeniedPermissions();
      case 5:
        return internalGetExceptionPermissions();
      case 7:
        return internalGetDeniedPrincipals();
      case 9:
        return internalGetExceptionPrincipals();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
        .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.class,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.Builder.class);
  }

  public interface AnnotatedPermissionMatchingOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is denied by the deny
     * rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
     * </code>
     *
     * @return The enum numeric value on the wire for permissionMatchingState.
     */
    int getPermissionMatchingStateValue();
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is denied by the deny
     * rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
     * </code>
     *
     * @return The permissionMatchingState.
     */
    com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
        getPermissionMatchingState();

    /**
     *
     *
     * <pre>
     * The relevance of the permission status to the overall determination for
     * the rule.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The enum numeric value on the wire for relevance.
     */
    int getRelevanceValue();
    /**
     *
     *
     * <pre>
     * The relevance of the permission status to the overall determination for
     * the rule.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The relevance.
     */
    com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance();
  }
  /**
   *
   *
   * <pre>
   * Details about whether the permission in the request is denied by the
   * deny rule.
   * </pre>
   *
   * Protobuf type {@code
   * google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching}
   */
  public static final class AnnotatedPermissionMatching
      extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
      AnnotatedPermissionMatchingOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use AnnotatedPermissionMatching.newBuilder() to construct.
    private AnnotatedPermissionMatching(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private AnnotatedPermissionMatching() {
      permissionMatchingState_ = 0;
      relevance_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new AnnotatedPermissionMatching();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedPermissionMatching_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedPermissionMatching_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching.class,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching.Builder.class);
    }

    public static final int PERMISSION_MATCHING_STATE_FIELD_NUMBER = 1;
    private int permissionMatchingState_ = 0;
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is denied by the deny
     * rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
     * </code>
     *
     * @return The enum numeric value on the wire for permissionMatchingState.
     */
    @java.lang.Override
    public int getPermissionMatchingStateValue() {
      return permissionMatchingState_;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is denied by the deny
     * rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
     * </code>
     *
     * @return The permissionMatchingState.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
        getPermissionMatchingState() {
      com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState result =
          com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState.forNumber(
              permissionMatchingState_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState.UNRECOGNIZED
          : result;
    }

    public static final int RELEVANCE_FIELD_NUMBER = 2;
    private int relevance_ = 0;
    /**
     *
     *
     * <pre>
     * The relevance of the permission status to the overall determination for
     * the rule.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The enum numeric value on the wire for relevance.
     */
    @java.lang.Override
    public int getRelevanceValue() {
      return relevance_;
    }
    /**
     *
     *
     * <pre>
     * The relevance of the permission status to the overall determination for
     * the rule.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The relevance.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
      com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
          com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
          : result;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (permissionMatchingState_
          != com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
              .PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(1, permissionMatchingState_);
      }
      if (relevance_
          != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
              .HEURISTIC_RELEVANCE_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(2, relevance_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (permissionMatchingState_
          != com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
              .PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, permissionMatchingState_);
      }
      if (relevance_
          != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
              .HEURISTIC_RELEVANCE_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, relevance_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching)) {
        return super.equals(obj);
      }
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
          other =
              (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedPermissionMatching)
                  obj;

      if (permissionMatchingState_ != other.permissionMatchingState_) return false;
      if (relevance_ != other.relevance_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PERMISSION_MATCHING_STATE_FIELD_NUMBER;
      hash = (53 * hash) + permissionMatchingState_;
      hash = (37 * hash) + RELEVANCE_FIELD_NUMBER;
      hash = (53 * hash) + relevance_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(
            java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * Details about whether the permission in the request is denied by the
     * deny rule.
     * </pre>
     *
     * Protobuf type {@code
     * google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatchingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedPermissionMatching_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedPermissionMatching_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.class,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.Builder.class);
      }

      // Construct using
      // com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        permissionMatchingState_ = 0;
        relevance_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedPermissionMatching_descriptor;
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching
          getDefaultInstanceForType() {
        return com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching
          build() {
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching
          buildPartial() {
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            result =
                new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching
              result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.permissionMatchingState_ = permissionMatchingState_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.relevance_ = relevance_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching) {
          return mergeFrom(
              (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedPermissionMatching)
                  other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching
              other) {
        if (other
            == com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.getDefaultInstance()) return this;
        if (other.permissionMatchingState_ != 0) {
          setPermissionMatchingStateValue(other.getPermissionMatchingStateValue());
        }
        if (other.relevance_ != 0) {
          setRelevanceValue(other.getRelevanceValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  permissionMatchingState_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
              case 16:
                {
                  relevance_ = input.readEnum();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private int permissionMatchingState_ = 0;
      /**
       *
       *
       * <pre>
       * Indicates whether the permission in the request is denied by the deny
       * rule.
       * </pre>
       *
       * <code>
       * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
       * </code>
       *
       * @return The enum numeric value on the wire for permissionMatchingState.
       */
      @java.lang.Override
      public int getPermissionMatchingStateValue() {
        return permissionMatchingState_;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the permission in the request is denied by the deny
       * rule.
       * </pre>
       *
       * <code>
       * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
       * </code>
       *
       * @param value The enum numeric value on the wire for permissionMatchingState to set.
       * @return This builder for chaining.
       */
      public Builder setPermissionMatchingStateValue(int value) {
        permissionMatchingState_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the permission in the request is denied by the deny
       * rule.
       * </pre>
       *
       * <code>
       * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
       * </code>
       *
       * @return The permissionMatchingState.
       */
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
          getPermissionMatchingState() {
        com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState result =
            com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState.forNumber(
                permissionMatchingState_);
        return result == null
            ? com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
                .UNRECOGNIZED
            : result;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the permission in the request is denied by the deny
       * rule.
       * </pre>
       *
       * <code>
       * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
       * </code>
       *
       * @param value The permissionMatchingState to set.
       * @return This builder for chaining.
       */
      public Builder setPermissionMatchingState(
          com.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        permissionMatchingState_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the permission in the request is denied by the deny
       * rule.
       * </pre>
       *
       * <code>
       * .google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState permission_matching_state = 1;
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearPermissionMatchingState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        permissionMatchingState_ = 0;
        onChanged();
        return this;
      }

      private int relevance_ = 0;
      /**
       *
       *
       * <pre>
       * The relevance of the permission status to the overall determination for
       * the rule.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return The enum numeric value on the wire for relevance.
       */
      @java.lang.Override
      public int getRelevanceValue() {
        return relevance_;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the permission status to the overall determination for
       * the rule.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @param value The enum numeric value on the wire for relevance to set.
       * @return This builder for chaining.
       */
      public Builder setRelevanceValue(int value) {
        relevance_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the permission status to the overall determination for
       * the rule.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return The relevance.
       */
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
        com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
            com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
        return result == null
            ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
            : result;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the permission status to the overall determination for
       * the rule.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @param value The relevance to set.
       * @return This builder for chaining.
       */
      public Builder setRelevance(
          com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        relevance_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the permission status to the overall determination for
       * the rule.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearRelevance() {
        bitField0_ = (bitField0_ & ~0x00000002);
        relevance_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
    }

    // @@protoc_insertion_point(class_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
    private static final com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE =
          new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching();
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AnnotatedPermissionMatching> PARSER =
        new com.google.protobuf.AbstractParser<AnnotatedPermissionMatching>() {
          @java.lang.Override
          public AnnotatedPermissionMatching parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<AnnotatedPermissionMatching> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AnnotatedPermissionMatching> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface AnnotatedDenyPrincipalMatchingOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
     * </code>
     *
     * @return The enum numeric value on the wire for membership.
     */
    int getMembershipValue();
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
     * </code>
     *
     * @return The membership.
     */
    com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState getMembership();

    /**
     *
     *
     * <pre>
     * The relevance of the principal's status to the overall determination for
     * the role binding.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The enum numeric value on the wire for relevance.
     */
    int getRelevanceValue();
    /**
     *
     *
     * <pre>
     * The relevance of the principal's status to the overall determination for
     * the role binding.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The relevance.
     */
    com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance();
  }
  /**
   *
   *
   * <pre>
   * Details about whether the principal in the request is listed as a denied
   * principal in the deny rule, either directly or through membership in a
   * principal set.
   * </pre>
   *
   * Protobuf type {@code
   * google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching}
   */
  public static final class AnnotatedDenyPrincipalMatching
      extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
      AnnotatedDenyPrincipalMatchingOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use AnnotatedDenyPrincipalMatching.newBuilder() to construct.
    private AnnotatedDenyPrincipalMatching(
        com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private AnnotatedDenyPrincipalMatching() {
      membership_ = 0;
      relevance_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new AnnotatedDenyPrincipalMatching();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedDenyPrincipalMatching_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedDenyPrincipalMatching_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching.class,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching.Builder.class);
    }

    public static final int MEMBERSHIP_FIELD_NUMBER = 1;
    private int membership_ = 0;
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
     * </code>
     *
     * @return The enum numeric value on the wire for membership.
     */
    @java.lang.Override
    public int getMembershipValue() {
      return membership_;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
     * </code>
     *
     * @return The membership.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState getMembership() {
      com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState result =
          com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState.forNumber(
              membership_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState.UNRECOGNIZED
          : result;
    }

    public static final int RELEVANCE_FIELD_NUMBER = 2;
    private int relevance_ = 0;
    /**
     *
     *
     * <pre>
     * The relevance of the principal's status to the overall determination for
     * the role binding.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The enum numeric value on the wire for relevance.
     */
    @java.lang.Override
    public int getRelevanceValue() {
      return relevance_;
    }
    /**
     *
     *
     * <pre>
     * The relevance of the principal's status to the overall determination for
     * the role binding.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
     *
     * @return The relevance.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
      com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
          com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
          : result;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (membership_
          != com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState
              .MEMBERSHIP_MATCHING_STATE_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(1, membership_);
      }
      if (relevance_
          != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
              .HEURISTIC_RELEVANCE_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(2, relevance_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (membership_
          != com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState
              .MEMBERSHIP_MATCHING_STATE_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, membership_);
      }
      if (relevance_
          != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
              .HEURISTIC_RELEVANCE_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, relevance_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching)) {
        return super.equals(obj);
      }
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          other =
              (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedDenyPrincipalMatching)
                  obj;

      if (membership_ != other.membership_) return false;
      if (relevance_ != other.relevance_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MEMBERSHIP_FIELD_NUMBER;
      hash = (53 * hash) + membership_;
      hash = (37 * hash) + RELEVANCE_FIELD_NUMBER;
      hash = (53 * hash) + relevance_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(
            java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * Details about whether the principal in the request is listed as a denied
     * principal in the deny rule, either directly or through membership in a
     * principal set.
     * </pre>
     *
     * Protobuf type {@code
     * google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatchingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedDenyPrincipalMatching_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedDenyPrincipalMatching_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.class,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.Builder.class);
      }

      // Construct using
      // com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        membership_ = 0;
        relevance_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_AnnotatedDenyPrincipalMatching_descriptor;
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          getDefaultInstanceForType() {
        return com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          build() {
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          buildPartial() {
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            result =
                new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching
              result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.membership_ = membership_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.relevance_ = relevance_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching) {
          return mergeFrom(
              (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedDenyPrincipalMatching)
                  other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching
              other) {
        if (other
            == com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.getDefaultInstance()) return this;
        if (other.membership_ != 0) {
          setMembershipValue(other.getMembershipValue());
        }
        if (other.relevance_ != 0) {
          setRelevanceValue(other.getRelevanceValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  membership_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
              case 16:
                {
                  relevance_ = input.readEnum();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private int membership_ = 0;
      /**
       *
       *
       * <pre>
       * Indicates whether the principal is listed as a denied principal in the
       * deny rule, either directly or through membership in a principal set.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
       * </code>
       *
       * @return The enum numeric value on the wire for membership.
       */
      @java.lang.Override
      public int getMembershipValue() {
        return membership_;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the principal is listed as a denied principal in the
       * deny rule, either directly or through membership in a principal set.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
       * </code>
       *
       * @param value The enum numeric value on the wire for membership to set.
       * @return This builder for chaining.
       */
      public Builder setMembershipValue(int value) {
        membership_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the principal is listed as a denied principal in the
       * deny rule, either directly or through membership in a principal set.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
       * </code>
       *
       * @return The membership.
       */
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState getMembership() {
        com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState result =
            com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState.forNumber(
                membership_);
        return result == null
            ? com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState.UNRECOGNIZED
            : result;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the principal is listed as a denied principal in the
       * deny rule, either directly or through membership in a principal set.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
       * </code>
       *
       * @param value The membership to set.
       * @return This builder for chaining.
       */
      public Builder setMembership(
          com.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        membership_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * Indicates whether the principal is listed as a denied principal in the
       * deny rule, either directly or through membership in a principal set.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState membership = 1;
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearMembership() {
        bitField0_ = (bitField0_ & ~0x00000001);
        membership_ = 0;
        onChanged();
        return this;
      }

      private int relevance_ = 0;
      /**
       *
       *
       * <pre>
       * The relevance of the principal's status to the overall determination for
       * the role binding.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return The enum numeric value on the wire for relevance.
       */
      @java.lang.Override
      public int getRelevanceValue() {
        return relevance_;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the principal's status to the overall determination for
       * the role binding.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @param value The enum numeric value on the wire for relevance to set.
       * @return This builder for chaining.
       */
      public Builder setRelevanceValue(int value) {
        relevance_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the principal's status to the overall determination for
       * the role binding.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return The relevance.
       */
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
        com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
            com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
        return result == null
            ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
            : result;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the principal's status to the overall determination for
       * the role binding.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @param value The relevance to set.
       * @return This builder for chaining.
       */
      public Builder setRelevance(
          com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        relevance_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The relevance of the principal's status to the overall determination for
       * the role binding.
       * </pre>
       *
       * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearRelevance() {
        bitField0_ = (bitField0_ & ~0x00000002);
        relevance_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
    }

    // @@protoc_insertion_point(class_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
    private static final com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE =
          new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching();
    }

    public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AnnotatedDenyPrincipalMatching> PARSER =
        new com.google.protobuf.AbstractParser<AnnotatedDenyPrincipalMatching>() {
          @java.lang.Override
          public AnnotatedDenyPrincipalMatching parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<AnnotatedDenyPrincipalMatching> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AnnotatedDenyPrincipalMatching> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int bitField0_;
  public static final int DENY_ACCESS_STATE_FIELD_NUMBER = 1;
  private int denyAccessState_ = 0;
  /**
   *
   *
   * <pre>
   * Required. Indicates whether _this rule_ denies the specified permission to
   * the specified principal for the specified resource.
   *
   * This field does _not_ indicate whether the principal is actually denied on
   * the permission for the resource. There might be another rule that overrides
   * this rule. To determine whether the principal actually has the permission,
   * use the `overall_access_state` field in the
   * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The enum numeric value on the wire for denyAccessState.
   */
  @java.lang.Override
  public int getDenyAccessStateValue() {
    return denyAccessState_;
  }
  /**
   *
   *
   * <pre>
   * Required. Indicates whether _this rule_ denies the specified permission to
   * the specified principal for the specified resource.
   *
   * This field does _not_ indicate whether the principal is actually denied on
   * the permission for the resource. There might be another rule that overrides
   * this rule. To determine whether the principal actually has the permission,
   * use the `overall_access_state` field in the
   * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The denyAccessState.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState getDenyAccessState() {
    com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState result =
        com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState.forNumber(denyAccessState_);
    return result == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState.UNRECOGNIZED
        : result;
  }

  public static final int COMBINED_DENIED_PERMISSION_FIELD_NUMBER = 2;
  private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      combinedDeniedPermission_;
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as a denied
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
   * </code>
   *
   * @return Whether the combinedDeniedPermission field is set.
   */
  @java.lang.Override
  public boolean hasCombinedDeniedPermission() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as a denied
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
   * </code>
   *
   * @return The combinedDeniedPermission.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getCombinedDeniedPermission() {
    return combinedDeniedPermission_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.getDefaultInstance()
        : combinedDeniedPermission_;
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as a denied
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatchingOrBuilder
      getCombinedDeniedPermissionOrBuilder() {
    return combinedDeniedPermission_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.getDefaultInstance()
        : combinedDeniedPermission_;
  }

  public static final int DENIED_PERMISSIONS_FIELD_NUMBER = 3;

  private static final class DeniedPermissionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String,
                    com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedPermissionMatching>
                    newDefaultInstance(
                        com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
                            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_DeniedPermissionsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedPermissionMatching.getDefaultInstance());
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      deniedPermissions_;

  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      internalGetDeniedPermissions() {
    if (deniedPermissions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DeniedPermissionsDefaultEntryHolder.defaultEntry);
    }
    return deniedPermissions_;
  }

  public int getDeniedPermissionsCount() {
    return internalGetDeniedPermissions().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a denied permission in the rule, and each value
   * indicates whether the denied permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
   * </code>
   */
  @java.lang.Override
  public boolean containsDeniedPermissions(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetDeniedPermissions().getMap().containsKey(key);
  }
  /** Use {@link #getDeniedPermissionsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      getDeniedPermissions() {
    return getDeniedPermissionsMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a denied permission in the rule, and each value
   * indicates whether the denied permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
   * </code>
   */
  @java.lang.Override
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      getDeniedPermissionsMap() {
    return internalGetDeniedPermissions().getMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a denied permission in the rule, and each value
   * indicates whether the denied permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
   * </code>
   */
  @java.lang.Override
  public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getDeniedPermissionsOrDefault(
          java.lang.String key,
          /* nullable */
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching
              defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        map = internalGetDeniedPermissions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Lists all denied permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a denied permission in the rule, and each value
   * indicates whether the denied permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getDeniedPermissionsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        map = internalGetDeniedPermissions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int COMBINED_EXCEPTION_PERMISSION_FIELD_NUMBER = 4;
  private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      combinedExceptionPermission_;
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as an exception
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
   * </code>
   *
   * @return Whether the combinedExceptionPermission field is set.
   */
  @java.lang.Override
  public boolean hasCombinedExceptionPermission() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as an exception
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
   * </code>
   *
   * @return The combinedExceptionPermission.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getCombinedExceptionPermission() {
    return combinedExceptionPermission_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.getDefaultInstance()
        : combinedExceptionPermission_;
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the permission in the request is listed as an exception
   * permission in the deny rule.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatchingOrBuilder
      getCombinedExceptionPermissionOrBuilder() {
    return combinedExceptionPermission_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.getDefaultInstance()
        : combinedExceptionPermission_;
  }

  public static final int EXCEPTION_PERMISSIONS_FIELD_NUMBER = 5;

  private static final class ExceptionPermissionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String,
                    com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedPermissionMatching>
                    newDefaultInstance(
                        com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
                            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_ExceptionPermissionsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedPermissionMatching.getDefaultInstance());
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      exceptionPermissions_;

  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      internalGetExceptionPermissions() {
    if (exceptionPermissions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ExceptionPermissionsDefaultEntryHolder.defaultEntry);
    }
    return exceptionPermissions_;
  }

  public int getExceptionPermissionsCount() {
    return internalGetExceptionPermissions().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a exception permission in the rule, and each value
   * indicates whether the exception permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
   * </code>
   */
  @java.lang.Override
  public boolean containsExceptionPermissions(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetExceptionPermissions().getMap().containsKey(key);
  }
  /** Use {@link #getExceptionPermissionsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      getExceptionPermissions() {
    return getExceptionPermissionsMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a exception permission in the rule, and each value
   * indicates whether the exception permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
   * </code>
   */
  @java.lang.Override
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching>
      getExceptionPermissionsMap() {
    return internalGetExceptionPermissions().getMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a exception permission in the rule, and each value
   * indicates whether the exception permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
   * </code>
   */
  @java.lang.Override
  public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getExceptionPermissionsOrDefault(
          java.lang.String key,
          /* nullable */
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching
              defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        map = internalGetExceptionPermissions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Lists all exception permissions in the deny rule and indicates whether each
   * permission matches the permission in the request.
   *
   * Each key identifies a exception permission in the rule, and each value
   * indicates whether the exception permission matches the permission in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedPermissionMatching
      getExceptionPermissionsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        map = internalGetExceptionPermissions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int COMBINED_DENIED_PRINCIPAL_FIELD_NUMBER = 6;
  private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      combinedDeniedPrincipal_;
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as a denied principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
   * </code>
   *
   * @return Whether the combinedDeniedPrincipal field is set.
   */
  @java.lang.Override
  public boolean hasCombinedDeniedPrincipal() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as a denied principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
   * </code>
   *
   * @return The combinedDeniedPrincipal.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getCombinedDeniedPrincipal() {
    return combinedDeniedPrincipal_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.getDefaultInstance()
        : combinedDeniedPrincipal_;
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as a denied principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatchingOrBuilder
      getCombinedDeniedPrincipalOrBuilder() {
    return combinedDeniedPrincipal_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.getDefaultInstance()
        : combinedDeniedPrincipal_;
  }

  public static final int DENIED_PRINCIPALS_FIELD_NUMBER = 7;

  private static final class DeniedPrincipalsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String,
                    com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedDenyPrincipalMatching>
                    newDefaultInstance(
                        com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
                            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_DeniedPrincipalsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedDenyPrincipalMatching.getDefaultInstance());
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      deniedPrincipals_;

  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      internalGetDeniedPrincipals() {
    if (deniedPrincipals_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DeniedPrincipalsDefaultEntryHolder.defaultEntry);
    }
    return deniedPrincipals_;
  }

  public int getDeniedPrincipalsCount() {
    return internalGetDeniedPrincipals().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a denied principal in the rule, and each value
   * indicates whether the denied principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
   * </code>
   */
  @java.lang.Override
  public boolean containsDeniedPrincipals(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetDeniedPrincipals().getMap().containsKey(key);
  }
  /** Use {@link #getDeniedPrincipalsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      getDeniedPrincipals() {
    return getDeniedPrincipalsMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a denied principal in the rule, and each value
   * indicates whether the denied principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
   * </code>
   */
  @java.lang.Override
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      getDeniedPrincipalsMap() {
    return internalGetDeniedPrincipals().getMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all denied principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a denied principal in the rule, and each value
   * indicates whether the denied principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
   * </code>
   */
  @java.lang.Override
  public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getDeniedPrincipalsOrDefault(
          java.lang.String key,
          /* nullable */
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching
              defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        map = internalGetDeniedPrincipals().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Lists all denied principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a denied principal in the rule, and each value
   * indicates whether the denied principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getDeniedPrincipalsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        map = internalGetDeniedPrincipals().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int COMBINED_EXCEPTION_PRINCIPAL_FIELD_NUMBER = 8;
  private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      combinedExceptionPrincipal_;
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as an exception principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
   * </code>
   *
   * @return Whether the combinedExceptionPrincipal field is set.
   */
  @java.lang.Override
  public boolean hasCombinedExceptionPrincipal() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as an exception principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
   * </code>
   *
   * @return The combinedExceptionPrincipal.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getCombinedExceptionPrincipal() {
    return combinedExceptionPrincipal_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.getDefaultInstance()
        : combinedExceptionPrincipal_;
  }
  /**
   *
   *
   * <pre>
   * Indicates whether the principal is listed as an exception principal in the
   * deny rule, either directly or through membership in a principal set.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatchingOrBuilder
      getCombinedExceptionPrincipalOrBuilder() {
    return combinedExceptionPrincipal_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.getDefaultInstance()
        : combinedExceptionPrincipal_;
  }

  public static final int EXCEPTION_PRINCIPALS_FIELD_NUMBER = 9;

  private static final class ExceptionPrincipalsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String,
                    com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedDenyPrincipalMatching>
                    newDefaultInstance(
                        com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
                            .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_ExceptionPrincipalsEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.STRING,
                        "",
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedDenyPrincipalMatching.getDefaultInstance());
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      exceptionPrincipals_;

  private com.google.protobuf.MapField<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      internalGetExceptionPrincipals() {
    if (exceptionPrincipals_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ExceptionPrincipalsDefaultEntryHolder.defaultEntry);
    }
    return exceptionPrincipals_;
  }

  public int getExceptionPrincipalsCount() {
    return internalGetExceptionPrincipals().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a exception principal in the rule, and each value
   * indicates whether the exception principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
   * </code>
   */
  @java.lang.Override
  public boolean containsExceptionPrincipals(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetExceptionPrincipals().getMap().containsKey(key);
  }
  /** Use {@link #getExceptionPrincipalsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      getExceptionPrincipals() {
    return getExceptionPrincipalsMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a exception principal in the rule, and each value
   * indicates whether the exception principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
   * </code>
   */
  @java.lang.Override
  public java.util.Map<
          java.lang.String,
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching>
      getExceptionPrincipalsMap() {
    return internalGetExceptionPrincipals().getMap();
  }
  /**
   *
   *
   * <pre>
   * Lists all exception principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a exception principal in the rule, and each value
   * indicates whether the exception principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
   * </code>
   */
  @java.lang.Override
  public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getExceptionPrincipalsOrDefault(
          java.lang.String key,
          /* nullable */
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching
              defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        map = internalGetExceptionPrincipals().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Lists all exception principals in the deny rule and indicates whether each
   * principal matches the principal in the request, either directly or through
   * membership in a principal set.
   *
   * Each key identifies a exception principal in the rule, and each value
   * indicates whether the exception principal matches the principal in the
   * request.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
          .AnnotatedDenyPrincipalMatching
      getExceptionPrincipalsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        map = internalGetExceptionPrincipals().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RELEVANCE_FIELD_NUMBER = 10;
  private int relevance_ = 0;
  /**
   *
   *
   * <pre>
   * The relevance of this role binding to the overall determination for the
   * entire policy.
   * </pre>
   *
   * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
   *
   * @return The enum numeric value on the wire for relevance.
   */
  @java.lang.Override
  public int getRelevanceValue() {
    return relevance_;
  }
  /**
   *
   *
   * <pre>
   * The relevance of this role binding to the overall determination for the
   * entire policy.
   * </pre>
   *
   * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
   *
   * @return The relevance.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
    com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
        com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
    return result == null
        ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
        : result;
  }

  public static final int CONDITION_FIELD_NUMBER = 11;
  private com.google.type.Expr condition_;
  /**
   *
   *
   * <pre>
   * A condition expression that specifies when the deny rule denies the
   * principal access.
   *
   * To learn about IAM Conditions, see
   * https://cloud.google.com/iam/help/conditions/overview.
   * </pre>
   *
   * <code>.google.type.Expr condition = 11;</code>
   *
   * @return Whether the condition field is set.
   */
  @java.lang.Override
  public boolean hasCondition() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   *
   *
   * <pre>
   * A condition expression that specifies when the deny rule denies the
   * principal access.
   *
   * To learn about IAM Conditions, see
   * https://cloud.google.com/iam/help/conditions/overview.
   * </pre>
   *
   * <code>.google.type.Expr condition = 11;</code>
   *
   * @return The condition.
   */
  @java.lang.Override
  public com.google.type.Expr getCondition() {
    return condition_ == null ? com.google.type.Expr.getDefaultInstance() : condition_;
  }
  /**
   *
   *
   * <pre>
   * A condition expression that specifies when the deny rule denies the
   * principal access.
   *
   * To learn about IAM Conditions, see
   * https://cloud.google.com/iam/help/conditions/overview.
   * </pre>
   *
   * <code>.google.type.Expr condition = 11;</code>
   */
  @java.lang.Override
  public com.google.type.ExprOrBuilder getConditionOrBuilder() {
    return condition_ == null ? com.google.type.Expr.getDefaultInstance() : condition_;
  }

  public static final int CONDITION_EXPLANATION_FIELD_NUMBER = 12;
  private com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation conditionExplanation_;
  /**
   *
   *
   * <pre>
   * Condition evaluation state for this role binding.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
   * </code>
   *
   * @return Whether the conditionExplanation field is set.
   */
  @java.lang.Override
  public boolean hasConditionExplanation() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   *
   *
   * <pre>
   * Condition evaluation state for this role binding.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
   * </code>
   *
   * @return The conditionExplanation.
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
      getConditionExplanation() {
    return conditionExplanation_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.getDefaultInstance()
        : conditionExplanation_;
  }
  /**
   *
   *
   * <pre>
   * Condition evaluation state for this role binding.
   * </pre>
   *
   * <code>
   * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanationOrBuilder
      getConditionExplanationOrBuilder() {
    return conditionExplanation_ == null
        ? com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.getDefaultInstance()
        : conditionExplanation_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (denyAccessState_
        != com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState
            .DENY_ACCESS_STATE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(1, denyAccessState_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getCombinedDeniedPermission());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output,
        internalGetDeniedPermissions(),
        DeniedPermissionsDefaultEntryHolder.defaultEntry,
        3);
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getCombinedExceptionPermission());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output,
        internalGetExceptionPermissions(),
        ExceptionPermissionsDefaultEntryHolder.defaultEntry,
        5);
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(6, getCombinedDeniedPrincipal());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetDeniedPrincipals(), DeniedPrincipalsDefaultEntryHolder.defaultEntry, 7);
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(8, getCombinedExceptionPrincipal());
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output,
        internalGetExceptionPrincipals(),
        ExceptionPrincipalsDefaultEntryHolder.defaultEntry,
        9);
    if (relevance_
        != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
            .HEURISTIC_RELEVANCE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(10, relevance_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(11, getCondition());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeMessage(12, getConditionExplanation());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (denyAccessState_
        != com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState
            .DENY_ACCESS_STATE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, denyAccessState_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, getCombinedDeniedPermission());
    }
    for (java.util.Map.Entry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        entry : internalGetDeniedPermissions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          deniedPermissions__ =
              DeniedPermissionsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, deniedPermissions__);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              4, getCombinedExceptionPermission());
    }
    for (java.util.Map.Entry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        entry : internalGetExceptionPermissions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          exceptionPermissions__ =
              ExceptionPermissionsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, exceptionPermissions__);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(6, getCombinedDeniedPrincipal());
    }
    for (java.util.Map.Entry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        entry : internalGetDeniedPrincipals().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          deniedPrincipals__ =
              DeniedPrincipalsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, deniedPrincipals__);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              8, getCombinedExceptionPrincipal());
    }
    for (java.util.Map.Entry<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        entry : internalGetExceptionPrincipals().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          exceptionPrincipals__ =
              ExceptionPrincipalsDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(9, exceptionPrincipals__);
    }
    if (relevance_
        != com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
            .HEURISTIC_RELEVANCE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(10, relevance_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(11, getCondition());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(12, getConditionExplanation());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)) {
      return super.equals(obj);
    }
    com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation other =
        (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation) obj;

    if (denyAccessState_ != other.denyAccessState_) return false;
    if (hasCombinedDeniedPermission() != other.hasCombinedDeniedPermission()) return false;
    if (hasCombinedDeniedPermission()) {
      if (!getCombinedDeniedPermission().equals(other.getCombinedDeniedPermission())) return false;
    }
    if (!internalGetDeniedPermissions().equals(other.internalGetDeniedPermissions())) return false;
    if (hasCombinedExceptionPermission() != other.hasCombinedExceptionPermission()) return false;
    if (hasCombinedExceptionPermission()) {
      if (!getCombinedExceptionPermission().equals(other.getCombinedExceptionPermission()))
        return false;
    }
    if (!internalGetExceptionPermissions().equals(other.internalGetExceptionPermissions()))
      return false;
    if (hasCombinedDeniedPrincipal() != other.hasCombinedDeniedPrincipal()) return false;
    if (hasCombinedDeniedPrincipal()) {
      if (!getCombinedDeniedPrincipal().equals(other.getCombinedDeniedPrincipal())) return false;
    }
    if (!internalGetDeniedPrincipals().equals(other.internalGetDeniedPrincipals())) return false;
    if (hasCombinedExceptionPrincipal() != other.hasCombinedExceptionPrincipal()) return false;
    if (hasCombinedExceptionPrincipal()) {
      if (!getCombinedExceptionPrincipal().equals(other.getCombinedExceptionPrincipal()))
        return false;
    }
    if (!internalGetExceptionPrincipals().equals(other.internalGetExceptionPrincipals()))
      return false;
    if (relevance_ != other.relevance_) return false;
    if (hasCondition() != other.hasCondition()) return false;
    if (hasCondition()) {
      if (!getCondition().equals(other.getCondition())) return false;
    }
    if (hasConditionExplanation() != other.hasConditionExplanation()) return false;
    if (hasConditionExplanation()) {
      if (!getConditionExplanation().equals(other.getConditionExplanation())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DENY_ACCESS_STATE_FIELD_NUMBER;
    hash = (53 * hash) + denyAccessState_;
    if (hasCombinedDeniedPermission()) {
      hash = (37 * hash) + COMBINED_DENIED_PERMISSION_FIELD_NUMBER;
      hash = (53 * hash) + getCombinedDeniedPermission().hashCode();
    }
    if (!internalGetDeniedPermissions().getMap().isEmpty()) {
      hash = (37 * hash) + DENIED_PERMISSIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDeniedPermissions().hashCode();
    }
    if (hasCombinedExceptionPermission()) {
      hash = (37 * hash) + COMBINED_EXCEPTION_PERMISSION_FIELD_NUMBER;
      hash = (53 * hash) + getCombinedExceptionPermission().hashCode();
    }
    if (!internalGetExceptionPermissions().getMap().isEmpty()) {
      hash = (37 * hash) + EXCEPTION_PERMISSIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetExceptionPermissions().hashCode();
    }
    if (hasCombinedDeniedPrincipal()) {
      hash = (37 * hash) + COMBINED_DENIED_PRINCIPAL_FIELD_NUMBER;
      hash = (53 * hash) + getCombinedDeniedPrincipal().hashCode();
    }
    if (!internalGetDeniedPrincipals().getMap().isEmpty()) {
      hash = (37 * hash) + DENIED_PRINCIPALS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDeniedPrincipals().hashCode();
    }
    if (hasCombinedExceptionPrincipal()) {
      hash = (37 * hash) + COMBINED_EXCEPTION_PRINCIPAL_FIELD_NUMBER;
      hash = (53 * hash) + getCombinedExceptionPrincipal().hashCode();
    }
    if (!internalGetExceptionPrincipals().getMap().isEmpty()) {
      hash = (37 * hash) + EXCEPTION_PRINCIPALS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetExceptionPrincipals().hashCode();
    }
    hash = (37 * hash) + RELEVANCE_FIELD_NUMBER;
    hash = (53 * hash) + relevance_;
    if (hasCondition()) {
      hash = (37 * hash) + CONDITION_FIELD_NUMBER;
      hash = (53 * hash) + getCondition().hashCode();
    }
    if (hasConditionExplanation()) {
      hash = (37 * hash) + CONDITION_EXPLANATION_FIELD_NUMBER;
      hash = (53 * hash) + getConditionExplanation().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Details about how a deny rule in a deny policy affects a principal's ability
   * to use a permission.
   * </pre>
   *
   * Protobuf type {@code google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetDeniedPermissions();
        case 5:
          return internalGetExceptionPermissions();
        case 7:
          return internalGetDeniedPrincipals();
        case 9:
          return internalGetExceptionPrincipals();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableDeniedPermissions();
        case 5:
          return internalGetMutableExceptionPermissions();
        case 7:
          return internalGetMutableDeniedPrincipals();
        case 9:
          return internalGetMutableExceptionPrincipals();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.class,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.Builder.class);
    }

    // Construct using com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getCombinedDeniedPermissionFieldBuilder();
        getCombinedExceptionPermissionFieldBuilder();
        getCombinedDeniedPrincipalFieldBuilder();
        getCombinedExceptionPrincipalFieldBuilder();
        getConditionFieldBuilder();
        getConditionExplanationFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      denyAccessState_ = 0;
      combinedDeniedPermission_ = null;
      if (combinedDeniedPermissionBuilder_ != null) {
        combinedDeniedPermissionBuilder_.dispose();
        combinedDeniedPermissionBuilder_ = null;
      }
      internalGetMutableDeniedPermissions().clear();
      combinedExceptionPermission_ = null;
      if (combinedExceptionPermissionBuilder_ != null) {
        combinedExceptionPermissionBuilder_.dispose();
        combinedExceptionPermissionBuilder_ = null;
      }
      internalGetMutableExceptionPermissions().clear();
      combinedDeniedPrincipal_ = null;
      if (combinedDeniedPrincipalBuilder_ != null) {
        combinedDeniedPrincipalBuilder_.dispose();
        combinedDeniedPrincipalBuilder_ = null;
      }
      internalGetMutableDeniedPrincipals().clear();
      combinedExceptionPrincipal_ = null;
      if (combinedExceptionPrincipalBuilder_ != null) {
        combinedExceptionPrincipalBuilder_.dispose();
        combinedExceptionPrincipalBuilder_ = null;
      }
      internalGetMutableExceptionPrincipals().clear();
      relevance_ = 0;
      condition_ = null;
      if (conditionBuilder_ != null) {
        conditionBuilder_.dispose();
        conditionBuilder_ = null;
      }
      conditionExplanation_ = null;
      if (conditionExplanationBuilder_ != null) {
        conditionExplanationBuilder_.dispose();
        conditionExplanationBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.policytroubleshooter.iam.v3.TroubleshooterProto
          .internal_static_google_cloud_policytroubleshooter_iam_v3_DenyRuleExplanation_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
        getDefaultInstanceForType() {
      return com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation build() {
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation buildPartial() {
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation result =
          new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.denyAccessState_ = denyAccessState_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.combinedDeniedPermission_ =
            combinedDeniedPermissionBuilder_ == null
                ? combinedDeniedPermission_
                : combinedDeniedPermissionBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.deniedPermissions_ =
            internalGetDeniedPermissions().build(DeniedPermissionsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.combinedExceptionPermission_ =
            combinedExceptionPermissionBuilder_ == null
                ? combinedExceptionPermission_
                : combinedExceptionPermissionBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.exceptionPermissions_ =
            internalGetExceptionPermissions()
                .build(ExceptionPermissionsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.combinedDeniedPrincipal_ =
            combinedDeniedPrincipalBuilder_ == null
                ? combinedDeniedPrincipal_
                : combinedDeniedPrincipalBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.deniedPrincipals_ =
            internalGetDeniedPrincipals().build(DeniedPrincipalsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.combinedExceptionPrincipal_ =
            combinedExceptionPrincipalBuilder_ == null
                ? combinedExceptionPrincipal_
                : combinedExceptionPrincipalBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.exceptionPrincipals_ =
            internalGetExceptionPrincipals()
                .build(ExceptionPrincipalsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.relevance_ = relevance_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.condition_ = conditionBuilder_ == null ? condition_ : conditionBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.conditionExplanation_ =
            conditionExplanationBuilder_ == null
                ? conditionExplanation_
                : conditionExplanationBuilder_.build();
        to_bitField0_ |= 0x00000020;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation) {
        return mergeFrom((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation other) {
      if (other
          == com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.getDefaultInstance())
        return this;
      if (other.denyAccessState_ != 0) {
        setDenyAccessStateValue(other.getDenyAccessStateValue());
      }
      if (other.hasCombinedDeniedPermission()) {
        mergeCombinedDeniedPermission(other.getCombinedDeniedPermission());
      }
      internalGetMutableDeniedPermissions().mergeFrom(other.internalGetDeniedPermissions());
      bitField0_ |= 0x00000004;
      if (other.hasCombinedExceptionPermission()) {
        mergeCombinedExceptionPermission(other.getCombinedExceptionPermission());
      }
      internalGetMutableExceptionPermissions().mergeFrom(other.internalGetExceptionPermissions());
      bitField0_ |= 0x00000010;
      if (other.hasCombinedDeniedPrincipal()) {
        mergeCombinedDeniedPrincipal(other.getCombinedDeniedPrincipal());
      }
      internalGetMutableDeniedPrincipals().mergeFrom(other.internalGetDeniedPrincipals());
      bitField0_ |= 0x00000040;
      if (other.hasCombinedExceptionPrincipal()) {
        mergeCombinedExceptionPrincipal(other.getCombinedExceptionPrincipal());
      }
      internalGetMutableExceptionPrincipals().mergeFrom(other.internalGetExceptionPrincipals());
      bitField0_ |= 0x00000100;
      if (other.relevance_ != 0) {
        setRelevanceValue(other.getRelevanceValue());
      }
      if (other.hasCondition()) {
        mergeCondition(other.getCondition());
      }
      if (other.hasConditionExplanation()) {
        mergeConditionExplanation(other.getConditionExplanation());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                denyAccessState_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 18:
              {
                input.readMessage(
                    getCombinedDeniedPermissionFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedPermissionMatching>
                    deniedPermissions__ =
                        input.readMessage(
                            DeniedPermissionsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableDeniedPermissions()
                    .ensureBuilderMap()
                    .put(deniedPermissions__.getKey(), deniedPermissions__.getValue());
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(
                    getCombinedExceptionPermissionFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedPermissionMatching>
                    exceptionPermissions__ =
                        input.readMessage(
                            ExceptionPermissionsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableExceptionPermissions()
                    .ensureBuilderMap()
                    .put(exceptionPermissions__.getKey(), exceptionPermissions__.getValue());
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(
                    getCombinedDeniedPrincipalFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            case 58:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedDenyPrincipalMatching>
                    deniedPrincipals__ =
                        input.readMessage(
                            DeniedPrincipalsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableDeniedPrincipals()
                    .ensureBuilderMap()
                    .put(deniedPrincipals__.getKey(), deniedPrincipals__.getValue());
                bitField0_ |= 0x00000040;
                break;
              } // case 58
            case 66:
              {
                input.readMessage(
                    getCombinedExceptionPrincipalFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
            case 74:
              {
                com.google.protobuf.MapEntry<
                        java.lang.String,
                        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                            .AnnotatedDenyPrincipalMatching>
                    exceptionPrincipals__ =
                        input.readMessage(
                            ExceptionPrincipalsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableExceptionPrincipals()
                    .ensureBuilderMap()
                    .put(exceptionPrincipals__.getKey(), exceptionPrincipals__.getValue());
                bitField0_ |= 0x00000100;
                break;
              } // case 74
            case 80:
              {
                relevance_ = input.readEnum();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
            case 90:
              {
                input.readMessage(getConditionFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000400;
                break;
              } // case 90
            case 98:
              {
                input.readMessage(
                    getConditionExplanationFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000800;
                break;
              } // case 98
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private int denyAccessState_ = 0;
    /**
     *
     *
     * <pre>
     * Required. Indicates whether _this rule_ denies the specified permission to
     * the specified principal for the specified resource.
     *
     * This field does _not_ indicate whether the principal is actually denied on
     * the permission for the resource. There might be another rule that overrides
     * this rule. To determine whether the principal actually has the permission,
     * use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for denyAccessState.
     */
    @java.lang.Override
    public int getDenyAccessStateValue() {
      return denyAccessState_;
    }
    /**
     *
     *
     * <pre>
     * Required. Indicates whether _this rule_ denies the specified permission to
     * the specified principal for the specified resource.
     *
     * This field does _not_ indicate whether the principal is actually denied on
     * the permission for the resource. There might be another rule that overrides
     * this rule. To determine whether the principal actually has the permission,
     * use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for denyAccessState to set.
     * @return This builder for chaining.
     */
    public Builder setDenyAccessStateValue(int value) {
      denyAccessState_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Indicates whether _this rule_ denies the specified permission to
     * the specified principal for the specified resource.
     *
     * This field does _not_ indicate whether the principal is actually denied on
     * the permission for the resource. There might be another rule that overrides
     * this rule. To determine whether the principal actually has the permission,
     * use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The denyAccessState.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState getDenyAccessState() {
      com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState result =
          com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState.forNumber(denyAccessState_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Required. Indicates whether _this rule_ denies the specified permission to
     * the specified principal for the specified resource.
     *
     * This field does _not_ indicate whether the principal is actually denied on
     * the permission for the resource. There might be another rule that overrides
     * this rule. To determine whether the principal actually has the permission,
     * use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The denyAccessState to set.
     * @return This builder for chaining.
     */
    public Builder setDenyAccessState(
        com.google.cloud.policytroubleshooter.iam.v3.DenyAccessState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      denyAccessState_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Indicates whether _this rule_ denies the specified permission to
     * the specified principal for the specified resource.
     *
     * This field does _not_ indicate whether the principal is actually denied on
     * the permission for the resource. There might be another rule that overrides
     * this rule. To determine whether the principal actually has the permission,
     * use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyAccessState deny_access_state = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDenyAccessState() {
      bitField0_ = (bitField0_ & ~0x00000001);
      denyAccessState_ = 0;
      onChanged();
      return this;
    }

    private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        combinedDeniedPermission_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder>
        combinedDeniedPermissionBuilder_;
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     *
     * @return Whether the combinedDeniedPermission field is set.
     */
    public boolean hasCombinedDeniedPermission() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     *
     * @return The combinedDeniedPermission.
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getCombinedDeniedPermission() {
      if (combinedDeniedPermissionBuilder_ == null) {
        return combinedDeniedPermission_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.getDefaultInstance()
            : combinedDeniedPermission_;
      } else {
        return combinedDeniedPermissionBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public Builder setCombinedDeniedPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (combinedDeniedPermissionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        combinedDeniedPermission_ = value;
      } else {
        combinedDeniedPermissionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public Builder setCombinedDeniedPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                .Builder
            builderForValue) {
      if (combinedDeniedPermissionBuilder_ == null) {
        combinedDeniedPermission_ = builderForValue.build();
      } else {
        combinedDeniedPermissionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public Builder mergeCombinedDeniedPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (combinedDeniedPermissionBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && combinedDeniedPermission_ != null
            && combinedDeniedPermission_
                != com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.getDefaultInstance()) {
          getCombinedDeniedPermissionBuilder().mergeFrom(value);
        } else {
          combinedDeniedPermission_ = value;
        }
      } else {
        combinedDeniedPermissionBuilder_.mergeFrom(value);
      }
      if (combinedDeniedPermission_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public Builder clearCombinedDeniedPermission() {
      bitField0_ = (bitField0_ & ~0x00000002);
      combinedDeniedPermission_ = null;
      if (combinedDeniedPermissionBuilder_ != null) {
        combinedDeniedPermissionBuilder_.dispose();
        combinedDeniedPermissionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.Builder
        getCombinedDeniedPermissionBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getCombinedDeniedPermissionFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatchingOrBuilder
        getCombinedDeniedPermissionOrBuilder() {
      if (combinedDeniedPermissionBuilder_ != null) {
        return combinedDeniedPermissionBuilder_.getMessageOrBuilder();
      } else {
        return combinedDeniedPermission_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.getDefaultInstance()
            : combinedDeniedPermission_;
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as a denied
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_denied_permission = 2;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder>
        getCombinedDeniedPermissionFieldBuilder() {
      if (combinedDeniedPermissionBuilder_ == null) {
        combinedDeniedPermissionBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.Builder,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatchingOrBuilder>(
                getCombinedDeniedPermission(), getParentForChildren(), isClean());
        combinedDeniedPermission_ = null;
      }
      return combinedDeniedPermissionBuilder_;
    }

    private static final class DeniedPermissionsConverter
        implements com.google.protobuf.MapFieldBuilder.Converter<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching> {
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching
          build(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedPermissionMatchingOrBuilder
                  val) {
        if (val
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching) {
          return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching)
              val;
        }
        return ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.Builder)
                val)
            .build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          defaultEntry() {
        return DeniedPermissionsDefaultEntryHolder.defaultEntry;
      }
    };

    private static final DeniedPermissionsConverter deniedPermissionsConverter =
        new DeniedPermissionsConverter();

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        deniedPermissions_;

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        internalGetDeniedPermissions() {
      if (deniedPermissions_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(deniedPermissionsConverter);
      }
      return deniedPermissions_;
    }

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        internalGetMutableDeniedPermissions() {
      if (deniedPermissions_ == null) {
        deniedPermissions_ = new com.google.protobuf.MapFieldBuilder<>(deniedPermissionsConverter);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return deniedPermissions_;
    }

    public int getDeniedPermissionsCount() {
      return internalGetDeniedPermissions().ensureBuilderMap().size();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    @java.lang.Override
    public boolean containsDeniedPermissions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetDeniedPermissions().ensureBuilderMap().containsKey(key);
    }
    /** Use {@link #getDeniedPermissionsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getDeniedPermissions() {
      return getDeniedPermissionsMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    @java.lang.Override
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getDeniedPermissionsMap() {
      return internalGetDeniedPermissions().getImmutableMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    @java.lang.Override
    public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getDeniedPermissionsOrDefault(
            java.lang.String key,
            /* nullable */
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching
                defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          map = internalGetMutableDeniedPermissions().ensureBuilderMap();
      return map.containsKey(key) ? deniedPermissionsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getDeniedPermissionsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          map = internalGetMutableDeniedPermissions().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return deniedPermissionsConverter.build(map.get(key));
    }

    public Builder clearDeniedPermissions() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableDeniedPermissions().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    public Builder removeDeniedPermissions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableDeniedPermissions().ensureBuilderMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getMutableDeniedPermissions() {
      bitField0_ |= 0x00000004;
      return internalGetMutableDeniedPermissions().ensureMessageMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    public Builder putDeniedPermissions(
        java.lang.String key,
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableDeniedPermissions().ensureBuilderMap().put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    public Builder putAllDeniedPermissions(
        java.util.Map<
                java.lang.String,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching>
            values) {
      for (java.util.Map.Entry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableDeniedPermissions().ensureBuilderMap().putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a denied permission in the rule, and each value
     * indicates whether the denied permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; denied_permissions = 3;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.Builder
        putDeniedPermissionsBuilderIfAbsent(java.lang.String key) {
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          builderMap = internalGetMutableDeniedPermissions().ensureBuilderMap();
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatchingOrBuilder
          entry = builderMap.get(key);
      if (entry == null) {
        entry =
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching) {
        entry =
            ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedPermissionMatching)
                    entry)
                .toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching.Builder)
          entry;
    }

    private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        combinedExceptionPermission_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder>
        combinedExceptionPermissionBuilder_;
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     *
     * @return Whether the combinedExceptionPermission field is set.
     */
    public boolean hasCombinedExceptionPermission() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     *
     * @return The combinedExceptionPermission.
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getCombinedExceptionPermission() {
      if (combinedExceptionPermissionBuilder_ == null) {
        return combinedExceptionPermission_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.getDefaultInstance()
            : combinedExceptionPermission_;
      } else {
        return combinedExceptionPermissionBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public Builder setCombinedExceptionPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (combinedExceptionPermissionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        combinedExceptionPermission_ = value;
      } else {
        combinedExceptionPermissionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public Builder setCombinedExceptionPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                .Builder
            builderForValue) {
      if (combinedExceptionPermissionBuilder_ == null) {
        combinedExceptionPermission_ = builderForValue.build();
      } else {
        combinedExceptionPermissionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public Builder mergeCombinedExceptionPermission(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (combinedExceptionPermissionBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)
            && combinedExceptionPermission_ != null
            && combinedExceptionPermission_
                != com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.getDefaultInstance()) {
          getCombinedExceptionPermissionBuilder().mergeFrom(value);
        } else {
          combinedExceptionPermission_ = value;
        }
      } else {
        combinedExceptionPermissionBuilder_.mergeFrom(value);
      }
      if (combinedExceptionPermission_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public Builder clearCombinedExceptionPermission() {
      bitField0_ = (bitField0_ & ~0x00000008);
      combinedExceptionPermission_ = null;
      if (combinedExceptionPermissionBuilder_ != null) {
        combinedExceptionPermissionBuilder_.dispose();
        combinedExceptionPermissionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.Builder
        getCombinedExceptionPermissionBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getCombinedExceptionPermissionFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatchingOrBuilder
        getCombinedExceptionPermissionOrBuilder() {
      if (combinedExceptionPermissionBuilder_ != null) {
        return combinedExceptionPermissionBuilder_.getMessageOrBuilder();
      } else {
        return combinedExceptionPermission_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.getDefaultInstance()
            : combinedExceptionPermission_;
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the permission in the request is listed as an exception
     * permission in the deny rule.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching combined_exception_permission = 4;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder>
        getCombinedExceptionPermissionFieldBuilder() {
      if (combinedExceptionPermissionBuilder_ == null) {
        combinedExceptionPermissionBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.Builder,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatchingOrBuilder>(
                getCombinedExceptionPermission(), getParentForChildren(), isClean());
        combinedExceptionPermission_ = null;
      }
      return combinedExceptionPermissionBuilder_;
    }

    private static final class ExceptionPermissionsConverter
        implements com.google.protobuf.MapFieldBuilder.Converter<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching> {
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching
          build(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedPermissionMatchingOrBuilder
                  val) {
        if (val
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching) {
          return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching)
              val;
        }
        return ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching.Builder)
                val)
            .build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          defaultEntry() {
        return ExceptionPermissionsDefaultEntryHolder.defaultEntry;
      }
    };

    private static final ExceptionPermissionsConverter exceptionPermissionsConverter =
        new ExceptionPermissionsConverter();

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        exceptionPermissions_;

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        internalGetExceptionPermissions() {
      if (exceptionPermissions_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(exceptionPermissionsConverter);
      }
      return exceptionPermissions_;
    }

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.Builder>
        internalGetMutableExceptionPermissions() {
      if (exceptionPermissions_ == null) {
        exceptionPermissions_ =
            new com.google.protobuf.MapFieldBuilder<>(exceptionPermissionsConverter);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return exceptionPermissions_;
    }

    public int getExceptionPermissionsCount() {
      return internalGetExceptionPermissions().ensureBuilderMap().size();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    @java.lang.Override
    public boolean containsExceptionPermissions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetExceptionPermissions().ensureBuilderMap().containsKey(key);
    }
    /** Use {@link #getExceptionPermissionsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getExceptionPermissions() {
      return getExceptionPermissionsMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    @java.lang.Override
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getExceptionPermissionsMap() {
      return internalGetExceptionPermissions().getImmutableMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    @java.lang.Override
    public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getExceptionPermissionsOrDefault(
            java.lang.String key,
            /* nullable */
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching
                defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          map = internalGetMutableExceptionPermissions().ensureBuilderMap();
      return map.containsKey(key)
          ? exceptionPermissionsConverter.build(map.get(key))
          : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching
        getExceptionPermissionsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          map = internalGetMutableExceptionPermissions().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return exceptionPermissionsConverter.build(map.get(key));
    }

    public Builder clearExceptionPermissions() {
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableExceptionPermissions().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    public Builder removeExceptionPermissions(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableExceptionPermissions().ensureBuilderMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching>
        getMutableExceptionPermissions() {
      bitField0_ |= 0x00000010;
      return internalGetMutableExceptionPermissions().ensureMessageMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    public Builder putExceptionPermissions(
        java.lang.String key,
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
            value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableExceptionPermissions().ensureBuilderMap().put(key, value);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    public Builder putAllExceptionPermissions(
        java.util.Map<
                java.lang.String,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedPermissionMatching>
            values) {
      for (java.util.Map.Entry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatching>
          e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableExceptionPermissions().ensureBuilderMap().putAll(values);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception permissions in the deny rule and indicates whether each
     * permission matches the permission in the request.
     *
     * Each key identifies a exception permission in the rule, and each value
     * indicates whether the exception permission matches the permission in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching&gt; exception_permissions = 5;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedPermissionMatching.Builder
        putExceptionPermissionsBuilderIfAbsent(java.lang.String key) {
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedPermissionMatchingOrBuilder>
          builderMap = internalGetMutableExceptionPermissions().ensureBuilderMap();
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatchingOrBuilder
          entry = builderMap.get(key);
      if (entry == null) {
        entry =
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedPermissionMatching.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching) {
        entry =
            ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedPermissionMatching)
                    entry)
                .toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedPermissionMatching.Builder)
          entry;
    }

    private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        combinedDeniedPrincipal_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder>
        combinedDeniedPrincipalBuilder_;
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     *
     * @return Whether the combinedDeniedPrincipal field is set.
     */
    public boolean hasCombinedDeniedPrincipal() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     *
     * @return The combinedDeniedPrincipal.
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getCombinedDeniedPrincipal() {
      if (combinedDeniedPrincipalBuilder_ == null) {
        return combinedDeniedPrincipal_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.getDefaultInstance()
            : combinedDeniedPrincipal_;
      } else {
        return combinedDeniedPrincipalBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public Builder setCombinedDeniedPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (combinedDeniedPrincipalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        combinedDeniedPrincipal_ = value;
      } else {
        combinedDeniedPrincipalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public Builder setCombinedDeniedPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder
            builderForValue) {
      if (combinedDeniedPrincipalBuilder_ == null) {
        combinedDeniedPrincipal_ = builderForValue.build();
      } else {
        combinedDeniedPrincipalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public Builder mergeCombinedDeniedPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (combinedDeniedPrincipalBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)
            && combinedDeniedPrincipal_ != null
            && combinedDeniedPrincipal_
                != com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.getDefaultInstance()) {
          getCombinedDeniedPrincipalBuilder().mergeFrom(value);
        } else {
          combinedDeniedPrincipal_ = value;
        }
      } else {
        combinedDeniedPrincipalBuilder_.mergeFrom(value);
      }
      if (combinedDeniedPrincipal_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public Builder clearCombinedDeniedPrincipal() {
      bitField0_ = (bitField0_ & ~0x00000020);
      combinedDeniedPrincipal_ = null;
      if (combinedDeniedPrincipalBuilder_ != null) {
        combinedDeniedPrincipalBuilder_.dispose();
        combinedDeniedPrincipalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.Builder
        getCombinedDeniedPrincipalBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getCombinedDeniedPrincipalFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatchingOrBuilder
        getCombinedDeniedPrincipalOrBuilder() {
      if (combinedDeniedPrincipalBuilder_ != null) {
        return combinedDeniedPrincipalBuilder_.getMessageOrBuilder();
      } else {
        return combinedDeniedPrincipal_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.getDefaultInstance()
            : combinedDeniedPrincipal_;
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as a denied principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_denied_principal = 6;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder>
        getCombinedDeniedPrincipalFieldBuilder() {
      if (combinedDeniedPrincipalBuilder_ == null) {
        combinedDeniedPrincipalBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.Builder,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatchingOrBuilder>(
                getCombinedDeniedPrincipal(), getParentForChildren(), isClean());
        combinedDeniedPrincipal_ = null;
      }
      return combinedDeniedPrincipalBuilder_;
    }

    private static final class DeniedPrincipalsConverter
        implements com.google.protobuf.MapFieldBuilder.Converter<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching> {
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          build(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedDenyPrincipalMatchingOrBuilder
                  val) {
        if (val
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching) {
          return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching)
              val;
        }
        return ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.Builder)
                val)
            .build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          defaultEntry() {
        return DeniedPrincipalsDefaultEntryHolder.defaultEntry;
      }
    };

    private static final DeniedPrincipalsConverter deniedPrincipalsConverter =
        new DeniedPrincipalsConverter();

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        deniedPrincipals_;

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        internalGetDeniedPrincipals() {
      if (deniedPrincipals_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(deniedPrincipalsConverter);
      }
      return deniedPrincipals_;
    }

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        internalGetMutableDeniedPrincipals() {
      if (deniedPrincipals_ == null) {
        deniedPrincipals_ = new com.google.protobuf.MapFieldBuilder<>(deniedPrincipalsConverter);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return deniedPrincipals_;
    }

    public int getDeniedPrincipalsCount() {
      return internalGetDeniedPrincipals().ensureBuilderMap().size();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    @java.lang.Override
    public boolean containsDeniedPrincipals(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetDeniedPrincipals().ensureBuilderMap().containsKey(key);
    }
    /** Use {@link #getDeniedPrincipalsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getDeniedPrincipals() {
      return getDeniedPrincipalsMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    @java.lang.Override
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getDeniedPrincipalsMap() {
      return internalGetDeniedPrincipals().getImmutableMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    @java.lang.Override
    public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getDeniedPrincipalsOrDefault(
            java.lang.String key,
            /* nullable */
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching
                defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          map = internalGetMutableDeniedPrincipals().ensureBuilderMap();
      return map.containsKey(key) ? deniedPrincipalsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getDeniedPrincipalsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          map = internalGetMutableDeniedPrincipals().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return deniedPrincipalsConverter.build(map.get(key));
    }

    public Builder clearDeniedPrincipals() {
      bitField0_ = (bitField0_ & ~0x00000040);
      internalGetMutableDeniedPrincipals().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    public Builder removeDeniedPrincipals(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableDeniedPrincipals().ensureBuilderMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getMutableDeniedPrincipals() {
      bitField0_ |= 0x00000040;
      return internalGetMutableDeniedPrincipals().ensureMessageMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    public Builder putDeniedPrincipals(
        java.lang.String key,
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableDeniedPrincipals().ensureBuilderMap().put(key, value);
      bitField0_ |= 0x00000040;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    public Builder putAllDeniedPrincipals(
        java.util.Map<
                java.lang.String,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching>
            values) {
      for (java.util.Map.Entry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableDeniedPrincipals().ensureBuilderMap().putAll(values);
      bitField0_ |= 0x00000040;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all denied principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a denied principal in the rule, and each value
     * indicates whether the denied principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; denied_principals = 7;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.Builder
        putDeniedPrincipalsBuilderIfAbsent(java.lang.String key) {
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          builderMap = internalGetMutableDeniedPrincipals().ensureBuilderMap();
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatchingOrBuilder
          entry = builderMap.get(key);
      if (entry == null) {
        entry =
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching) {
        entry =
            ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedDenyPrincipalMatching)
                    entry)
                .toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching.Builder)
          entry;
    }

    private com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        combinedExceptionPrincipal_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder>
        combinedExceptionPrincipalBuilder_;
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     *
     * @return Whether the combinedExceptionPrincipal field is set.
     */
    public boolean hasCombinedExceptionPrincipal() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     *
     * @return The combinedExceptionPrincipal.
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getCombinedExceptionPrincipal() {
      if (combinedExceptionPrincipalBuilder_ == null) {
        return combinedExceptionPrincipal_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.getDefaultInstance()
            : combinedExceptionPrincipal_;
      } else {
        return combinedExceptionPrincipalBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public Builder setCombinedExceptionPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (combinedExceptionPrincipalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        combinedExceptionPrincipal_ = value;
      } else {
        combinedExceptionPrincipalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public Builder setCombinedExceptionPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder
            builderForValue) {
      if (combinedExceptionPrincipalBuilder_ == null) {
        combinedExceptionPrincipal_ = builderForValue.build();
      } else {
        combinedExceptionPrincipalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public Builder mergeCombinedExceptionPrincipal(
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (combinedExceptionPrincipalBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)
            && combinedExceptionPrincipal_ != null
            && combinedExceptionPrincipal_
                != com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.getDefaultInstance()) {
          getCombinedExceptionPrincipalBuilder().mergeFrom(value);
        } else {
          combinedExceptionPrincipal_ = value;
        }
      } else {
        combinedExceptionPrincipalBuilder_.mergeFrom(value);
      }
      if (combinedExceptionPrincipal_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public Builder clearCombinedExceptionPrincipal() {
      bitField0_ = (bitField0_ & ~0x00000080);
      combinedExceptionPrincipal_ = null;
      if (combinedExceptionPrincipalBuilder_ != null) {
        combinedExceptionPrincipalBuilder_.dispose();
        combinedExceptionPrincipalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.Builder
        getCombinedExceptionPrincipalBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getCombinedExceptionPrincipalFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatchingOrBuilder
        getCombinedExceptionPrincipalOrBuilder() {
      if (combinedExceptionPrincipalBuilder_ != null) {
        return combinedExceptionPrincipalBuilder_.getMessageOrBuilder();
      } else {
        return combinedExceptionPrincipal_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.getDefaultInstance()
            : combinedExceptionPrincipal_;
      }
    }
    /**
     *
     *
     * <pre>
     * Indicates whether the principal is listed as an exception principal in the
     * deny rule, either directly or through membership in a principal set.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching combined_exception_principal = 8;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder>
        getCombinedExceptionPrincipalFieldBuilder() {
      if (combinedExceptionPrincipalBuilder_ == null) {
        combinedExceptionPrincipalBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.Builder,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatchingOrBuilder>(
                getCombinedExceptionPrincipal(), getParentForChildren(), isClean());
        combinedExceptionPrincipal_ = null;
      }
      return combinedExceptionPrincipalBuilder_;
    }

    private static final class ExceptionPrincipalsConverter
        implements com.google.protobuf.MapFieldBuilder.Converter<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching> {
      @java.lang.Override
      public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching
          build(
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                      .AnnotatedDenyPrincipalMatchingOrBuilder
                  val) {
        if (val
            instanceof
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching) {
          return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching)
              val;
        }
        return ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching.Builder)
                val)
            .build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          defaultEntry() {
        return ExceptionPrincipalsDefaultEntryHolder.defaultEntry;
      }
    };

    private static final ExceptionPrincipalsConverter exceptionPrincipalsConverter =
        new ExceptionPrincipalsConverter();

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        exceptionPrincipals_;

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        internalGetExceptionPrincipals() {
      if (exceptionPrincipals_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(exceptionPrincipalsConverter);
      }
      return exceptionPrincipals_;
    }

    private com.google.protobuf.MapFieldBuilder<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatchingOrBuilder,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.Builder>
        internalGetMutableExceptionPrincipals() {
      if (exceptionPrincipals_ == null) {
        exceptionPrincipals_ =
            new com.google.protobuf.MapFieldBuilder<>(exceptionPrincipalsConverter);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return exceptionPrincipals_;
    }

    public int getExceptionPrincipalsCount() {
      return internalGetExceptionPrincipals().ensureBuilderMap().size();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    @java.lang.Override
    public boolean containsExceptionPrincipals(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetExceptionPrincipals().ensureBuilderMap().containsKey(key);
    }
    /** Use {@link #getExceptionPrincipalsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getExceptionPrincipals() {
      return getExceptionPrincipalsMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    @java.lang.Override
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getExceptionPrincipalsMap() {
      return internalGetExceptionPrincipals().getImmutableMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    @java.lang.Override
    public /* nullable */ com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getExceptionPrincipalsOrDefault(
            java.lang.String key,
            /* nullable */
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching
                defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          map = internalGetMutableExceptionPrincipals().ensureBuilderMap();
      return map.containsKey(key) ? exceptionPrincipalsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching
        getExceptionPrincipalsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          map = internalGetMutableExceptionPrincipals().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return exceptionPrincipalsConverter.build(map.get(key));
    }

    public Builder clearExceptionPrincipals() {
      bitField0_ = (bitField0_ & ~0x00000100);
      internalGetMutableExceptionPrincipals().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    public Builder removeExceptionPrincipals(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableExceptionPrincipals().ensureBuilderMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<
            java.lang.String,
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching>
        getMutableExceptionPrincipals() {
      bitField0_ |= 0x00000100;
      return internalGetMutableExceptionPrincipals().ensureMessageMap();
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    public Builder putExceptionPrincipals(
        java.lang.String key,
        com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching
            value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableExceptionPrincipals().ensureBuilderMap().put(key, value);
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    public Builder putAllExceptionPrincipals(
        java.util.Map<
                java.lang.String,
                com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                    .AnnotatedDenyPrincipalMatching>
            values) {
      for (java.util.Map.Entry<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatching>
          e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableExceptionPrincipals().ensureBuilderMap().putAll(values);
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Lists all exception principals in the deny rule and indicates whether each
     * principal matches the principal in the request, either directly or through
     * membership in a principal set.
     *
     * Each key identifies a exception principal in the rule, and each value
     * indicates whether the exception principal matches the principal in the
     * request.
     * </pre>
     *
     * <code>
     * map&lt;string, .google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching&gt; exception_principals = 9;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
            .AnnotatedDenyPrincipalMatching.Builder
        putExceptionPrincipalsBuilderIfAbsent(java.lang.String key) {
      java.util.Map<
              java.lang.String,
              com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                  .AnnotatedDenyPrincipalMatchingOrBuilder>
          builderMap = internalGetMutableExceptionPrincipals().ensureBuilderMap();
      com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatchingOrBuilder
          entry = builderMap.get(key);
      if (entry == null) {
        entry =
            com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                .AnnotatedDenyPrincipalMatching.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry
          instanceof
          com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching) {
        entry =
            ((com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                        .AnnotatedDenyPrincipalMatching)
                    entry)
                .toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
              .AnnotatedDenyPrincipalMatching.Builder)
          entry;
    }

    private int relevance_ = 0;
    /**
     *
     *
     * <pre>
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
     *
     * @return The enum numeric value on the wire for relevance.
     */
    @java.lang.Override
    public int getRelevanceValue() {
      return relevance_;
    }
    /**
     *
     *
     * <pre>
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
     *
     * @param value The enum numeric value on the wire for relevance to set.
     * @return This builder for chaining.
     */
    public Builder setRelevanceValue(int value) {
      relevance_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
     *
     * @return The relevance.
     */
    @java.lang.Override
    public com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance getRelevance() {
      com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance result =
          com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.forNumber(relevance_);
      return result == null
          ? com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
     *
     * @param value The relevance to set.
     * @return This builder for chaining.
     */
    public Builder setRelevance(
        com.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000200;
      relevance_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     * </pre>
     *
     * <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 10;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRelevance() {
      bitField0_ = (bitField0_ & ~0x00000200);
      relevance_ = 0;
      onChanged();
      return this;
    }

    private com.google.type.Expr condition_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Expr, com.google.type.Expr.Builder, com.google.type.ExprOrBuilder>
        conditionBuilder_;
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     *
     * @return Whether the condition field is set.
     */
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     *
     * @return The condition.
     */
    public com.google.type.Expr getCondition() {
      if (conditionBuilder_ == null) {
        return condition_ == null ? com.google.type.Expr.getDefaultInstance() : condition_;
      } else {
        return conditionBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public Builder setCondition(com.google.type.Expr value) {
      if (conditionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        condition_ = value;
      } else {
        conditionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public Builder setCondition(com.google.type.Expr.Builder builderForValue) {
      if (conditionBuilder_ == null) {
        condition_ = builderForValue.build();
      } else {
        conditionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public Builder mergeCondition(com.google.type.Expr value) {
      if (conditionBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0)
            && condition_ != null
            && condition_ != com.google.type.Expr.getDefaultInstance()) {
          getConditionBuilder().mergeFrom(value);
        } else {
          condition_ = value;
        }
      } else {
        conditionBuilder_.mergeFrom(value);
      }
      if (condition_ != null) {
        bitField0_ |= 0x00000400;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public Builder clearCondition() {
      bitField0_ = (bitField0_ & ~0x00000400);
      condition_ = null;
      if (conditionBuilder_ != null) {
        conditionBuilder_.dispose();
        conditionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public com.google.type.Expr.Builder getConditionBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return getConditionFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    public com.google.type.ExprOrBuilder getConditionOrBuilder() {
      if (conditionBuilder_ != null) {
        return conditionBuilder_.getMessageOrBuilder();
      } else {
        return condition_ == null ? com.google.type.Expr.getDefaultInstance() : condition_;
      }
    }
    /**
     *
     *
     * <pre>
     * A condition expression that specifies when the deny rule denies the
     * principal access.
     *
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     * </pre>
     *
     * <code>.google.type.Expr condition = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Expr, com.google.type.Expr.Builder, com.google.type.ExprOrBuilder>
        getConditionFieldBuilder() {
      if (conditionBuilder_ == null) {
        conditionBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Expr, com.google.type.Expr.Builder, com.google.type.ExprOrBuilder>(
                getCondition(), getParentForChildren(), isClean());
        condition_ = null;
      }
      return conditionBuilder_;
    }

    private com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation conditionExplanation_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation,
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanationOrBuilder>
        conditionExplanationBuilder_;
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     *
     * @return Whether the conditionExplanation field is set.
     */
    public boolean hasConditionExplanation() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     *
     * @return The conditionExplanation.
     */
    public com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
        getConditionExplanation() {
      if (conditionExplanationBuilder_ == null) {
        return conditionExplanation_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.getDefaultInstance()
            : conditionExplanation_;
      } else {
        return conditionExplanationBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public Builder setConditionExplanation(
        com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation value) {
      if (conditionExplanationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        conditionExplanation_ = value;
      } else {
        conditionExplanationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public Builder setConditionExplanation(
        com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.Builder builderForValue) {
      if (conditionExplanationBuilder_ == null) {
        conditionExplanation_ = builderForValue.build();
      } else {
        conditionExplanationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public Builder mergeConditionExplanation(
        com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation value) {
      if (conditionExplanationBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0)
            && conditionExplanation_ != null
            && conditionExplanation_
                != com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                    .getDefaultInstance()) {
          getConditionExplanationBuilder().mergeFrom(value);
        } else {
          conditionExplanation_ = value;
        }
      } else {
        conditionExplanationBuilder_.mergeFrom(value);
      }
      if (conditionExplanation_ != null) {
        bitField0_ |= 0x00000800;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public Builder clearConditionExplanation() {
      bitField0_ = (bitField0_ & ~0x00000800);
      conditionExplanation_ = null;
      if (conditionExplanationBuilder_ != null) {
        conditionExplanationBuilder_.dispose();
        conditionExplanationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.Builder
        getConditionExplanationBuilder() {
      bitField0_ |= 0x00000800;
      onChanged();
      return getConditionExplanationFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    public com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanationOrBuilder
        getConditionExplanationOrBuilder() {
      if (conditionExplanationBuilder_ != null) {
        return conditionExplanationBuilder_.getMessageOrBuilder();
      } else {
        return conditionExplanation_ == null
            ? com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.getDefaultInstance()
            : conditionExplanation_;
      }
    }
    /**
     *
     *
     * <pre>
     * Condition evaluation state for this role binding.
     * </pre>
     *
     * <code>
     * .google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 12;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation,
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.Builder,
            com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanationOrBuilder>
        getConditionExplanationFieldBuilder() {
      if (conditionExplanationBuilder_ == null) {
        conditionExplanationBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation,
                com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.Builder,
                com.google.cloud.policytroubleshooter.iam.v3.ConditionExplanationOrBuilder>(
                getConditionExplanation(), getParentForChildren(), isClean());
        conditionExplanation_ = null;
      }
      return conditionExplanationBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)
  private static final com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation();
  }

  public static com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DenyRuleExplanation> PARSER =
      new com.google.protobuf.AbstractParser<DenyRuleExplanation>() {
        @java.lang.Override
        public DenyRuleExplanation parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<DenyRuleExplanation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DenyRuleExplanation> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
