/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/datalabeling/v1beta1/annotation.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.datalabeling.v1beta1;

/** Protobuf enum {@code google.cloud.datalabeling.v1beta1.AnnotationType} */
public enum AnnotationType implements com.google.protobuf.ProtocolMessageEnum {
  /** <code>ANNOTATION_TYPE_UNSPECIFIED = 0;</code> */
  ANNOTATION_TYPE_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Classification annotations in an image. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>IMAGE_CLASSIFICATION_ANNOTATION = 1;</code>
   */
  IMAGE_CLASSIFICATION_ANNOTATION(1),
  /**
   *
   *
   * <pre>
   * Bounding box annotations in an image. A form of image object detection.
   * Allowed for continuous evaluation.
   * </pre>
   *
   * <code>IMAGE_BOUNDING_BOX_ANNOTATION = 2;</code>
   */
  IMAGE_BOUNDING_BOX_ANNOTATION(2),
  /**
   *
   *
   * <pre>
   * Oriented bounding box. The box does not have to be parallel to horizontal
   * line.
   * </pre>
   *
   * <code>IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION = 13;</code>
   */
  IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION(13),
  /**
   *
   *
   * <pre>
   * Bounding poly annotations in an image.
   * </pre>
   *
   * <code>IMAGE_BOUNDING_POLY_ANNOTATION = 10;</code>
   */
  IMAGE_BOUNDING_POLY_ANNOTATION(10),
  /**
   *
   *
   * <pre>
   * Polyline annotations in an image.
   * </pre>
   *
   * <code>IMAGE_POLYLINE_ANNOTATION = 11;</code>
   */
  IMAGE_POLYLINE_ANNOTATION(11),
  /**
   *
   *
   * <pre>
   * Segmentation annotations in an image.
   * </pre>
   *
   * <code>IMAGE_SEGMENTATION_ANNOTATION = 12;</code>
   */
  IMAGE_SEGMENTATION_ANNOTATION(12),
  /**
   *
   *
   * <pre>
   * Classification annotations in video shots.
   * </pre>
   *
   * <code>VIDEO_SHOTS_CLASSIFICATION_ANNOTATION = 3;</code>
   */
  VIDEO_SHOTS_CLASSIFICATION_ANNOTATION(3),
  /**
   *
   *
   * <pre>
   * Video object tracking annotation.
   * </pre>
   *
   * <code>VIDEO_OBJECT_TRACKING_ANNOTATION = 4;</code>
   */
  VIDEO_OBJECT_TRACKING_ANNOTATION(4),
  /**
   *
   *
   * <pre>
   * Video object detection annotation.
   * </pre>
   *
   * <code>VIDEO_OBJECT_DETECTION_ANNOTATION = 5;</code>
   */
  VIDEO_OBJECT_DETECTION_ANNOTATION(5),
  /**
   *
   *
   * <pre>
   * Video event annotation.
   * </pre>
   *
   * <code>VIDEO_EVENT_ANNOTATION = 6;</code>
   */
  VIDEO_EVENT_ANNOTATION(6),
  /**
   *
   *
   * <pre>
   * Classification for text. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>TEXT_CLASSIFICATION_ANNOTATION = 8;</code>
   */
  TEXT_CLASSIFICATION_ANNOTATION(8),
  /**
   *
   *
   * <pre>
   * Entity extraction for text.
   * </pre>
   *
   * <code>TEXT_ENTITY_EXTRACTION_ANNOTATION = 9;</code>
   */
  TEXT_ENTITY_EXTRACTION_ANNOTATION(9),
  /**
   *
   *
   * <pre>
   * General classification. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>GENERAL_CLASSIFICATION_ANNOTATION = 14;</code>
   */
  GENERAL_CLASSIFICATION_ANNOTATION(14),
  UNRECOGNIZED(-1),
  ;

  /** <code>ANNOTATION_TYPE_UNSPECIFIED = 0;</code> */
  public static final int ANNOTATION_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * Classification annotations in an image. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>IMAGE_CLASSIFICATION_ANNOTATION = 1;</code>
   */
  public static final int IMAGE_CLASSIFICATION_ANNOTATION_VALUE = 1;
  /**
   *
   *
   * <pre>
   * Bounding box annotations in an image. A form of image object detection.
   * Allowed for continuous evaluation.
   * </pre>
   *
   * <code>IMAGE_BOUNDING_BOX_ANNOTATION = 2;</code>
   */
  public static final int IMAGE_BOUNDING_BOX_ANNOTATION_VALUE = 2;
  /**
   *
   *
   * <pre>
   * Oriented bounding box. The box does not have to be parallel to horizontal
   * line.
   * </pre>
   *
   * <code>IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION = 13;</code>
   */
  public static final int IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION_VALUE = 13;
  /**
   *
   *
   * <pre>
   * Bounding poly annotations in an image.
   * </pre>
   *
   * <code>IMAGE_BOUNDING_POLY_ANNOTATION = 10;</code>
   */
  public static final int IMAGE_BOUNDING_POLY_ANNOTATION_VALUE = 10;
  /**
   *
   *
   * <pre>
   * Polyline annotations in an image.
   * </pre>
   *
   * <code>IMAGE_POLYLINE_ANNOTATION = 11;</code>
   */
  public static final int IMAGE_POLYLINE_ANNOTATION_VALUE = 11;
  /**
   *
   *
   * <pre>
   * Segmentation annotations in an image.
   * </pre>
   *
   * <code>IMAGE_SEGMENTATION_ANNOTATION = 12;</code>
   */
  public static final int IMAGE_SEGMENTATION_ANNOTATION_VALUE = 12;
  /**
   *
   *
   * <pre>
   * Classification annotations in video shots.
   * </pre>
   *
   * <code>VIDEO_SHOTS_CLASSIFICATION_ANNOTATION = 3;</code>
   */
  public static final int VIDEO_SHOTS_CLASSIFICATION_ANNOTATION_VALUE = 3;
  /**
   *
   *
   * <pre>
   * Video object tracking annotation.
   * </pre>
   *
   * <code>VIDEO_OBJECT_TRACKING_ANNOTATION = 4;</code>
   */
  public static final int VIDEO_OBJECT_TRACKING_ANNOTATION_VALUE = 4;
  /**
   *
   *
   * <pre>
   * Video object detection annotation.
   * </pre>
   *
   * <code>VIDEO_OBJECT_DETECTION_ANNOTATION = 5;</code>
   */
  public static final int VIDEO_OBJECT_DETECTION_ANNOTATION_VALUE = 5;
  /**
   *
   *
   * <pre>
   * Video event annotation.
   * </pre>
   *
   * <code>VIDEO_EVENT_ANNOTATION = 6;</code>
   */
  public static final int VIDEO_EVENT_ANNOTATION_VALUE = 6;
  /**
   *
   *
   * <pre>
   * Classification for text. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>TEXT_CLASSIFICATION_ANNOTATION = 8;</code>
   */
  public static final int TEXT_CLASSIFICATION_ANNOTATION_VALUE = 8;
  /**
   *
   *
   * <pre>
   * Entity extraction for text.
   * </pre>
   *
   * <code>TEXT_ENTITY_EXTRACTION_ANNOTATION = 9;</code>
   */
  public static final int TEXT_ENTITY_EXTRACTION_ANNOTATION_VALUE = 9;
  /**
   *
   *
   * <pre>
   * General classification. Allowed for continuous evaluation.
   * </pre>
   *
   * <code>GENERAL_CLASSIFICATION_ANNOTATION = 14;</code>
   */
  public static final int GENERAL_CLASSIFICATION_ANNOTATION_VALUE = 14;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AnnotationType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AnnotationType forNumber(int value) {
    switch (value) {
      case 0:
        return ANNOTATION_TYPE_UNSPECIFIED;
      case 1:
        return IMAGE_CLASSIFICATION_ANNOTATION;
      case 2:
        return IMAGE_BOUNDING_BOX_ANNOTATION;
      case 13:
        return IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION;
      case 10:
        return IMAGE_BOUNDING_POLY_ANNOTATION;
      case 11:
        return IMAGE_POLYLINE_ANNOTATION;
      case 12:
        return IMAGE_SEGMENTATION_ANNOTATION;
      case 3:
        return VIDEO_SHOTS_CLASSIFICATION_ANNOTATION;
      case 4:
        return VIDEO_OBJECT_TRACKING_ANNOTATION;
      case 5:
        return VIDEO_OBJECT_DETECTION_ANNOTATION;
      case 6:
        return VIDEO_EVENT_ANNOTATION;
      case 8:
        return TEXT_CLASSIFICATION_ANNOTATION;
      case 9:
        return TEXT_ENTITY_EXTRACTION_ANNOTATION;
      case 14:
        return GENERAL_CLASSIFICATION_ANNOTATION;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AnnotationType> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<AnnotationType> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<AnnotationType>() {
        public AnnotationType findValueByNumber(int number) {
          return AnnotationType.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.datalabeling.v1beta1.AnnotationOuterClass.getDescriptor()
        .getEnumTypes()
        .get(2);
  }

  private static final AnnotationType[] VALUES = values();

  public static AnnotationType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AnnotationType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.datalabeling.v1beta1.AnnotationType)
}
