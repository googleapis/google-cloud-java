/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/dataflow/v1beta3/environment.proto

// Protobuf Java Version: 3.25.5
package com.google.dataflow.v1beta3;

/**
 *
 *
 * <pre>
 * Configuration options for sampling elements.
 * </pre>
 *
 * Protobuf type {@code google.dataflow.v1beta3.DataSamplingConfig}
 */
public final class DataSamplingConfig extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.dataflow.v1beta3.DataSamplingConfig)
    DataSamplingConfigOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use DataSamplingConfig.newBuilder() to construct.
  private DataSamplingConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private DataSamplingConfig() {
    behaviors_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new DataSamplingConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.dataflow.v1beta3.EnvironmentProto
        .internal_static_google_dataflow_v1beta3_DataSamplingConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.dataflow.v1beta3.EnvironmentProto
        .internal_static_google_dataflow_v1beta3_DataSamplingConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.dataflow.v1beta3.DataSamplingConfig.class,
            com.google.dataflow.v1beta3.DataSamplingConfig.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * The following enum defines what to sample for a running job.
   * </pre>
   *
   * Protobuf enum {@code google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior}
   */
  public enum DataSamplingBehavior implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * If given, has no effect on sampling behavior. Used as an unknown or unset
     * sentinel value.
     * </pre>
     *
     * <code>DATA_SAMPLING_BEHAVIOR_UNSPECIFIED = 0;</code>
     */
    DATA_SAMPLING_BEHAVIOR_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * When given, disables element sampling. Has same behavior as not setting
     * the behavior.
     * </pre>
     *
     * <code>DISABLED = 1;</code>
     */
    DISABLED(1),
    /**
     *
     *
     * <pre>
     * When given, enables sampling in-flight from all PCollections.
     * </pre>
     *
     * <code>ALWAYS_ON = 2;</code>
     */
    ALWAYS_ON(2),
    /**
     *
     *
     * <pre>
     * When given, enables sampling input elements when a user-defined DoFn
     * causes an exception.
     * </pre>
     *
     * <code>EXCEPTIONS = 3;</code>
     */
    EXCEPTIONS(3),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * If given, has no effect on sampling behavior. Used as an unknown or unset
     * sentinel value.
     * </pre>
     *
     * <code>DATA_SAMPLING_BEHAVIOR_UNSPECIFIED = 0;</code>
     */
    public static final int DATA_SAMPLING_BEHAVIOR_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     * When given, disables element sampling. Has same behavior as not setting
     * the behavior.
     * </pre>
     *
     * <code>DISABLED = 1;</code>
     */
    public static final int DISABLED_VALUE = 1;

    /**
     *
     *
     * <pre>
     * When given, enables sampling in-flight from all PCollections.
     * </pre>
     *
     * <code>ALWAYS_ON = 2;</code>
     */
    public static final int ALWAYS_ON_VALUE = 2;

    /**
     *
     *
     * <pre>
     * When given, enables sampling input elements when a user-defined DoFn
     * causes an exception.
     * </pre>
     *
     * <code>EXCEPTIONS = 3;</code>
     */
    public static final int EXCEPTIONS_VALUE = 3;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataSamplingBehavior valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataSamplingBehavior forNumber(int value) {
      switch (value) {
        case 0:
          return DATA_SAMPLING_BEHAVIOR_UNSPECIFIED;
        case 1:
          return DISABLED;
        case 2:
          return ALWAYS_ON;
        case 3:
          return EXCEPTIONS;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataSamplingBehavior>
        internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<DataSamplingBehavior>
        internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DataSamplingBehavior>() {
              public DataSamplingBehavior findValueByNumber(int number) {
                return DataSamplingBehavior.forNumber(number);
              }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.dataflow.v1beta3.DataSamplingConfig.getDescriptor().getEnumTypes().get(0);
    }

    private static final DataSamplingBehavior[] VALUES = values();

    public static DataSamplingBehavior valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataSamplingBehavior(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior)
  }

  public static final int BEHAVIORS_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> behaviors_;

  private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>
      behaviors_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer,
              com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>() {
            public com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior convert(
                java.lang.Integer from) {
              com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior result =
                  com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior.forNumber(
                      from);
              return result == null
                  ? com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior.UNRECOGNIZED
                  : result;
            }
          };

  /**
   *
   *
   * <pre>
   * List of given sampling behaviors to enable. For example, specifying
   * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
   * exceptions. Can be used to specify multiple behaviors like,
   * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
   * exception sampling.
   *
   * If DISABLED is in the list, then sampling will be disabled and ignore the
   * other given behaviors.
   *
   * Ordering does not matter.
   * </pre>
   *
   * <code>repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
   * </code>
   *
   * @return A list containing the behaviors.
   */
  @java.lang.Override
  public java.util.List<com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>
      getBehaviorsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>(
        behaviors_, behaviors_converter_);
  }

  /**
   *
   *
   * <pre>
   * List of given sampling behaviors to enable. For example, specifying
   * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
   * exceptions. Can be used to specify multiple behaviors like,
   * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
   * exception sampling.
   *
   * If DISABLED is in the list, then sampling will be disabled and ignore the
   * other given behaviors.
   *
   * Ordering does not matter.
   * </pre>
   *
   * <code>repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
   * </code>
   *
   * @return The count of behaviors.
   */
  @java.lang.Override
  public int getBehaviorsCount() {
    return behaviors_.size();
  }

  /**
   *
   *
   * <pre>
   * List of given sampling behaviors to enable. For example, specifying
   * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
   * exceptions. Can be used to specify multiple behaviors like,
   * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
   * exception sampling.
   *
   * If DISABLED is in the list, then sampling will be disabled and ignore the
   * other given behaviors.
   *
   * Ordering does not matter.
   * </pre>
   *
   * <code>repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
   * </code>
   *
   * @param index The index of the element to return.
   * @return The behaviors at the given index.
   */
  @java.lang.Override
  public com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior getBehaviors(
      int index) {
    return behaviors_converter_.convert(behaviors_.get(index));
  }

  /**
   *
   *
   * <pre>
   * List of given sampling behaviors to enable. For example, specifying
   * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
   * exceptions. Can be used to specify multiple behaviors like,
   * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
   * exception sampling.
   *
   * If DISABLED is in the list, then sampling will be disabled and ignore the
   * other given behaviors.
   *
   * Ordering does not matter.
   * </pre>
   *
   * <code>repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for behaviors.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getBehaviorsValueList() {
    return behaviors_;
  }

  /**
   *
   *
   * <pre>
   * List of given sampling behaviors to enable. For example, specifying
   * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
   * exceptions. Can be used to specify multiple behaviors like,
   * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
   * exception sampling.
   *
   * If DISABLED is in the list, then sampling will be disabled and ignore the
   * other given behaviors.
   *
   * Ordering does not matter.
   * </pre>
   *
   * <code>repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of behaviors at the given index.
   */
  @java.lang.Override
  public int getBehaviorsValue(int index) {
    return behaviors_.get(index);
  }

  private int behaviorsMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    getSerializedSize();
    if (getBehaviorsList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(behaviorsMemoizedSerializedSize);
    }
    for (int i = 0; i < behaviors_.size(); i++) {
      output.writeEnumNoTag(behaviors_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < behaviors_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(behaviors_.get(i));
      }
      size += dataSize;
      if (!getBehaviorsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataSize);
      }
      behaviorsMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.dataflow.v1beta3.DataSamplingConfig)) {
      return super.equals(obj);
    }
    com.google.dataflow.v1beta3.DataSamplingConfig other =
        (com.google.dataflow.v1beta3.DataSamplingConfig) obj;

    if (!behaviors_.equals(other.behaviors_)) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getBehaviorsCount() > 0) {
      hash = (37 * hash) + BEHAVIORS_FIELD_NUMBER;
      hash = (53 * hash) + behaviors_.hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.dataflow.v1beta3.DataSamplingConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * Configuration options for sampling elements.
   * </pre>
   *
   * Protobuf type {@code google.dataflow.v1beta3.DataSamplingConfig}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.dataflow.v1beta3.DataSamplingConfig)
      com.google.dataflow.v1beta3.DataSamplingConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.dataflow.v1beta3.EnvironmentProto
          .internal_static_google_dataflow_v1beta3_DataSamplingConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.dataflow.v1beta3.EnvironmentProto
          .internal_static_google_dataflow_v1beta3_DataSamplingConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.dataflow.v1beta3.DataSamplingConfig.class,
              com.google.dataflow.v1beta3.DataSamplingConfig.Builder.class);
    }

    // Construct using com.google.dataflow.v1beta3.DataSamplingConfig.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      behaviors_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.dataflow.v1beta3.EnvironmentProto
          .internal_static_google_dataflow_v1beta3_DataSamplingConfig_descriptor;
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.DataSamplingConfig getDefaultInstanceForType() {
      return com.google.dataflow.v1beta3.DataSamplingConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.DataSamplingConfig build() {
      com.google.dataflow.v1beta3.DataSamplingConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.DataSamplingConfig buildPartial() {
      com.google.dataflow.v1beta3.DataSamplingConfig result =
          new com.google.dataflow.v1beta3.DataSamplingConfig(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.dataflow.v1beta3.DataSamplingConfig result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        behaviors_ = java.util.Collections.unmodifiableList(behaviors_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.behaviors_ = behaviors_;
    }

    private void buildPartial0(com.google.dataflow.v1beta3.DataSamplingConfig result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.dataflow.v1beta3.DataSamplingConfig) {
        return mergeFrom((com.google.dataflow.v1beta3.DataSamplingConfig) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.dataflow.v1beta3.DataSamplingConfig other) {
      if (other == com.google.dataflow.v1beta3.DataSamplingConfig.getDefaultInstance()) return this;
      if (!other.behaviors_.isEmpty()) {
        if (behaviors_.isEmpty()) {
          behaviors_ = other.behaviors_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureBehaviorsIsMutable();
          behaviors_.addAll(other.behaviors_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                int tmpRaw = input.readEnum();
                ensureBehaviorsIsMutable();
                behaviors_.add(tmpRaw);
                break;
              } // case 8
            case 10:
              {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureBehaviorsIsMutable();
                  behaviors_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 10
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<java.lang.Integer> behaviors_ = java.util.Collections.emptyList();

    private void ensureBehaviorsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        behaviors_ = new java.util.ArrayList<java.lang.Integer>(behaviors_);
        bitField0_ |= 0x00000001;
      }
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @return A list containing the behaviors.
     */
    public java.util.List<com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>
        getBehaviorsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>(
          behaviors_, behaviors_converter_);
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @return The count of behaviors.
     */
    public int getBehaviorsCount() {
      return behaviors_.size();
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param index The index of the element to return.
     * @return The behaviors at the given index.
     */
    public com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior getBehaviors(
        int index) {
      return behaviors_converter_.convert(behaviors_.get(index));
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The behaviors to set.
     * @return This builder for chaining.
     */
    public Builder setBehaviors(
        int index, com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBehaviorsIsMutable();
      behaviors_.set(index, value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param value The behaviors to add.
     * @return This builder for chaining.
     */
    public Builder addBehaviors(
        com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBehaviorsIsMutable();
      behaviors_.add(value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param values The behaviors to add.
     * @return This builder for chaining.
     */
    public Builder addAllBehaviors(
        java.lang.Iterable<
                ? extends com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior>
            values) {
      ensureBehaviorsIsMutable();
      for (com.google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior value : values) {
        behaviors_.add(value.getNumber());
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearBehaviors() {
      behaviors_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @return A list containing the enum numeric values on the wire for behaviors.
     */
    public java.util.List<java.lang.Integer> getBehaviorsValueList() {
      return java.util.Collections.unmodifiableList(behaviors_);
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of behaviors at the given index.
     */
    public int getBehaviorsValue(int index) {
      return behaviors_.get(index);
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for behaviors to set.
     * @return This builder for chaining.
     */
    public Builder setBehaviorsValue(int index, int value) {
      ensureBehaviorsIsMutable();
      behaviors_.set(index, value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param value The enum numeric value on the wire for behaviors to add.
     * @return This builder for chaining.
     */
    public Builder addBehaviorsValue(int value) {
      ensureBehaviorsIsMutable();
      behaviors_.add(value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * List of given sampling behaviors to enable. For example, specifying
     * behaviors = [ALWAYS_ON] samples in-flight elements but does not sample
     * exceptions. Can be used to specify multiple behaviors like,
     * behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and
     * exception sampling.
     *
     * If DISABLED is in the list, then sampling will be disabled and ignore the
     * other given behaviors.
     *
     * Ordering does not matter.
     * </pre>
     *
     * <code>
     * repeated .google.dataflow.v1beta3.DataSamplingConfig.DataSamplingBehavior behaviors = 1;
     * </code>
     *
     * @param values The enum numeric values on the wire for behaviors to add.
     * @return This builder for chaining.
     */
    public Builder addAllBehaviorsValue(java.lang.Iterable<java.lang.Integer> values) {
      ensureBehaviorsIsMutable();
      for (int value : values) {
        behaviors_.add(value);
      }
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.dataflow.v1beta3.DataSamplingConfig)
  }

  // @@protoc_insertion_point(class_scope:google.dataflow.v1beta3.DataSamplingConfig)
  private static final com.google.dataflow.v1beta3.DataSamplingConfig DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.dataflow.v1beta3.DataSamplingConfig();
  }

  public static com.google.dataflow.v1beta3.DataSamplingConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DataSamplingConfig> PARSER =
      new com.google.protobuf.AbstractParser<DataSamplingConfig>() {
        @java.lang.Override
        public DataSamplingConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<DataSamplingConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DataSamplingConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.dataflow.v1beta3.DataSamplingConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
