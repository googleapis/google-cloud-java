/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/dataflow/v1beta3/metrics.proto

// Protobuf Java Version: 3.25.8
package com.google.dataflow.v1beta3;

/**
 *
 *
 * <pre>
 * Information useful for debugging a hot key detection.
 * </pre>
 *
 * Protobuf type {@code google.dataflow.v1beta3.HotKeyDebuggingInfo}
 */
public final class HotKeyDebuggingInfo extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.dataflow.v1beta3.HotKeyDebuggingInfo)
    HotKeyDebuggingInfoOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use HotKeyDebuggingInfo.newBuilder() to construct.
  private HotKeyDebuggingInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private HotKeyDebuggingInfo() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new HotKeyDebuggingInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.dataflow.v1beta3.MetricsProto
        .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 1:
        return internalGetDetectedHotKeys();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.dataflow.v1beta3.MetricsProto
        .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.class,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.Builder.class);
  }

  public interface HotKeyInfoOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     *
     * @return Whether the hotKeyAge field is set.
     */
    boolean hasHotKeyAge();

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     *
     * @return The hotKeyAge.
     */
    com.google.protobuf.Duration getHotKeyAge();

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     */
    com.google.protobuf.DurationOrBuilder getHotKeyAgeOrBuilder();

    /**
     *
     *
     * <pre>
     * A detected hot key that is causing limited parallelism. This field will
     * be populated only if the following flag is set to true:
     * "--enable_hot_key_logging".
     * </pre>
     *
     * <code>string key = 2;</code>
     *
     * @return The key.
     */
    java.lang.String getKey();

    /**
     *
     *
     * <pre>
     * A detected hot key that is causing limited parallelism. This field will
     * be populated only if the following flag is set to true:
     * "--enable_hot_key_logging".
     * </pre>
     *
     * <code>string key = 2;</code>
     *
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString getKeyBytes();

    /**
     *
     *
     * <pre>
     * If true, then the above key is truncated and cannot be deserialized. This
     * occurs if the key above is populated and the key size is &gt;5MB.
     * </pre>
     *
     * <code>bool key_truncated = 3;</code>
     *
     * @return The keyTruncated.
     */
    boolean getKeyTruncated();
  }

  /**
   *
   *
   * <pre>
   * Information about a hot key.
   * </pre>
   *
   * Protobuf type {@code google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo}
   */
  public static final class HotKeyInfo extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)
      HotKeyInfoOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use HotKeyInfo.newBuilder() to construct.
    private HotKeyInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private HotKeyInfo() {
      key_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new HotKeyInfo();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.dataflow.v1beta3.MetricsProto
          .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_HotKeyInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.dataflow.v1beta3.MetricsProto
          .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_HotKeyInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.class,
              com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder.class);
    }

    private int bitField0_;
    public static final int HOT_KEY_AGE_FIELD_NUMBER = 1;
    private com.google.protobuf.Duration hotKeyAge_;

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     *
     * @return Whether the hotKeyAge field is set.
     */
    @java.lang.Override
    public boolean hasHotKeyAge() {
      return ((bitField0_ & 0x00000001) != 0);
    }

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     *
     * @return The hotKeyAge.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getHotKeyAge() {
      return hotKeyAge_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hotKeyAge_;
    }

    /**
     *
     *
     * <pre>
     * The age of the hot key measured from when it was first detected.
     * </pre>
     *
     * <code>.google.protobuf.Duration hot_key_age = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getHotKeyAgeOrBuilder() {
      return hotKeyAge_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hotKeyAge_;
    }

    public static final int KEY_FIELD_NUMBER = 2;

    @SuppressWarnings("serial")
    private volatile java.lang.Object key_ = "";

    /**
     *
     *
     * <pre>
     * A detected hot key that is causing limited parallelism. This field will
     * be populated only if the following flag is set to true:
     * "--enable_hot_key_logging".
     * </pre>
     *
     * <code>string key = 2;</code>
     *
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }

    /**
     *
     *
     * <pre>
     * A detected hot key that is causing limited parallelism. This field will
     * be populated only if the following flag is set to true:
     * "--enable_hot_key_logging".
     * </pre>
     *
     * <code>string key = 2;</code>
     *
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_TRUNCATED_FIELD_NUMBER = 3;
    private boolean keyTruncated_ = false;

    /**
     *
     *
     * <pre>
     * If true, then the above key is truncated and cannot be deserialized. This
     * occurs if the key above is populated and the key size is &gt;5MB.
     * </pre>
     *
     * <code>bool key_truncated = 3;</code>
     *
     * @return The keyTruncated.
     */
    @java.lang.Override
    public boolean getKeyTruncated() {
      return keyTruncated_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getHotKeyAge());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, key_);
      }
      if (keyTruncated_ != false) {
        output.writeBool(3, keyTruncated_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getHotKeyAge());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, key_);
      }
      if (keyTruncated_ != false) {
        size += com.google.protobuf.CodedOutputStream.computeBoolSize(3, keyTruncated_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)) {
        return super.equals(obj);
      }
      com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo other =
          (com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) obj;

      if (hasHotKeyAge() != other.hasHotKeyAge()) return false;
      if (hasHotKeyAge()) {
        if (!getHotKeyAge().equals(other.getHotKeyAge())) return false;
      }
      if (!getKey().equals(other.getKey())) return false;
      if (getKeyTruncated() != other.getKeyTruncated()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHotKeyAge()) {
        hash = (37 * hash) + HOT_KEY_AGE_FIELD_NUMBER;
        hash = (53 * hash) + getHotKeyAge().hashCode();
      }
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + KEY_TRUNCATED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getKeyTruncated());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * Information about a hot key.
     * </pre>
     *
     * Protobuf type {@code google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)
        com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.dataflow.v1beta3.MetricsProto
            .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_HotKeyInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.dataflow.v1beta3.MetricsProto
            .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_HotKeyInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.class,
                com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder.class);
      }

      // Construct using com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getHotKeyAgeFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        hotKeyAge_ = null;
        if (hotKeyAgeBuilder_ != null) {
          hotKeyAgeBuilder_.dispose();
          hotKeyAgeBuilder_ = null;
        }
        key_ = "";
        keyTruncated_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.dataflow.v1beta3.MetricsProto
            .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_HotKeyInfo_descriptor;
      }

      @java.lang.Override
      public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo
          getDefaultInstanceForType() {
        return com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo build() {
        com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo buildPartial() {
        com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo result =
            new com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(
          com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.hotKeyAge_ = hotKeyAgeBuilder_ == null ? hotKeyAge_ : hotKeyAgeBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.keyTruncated_ = keyTruncated_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) {
          return mergeFrom((com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo other) {
        if (other
            == com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.getDefaultInstance())
          return this;
        if (other.hasHotKeyAge()) {
          mergeHotKeyAge(other.getHotKeyAge());
        }
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.getKeyTruncated() != false) {
          setKeyTruncated(other.getKeyTruncated());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  input.readMessage(getHotKeyAgeFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
              case 18:
                {
                  key_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              case 24:
                {
                  keyTruncated_ = input.readBool();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 24
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.Duration hotKeyAge_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration,
              com.google.protobuf.Duration.Builder,
              com.google.protobuf.DurationOrBuilder>
          hotKeyAgeBuilder_;

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       *
       * @return Whether the hotKeyAge field is set.
       */
      public boolean hasHotKeyAge() {
        return ((bitField0_ & 0x00000001) != 0);
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       *
       * @return The hotKeyAge.
       */
      public com.google.protobuf.Duration getHotKeyAge() {
        if (hotKeyAgeBuilder_ == null) {
          return hotKeyAge_ == null
              ? com.google.protobuf.Duration.getDefaultInstance()
              : hotKeyAge_;
        } else {
          return hotKeyAgeBuilder_.getMessage();
        }
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public Builder setHotKeyAge(com.google.protobuf.Duration value) {
        if (hotKeyAgeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hotKeyAge_ = value;
        } else {
          hotKeyAgeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public Builder setHotKeyAge(com.google.protobuf.Duration.Builder builderForValue) {
        if (hotKeyAgeBuilder_ == null) {
          hotKeyAge_ = builderForValue.build();
        } else {
          hotKeyAgeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public Builder mergeHotKeyAge(com.google.protobuf.Duration value) {
        if (hotKeyAgeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)
              && hotKeyAge_ != null
              && hotKeyAge_ != com.google.protobuf.Duration.getDefaultInstance()) {
            getHotKeyAgeBuilder().mergeFrom(value);
          } else {
            hotKeyAge_ = value;
          }
        } else {
          hotKeyAgeBuilder_.mergeFrom(value);
        }
        if (hotKeyAge_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public Builder clearHotKeyAge() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hotKeyAge_ = null;
        if (hotKeyAgeBuilder_ != null) {
          hotKeyAgeBuilder_.dispose();
          hotKeyAgeBuilder_ = null;
        }
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public com.google.protobuf.Duration.Builder getHotKeyAgeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHotKeyAgeFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      public com.google.protobuf.DurationOrBuilder getHotKeyAgeOrBuilder() {
        if (hotKeyAgeBuilder_ != null) {
          return hotKeyAgeBuilder_.getMessageOrBuilder();
        } else {
          return hotKeyAge_ == null
              ? com.google.protobuf.Duration.getDefaultInstance()
              : hotKeyAge_;
        }
      }

      /**
       *
       *
       * <pre>
       * The age of the hot key measured from when it was first detected.
       * </pre>
       *
       * <code>.google.protobuf.Duration hot_key_age = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration,
              com.google.protobuf.Duration.Builder,
              com.google.protobuf.DurationOrBuilder>
          getHotKeyAgeFieldBuilder() {
        if (hotKeyAgeBuilder_ == null) {
          hotKeyAgeBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.protobuf.Duration,
                  com.google.protobuf.Duration.Builder,
                  com.google.protobuf.DurationOrBuilder>(
                  getHotKeyAge(), getParentForChildren(), isClean());
          hotKeyAge_ = null;
        }
        return hotKeyAgeBuilder_;
      }

      private java.lang.Object key_ = "";

      /**
       *
       *
       * <pre>
       * A detected hot key that is causing limited parallelism. This field will
       * be populated only if the following flag is set to true:
       * "--enable_hot_key_logging".
       * </pre>
       *
       * <code>string key = 2;</code>
       *
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }

      /**
       *
       *
       * <pre>
       * A detected hot key that is causing limited parallelism. This field will
       * be populated only if the following flag is set to true:
       * "--enable_hot_key_logging".
       * </pre>
       *
       * <code>string key = 2;</code>
       *
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      /**
       *
       *
       * <pre>
       * A detected hot key that is causing limited parallelism. This field will
       * be populated only if the following flag is set to true:
       * "--enable_hot_key_logging".
       * </pre>
       *
       * <code>string key = 2;</code>
       *
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        key_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * A detected hot key that is causing limited parallelism. This field will
       * be populated only if the following flag is set to true:
       * "--enable_hot_key_logging".
       * </pre>
       *
       * <code>string key = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        key_ = getDefaultInstance().getKey();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * A detected hot key that is causing limited parallelism. This field will
       * be populated only if the following flag is set to true:
       * "--enable_hot_key_logging".
       * </pre>
       *
       * <code>string key = 2;</code>
       *
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        key_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private boolean keyTruncated_;

      /**
       *
       *
       * <pre>
       * If true, then the above key is truncated and cannot be deserialized. This
       * occurs if the key above is populated and the key size is &gt;5MB.
       * </pre>
       *
       * <code>bool key_truncated = 3;</code>
       *
       * @return The keyTruncated.
       */
      @java.lang.Override
      public boolean getKeyTruncated() {
        return keyTruncated_;
      }

      /**
       *
       *
       * <pre>
       * If true, then the above key is truncated and cannot be deserialized. This
       * occurs if the key above is populated and the key size is &gt;5MB.
       * </pre>
       *
       * <code>bool key_truncated = 3;</code>
       *
       * @param value The keyTruncated to set.
       * @return This builder for chaining.
       */
      public Builder setKeyTruncated(boolean value) {

        keyTruncated_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * If true, then the above key is truncated and cannot be deserialized. This
       * occurs if the key above is populated and the key size is &gt;5MB.
       * </pre>
       *
       * <code>bool key_truncated = 3;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearKeyTruncated() {
        bitField0_ = (bitField0_ & ~0x00000004);
        keyTruncated_ = false;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)
    }

    // @@protoc_insertion_point(class_scope:google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo)
    private static final com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo();
    }

    public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HotKeyInfo> PARSER =
        new com.google.protobuf.AbstractParser<HotKeyInfo>() {
          @java.lang.Override
          public HotKeyInfo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<HotKeyInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HotKeyInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public static final int DETECTED_HOT_KEYS_FIELD_NUMBER = 1;

  private static final class DetectedHotKeysDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
                    newDefaultInstance(
                        com.google.dataflow.v1beta3.MetricsProto
                            .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_DetectedHotKeysEntry_descriptor,
                        com.google.protobuf.WireFormat.FieldType.UINT64,
                        0L,
                        com.google.protobuf.WireFormat.FieldType.MESSAGE,
                        com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo
                            .getDefaultInstance());
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
          java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
      detectedHotKeys_;

  private com.google.protobuf.MapField<
          java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
      internalGetDetectedHotKeys() {
    if (detectedHotKeys_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DetectedHotKeysDefaultEntryHolder.defaultEntry);
    }
    return detectedHotKeys_;
  }

  public int getDetectedHotKeysCount() {
    return internalGetDetectedHotKeys().getMap().size();
  }

  /**
   *
   *
   * <pre>
   * Debugging information for each detected hot key. Keyed by a hash of the
   * key.
   * </pre>
   *
   * <code>
   * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
   * </code>
   */
  @java.lang.Override
  public boolean containsDetectedHotKeys(long key) {

    return internalGetDetectedHotKeys().getMap().containsKey(key);
  }

  /** Use {@link #getDetectedHotKeysMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
      getDetectedHotKeys() {
    return getDetectedHotKeysMap();
  }

  /**
   *
   *
   * <pre>
   * Debugging information for each detected hot key. Keyed by a hash of the
   * key.
   * </pre>
   *
   * <code>
   * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
   * </code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
      getDetectedHotKeysMap() {
    return internalGetDetectedHotKeys().getMap();
  }

  /**
   *
   *
   * <pre>
   * Debugging information for each detected hot key. Keyed by a hash of the
   * key.
   * </pre>
   *
   * <code>
   * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
   * </code>
   */
  @java.lang.Override
  public /* nullable */ com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo
      getDetectedHotKeysOrDefault(
          long key,
          /* nullable */
          com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo defaultValue) {

    java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo> map =
        internalGetDetectedHotKeys().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }

  /**
   *
   *
   * <pre>
   * Debugging information for each detected hot key. Keyed by a hash of the
   * key.
   * </pre>
   *
   * <code>
   * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
   * </code>
   */
  @java.lang.Override
  public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo getDetectedHotKeysOrThrow(
      long key) {

    java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo> map =
        internalGetDetectedHotKeys().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3.serializeLongMapTo(
        output, internalGetDetectedHotKeys(), DetectedHotKeysDefaultEntryHolder.defaultEntry, 1);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<
            java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
        entry : internalGetDetectedHotKeys().getMap().entrySet()) {
      com.google.protobuf.MapEntry<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
          detectedHotKeys__ =
              DetectedHotKeysDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, detectedHotKeys__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo)) {
      return super.equals(obj);
    }
    com.google.dataflow.v1beta3.HotKeyDebuggingInfo other =
        (com.google.dataflow.v1beta3.HotKeyDebuggingInfo) obj;

    if (!internalGetDetectedHotKeys().equals(other.internalGetDetectedHotKeys())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetDetectedHotKeys().getMap().isEmpty()) {
      hash = (37 * hash) + DETECTED_HOT_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDetectedHotKeys().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.dataflow.v1beta3.HotKeyDebuggingInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * Information useful for debugging a hot key detection.
   * </pre>
   *
   * Protobuf type {@code google.dataflow.v1beta3.HotKeyDebuggingInfo}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.dataflow.v1beta3.HotKeyDebuggingInfo)
      com.google.dataflow.v1beta3.HotKeyDebuggingInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.dataflow.v1beta3.MetricsProto
          .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetDetectedHotKeys();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableDetectedHotKeys();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.dataflow.v1beta3.MetricsProto
          .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.dataflow.v1beta3.HotKeyDebuggingInfo.class,
              com.google.dataflow.v1beta3.HotKeyDebuggingInfo.Builder.class);
    }

    // Construct using com.google.dataflow.v1beta3.HotKeyDebuggingInfo.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableDetectedHotKeys().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.dataflow.v1beta3.MetricsProto
          .internal_static_google_dataflow_v1beta3_HotKeyDebuggingInfo_descriptor;
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo getDefaultInstanceForType() {
      return com.google.dataflow.v1beta3.HotKeyDebuggingInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo build() {
      com.google.dataflow.v1beta3.HotKeyDebuggingInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo buildPartial() {
      com.google.dataflow.v1beta3.HotKeyDebuggingInfo result =
          new com.google.dataflow.v1beta3.HotKeyDebuggingInfo(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.dataflow.v1beta3.HotKeyDebuggingInfo result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.detectedHotKeys_ =
            internalGetDetectedHotKeys().build(DetectedHotKeysDefaultEntryHolder.defaultEntry);
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo) {
        return mergeFrom((com.google.dataflow.v1beta3.HotKeyDebuggingInfo) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.dataflow.v1beta3.HotKeyDebuggingInfo other) {
      if (other == com.google.dataflow.v1beta3.HotKeyDebuggingInfo.getDefaultInstance())
        return this;
      internalGetMutableDetectedHotKeys().mergeFrom(other.internalGetDetectedHotKeys());
      bitField0_ |= 0x00000001;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.protobuf.MapEntry<
                        java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
                    detectedHotKeys__ =
                        input.readMessage(
                            DetectedHotKeysDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableDetectedHotKeys()
                    .ensureBuilderMap()
                    .put(detectedHotKeys__.getKey(), detectedHotKeys__.getValue());
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private static final class DetectedHotKeysConverter
        implements com.google.protobuf.MapFieldBuilder.Converter<
            java.lang.Long,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo> {
      @java.lang.Override
      public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo build(
          com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder val) {
        if (val instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) {
          return (com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) val;
        }
        return ((com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
          defaultEntry() {
        return DetectedHotKeysDefaultEntryHolder.defaultEntry;
      }
    }
    ;

    private static final DetectedHotKeysConverter detectedHotKeysConverter =
        new DetectedHotKeysConverter();

    private com.google.protobuf.MapFieldBuilder<
            java.lang.Long,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder>
        detectedHotKeys_;

    private com.google.protobuf.MapFieldBuilder<
            java.lang.Long,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder>
        internalGetDetectedHotKeys() {
      if (detectedHotKeys_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(detectedHotKeysConverter);
      }
      return detectedHotKeys_;
    }

    private com.google.protobuf.MapFieldBuilder<
            java.lang.Long,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo,
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder>
        internalGetMutableDetectedHotKeys() {
      if (detectedHotKeys_ == null) {
        detectedHotKeys_ = new com.google.protobuf.MapFieldBuilder<>(detectedHotKeysConverter);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return detectedHotKeys_;
    }

    public int getDetectedHotKeysCount() {
      return internalGetDetectedHotKeys().ensureBuilderMap().size();
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    @java.lang.Override
    public boolean containsDetectedHotKeys(long key) {

      return internalGetDetectedHotKeys().ensureBuilderMap().containsKey(key);
    }

    /** Use {@link #getDetectedHotKeysMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
        getDetectedHotKeys() {
      return getDetectedHotKeysMap();
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
        getDetectedHotKeysMap() {
      return internalGetDetectedHotKeys().getImmutableMap();
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    @java.lang.Override
    public /* nullable */ com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo
        getDetectedHotKeysOrDefault(
            long key,
            /* nullable */
            com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo defaultValue) {

      java.util.Map<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder>
          map = internalGetMutableDetectedHotKeys().ensureBuilderMap();
      return map.containsKey(key) ? detectedHotKeysConverter.build(map.get(key)) : defaultValue;
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    @java.lang.Override
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo getDetectedHotKeysOrThrow(
        long key) {

      java.util.Map<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder>
          map = internalGetMutableDetectedHotKeys().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return detectedHotKeysConverter.build(map.get(key));
    }

    public Builder clearDetectedHotKeys() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableDetectedHotKeys().clear();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    public Builder removeDetectedHotKeys(long key) {

      internalGetMutableDetectedHotKeys().ensureBuilderMap().remove(key);
      return this;
    }

    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
        getMutableDetectedHotKeys() {
      bitField0_ |= 0x00000001;
      return internalGetMutableDetectedHotKeys().ensureMessageMap();
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    public Builder putDetectedHotKeys(
        long key, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo value) {

      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableDetectedHotKeys().ensureBuilderMap().put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    public Builder putAllDetectedHotKeys(
        java.util.Map<java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
            values) {
      for (java.util.Map.Entry<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo>
          e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableDetectedHotKeys().ensureBuilderMap().putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Debugging information for each detected hot key. Keyed by a hash of the
     * key.
     * </pre>
     *
     * <code>
     * map&lt;uint64, .google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo&gt; detected_hot_keys = 1;
     * </code>
     */
    public com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder
        putDetectedHotKeysBuilderIfAbsent(long key) {
      java.util.Map<
              java.lang.Long, com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder>
          builderMap = internalGetMutableDetectedHotKeys().ensureBuilderMap();
      com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfoOrBuilder entry =
          builderMap.get(key);
      if (entry == null) {
        entry = com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) {
        entry = ((com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.dataflow.v1beta3.HotKeyDebuggingInfo.HotKeyInfo.Builder) entry;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.dataflow.v1beta3.HotKeyDebuggingInfo)
  }

  // @@protoc_insertion_point(class_scope:google.dataflow.v1beta3.HotKeyDebuggingInfo)
  private static final com.google.dataflow.v1beta3.HotKeyDebuggingInfo DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.dataflow.v1beta3.HotKeyDebuggingInfo();
  }

  public static com.google.dataflow.v1beta3.HotKeyDebuggingInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HotKeyDebuggingInfo> PARSER =
      new com.google.protobuf.AbstractParser<HotKeyDebuggingInfo>() {
        @java.lang.Override
        public HotKeyDebuggingInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<HotKeyDebuggingInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HotKeyDebuggingInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.dataflow.v1beta3.HotKeyDebuggingInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
