/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/connection/v1/connection.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.bigquery.connection.v1;

/**
 *
 *
 * <pre>
 * Container for connection properties to execute stored procedures for Apache
 * Spark.
 * </pre>
 *
 * Protobuf type {@code google.cloud.bigquery.connection.v1.SparkProperties}
 */
public final class SparkProperties extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.bigquery.connection.v1.SparkProperties)
    SparkPropertiesOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use SparkProperties.newBuilder() to construct.
  private SparkProperties(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SparkProperties() {
    serviceAccountId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SparkProperties();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.bigquery.connection.v1.ConnectionOuterClass
        .internal_static_google_cloud_bigquery_connection_v1_SparkProperties_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.bigquery.connection.v1.ConnectionOuterClass
        .internal_static_google_cloud_bigquery_connection_v1_SparkProperties_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.bigquery.connection.v1.SparkProperties.class,
            com.google.cloud.bigquery.connection.v1.SparkProperties.Builder.class);
  }

  private int bitField0_;
  public static final int SERVICE_ACCOUNT_ID_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object serviceAccountId_ = "";
  /**
   *
   *
   * <pre>
   * Output only. The account ID of the service created for the purpose of this
   * connection.
   *
   * The service account does not have any permissions associated with it when
   * it is created. After creation, customers delegate permissions to the
   * service account. When the connection is used in the context of a stored
   * procedure for Apache Spark in BigQuery, the service account is used to
   * connect to the desired resources in Google Cloud.
   *
   * The account ID is in the form of:
   * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
   * </pre>
   *
   * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The serviceAccountId.
   */
  @java.lang.Override
  public java.lang.String getServiceAccountId() {
    java.lang.Object ref = serviceAccountId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      serviceAccountId_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Output only. The account ID of the service created for the purpose of this
   * connection.
   *
   * The service account does not have any permissions associated with it when
   * it is created. After creation, customers delegate permissions to the
   * service account. When the connection is used in the context of a stored
   * procedure for Apache Spark in BigQuery, the service account is used to
   * connect to the desired resources in Google Cloud.
   *
   * The account ID is in the form of:
   * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
   * </pre>
   *
   * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for serviceAccountId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getServiceAccountIdBytes() {
    java.lang.Object ref = serviceAccountId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      serviceAccountId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int METASTORE_SERVICE_CONFIG_FIELD_NUMBER = 3;
  private com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastoreServiceConfig_;
  /**
   *
   *
   * <pre>
   * Optional. Dataproc Metastore Service configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the metastoreServiceConfig field is set.
   */
  @java.lang.Override
  public boolean hasMetastoreServiceConfig() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Optional. Dataproc Metastore Service configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The metastoreServiceConfig.
   */
  @java.lang.Override
  public com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig
      getMetastoreServiceConfig() {
    return metastoreServiceConfig_ == null
        ? com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.getDefaultInstance()
        : metastoreServiceConfig_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Dataproc Metastore Service configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.bigquery.connection.v1.MetastoreServiceConfigOrBuilder
      getMetastoreServiceConfigOrBuilder() {
    return metastoreServiceConfig_ == null
        ? com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.getDefaultInstance()
        : metastoreServiceConfig_;
  }

  public static final int SPARK_HISTORY_SERVER_CONFIG_FIELD_NUMBER = 4;
  private com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig
      sparkHistoryServerConfig_;
  /**
   *
   *
   * <pre>
   * Optional. Spark History Server configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the sparkHistoryServerConfig field is set.
   */
  @java.lang.Override
  public boolean hasSparkHistoryServerConfig() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Optional. Spark History Server configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The sparkHistoryServerConfig.
   */
  @java.lang.Override
  public com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig
      getSparkHistoryServerConfig() {
    return sparkHistoryServerConfig_ == null
        ? com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.getDefaultInstance()
        : sparkHistoryServerConfig_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Spark History Server configuration for the connection.
   * </pre>
   *
   * <code>
   * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfigOrBuilder
      getSparkHistoryServerConfigOrBuilder() {
    return sparkHistoryServerConfig_ == null
        ? com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.getDefaultInstance()
        : sparkHistoryServerConfig_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serviceAccountId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serviceAccountId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getMetastoreServiceConfig());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getSparkHistoryServerConfig());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serviceAccountId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serviceAccountId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(3, getMetastoreServiceConfig());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              4, getSparkHistoryServerConfig());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.bigquery.connection.v1.SparkProperties)) {
      return super.equals(obj);
    }
    com.google.cloud.bigquery.connection.v1.SparkProperties other =
        (com.google.cloud.bigquery.connection.v1.SparkProperties) obj;

    if (!getServiceAccountId().equals(other.getServiceAccountId())) return false;
    if (hasMetastoreServiceConfig() != other.hasMetastoreServiceConfig()) return false;
    if (hasMetastoreServiceConfig()) {
      if (!getMetastoreServiceConfig().equals(other.getMetastoreServiceConfig())) return false;
    }
    if (hasSparkHistoryServerConfig() != other.hasSparkHistoryServerConfig()) return false;
    if (hasSparkHistoryServerConfig()) {
      if (!getSparkHistoryServerConfig().equals(other.getSparkHistoryServerConfig())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SERVICE_ACCOUNT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getServiceAccountId().hashCode();
    if (hasMetastoreServiceConfig()) {
      hash = (37 * hash) + METASTORE_SERVICE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getMetastoreServiceConfig().hashCode();
    }
    if (hasSparkHistoryServerConfig()) {
      hash = (37 * hash) + SPARK_HISTORY_SERVER_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getSparkHistoryServerConfig().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.bigquery.connection.v1.SparkProperties prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Container for connection properties to execute stored procedures for Apache
   * Spark.
   * </pre>
   *
   * Protobuf type {@code google.cloud.bigquery.connection.v1.SparkProperties}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.bigquery.connection.v1.SparkProperties)
      com.google.cloud.bigquery.connection.v1.SparkPropertiesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.bigquery.connection.v1.ConnectionOuterClass
          .internal_static_google_cloud_bigquery_connection_v1_SparkProperties_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.bigquery.connection.v1.ConnectionOuterClass
          .internal_static_google_cloud_bigquery_connection_v1_SparkProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.bigquery.connection.v1.SparkProperties.class,
              com.google.cloud.bigquery.connection.v1.SparkProperties.Builder.class);
    }

    // Construct using com.google.cloud.bigquery.connection.v1.SparkProperties.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getMetastoreServiceConfigFieldBuilder();
        getSparkHistoryServerConfigFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      serviceAccountId_ = "";
      metastoreServiceConfig_ = null;
      if (metastoreServiceConfigBuilder_ != null) {
        metastoreServiceConfigBuilder_.dispose();
        metastoreServiceConfigBuilder_ = null;
      }
      sparkHistoryServerConfig_ = null;
      if (sparkHistoryServerConfigBuilder_ != null) {
        sparkHistoryServerConfigBuilder_.dispose();
        sparkHistoryServerConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.bigquery.connection.v1.ConnectionOuterClass
          .internal_static_google_cloud_bigquery_connection_v1_SparkProperties_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.bigquery.connection.v1.SparkProperties getDefaultInstanceForType() {
      return com.google.cloud.bigquery.connection.v1.SparkProperties.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.bigquery.connection.v1.SparkProperties build() {
      com.google.cloud.bigquery.connection.v1.SparkProperties result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.bigquery.connection.v1.SparkProperties buildPartial() {
      com.google.cloud.bigquery.connection.v1.SparkProperties result =
          new com.google.cloud.bigquery.connection.v1.SparkProperties(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.bigquery.connection.v1.SparkProperties result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.serviceAccountId_ = serviceAccountId_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.metastoreServiceConfig_ =
            metastoreServiceConfigBuilder_ == null
                ? metastoreServiceConfig_
                : metastoreServiceConfigBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.sparkHistoryServerConfig_ =
            sparkHistoryServerConfigBuilder_ == null
                ? sparkHistoryServerConfig_
                : sparkHistoryServerConfigBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.bigquery.connection.v1.SparkProperties) {
        return mergeFrom((com.google.cloud.bigquery.connection.v1.SparkProperties) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.bigquery.connection.v1.SparkProperties other) {
      if (other == com.google.cloud.bigquery.connection.v1.SparkProperties.getDefaultInstance())
        return this;
      if (!other.getServiceAccountId().isEmpty()) {
        serviceAccountId_ = other.serviceAccountId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasMetastoreServiceConfig()) {
        mergeMetastoreServiceConfig(other.getMetastoreServiceConfig());
      }
      if (other.hasSparkHistoryServerConfig()) {
        mergeSparkHistoryServerConfig(other.getSparkHistoryServerConfig());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                serviceAccountId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 26:
              {
                input.readMessage(
                    getMetastoreServiceConfigFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(
                    getSparkHistoryServerConfigFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 34
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object serviceAccountId_ = "";
    /**
     *
     *
     * <pre>
     * Output only. The account ID of the service created for the purpose of this
     * connection.
     *
     * The service account does not have any permissions associated with it when
     * it is created. After creation, customers delegate permissions to the
     * service account. When the connection is used in the context of a stored
     * procedure for Apache Spark in BigQuery, the service account is used to
     * connect to the desired resources in Google Cloud.
     *
     * The account ID is in the form of:
     * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
     * </pre>
     *
     * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The serviceAccountId.
     */
    public java.lang.String getServiceAccountId() {
      java.lang.Object ref = serviceAccountId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serviceAccountId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. The account ID of the service created for the purpose of this
     * connection.
     *
     * The service account does not have any permissions associated with it when
     * it is created. After creation, customers delegate permissions to the
     * service account. When the connection is used in the context of a stored
     * procedure for Apache Spark in BigQuery, the service account is used to
     * connect to the desired resources in Google Cloud.
     *
     * The account ID is in the form of:
     * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
     * </pre>
     *
     * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The bytes for serviceAccountId.
     */
    public com.google.protobuf.ByteString getServiceAccountIdBytes() {
      java.lang.Object ref = serviceAccountId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        serviceAccountId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. The account ID of the service created for the purpose of this
     * connection.
     *
     * The service account does not have any permissions associated with it when
     * it is created. After creation, customers delegate permissions to the
     * service account. When the connection is used in the context of a stored
     * procedure for Apache Spark in BigQuery, the service account is used to
     * connect to the desired resources in Google Cloud.
     *
     * The account ID is in the form of:
     * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
     * </pre>
     *
     * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The serviceAccountId to set.
     * @return This builder for chaining.
     */
    public Builder setServiceAccountId(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      serviceAccountId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. The account ID of the service created for the purpose of this
     * connection.
     *
     * The service account does not have any permissions associated with it when
     * it is created. After creation, customers delegate permissions to the
     * service account. When the connection is used in the context of a stored
     * procedure for Apache Spark in BigQuery, the service account is used to
     * connect to the desired resources in Google Cloud.
     *
     * The account ID is in the form of:
     * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
     * </pre>
     *
     * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearServiceAccountId() {
      serviceAccountId_ = getDefaultInstance().getServiceAccountId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. The account ID of the service created for the purpose of this
     * connection.
     *
     * The service account does not have any permissions associated with it when
     * it is created. After creation, customers delegate permissions to the
     * service account. When the connection is used in the context of a stored
     * procedure for Apache Spark in BigQuery, the service account is used to
     * connect to the desired resources in Google Cloud.
     *
     * The account ID is in the form of:
     * bqcx-&lt;projectnumber&gt;-&lt;uniqueid&gt;&#64;gcp-sa-bigquery-consp.iam.gserviceaccount.com
     * </pre>
     *
     * <code>string service_account_id = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The bytes for serviceAccountId to set.
     * @return This builder for chaining.
     */
    public Builder setServiceAccountIdBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      serviceAccountId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastoreServiceConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig,
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.Builder,
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfigOrBuilder>
        metastoreServiceConfigBuilder_;
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the metastoreServiceConfig field is set.
     */
    public boolean hasMetastoreServiceConfig() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The metastoreServiceConfig.
     */
    public com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig
        getMetastoreServiceConfig() {
      if (metastoreServiceConfigBuilder_ == null) {
        return metastoreServiceConfig_ == null
            ? com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.getDefaultInstance()
            : metastoreServiceConfig_;
      } else {
        return metastoreServiceConfigBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setMetastoreServiceConfig(
        com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig value) {
      if (metastoreServiceConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metastoreServiceConfig_ = value;
      } else {
        metastoreServiceConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setMetastoreServiceConfig(
        com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.Builder builderForValue) {
      if (metastoreServiceConfigBuilder_ == null) {
        metastoreServiceConfig_ = builderForValue.build();
      } else {
        metastoreServiceConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeMetastoreServiceConfig(
        com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig value) {
      if (metastoreServiceConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && metastoreServiceConfig_ != null
            && metastoreServiceConfig_
                != com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig
                    .getDefaultInstance()) {
          getMetastoreServiceConfigBuilder().mergeFrom(value);
        } else {
          metastoreServiceConfig_ = value;
        }
      } else {
        metastoreServiceConfigBuilder_.mergeFrom(value);
      }
      if (metastoreServiceConfig_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearMetastoreServiceConfig() {
      bitField0_ = (bitField0_ & ~0x00000002);
      metastoreServiceConfig_ = null;
      if (metastoreServiceConfigBuilder_ != null) {
        metastoreServiceConfigBuilder_.dispose();
        metastoreServiceConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.Builder
        getMetastoreServiceConfigBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMetastoreServiceConfigFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.bigquery.connection.v1.MetastoreServiceConfigOrBuilder
        getMetastoreServiceConfigOrBuilder() {
      if (metastoreServiceConfigBuilder_ != null) {
        return metastoreServiceConfigBuilder_.getMessageOrBuilder();
      } else {
        return metastoreServiceConfig_ == null
            ? com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.getDefaultInstance()
            : metastoreServiceConfig_;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Dataproc Metastore Service configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.MetastoreServiceConfig metastore_service_config = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig,
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.Builder,
            com.google.cloud.bigquery.connection.v1.MetastoreServiceConfigOrBuilder>
        getMetastoreServiceConfigFieldBuilder() {
      if (metastoreServiceConfigBuilder_ == null) {
        metastoreServiceConfigBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig,
                com.google.cloud.bigquery.connection.v1.MetastoreServiceConfig.Builder,
                com.google.cloud.bigquery.connection.v1.MetastoreServiceConfigOrBuilder>(
                getMetastoreServiceConfig(), getParentForChildren(), isClean());
        metastoreServiceConfig_ = null;
      }
      return metastoreServiceConfigBuilder_;
    }

    private com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig
        sparkHistoryServerConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig,
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.Builder,
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfigOrBuilder>
        sparkHistoryServerConfigBuilder_;
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the sparkHistoryServerConfig field is set.
     */
    public boolean hasSparkHistoryServerConfig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The sparkHistoryServerConfig.
     */
    public com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig
        getSparkHistoryServerConfig() {
      if (sparkHistoryServerConfigBuilder_ == null) {
        return sparkHistoryServerConfig_ == null
            ? com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.getDefaultInstance()
            : sparkHistoryServerConfig_;
      } else {
        return sparkHistoryServerConfigBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSparkHistoryServerConfig(
        com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig value) {
      if (sparkHistoryServerConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sparkHistoryServerConfig_ = value;
      } else {
        sparkHistoryServerConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSparkHistoryServerConfig(
        com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.Builder builderForValue) {
      if (sparkHistoryServerConfigBuilder_ == null) {
        sparkHistoryServerConfig_ = builderForValue.build();
      } else {
        sparkHistoryServerConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeSparkHistoryServerConfig(
        com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig value) {
      if (sparkHistoryServerConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)
            && sparkHistoryServerConfig_ != null
            && sparkHistoryServerConfig_
                != com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig
                    .getDefaultInstance()) {
          getSparkHistoryServerConfigBuilder().mergeFrom(value);
        } else {
          sparkHistoryServerConfig_ = value;
        }
      } else {
        sparkHistoryServerConfigBuilder_.mergeFrom(value);
      }
      if (sparkHistoryServerConfig_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearSparkHistoryServerConfig() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sparkHistoryServerConfig_ = null;
      if (sparkHistoryServerConfigBuilder_ != null) {
        sparkHistoryServerConfigBuilder_.dispose();
        sparkHistoryServerConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.Builder
        getSparkHistoryServerConfigBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getSparkHistoryServerConfigFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfigOrBuilder
        getSparkHistoryServerConfigOrBuilder() {
      if (sparkHistoryServerConfigBuilder_ != null) {
        return sparkHistoryServerConfigBuilder_.getMessageOrBuilder();
      } else {
        return sparkHistoryServerConfig_ == null
            ? com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.getDefaultInstance()
            : sparkHistoryServerConfig_;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Spark History Server configuration for the connection.
     * </pre>
     *
     * <code>
     * .google.cloud.bigquery.connection.v1.SparkHistoryServerConfig spark_history_server_config = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig,
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.Builder,
            com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfigOrBuilder>
        getSparkHistoryServerConfigFieldBuilder() {
      if (sparkHistoryServerConfigBuilder_ == null) {
        sparkHistoryServerConfigBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig,
                com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfig.Builder,
                com.google.cloud.bigquery.connection.v1.SparkHistoryServerConfigOrBuilder>(
                getSparkHistoryServerConfig(), getParentForChildren(), isClean());
        sparkHistoryServerConfig_ = null;
      }
      return sparkHistoryServerConfigBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.bigquery.connection.v1.SparkProperties)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.connection.v1.SparkProperties)
  private static final com.google.cloud.bigquery.connection.v1.SparkProperties DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.bigquery.connection.v1.SparkProperties();
  }

  public static com.google.cloud.bigquery.connection.v1.SparkProperties getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SparkProperties> PARSER =
      new com.google.protobuf.AbstractParser<SparkProperties>() {
        @java.lang.Override
        public SparkProperties parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<SparkProperties> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SparkProperties> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.bigquery.connection.v1.SparkProperties getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
