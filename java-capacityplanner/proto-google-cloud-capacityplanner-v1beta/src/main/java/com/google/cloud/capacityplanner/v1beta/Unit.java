/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/capacityplanner/v1beta/resource.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.capacityplanner.v1beta;

/** Protobuf enum {@code google.cloud.capacityplanner.v1beta.Unit} */
public enum Unit implements com.google.protobuf.ProtocolMessageEnum {
  /** <code>UNIT_UNSPECIFIED = 0;</code> */
  UNIT_UNSPECIFIED(0),
  /** <code>UNIT_COUNT = 1;</code> */
  UNIT_COUNT(1),
  /**
   *
   *
   * <pre>
   * Kilobytes (10^3 bytes)
   * </pre>
   *
   * <code>KB = 2;</code>
   */
  KB(2),
  /**
   *
   *
   * <pre>
   * Gigabytes (10^9 bytes)
   * </pre>
   *
   * <code>GB = 3;</code>
   */
  GB(3),
  /**
   *
   *
   * <pre>
   * Terabytes (10^12 bytes)
   * </pre>
   *
   * <code>TB = 4;</code>
   */
  TB(4),
  /**
   *
   *
   * <pre>
   * Mebibytes (2^20 bytes)
   * </pre>
   *
   * <code>MIB = 17;</code>
   */
  MIB(17),
  /**
   *
   *
   * <pre>
   * Gibibytes (2^30 bytes)
   * </pre>
   *
   * <code>GIB = 5;</code>
   */
  GIB(5),
  /**
   *
   *
   * <pre>
   * Tebibytes (2^40 bytes)
   * </pre>
   *
   * <code>TIB = 6;</code>
   */
  TIB(6),
  /**
   *
   *
   * <pre>
   * Queries per second
   * </pre>
   *
   * <code>QPS = 7;</code>
   */
  QPS(7),
  /**
   *
   *
   * <pre>
   * Megabytes (10^6 bytes)
   * </pre>
   *
   * <code>MB = 8;</code>
   */
  MB(8),
  /**
   *
   *
   * <pre>
   * Pebibytes (2^50 bytes)
   * </pre>
   *
   * <code>PIB = 9;</code>
   */
  PIB(9),
  /**
   *
   *
   * <pre>
   * Terabits (10^12 bits) per second
   * </pre>
   *
   * <code>TBPS = 10 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  TBPS(10),
  /** <code>GBPS_BITS = 11;</code> */
  GBPS_BITS(11),
  /** <code>GIB_BITS = 12;</code> */
  GIB_BITS(12),
  /** <code>MBPS_BITS = 13;</code> */
  MBPS_BITS(13),
  /** <code>MBPS_BYTES = 14;</code> */
  MBPS_BYTES(14),
  /** <code>TBPS_BITS = 15;</code> */
  TBPS_BITS(15),
  /** <code>TBPS_BYTES = 16;</code> */
  TBPS_BYTES(16),
  /** <code>KOPS = 18;</code> */
  KOPS(18),
  UNRECOGNIZED(-1),
  ;

  /** <code>UNIT_UNSPECIFIED = 0;</code> */
  public static final int UNIT_UNSPECIFIED_VALUE = 0;

  /** <code>UNIT_COUNT = 1;</code> */
  public static final int UNIT_COUNT_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Kilobytes (10^3 bytes)
   * </pre>
   *
   * <code>KB = 2;</code>
   */
  public static final int KB_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Gigabytes (10^9 bytes)
   * </pre>
   *
   * <code>GB = 3;</code>
   */
  public static final int GB_VALUE = 3;

  /**
   *
   *
   * <pre>
   * Terabytes (10^12 bytes)
   * </pre>
   *
   * <code>TB = 4;</code>
   */
  public static final int TB_VALUE = 4;

  /**
   *
   *
   * <pre>
   * Mebibytes (2^20 bytes)
   * </pre>
   *
   * <code>MIB = 17;</code>
   */
  public static final int MIB_VALUE = 17;

  /**
   *
   *
   * <pre>
   * Gibibytes (2^30 bytes)
   * </pre>
   *
   * <code>GIB = 5;</code>
   */
  public static final int GIB_VALUE = 5;

  /**
   *
   *
   * <pre>
   * Tebibytes (2^40 bytes)
   * </pre>
   *
   * <code>TIB = 6;</code>
   */
  public static final int TIB_VALUE = 6;

  /**
   *
   *
   * <pre>
   * Queries per second
   * </pre>
   *
   * <code>QPS = 7;</code>
   */
  public static final int QPS_VALUE = 7;

  /**
   *
   *
   * <pre>
   * Megabytes (10^6 bytes)
   * </pre>
   *
   * <code>MB = 8;</code>
   */
  public static final int MB_VALUE = 8;

  /**
   *
   *
   * <pre>
   * Pebibytes (2^50 bytes)
   * </pre>
   *
   * <code>PIB = 9;</code>
   */
  public static final int PIB_VALUE = 9;

  /**
   *
   *
   * <pre>
   * Terabits (10^12 bits) per second
   * </pre>
   *
   * <code>TBPS = 10 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int TBPS_VALUE = 10;

  /** <code>GBPS_BITS = 11;</code> */
  public static final int GBPS_BITS_VALUE = 11;

  /** <code>GIB_BITS = 12;</code> */
  public static final int GIB_BITS_VALUE = 12;

  /** <code>MBPS_BITS = 13;</code> */
  public static final int MBPS_BITS_VALUE = 13;

  /** <code>MBPS_BYTES = 14;</code> */
  public static final int MBPS_BYTES_VALUE = 14;

  /** <code>TBPS_BITS = 15;</code> */
  public static final int TBPS_BITS_VALUE = 15;

  /** <code>TBPS_BYTES = 16;</code> */
  public static final int TBPS_BYTES_VALUE = 16;

  /** <code>KOPS = 18;</code> */
  public static final int KOPS_VALUE = 18;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Unit valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Unit forNumber(int value) {
    switch (value) {
      case 0:
        return UNIT_UNSPECIFIED;
      case 1:
        return UNIT_COUNT;
      case 2:
        return KB;
      case 3:
        return GB;
      case 4:
        return TB;
      case 17:
        return MIB;
      case 5:
        return GIB;
      case 6:
        return TIB;
      case 7:
        return QPS;
      case 8:
        return MB;
      case 9:
        return PIB;
      case 10:
        return TBPS;
      case 11:
        return GBPS_BITS;
      case 12:
        return GIB_BITS;
      case 13:
        return MBPS_BITS;
      case 14:
        return MBPS_BYTES;
      case 15:
        return TBPS_BITS;
      case 16:
        return TBPS_BYTES;
      case 18:
        return KOPS;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Unit> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<Unit> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<Unit>() {
        public Unit findValueByNumber(int number) {
          return Unit.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.capacityplanner.v1beta.ResourceProto.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final Unit[] VALUES = values();

  public static Unit valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Unit(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.capacityplanner.v1beta.Unit)
}
