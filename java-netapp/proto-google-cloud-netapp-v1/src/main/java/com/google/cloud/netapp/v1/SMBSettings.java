/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/netapp/v1/volume.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.netapp.v1;

/**
 *
 *
 * <pre>
 * SMBSettings
 * Modifies the behaviour of a SMB volume.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.netapp.v1.SMBSettings}
 */
public enum SMBSettings implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Unspecified default option
   * </pre>
   *
   * <code>SMB_SETTINGS_UNSPECIFIED = 0;</code>
   */
  SMB_SETTINGS_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * SMB setting encrypt data
   * </pre>
   *
   * <code>ENCRYPT_DATA = 1;</code>
   */
  ENCRYPT_DATA(1),
  /**
   *
   *
   * <pre>
   * SMB setting browsable
   * </pre>
   *
   * <code>BROWSABLE = 2;</code>
   */
  BROWSABLE(2),
  /**
   *
   *
   * <pre>
   * SMB setting notify change
   * </pre>
   *
   * <code>CHANGE_NOTIFY = 3;</code>
   */
  CHANGE_NOTIFY(3),
  /**
   *
   *
   * <pre>
   * SMB setting not to notify change
   * </pre>
   *
   * <code>NON_BROWSABLE = 4;</code>
   */
  NON_BROWSABLE(4),
  /**
   *
   *
   * <pre>
   * SMB setting oplocks
   * </pre>
   *
   * <code>OPLOCKS = 5;</code>
   */
  OPLOCKS(5),
  /**
   *
   *
   * <pre>
   * SMB setting to show snapshots
   * </pre>
   *
   * <code>SHOW_SNAPSHOT = 6;</code>
   */
  SHOW_SNAPSHOT(6),
  /**
   *
   *
   * <pre>
   * SMB setting to show previous versions
   * </pre>
   *
   * <code>SHOW_PREVIOUS_VERSIONS = 7;</code>
   */
  SHOW_PREVIOUS_VERSIONS(7),
  /**
   *
   *
   * <pre>
   * SMB setting to access volume based on enumerartion
   * </pre>
   *
   * <code>ACCESS_BASED_ENUMERATION = 8;</code>
   */
  ACCESS_BASED_ENUMERATION(8),
  /**
   *
   *
   * <pre>
   * Continuously available enumeration
   * </pre>
   *
   * <code>CONTINUOUSLY_AVAILABLE = 9;</code>
   */
  CONTINUOUSLY_AVAILABLE(9),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Unspecified default option
   * </pre>
   *
   * <code>SMB_SETTINGS_UNSPECIFIED = 0;</code>
   */
  public static final int SMB_SETTINGS_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * SMB setting encrypt data
   * </pre>
   *
   * <code>ENCRYPT_DATA = 1;</code>
   */
  public static final int ENCRYPT_DATA_VALUE = 1;
  /**
   *
   *
   * <pre>
   * SMB setting browsable
   * </pre>
   *
   * <code>BROWSABLE = 2;</code>
   */
  public static final int BROWSABLE_VALUE = 2;
  /**
   *
   *
   * <pre>
   * SMB setting notify change
   * </pre>
   *
   * <code>CHANGE_NOTIFY = 3;</code>
   */
  public static final int CHANGE_NOTIFY_VALUE = 3;
  /**
   *
   *
   * <pre>
   * SMB setting not to notify change
   * </pre>
   *
   * <code>NON_BROWSABLE = 4;</code>
   */
  public static final int NON_BROWSABLE_VALUE = 4;
  /**
   *
   *
   * <pre>
   * SMB setting oplocks
   * </pre>
   *
   * <code>OPLOCKS = 5;</code>
   */
  public static final int OPLOCKS_VALUE = 5;
  /**
   *
   *
   * <pre>
   * SMB setting to show snapshots
   * </pre>
   *
   * <code>SHOW_SNAPSHOT = 6;</code>
   */
  public static final int SHOW_SNAPSHOT_VALUE = 6;
  /**
   *
   *
   * <pre>
   * SMB setting to show previous versions
   * </pre>
   *
   * <code>SHOW_PREVIOUS_VERSIONS = 7;</code>
   */
  public static final int SHOW_PREVIOUS_VERSIONS_VALUE = 7;
  /**
   *
   *
   * <pre>
   * SMB setting to access volume based on enumerartion
   * </pre>
   *
   * <code>ACCESS_BASED_ENUMERATION = 8;</code>
   */
  public static final int ACCESS_BASED_ENUMERATION_VALUE = 8;
  /**
   *
   *
   * <pre>
   * Continuously available enumeration
   * </pre>
   *
   * <code>CONTINUOUSLY_AVAILABLE = 9;</code>
   */
  public static final int CONTINUOUSLY_AVAILABLE_VALUE = 9;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SMBSettings valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SMBSettings forNumber(int value) {
    switch (value) {
      case 0:
        return SMB_SETTINGS_UNSPECIFIED;
      case 1:
        return ENCRYPT_DATA;
      case 2:
        return BROWSABLE;
      case 3:
        return CHANGE_NOTIFY;
      case 4:
        return NON_BROWSABLE;
      case 5:
        return OPLOCKS;
      case 6:
        return SHOW_SNAPSHOT;
      case 7:
        return SHOW_PREVIOUS_VERSIONS;
      case 8:
        return ACCESS_BASED_ENUMERATION;
      case 9:
        return CONTINUOUSLY_AVAILABLE;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SMBSettings> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<SMBSettings> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<SMBSettings>() {
        public SMBSettings findValueByNumber(int number) {
          return SMBSettings.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.netapp.v1.VolumeProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final SMBSettings[] VALUES = values();

  public static SMBSettings valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SMBSettings(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.netapp.v1.SMBSettings)
}
