/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/shopping/merchant/notifications/v1beta/notificationsapi.proto

// Protobuf Java Version: 3.25.3
package com.google.shopping.merchant.notifications.v1beta;

public interface NotificationSubscriptionOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.shopping.merchant.notifications.v1beta.NotificationSubscription)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * If this value is true, the requesting account is notified of the
   * specified event for all managed accounts (can be subaccounts or other
   * linked accounts) including newly added accounts on a daily basis.
   * </pre>
   *
   * <code>bool all_managed_accounts = 3;</code>
   *
   * @return Whether the allManagedAccounts field is set.
   */
  boolean hasAllManagedAccounts();
  /**
   *
   *
   * <pre>
   * If this value is true, the requesting account is notified of the
   * specified event for all managed accounts (can be subaccounts or other
   * linked accounts) including newly added accounts on a daily basis.
   * </pre>
   *
   * <code>bool all_managed_accounts = 3;</code>
   *
   * @return The allManagedAccounts.
   */
  boolean getAllManagedAccounts();

  /**
   *
   *
   * <pre>
   * The `name` of the account you want to receive notifications for.
   * Format: `accounts/{account}`
   * </pre>
   *
   * <code>string target_account = 4;</code>
   *
   * @return Whether the targetAccount field is set.
   */
  boolean hasTargetAccount();
  /**
   *
   *
   * <pre>
   * The `name` of the account you want to receive notifications for.
   * Format: `accounts/{account}`
   * </pre>
   *
   * <code>string target_account = 4;</code>
   *
   * @return The targetAccount.
   */
  java.lang.String getTargetAccount();
  /**
   *
   *
   * <pre>
   * The `name` of the account you want to receive notifications for.
   * Format: `accounts/{account}`
   * </pre>
   *
   * <code>string target_account = 4;</code>
   *
   * @return The bytes for targetAccount.
   */
  com.google.protobuf.ByteString getTargetAccountBytes();

  /**
   *
   *
   * <pre>
   * Output only. The `name` of the notification configuration. Generated by the
   * Content API upon creation of a new `NotificationSubscription`. The
   * `account` represents the merchant ID of the merchant that owns the
   * configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Output only. The `name` of the notification configuration. Generated by the
   * Content API upon creation of a new `NotificationSubscription`. The
   * `account` represents the merchant ID of the merchant that owns the
   * configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * The event that the merchant wants to be notified about.
   * </pre>
   *
   * <code>
   * .google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType registered_event = 2;
   * </code>
   *
   * @return The enum numeric value on the wire for registeredEvent.
   */
  int getRegisteredEventValue();
  /**
   *
   *
   * <pre>
   * The event that the merchant wants to be notified about.
   * </pre>
   *
   * <code>
   * .google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType registered_event = 2;
   * </code>
   *
   * @return The registeredEvent.
   */
  com.google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType
      getRegisteredEvent();

  /**
   *
   *
   * <pre>
   * URL to be used to push the notification to the merchant.
   * </pre>
   *
   * <code>string call_back_uri = 5;</code>
   *
   * @return The callBackUri.
   */
  java.lang.String getCallBackUri();
  /**
   *
   *
   * <pre>
   * URL to be used to push the notification to the merchant.
   * </pre>
   *
   * <code>string call_back_uri = 5;</code>
   *
   * @return The bytes for callBackUri.
   */
  com.google.protobuf.ByteString getCallBackUriBytes();

  com.google.shopping.merchant.notifications.v1beta.NotificationSubscription.InterestedInCase
      getInterestedInCase();
}
