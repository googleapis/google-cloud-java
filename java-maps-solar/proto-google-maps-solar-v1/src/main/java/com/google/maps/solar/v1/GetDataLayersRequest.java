/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * Request message for `Solar.GetDataLayers`.
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.GetDataLayersRequest}
 */
public final class GetDataLayersRequest extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.GetDataLayersRequest)
    GetDataLayersRequestOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use GetDataLayersRequest.newBuilder() to construct.
  private GetDataLayersRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private GetDataLayersRequest() {
    view_ = 0;
    requiredQuality_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new GetDataLayersRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_GetDataLayersRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_GetDataLayersRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.GetDataLayersRequest.class,
            com.google.maps.solar.v1.GetDataLayersRequest.Builder.class);
  }

  private int bitField0_;
  public static final int LOCATION_FIELD_NUMBER = 1;
  private com.google.type.LatLng location_;
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return Whether the location field is set.
   */
  @java.lang.Override
  public boolean hasLocation() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The location.
   */
  @java.lang.Override
  public com.google.type.LatLng getLocation() {
    return location_ == null ? com.google.type.LatLng.getDefaultInstance() : location_;
  }
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.type.LatLngOrBuilder getLocationOrBuilder() {
    return location_ == null ? com.google.type.LatLng.getDefaultInstance() : location_;
  }

  public static final int RADIUS_METERS_FIELD_NUMBER = 2;
  private float radiusMeters_ = 0F;
  /**
   *
   *
   * <pre>
   * Required. The radius, in meters, defining the region surrounding that
   * centre point for which data should be returned. The limitations
   * on this value are:
   *
   * * Any value up to 100m can always be specified.
   * * Values over 100m can be specified, as long as
   *   `radius_meters` &lt;= `pixel_size_meters * 1000`.
   * * However, for values over 175m, the `DataLayerView` in the
   *   request must not include monthly flux or hourly shade.
   * </pre>
   *
   * <code>float radius_meters = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The radiusMeters.
   */
  @java.lang.Override
  public float getRadiusMeters() {
    return radiusMeters_;
  }

  public static final int VIEW_FIELD_NUMBER = 3;
  private int view_ = 0;
  /**
   *
   *
   * <pre>
   * Optional. The desired subset of the data to return.
   * </pre>
   *
   * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for view.
   */
  @java.lang.Override
  public int getViewValue() {
    return view_;
  }
  /**
   *
   *
   * <pre>
   * Optional. The desired subset of the data to return.
   * </pre>
   *
   * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The view.
   */
  @java.lang.Override
  public com.google.maps.solar.v1.DataLayerView getView() {
    com.google.maps.solar.v1.DataLayerView result =
        com.google.maps.solar.v1.DataLayerView.forNumber(view_);
    return result == null ? com.google.maps.solar.v1.DataLayerView.UNRECOGNIZED : result;
  }

  public static final int REQUIRED_QUALITY_FIELD_NUMBER = 5;
  private int requiredQuality_ = 0;
  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for requiredQuality.
   */
  @java.lang.Override
  public int getRequiredQualityValue() {
    return requiredQuality_;
  }
  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The requiredQuality.
   */
  @java.lang.Override
  public com.google.maps.solar.v1.ImageryQuality getRequiredQuality() {
    com.google.maps.solar.v1.ImageryQuality result =
        com.google.maps.solar.v1.ImageryQuality.forNumber(requiredQuality_);
    return result == null ? com.google.maps.solar.v1.ImageryQuality.UNRECOGNIZED : result;
  }

  public static final int PIXEL_SIZE_METERS_FIELD_NUMBER = 6;
  private float pixelSizeMeters_ = 0F;
  /**
   *
   *
   * <pre>
   * Optional. The minimum scale, in meters per pixel, of the data to return.
   * Values of 0.1 (the default, if this field is not set explicitly),
   * 0.25, 0.5, and 1.0 are supported. Imagery components whose normal
   * resolution is less than `pixel_size_meters` will be returned at
   * the resolution specified by `pixel_size_meters`; imagery
   * components whose normal resolution is equal to or greater than
   * `pixel_size_meters` will be returned at that normal resolution.
   * </pre>
   *
   * <code>float pixel_size_meters = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The pixelSizeMeters.
   */
  @java.lang.Override
  public float getPixelSizeMeters() {
    return pixelSizeMeters_;
  }

  public static final int EXACT_QUALITY_REQUIRED_FIELD_NUMBER = 7;
  private boolean exactQualityRequired_ = false;
  /**
   *
   *
   * <pre>
   * Optional. Whether to require exact quality of the imagery.
   * If set to false, the `required_quality` field is interpreted as the minimum
   * required quality, such that HIGH quality imagery may be returned when
   * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   * is interpreted as the exact required quality and only `MEDIUM` quality
   * imagery is returned if `required_quality` is set to `MEDIUM`.
   * </pre>
   *
   * <code>bool exact_quality_required = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The exactQualityRequired.
   */
  @java.lang.Override
  public boolean getExactQualityRequired() {
    return exactQualityRequired_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getLocation());
    }
    if (java.lang.Float.floatToRawIntBits(radiusMeters_) != 0) {
      output.writeFloat(2, radiusMeters_);
    }
    if (view_ != com.google.maps.solar.v1.DataLayerView.DATA_LAYER_VIEW_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, view_);
    }
    if (requiredQuality_
        != com.google.maps.solar.v1.ImageryQuality.IMAGERY_QUALITY_UNSPECIFIED.getNumber()) {
      output.writeEnum(5, requiredQuality_);
    }
    if (java.lang.Float.floatToRawIntBits(pixelSizeMeters_) != 0) {
      output.writeFloat(6, pixelSizeMeters_);
    }
    if (exactQualityRequired_ != false) {
      output.writeBool(7, exactQualityRequired_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getLocation());
    }
    if (java.lang.Float.floatToRawIntBits(radiusMeters_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, radiusMeters_);
    }
    if (view_ != com.google.maps.solar.v1.DataLayerView.DATA_LAYER_VIEW_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, view_);
    }
    if (requiredQuality_
        != com.google.maps.solar.v1.ImageryQuality.IMAGERY_QUALITY_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(5, requiredQuality_);
    }
    if (java.lang.Float.floatToRawIntBits(pixelSizeMeters_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(6, pixelSizeMeters_);
    }
    if (exactQualityRequired_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(7, exactQualityRequired_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.GetDataLayersRequest)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.GetDataLayersRequest other =
        (com.google.maps.solar.v1.GetDataLayersRequest) obj;

    if (hasLocation() != other.hasLocation()) return false;
    if (hasLocation()) {
      if (!getLocation().equals(other.getLocation())) return false;
    }
    if (java.lang.Float.floatToIntBits(getRadiusMeters())
        != java.lang.Float.floatToIntBits(other.getRadiusMeters())) return false;
    if (view_ != other.view_) return false;
    if (requiredQuality_ != other.requiredQuality_) return false;
    if (java.lang.Float.floatToIntBits(getPixelSizeMeters())
        != java.lang.Float.floatToIntBits(other.getPixelSizeMeters())) return false;
    if (getExactQualityRequired() != other.getExactQualityRequired()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLocation()) {
      hash = (37 * hash) + LOCATION_FIELD_NUMBER;
      hash = (53 * hash) + getLocation().hashCode();
    }
    hash = (37 * hash) + RADIUS_METERS_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getRadiusMeters());
    hash = (37 * hash) + VIEW_FIELD_NUMBER;
    hash = (53 * hash) + view_;
    hash = (37 * hash) + REQUIRED_QUALITY_FIELD_NUMBER;
    hash = (53 * hash) + requiredQuality_;
    hash = (37 * hash) + PIXEL_SIZE_METERS_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getPixelSizeMeters());
    hash = (37 * hash) + EXACT_QUALITY_REQUIRED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getExactQualityRequired());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.maps.solar.v1.GetDataLayersRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Request message for `Solar.GetDataLayers`.
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.GetDataLayersRequest}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.GetDataLayersRequest)
      com.google.maps.solar.v1.GetDataLayersRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_GetDataLayersRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_GetDataLayersRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.GetDataLayersRequest.class,
              com.google.maps.solar.v1.GetDataLayersRequest.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.GetDataLayersRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getLocationFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      location_ = null;
      if (locationBuilder_ != null) {
        locationBuilder_.dispose();
        locationBuilder_ = null;
      }
      radiusMeters_ = 0F;
      view_ = 0;
      requiredQuality_ = 0;
      pixelSizeMeters_ = 0F;
      exactQualityRequired_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_GetDataLayersRequest_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.GetDataLayersRequest getDefaultInstanceForType() {
      return com.google.maps.solar.v1.GetDataLayersRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.GetDataLayersRequest build() {
      com.google.maps.solar.v1.GetDataLayersRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.GetDataLayersRequest buildPartial() {
      com.google.maps.solar.v1.GetDataLayersRequest result =
          new com.google.maps.solar.v1.GetDataLayersRequest(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.solar.v1.GetDataLayersRequest result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.location_ = locationBuilder_ == null ? location_ : locationBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.radiusMeters_ = radiusMeters_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.view_ = view_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.requiredQuality_ = requiredQuality_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.pixelSizeMeters_ = pixelSizeMeters_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.exactQualityRequired_ = exactQualityRequired_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.GetDataLayersRequest) {
        return mergeFrom((com.google.maps.solar.v1.GetDataLayersRequest) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.GetDataLayersRequest other) {
      if (other == com.google.maps.solar.v1.GetDataLayersRequest.getDefaultInstance()) return this;
      if (other.hasLocation()) {
        mergeLocation(other.getLocation());
      }
      if (other.getRadiusMeters() != 0F) {
        setRadiusMeters(other.getRadiusMeters());
      }
      if (other.view_ != 0) {
        setViewValue(other.getViewValue());
      }
      if (other.requiredQuality_ != 0) {
        setRequiredQualityValue(other.getRequiredQualityValue());
      }
      if (other.getPixelSizeMeters() != 0F) {
        setPixelSizeMeters(other.getPixelSizeMeters());
      }
      if (other.getExactQualityRequired() != false) {
        setExactQualityRequired(other.getExactQualityRequired());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getLocationFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 21:
              {
                radiusMeters_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
            case 24:
              {
                view_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
            case 40:
              {
                requiredQuality_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 40
            case 53:
              {
                pixelSizeMeters_ = input.readFloat();
                bitField0_ |= 0x00000010;
                break;
              } // case 53
            case 56:
              {
                exactQualityRequired_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 56
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.type.LatLng location_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.LatLng, com.google.type.LatLng.Builder, com.google.type.LatLngOrBuilder>
        locationBuilder_;
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return Whether the location field is set.
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The location.
     */
    public com.google.type.LatLng getLocation() {
      if (locationBuilder_ == null) {
        return location_ == null ? com.google.type.LatLng.getDefaultInstance() : location_;
      } else {
        return locationBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLocation(com.google.type.LatLng value) {
      if (locationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        location_ = value;
      } else {
        locationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLocation(com.google.type.LatLng.Builder builderForValue) {
      if (locationBuilder_ == null) {
        location_ = builderForValue.build();
      } else {
        locationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeLocation(com.google.type.LatLng value) {
      if (locationBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && location_ != null
            && location_ != com.google.type.LatLng.getDefaultInstance()) {
          getLocationBuilder().mergeFrom(value);
        } else {
          location_ = value;
        }
      } else {
        locationBuilder_.mergeFrom(value);
      }
      if (location_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearLocation() {
      bitField0_ = (bitField0_ & ~0x00000001);
      location_ = null;
      if (locationBuilder_ != null) {
        locationBuilder_.dispose();
        locationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.type.LatLng.Builder getLocationBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getLocationFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.type.LatLngOrBuilder getLocationOrBuilder() {
      if (locationBuilder_ != null) {
        return locationBuilder_.getMessageOrBuilder();
      } else {
        return location_ == null ? com.google.type.LatLng.getDefaultInstance() : location_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The longitude and latitude for the center of the region to get
     * data for.
     * </pre>
     *
     * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.LatLng, com.google.type.LatLng.Builder, com.google.type.LatLngOrBuilder>
        getLocationFieldBuilder() {
      if (locationBuilder_ == null) {
        locationBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.LatLng,
                com.google.type.LatLng.Builder,
                com.google.type.LatLngOrBuilder>(getLocation(), getParentForChildren(), isClean());
        location_ = null;
      }
      return locationBuilder_;
    }

    private float radiusMeters_;
    /**
     *
     *
     * <pre>
     * Required. The radius, in meters, defining the region surrounding that
     * centre point for which data should be returned. The limitations
     * on this value are:
     *
     * * Any value up to 100m can always be specified.
     * * Values over 100m can be specified, as long as
     *   `radius_meters` &lt;= `pixel_size_meters * 1000`.
     * * However, for values over 175m, the `DataLayerView` in the
     *   request must not include monthly flux or hourly shade.
     * </pre>
     *
     * <code>float radius_meters = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The radiusMeters.
     */
    @java.lang.Override
    public float getRadiusMeters() {
      return radiusMeters_;
    }
    /**
     *
     *
     * <pre>
     * Required. The radius, in meters, defining the region surrounding that
     * centre point for which data should be returned. The limitations
     * on this value are:
     *
     * * Any value up to 100m can always be specified.
     * * Values over 100m can be specified, as long as
     *   `radius_meters` &lt;= `pixel_size_meters * 1000`.
     * * However, for values over 175m, the `DataLayerView` in the
     *   request must not include monthly flux or hourly shade.
     * </pre>
     *
     * <code>float radius_meters = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The radiusMeters to set.
     * @return This builder for chaining.
     */
    public Builder setRadiusMeters(float value) {

      radiusMeters_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The radius, in meters, defining the region surrounding that
     * centre point for which data should be returned. The limitations
     * on this value are:
     *
     * * Any value up to 100m can always be specified.
     * * Values over 100m can be specified, as long as
     *   `radius_meters` &lt;= `pixel_size_meters * 1000`.
     * * However, for values over 175m, the `DataLayerView` in the
     *   request must not include monthly flux or hourly shade.
     * </pre>
     *
     * <code>float radius_meters = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRadiusMeters() {
      bitField0_ = (bitField0_ & ~0x00000002);
      radiusMeters_ = 0F;
      onChanged();
      return this;
    }

    private int view_ = 0;
    /**
     *
     *
     * <pre>
     * Optional. The desired subset of the data to return.
     * </pre>
     *
     * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for view.
     */
    @java.lang.Override
    public int getViewValue() {
      return view_;
    }
    /**
     *
     *
     * <pre>
     * Optional. The desired subset of the data to return.
     * </pre>
     *
     * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for view to set.
     * @return This builder for chaining.
     */
    public Builder setViewValue(int value) {
      view_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. The desired subset of the data to return.
     * </pre>
     *
     * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The view.
     */
    @java.lang.Override
    public com.google.maps.solar.v1.DataLayerView getView() {
      com.google.maps.solar.v1.DataLayerView result =
          com.google.maps.solar.v1.DataLayerView.forNumber(view_);
      return result == null ? com.google.maps.solar.v1.DataLayerView.UNRECOGNIZED : result;
    }
    /**
     *
     *
     * <pre>
     * Optional. The desired subset of the data to return.
     * </pre>
     *
     * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The view to set.
     * @return This builder for chaining.
     */
    public Builder setView(com.google.maps.solar.v1.DataLayerView value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      view_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. The desired subset of the data to return.
     * </pre>
     *
     * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearView() {
      bitField0_ = (bitField0_ & ~0x00000004);
      view_ = 0;
      onChanged();
      return this;
    }

    private int requiredQuality_ = 0;
    /**
     *
     *
     * <pre>
     * Optional. The minimum quality level allowed in the results. No result with
     * lower quality than this will be returned. Not specifying this is
     * equivalent to restricting to HIGH quality only.
     * </pre>
     *
     * <code>
     * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for requiredQuality.
     */
    @java.lang.Override
    public int getRequiredQualityValue() {
      return requiredQuality_;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum quality level allowed in the results. No result with
     * lower quality than this will be returned. Not specifying this is
     * equivalent to restricting to HIGH quality only.
     * </pre>
     *
     * <code>
     * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for requiredQuality to set.
     * @return This builder for chaining.
     */
    public Builder setRequiredQualityValue(int value) {
      requiredQuality_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum quality level allowed in the results. No result with
     * lower quality than this will be returned. Not specifying this is
     * equivalent to restricting to HIGH quality only.
     * </pre>
     *
     * <code>
     * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The requiredQuality.
     */
    @java.lang.Override
    public com.google.maps.solar.v1.ImageryQuality getRequiredQuality() {
      com.google.maps.solar.v1.ImageryQuality result =
          com.google.maps.solar.v1.ImageryQuality.forNumber(requiredQuality_);
      return result == null ? com.google.maps.solar.v1.ImageryQuality.UNRECOGNIZED : result;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum quality level allowed in the results. No result with
     * lower quality than this will be returned. Not specifying this is
     * equivalent to restricting to HIGH quality only.
     * </pre>
     *
     * <code>
     * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The requiredQuality to set.
     * @return This builder for chaining.
     */
    public Builder setRequiredQuality(com.google.maps.solar.v1.ImageryQuality value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      requiredQuality_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum quality level allowed in the results. No result with
     * lower quality than this will be returned. Not specifying this is
     * equivalent to restricting to HIGH quality only.
     * </pre>
     *
     * <code>
     * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRequiredQuality() {
      bitField0_ = (bitField0_ & ~0x00000008);
      requiredQuality_ = 0;
      onChanged();
      return this;
    }

    private float pixelSizeMeters_;
    /**
     *
     *
     * <pre>
     * Optional. The minimum scale, in meters per pixel, of the data to return.
     * Values of 0.1 (the default, if this field is not set explicitly),
     * 0.25, 0.5, and 1.0 are supported. Imagery components whose normal
     * resolution is less than `pixel_size_meters` will be returned at
     * the resolution specified by `pixel_size_meters`; imagery
     * components whose normal resolution is equal to or greater than
     * `pixel_size_meters` will be returned at that normal resolution.
     * </pre>
     *
     * <code>float pixel_size_meters = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The pixelSizeMeters.
     */
    @java.lang.Override
    public float getPixelSizeMeters() {
      return pixelSizeMeters_;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum scale, in meters per pixel, of the data to return.
     * Values of 0.1 (the default, if this field is not set explicitly),
     * 0.25, 0.5, and 1.0 are supported. Imagery components whose normal
     * resolution is less than `pixel_size_meters` will be returned at
     * the resolution specified by `pixel_size_meters`; imagery
     * components whose normal resolution is equal to or greater than
     * `pixel_size_meters` will be returned at that normal resolution.
     * </pre>
     *
     * <code>float pixel_size_meters = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The pixelSizeMeters to set.
     * @return This builder for chaining.
     */
    public Builder setPixelSizeMeters(float value) {

      pixelSizeMeters_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. The minimum scale, in meters per pixel, of the data to return.
     * Values of 0.1 (the default, if this field is not set explicitly),
     * 0.25, 0.5, and 1.0 are supported. Imagery components whose normal
     * resolution is less than `pixel_size_meters` will be returned at
     * the resolution specified by `pixel_size_meters`; imagery
     * components whose normal resolution is equal to or greater than
     * `pixel_size_meters` will be returned at that normal resolution.
     * </pre>
     *
     * <code>float pixel_size_meters = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPixelSizeMeters() {
      bitField0_ = (bitField0_ & ~0x00000010);
      pixelSizeMeters_ = 0F;
      onChanged();
      return this;
    }

    private boolean exactQualityRequired_;
    /**
     *
     *
     * <pre>
     * Optional. Whether to require exact quality of the imagery.
     * If set to false, the `required_quality` field is interpreted as the minimum
     * required quality, such that HIGH quality imagery may be returned when
     * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
     * is interpreted as the exact required quality and only `MEDIUM` quality
     * imagery is returned if `required_quality` is set to `MEDIUM`.
     * </pre>
     *
     * <code>bool exact_quality_required = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The exactQualityRequired.
     */
    @java.lang.Override
    public boolean getExactQualityRequired() {
      return exactQualityRequired_;
    }
    /**
     *
     *
     * <pre>
     * Optional. Whether to require exact quality of the imagery.
     * If set to false, the `required_quality` field is interpreted as the minimum
     * required quality, such that HIGH quality imagery may be returned when
     * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
     * is interpreted as the exact required quality and only `MEDIUM` quality
     * imagery is returned if `required_quality` is set to `MEDIUM`.
     * </pre>
     *
     * <code>bool exact_quality_required = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The exactQualityRequired to set.
     * @return This builder for chaining.
     */
    public Builder setExactQualityRequired(boolean value) {

      exactQualityRequired_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Whether to require exact quality of the imagery.
     * If set to false, the `required_quality` field is interpreted as the minimum
     * required quality, such that HIGH quality imagery may be returned when
     * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
     * is interpreted as the exact required quality and only `MEDIUM` quality
     * imagery is returned if `required_quality` is set to `MEDIUM`.
     * </pre>
     *
     * <code>bool exact_quality_required = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearExactQualityRequired() {
      bitField0_ = (bitField0_ & ~0x00000020);
      exactQualityRequired_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.GetDataLayersRequest)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.GetDataLayersRequest)
  private static final com.google.maps.solar.v1.GetDataLayersRequest DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.GetDataLayersRequest();
  }

  public static com.google.maps.solar.v1.GetDataLayersRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GetDataLayersRequest> PARSER =
      new com.google.protobuf.AbstractParser<GetDataLayersRequest>() {
        @java.lang.Override
        public GetDataLayersRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<GetDataLayersRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GetDataLayersRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.GetDataLayersRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
