/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * Details of a financial analysis. Some of these details are already
 * stored at higher levels (e.g., out of pocket cost). Total money
 * amounts are over a lifetime period defined by the
 * [panel_lifetime_years]
 * [google.maps.solar.v1.SolarPotential.panel_lifetime_years]
 * field in [SolarPotential]
 * [google.maps.solar.v1.SolarPotential]. Note: The out of
 * pocket cost of purchasing the panels is given in the
 * [out_of_pocket_cost]
 * [google.maps.solar.v1.CashPurchaseSavings.out_of_pocket_cost]
 * field in [CashPurchaseSavings]
 * [google.maps.solar.v1.CashPurchaseSavings].
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.FinancialDetails}
 */
public final class FinancialDetails extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.FinancialDetails)
    FinancialDetailsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use FinancialDetails.newBuilder() to construct.
  private FinancialDetails(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private FinancialDetails() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new FinancialDetails();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_FinancialDetails_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_FinancialDetails_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.FinancialDetails.class,
            com.google.maps.solar.v1.FinancialDetails.Builder.class);
  }

  private int bitField0_;
  public static final int INITIAL_AC_KWH_PER_YEAR_FIELD_NUMBER = 1;
  private float initialAcKwhPerYear_ = 0F;
  /**
   *
   *
   * <pre>
   * How many AC kWh we think the solar panels will generate in their first
   * year.
   * </pre>
   *
   * <code>float initial_ac_kwh_per_year = 1;</code>
   *
   * @return The initialAcKwhPerYear.
   */
  @java.lang.Override
  public float getInitialAcKwhPerYear() {
    return initialAcKwhPerYear_;
  }

  public static final int REMAINING_LIFETIME_UTILITY_BILL_FIELD_NUMBER = 2;
  private com.google.type.Money remainingLifetimeUtilityBill_;
  /**
   *
   *
   * <pre>
   * Utility bill for electricity not produced by solar, for the
   * lifetime of the panels.
   * </pre>
   *
   * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
   *
   * @return Whether the remainingLifetimeUtilityBill field is set.
   */
  @java.lang.Override
  public boolean hasRemainingLifetimeUtilityBill() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Utility bill for electricity not produced by solar, for the
   * lifetime of the panels.
   * </pre>
   *
   * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
   *
   * @return The remainingLifetimeUtilityBill.
   */
  @java.lang.Override
  public com.google.type.Money getRemainingLifetimeUtilityBill() {
    return remainingLifetimeUtilityBill_ == null
        ? com.google.type.Money.getDefaultInstance()
        : remainingLifetimeUtilityBill_;
  }
  /**
   *
   *
   * <pre>
   * Utility bill for electricity not produced by solar, for the
   * lifetime of the panels.
   * </pre>
   *
   * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getRemainingLifetimeUtilityBillOrBuilder() {
    return remainingLifetimeUtilityBill_ == null
        ? com.google.type.Money.getDefaultInstance()
        : remainingLifetimeUtilityBill_;
  }

  public static final int FEDERAL_INCENTIVE_FIELD_NUMBER = 3;
  private com.google.type.Money federalIncentive_;
  /**
   *
   *
   * <pre>
   * Amount of money available from federal incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money federal_incentive = 3;</code>
   *
   * @return Whether the federalIncentive field is set.
   */
  @java.lang.Override
  public boolean hasFederalIncentive() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from federal incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money federal_incentive = 3;</code>
   *
   * @return The federalIncentive.
   */
  @java.lang.Override
  public com.google.type.Money getFederalIncentive() {
    return federalIncentive_ == null
        ? com.google.type.Money.getDefaultInstance()
        : federalIncentive_;
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from federal incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money federal_incentive = 3;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getFederalIncentiveOrBuilder() {
    return federalIncentive_ == null
        ? com.google.type.Money.getDefaultInstance()
        : federalIncentive_;
  }

  public static final int STATE_INCENTIVE_FIELD_NUMBER = 4;
  private com.google.type.Money stateIncentive_;
  /**
   *
   *
   * <pre>
   * Amount of money available from state incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money state_incentive = 4;</code>
   *
   * @return Whether the stateIncentive field is set.
   */
  @java.lang.Override
  public boolean hasStateIncentive() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from state incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money state_incentive = 4;</code>
   *
   * @return The stateIncentive.
   */
  @java.lang.Override
  public com.google.type.Money getStateIncentive() {
    return stateIncentive_ == null ? com.google.type.Money.getDefaultInstance() : stateIncentive_;
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from state incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money state_incentive = 4;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getStateIncentiveOrBuilder() {
    return stateIncentive_ == null ? com.google.type.Money.getDefaultInstance() : stateIncentive_;
  }

  public static final int UTILITY_INCENTIVE_FIELD_NUMBER = 5;
  private com.google.type.Money utilityIncentive_;
  /**
   *
   *
   * <pre>
   * Amount of money available from utility incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money utility_incentive = 5;</code>
   *
   * @return Whether the utilityIncentive field is set.
   */
  @java.lang.Override
  public boolean hasUtilityIncentive() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from utility incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money utility_incentive = 5;</code>
   *
   * @return The utilityIncentive.
   */
  @java.lang.Override
  public com.google.type.Money getUtilityIncentive() {
    return utilityIncentive_ == null
        ? com.google.type.Money.getDefaultInstance()
        : utilityIncentive_;
  }
  /**
   *
   *
   * <pre>
   * Amount of money available from utility incentives; this applies if the
   * user buys (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money utility_incentive = 5;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getUtilityIncentiveOrBuilder() {
    return utilityIncentive_ == null
        ? com.google.type.Money.getDefaultInstance()
        : utilityIncentive_;
  }

  public static final int LIFETIME_SREC_TOTAL_FIELD_NUMBER = 6;
  private com.google.type.Money lifetimeSrecTotal_;
  /**
   *
   *
   * <pre>
   * Amount of money the user will receive from Solar Renewable Energy
   * Credits over the panel lifetime; this applies if the user buys
   * (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money lifetime_srec_total = 6;</code>
   *
   * @return Whether the lifetimeSrecTotal field is set.
   */
  @java.lang.Override
  public boolean hasLifetimeSrecTotal() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   *
   *
   * <pre>
   * Amount of money the user will receive from Solar Renewable Energy
   * Credits over the panel lifetime; this applies if the user buys
   * (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money lifetime_srec_total = 6;</code>
   *
   * @return The lifetimeSrecTotal.
   */
  @java.lang.Override
  public com.google.type.Money getLifetimeSrecTotal() {
    return lifetimeSrecTotal_ == null
        ? com.google.type.Money.getDefaultInstance()
        : lifetimeSrecTotal_;
  }
  /**
   *
   *
   * <pre>
   * Amount of money the user will receive from Solar Renewable Energy
   * Credits over the panel lifetime; this applies if the user buys
   * (with or without a loan) the panels.
   * </pre>
   *
   * <code>.google.type.Money lifetime_srec_total = 6;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getLifetimeSrecTotalOrBuilder() {
    return lifetimeSrecTotal_ == null
        ? com.google.type.Money.getDefaultInstance()
        : lifetimeSrecTotal_;
  }

  public static final int COST_OF_ELECTRICITY_WITHOUT_SOLAR_FIELD_NUMBER = 7;
  private com.google.type.Money costOfElectricityWithoutSolar_;
  /**
   *
   *
   * <pre>
   * Total cost of electricity the user would have paid over the
   * lifetime period if they didn't install solar.
   * </pre>
   *
   * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
   *
   * @return Whether the costOfElectricityWithoutSolar field is set.
   */
  @java.lang.Override
  public boolean hasCostOfElectricityWithoutSolar() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   *
   *
   * <pre>
   * Total cost of electricity the user would have paid over the
   * lifetime period if they didn't install solar.
   * </pre>
   *
   * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
   *
   * @return The costOfElectricityWithoutSolar.
   */
  @java.lang.Override
  public com.google.type.Money getCostOfElectricityWithoutSolar() {
    return costOfElectricityWithoutSolar_ == null
        ? com.google.type.Money.getDefaultInstance()
        : costOfElectricityWithoutSolar_;
  }
  /**
   *
   *
   * <pre>
   * Total cost of electricity the user would have paid over the
   * lifetime period if they didn't install solar.
   * </pre>
   *
   * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
   */
  @java.lang.Override
  public com.google.type.MoneyOrBuilder getCostOfElectricityWithoutSolarOrBuilder() {
    return costOfElectricityWithoutSolar_ == null
        ? com.google.type.Money.getDefaultInstance()
        : costOfElectricityWithoutSolar_;
  }

  public static final int NET_METERING_ALLOWED_FIELD_NUMBER = 8;
  private boolean netMeteringAllowed_ = false;
  /**
   *
   *
   * <pre>
   * Whether net metering is allowed.
   * </pre>
   *
   * <code>bool net_metering_allowed = 8;</code>
   *
   * @return The netMeteringAllowed.
   */
  @java.lang.Override
  public boolean getNetMeteringAllowed() {
    return netMeteringAllowed_;
  }

  public static final int SOLAR_PERCENTAGE_FIELD_NUMBER = 9;
  private float solarPercentage_ = 0F;
  /**
   *
   *
   * <pre>
   * Percentage (0-100) of the user's power supplied by solar.
   * Valid for the first year but approximately correct for future years.
   * </pre>
   *
   * <code>optional float solar_percentage = 9;</code>
   *
   * @return Whether the solarPercentage field is set.
   */
  @java.lang.Override
  public boolean hasSolarPercentage() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   *
   *
   * <pre>
   * Percentage (0-100) of the user's power supplied by solar.
   * Valid for the first year but approximately correct for future years.
   * </pre>
   *
   * <code>optional float solar_percentage = 9;</code>
   *
   * @return The solarPercentage.
   */
  @java.lang.Override
  public float getSolarPercentage() {
    return solarPercentage_;
  }

  public static final int PERCENTAGE_EXPORTED_TO_GRID_FIELD_NUMBER = 10;
  private float percentageExportedToGrid_ = 0F;
  /**
   *
   *
   * <pre>
   * The percentage (0-100) of solar electricity production we assumed was
   * exported to the grid, based on the first quarter of production. This
   * affects the calculations if net metering is not allowed.
   * </pre>
   *
   * <code>optional float percentage_exported_to_grid = 10;</code>
   *
   * @return Whether the percentageExportedToGrid field is set.
   */
  @java.lang.Override
  public boolean hasPercentageExportedToGrid() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   *
   *
   * <pre>
   * The percentage (0-100) of solar electricity production we assumed was
   * exported to the grid, based on the first quarter of production. This
   * affects the calculations if net metering is not allowed.
   * </pre>
   *
   * <code>optional float percentage_exported_to_grid = 10;</code>
   *
   * @return The percentageExportedToGrid.
   */
  @java.lang.Override
  public float getPercentageExportedToGrid() {
    return percentageExportedToGrid_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (java.lang.Float.floatToRawIntBits(initialAcKwhPerYear_) != 0) {
      output.writeFloat(1, initialAcKwhPerYear_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getRemainingLifetimeUtilityBill());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(3, getFederalIncentive());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(4, getStateIncentive());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(5, getUtilityIncentive());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(6, getLifetimeSrecTotal());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeMessage(7, getCostOfElectricityWithoutSolar());
    }
    if (netMeteringAllowed_ != false) {
      output.writeBool(8, netMeteringAllowed_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeFloat(9, solarPercentage_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeFloat(10, percentageExportedToGrid_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (java.lang.Float.floatToRawIntBits(initialAcKwhPerYear_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(1, initialAcKwhPerYear_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, getRemainingLifetimeUtilityBill());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getFederalIncentive());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getStateIncentive());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getUtilityIncentive());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getLifetimeSrecTotal());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              7, getCostOfElectricityWithoutSolar());
    }
    if (netMeteringAllowed_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(8, netMeteringAllowed_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(9, solarPercentage_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(10, percentageExportedToGrid_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.FinancialDetails)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.FinancialDetails other =
        (com.google.maps.solar.v1.FinancialDetails) obj;

    if (java.lang.Float.floatToIntBits(getInitialAcKwhPerYear())
        != java.lang.Float.floatToIntBits(other.getInitialAcKwhPerYear())) return false;
    if (hasRemainingLifetimeUtilityBill() != other.hasRemainingLifetimeUtilityBill()) return false;
    if (hasRemainingLifetimeUtilityBill()) {
      if (!getRemainingLifetimeUtilityBill().equals(other.getRemainingLifetimeUtilityBill()))
        return false;
    }
    if (hasFederalIncentive() != other.hasFederalIncentive()) return false;
    if (hasFederalIncentive()) {
      if (!getFederalIncentive().equals(other.getFederalIncentive())) return false;
    }
    if (hasStateIncentive() != other.hasStateIncentive()) return false;
    if (hasStateIncentive()) {
      if (!getStateIncentive().equals(other.getStateIncentive())) return false;
    }
    if (hasUtilityIncentive() != other.hasUtilityIncentive()) return false;
    if (hasUtilityIncentive()) {
      if (!getUtilityIncentive().equals(other.getUtilityIncentive())) return false;
    }
    if (hasLifetimeSrecTotal() != other.hasLifetimeSrecTotal()) return false;
    if (hasLifetimeSrecTotal()) {
      if (!getLifetimeSrecTotal().equals(other.getLifetimeSrecTotal())) return false;
    }
    if (hasCostOfElectricityWithoutSolar() != other.hasCostOfElectricityWithoutSolar())
      return false;
    if (hasCostOfElectricityWithoutSolar()) {
      if (!getCostOfElectricityWithoutSolar().equals(other.getCostOfElectricityWithoutSolar()))
        return false;
    }
    if (getNetMeteringAllowed() != other.getNetMeteringAllowed()) return false;
    if (hasSolarPercentage() != other.hasSolarPercentage()) return false;
    if (hasSolarPercentage()) {
      if (java.lang.Float.floatToIntBits(getSolarPercentage())
          != java.lang.Float.floatToIntBits(other.getSolarPercentage())) return false;
    }
    if (hasPercentageExportedToGrid() != other.hasPercentageExportedToGrid()) return false;
    if (hasPercentageExportedToGrid()) {
      if (java.lang.Float.floatToIntBits(getPercentageExportedToGrid())
          != java.lang.Float.floatToIntBits(other.getPercentageExportedToGrid())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INITIAL_AC_KWH_PER_YEAR_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getInitialAcKwhPerYear());
    if (hasRemainingLifetimeUtilityBill()) {
      hash = (37 * hash) + REMAINING_LIFETIME_UTILITY_BILL_FIELD_NUMBER;
      hash = (53 * hash) + getRemainingLifetimeUtilityBill().hashCode();
    }
    if (hasFederalIncentive()) {
      hash = (37 * hash) + FEDERAL_INCENTIVE_FIELD_NUMBER;
      hash = (53 * hash) + getFederalIncentive().hashCode();
    }
    if (hasStateIncentive()) {
      hash = (37 * hash) + STATE_INCENTIVE_FIELD_NUMBER;
      hash = (53 * hash) + getStateIncentive().hashCode();
    }
    if (hasUtilityIncentive()) {
      hash = (37 * hash) + UTILITY_INCENTIVE_FIELD_NUMBER;
      hash = (53 * hash) + getUtilityIncentive().hashCode();
    }
    if (hasLifetimeSrecTotal()) {
      hash = (37 * hash) + LIFETIME_SREC_TOTAL_FIELD_NUMBER;
      hash = (53 * hash) + getLifetimeSrecTotal().hashCode();
    }
    if (hasCostOfElectricityWithoutSolar()) {
      hash = (37 * hash) + COST_OF_ELECTRICITY_WITHOUT_SOLAR_FIELD_NUMBER;
      hash = (53 * hash) + getCostOfElectricityWithoutSolar().hashCode();
    }
    hash = (37 * hash) + NET_METERING_ALLOWED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getNetMeteringAllowed());
    if (hasSolarPercentage()) {
      hash = (37 * hash) + SOLAR_PERCENTAGE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(getSolarPercentage());
    }
    if (hasPercentageExportedToGrid()) {
      hash = (37 * hash) + PERCENTAGE_EXPORTED_TO_GRID_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(getPercentageExportedToGrid());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.FinancialDetails parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.maps.solar.v1.FinancialDetails prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Details of a financial analysis. Some of these details are already
   * stored at higher levels (e.g., out of pocket cost). Total money
   * amounts are over a lifetime period defined by the
   * [panel_lifetime_years]
   * [google.maps.solar.v1.SolarPotential.panel_lifetime_years]
   * field in [SolarPotential]
   * [google.maps.solar.v1.SolarPotential]. Note: The out of
   * pocket cost of purchasing the panels is given in the
   * [out_of_pocket_cost]
   * [google.maps.solar.v1.CashPurchaseSavings.out_of_pocket_cost]
   * field in [CashPurchaseSavings]
   * [google.maps.solar.v1.CashPurchaseSavings].
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.FinancialDetails}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.FinancialDetails)
      com.google.maps.solar.v1.FinancialDetailsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_FinancialDetails_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_FinancialDetails_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.FinancialDetails.class,
              com.google.maps.solar.v1.FinancialDetails.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.FinancialDetails.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getRemainingLifetimeUtilityBillFieldBuilder();
        getFederalIncentiveFieldBuilder();
        getStateIncentiveFieldBuilder();
        getUtilityIncentiveFieldBuilder();
        getLifetimeSrecTotalFieldBuilder();
        getCostOfElectricityWithoutSolarFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      initialAcKwhPerYear_ = 0F;
      remainingLifetimeUtilityBill_ = null;
      if (remainingLifetimeUtilityBillBuilder_ != null) {
        remainingLifetimeUtilityBillBuilder_.dispose();
        remainingLifetimeUtilityBillBuilder_ = null;
      }
      federalIncentive_ = null;
      if (federalIncentiveBuilder_ != null) {
        federalIncentiveBuilder_.dispose();
        federalIncentiveBuilder_ = null;
      }
      stateIncentive_ = null;
      if (stateIncentiveBuilder_ != null) {
        stateIncentiveBuilder_.dispose();
        stateIncentiveBuilder_ = null;
      }
      utilityIncentive_ = null;
      if (utilityIncentiveBuilder_ != null) {
        utilityIncentiveBuilder_.dispose();
        utilityIncentiveBuilder_ = null;
      }
      lifetimeSrecTotal_ = null;
      if (lifetimeSrecTotalBuilder_ != null) {
        lifetimeSrecTotalBuilder_.dispose();
        lifetimeSrecTotalBuilder_ = null;
      }
      costOfElectricityWithoutSolar_ = null;
      if (costOfElectricityWithoutSolarBuilder_ != null) {
        costOfElectricityWithoutSolarBuilder_.dispose();
        costOfElectricityWithoutSolarBuilder_ = null;
      }
      netMeteringAllowed_ = false;
      solarPercentage_ = 0F;
      percentageExportedToGrid_ = 0F;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_FinancialDetails_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.FinancialDetails getDefaultInstanceForType() {
      return com.google.maps.solar.v1.FinancialDetails.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.FinancialDetails build() {
      com.google.maps.solar.v1.FinancialDetails result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.FinancialDetails buildPartial() {
      com.google.maps.solar.v1.FinancialDetails result =
          new com.google.maps.solar.v1.FinancialDetails(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.solar.v1.FinancialDetails result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.initialAcKwhPerYear_ = initialAcKwhPerYear_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.remainingLifetimeUtilityBill_ =
            remainingLifetimeUtilityBillBuilder_ == null
                ? remainingLifetimeUtilityBill_
                : remainingLifetimeUtilityBillBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.federalIncentive_ =
            federalIncentiveBuilder_ == null ? federalIncentive_ : federalIncentiveBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.stateIncentive_ =
            stateIncentiveBuilder_ == null ? stateIncentive_ : stateIncentiveBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.utilityIncentive_ =
            utilityIncentiveBuilder_ == null ? utilityIncentive_ : utilityIncentiveBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.lifetimeSrecTotal_ =
            lifetimeSrecTotalBuilder_ == null
                ? lifetimeSrecTotal_
                : lifetimeSrecTotalBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.costOfElectricityWithoutSolar_ =
            costOfElectricityWithoutSolarBuilder_ == null
                ? costOfElectricityWithoutSolar_
                : costOfElectricityWithoutSolarBuilder_.build();
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.netMeteringAllowed_ = netMeteringAllowed_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.solarPercentage_ = solarPercentage_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.percentageExportedToGrid_ = percentageExportedToGrid_;
        to_bitField0_ |= 0x00000080;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.FinancialDetails) {
        return mergeFrom((com.google.maps.solar.v1.FinancialDetails) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.FinancialDetails other) {
      if (other == com.google.maps.solar.v1.FinancialDetails.getDefaultInstance()) return this;
      if (other.getInitialAcKwhPerYear() != 0F) {
        setInitialAcKwhPerYear(other.getInitialAcKwhPerYear());
      }
      if (other.hasRemainingLifetimeUtilityBill()) {
        mergeRemainingLifetimeUtilityBill(other.getRemainingLifetimeUtilityBill());
      }
      if (other.hasFederalIncentive()) {
        mergeFederalIncentive(other.getFederalIncentive());
      }
      if (other.hasStateIncentive()) {
        mergeStateIncentive(other.getStateIncentive());
      }
      if (other.hasUtilityIncentive()) {
        mergeUtilityIncentive(other.getUtilityIncentive());
      }
      if (other.hasLifetimeSrecTotal()) {
        mergeLifetimeSrecTotal(other.getLifetimeSrecTotal());
      }
      if (other.hasCostOfElectricityWithoutSolar()) {
        mergeCostOfElectricityWithoutSolar(other.getCostOfElectricityWithoutSolar());
      }
      if (other.getNetMeteringAllowed() != false) {
        setNetMeteringAllowed(other.getNetMeteringAllowed());
      }
      if (other.hasSolarPercentage()) {
        setSolarPercentage(other.getSolarPercentage());
      }
      if (other.hasPercentageExportedToGrid()) {
        setPercentageExportedToGrid(other.getPercentageExportedToGrid());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13:
              {
                initialAcKwhPerYear_ = input.readFloat();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
            case 18:
              {
                input.readMessage(
                    getRemainingLifetimeUtilityBillFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                input.readMessage(
                    getFederalIncentiveFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(getStateIncentiveFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(
                    getUtilityIncentiveFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(
                    getLifetimeSrecTotalFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            case 58:
              {
                input.readMessage(
                    getCostOfElectricityWithoutSolarFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
            case 64:
              {
                netMeteringAllowed_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
            case 77:
              {
                solarPercentage_ = input.readFloat();
                bitField0_ |= 0x00000100;
                break;
              } // case 77
            case 85:
              {
                percentageExportedToGrid_ = input.readFloat();
                bitField0_ |= 0x00000200;
                break;
              } // case 85
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private float initialAcKwhPerYear_;
    /**
     *
     *
     * <pre>
     * How many AC kWh we think the solar panels will generate in their first
     * year.
     * </pre>
     *
     * <code>float initial_ac_kwh_per_year = 1;</code>
     *
     * @return The initialAcKwhPerYear.
     */
    @java.lang.Override
    public float getInitialAcKwhPerYear() {
      return initialAcKwhPerYear_;
    }
    /**
     *
     *
     * <pre>
     * How many AC kWh we think the solar panels will generate in their first
     * year.
     * </pre>
     *
     * <code>float initial_ac_kwh_per_year = 1;</code>
     *
     * @param value The initialAcKwhPerYear to set.
     * @return This builder for chaining.
     */
    public Builder setInitialAcKwhPerYear(float value) {

      initialAcKwhPerYear_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * How many AC kWh we think the solar panels will generate in their first
     * year.
     * </pre>
     *
     * <code>float initial_ac_kwh_per_year = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearInitialAcKwhPerYear() {
      bitField0_ = (bitField0_ & ~0x00000001);
      initialAcKwhPerYear_ = 0F;
      onChanged();
      return this;
    }

    private com.google.type.Money remainingLifetimeUtilityBill_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        remainingLifetimeUtilityBillBuilder_;
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     *
     * @return Whether the remainingLifetimeUtilityBill field is set.
     */
    public boolean hasRemainingLifetimeUtilityBill() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     *
     * @return The remainingLifetimeUtilityBill.
     */
    public com.google.type.Money getRemainingLifetimeUtilityBill() {
      if (remainingLifetimeUtilityBillBuilder_ == null) {
        return remainingLifetimeUtilityBill_ == null
            ? com.google.type.Money.getDefaultInstance()
            : remainingLifetimeUtilityBill_;
      } else {
        return remainingLifetimeUtilityBillBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public Builder setRemainingLifetimeUtilityBill(com.google.type.Money value) {
      if (remainingLifetimeUtilityBillBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        remainingLifetimeUtilityBill_ = value;
      } else {
        remainingLifetimeUtilityBillBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public Builder setRemainingLifetimeUtilityBill(com.google.type.Money.Builder builderForValue) {
      if (remainingLifetimeUtilityBillBuilder_ == null) {
        remainingLifetimeUtilityBill_ = builderForValue.build();
      } else {
        remainingLifetimeUtilityBillBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public Builder mergeRemainingLifetimeUtilityBill(com.google.type.Money value) {
      if (remainingLifetimeUtilityBillBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && remainingLifetimeUtilityBill_ != null
            && remainingLifetimeUtilityBill_ != com.google.type.Money.getDefaultInstance()) {
          getRemainingLifetimeUtilityBillBuilder().mergeFrom(value);
        } else {
          remainingLifetimeUtilityBill_ = value;
        }
      } else {
        remainingLifetimeUtilityBillBuilder_.mergeFrom(value);
      }
      if (remainingLifetimeUtilityBill_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public Builder clearRemainingLifetimeUtilityBill() {
      bitField0_ = (bitField0_ & ~0x00000002);
      remainingLifetimeUtilityBill_ = null;
      if (remainingLifetimeUtilityBillBuilder_ != null) {
        remainingLifetimeUtilityBillBuilder_.dispose();
        remainingLifetimeUtilityBillBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public com.google.type.Money.Builder getRemainingLifetimeUtilityBillBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getRemainingLifetimeUtilityBillFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    public com.google.type.MoneyOrBuilder getRemainingLifetimeUtilityBillOrBuilder() {
      if (remainingLifetimeUtilityBillBuilder_ != null) {
        return remainingLifetimeUtilityBillBuilder_.getMessageOrBuilder();
      } else {
        return remainingLifetimeUtilityBill_ == null
            ? com.google.type.Money.getDefaultInstance()
            : remainingLifetimeUtilityBill_;
      }
    }
    /**
     *
     *
     * <pre>
     * Utility bill for electricity not produced by solar, for the
     * lifetime of the panels.
     * </pre>
     *
     * <code>.google.type.Money remaining_lifetime_utility_bill = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getRemainingLifetimeUtilityBillFieldBuilder() {
      if (remainingLifetimeUtilityBillBuilder_ == null) {
        remainingLifetimeUtilityBillBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getRemainingLifetimeUtilityBill(), getParentForChildren(), isClean());
        remainingLifetimeUtilityBill_ = null;
      }
      return remainingLifetimeUtilityBillBuilder_;
    }

    private com.google.type.Money federalIncentive_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        federalIncentiveBuilder_;
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     *
     * @return Whether the federalIncentive field is set.
     */
    public boolean hasFederalIncentive() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     *
     * @return The federalIncentive.
     */
    public com.google.type.Money getFederalIncentive() {
      if (federalIncentiveBuilder_ == null) {
        return federalIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : federalIncentive_;
      } else {
        return federalIncentiveBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public Builder setFederalIncentive(com.google.type.Money value) {
      if (federalIncentiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        federalIncentive_ = value;
      } else {
        federalIncentiveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public Builder setFederalIncentive(com.google.type.Money.Builder builderForValue) {
      if (federalIncentiveBuilder_ == null) {
        federalIncentive_ = builderForValue.build();
      } else {
        federalIncentiveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public Builder mergeFederalIncentive(com.google.type.Money value) {
      if (federalIncentiveBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)
            && federalIncentive_ != null
            && federalIncentive_ != com.google.type.Money.getDefaultInstance()) {
          getFederalIncentiveBuilder().mergeFrom(value);
        } else {
          federalIncentive_ = value;
        }
      } else {
        federalIncentiveBuilder_.mergeFrom(value);
      }
      if (federalIncentive_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public Builder clearFederalIncentive() {
      bitField0_ = (bitField0_ & ~0x00000004);
      federalIncentive_ = null;
      if (federalIncentiveBuilder_ != null) {
        federalIncentiveBuilder_.dispose();
        federalIncentiveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public com.google.type.Money.Builder getFederalIncentiveBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getFederalIncentiveFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    public com.google.type.MoneyOrBuilder getFederalIncentiveOrBuilder() {
      if (federalIncentiveBuilder_ != null) {
        return federalIncentiveBuilder_.getMessageOrBuilder();
      } else {
        return federalIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : federalIncentive_;
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from federal incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money federal_incentive = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getFederalIncentiveFieldBuilder() {
      if (federalIncentiveBuilder_ == null) {
        federalIncentiveBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getFederalIncentive(), getParentForChildren(), isClean());
        federalIncentive_ = null;
      }
      return federalIncentiveBuilder_;
    }

    private com.google.type.Money stateIncentive_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        stateIncentiveBuilder_;
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     *
     * @return Whether the stateIncentive field is set.
     */
    public boolean hasStateIncentive() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     *
     * @return The stateIncentive.
     */
    public com.google.type.Money getStateIncentive() {
      if (stateIncentiveBuilder_ == null) {
        return stateIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : stateIncentive_;
      } else {
        return stateIncentiveBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public Builder setStateIncentive(com.google.type.Money value) {
      if (stateIncentiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stateIncentive_ = value;
      } else {
        stateIncentiveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public Builder setStateIncentive(com.google.type.Money.Builder builderForValue) {
      if (stateIncentiveBuilder_ == null) {
        stateIncentive_ = builderForValue.build();
      } else {
        stateIncentiveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public Builder mergeStateIncentive(com.google.type.Money value) {
      if (stateIncentiveBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)
            && stateIncentive_ != null
            && stateIncentive_ != com.google.type.Money.getDefaultInstance()) {
          getStateIncentiveBuilder().mergeFrom(value);
        } else {
          stateIncentive_ = value;
        }
      } else {
        stateIncentiveBuilder_.mergeFrom(value);
      }
      if (stateIncentive_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public Builder clearStateIncentive() {
      bitField0_ = (bitField0_ & ~0x00000008);
      stateIncentive_ = null;
      if (stateIncentiveBuilder_ != null) {
        stateIncentiveBuilder_.dispose();
        stateIncentiveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public com.google.type.Money.Builder getStateIncentiveBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getStateIncentiveFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    public com.google.type.MoneyOrBuilder getStateIncentiveOrBuilder() {
      if (stateIncentiveBuilder_ != null) {
        return stateIncentiveBuilder_.getMessageOrBuilder();
      } else {
        return stateIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : stateIncentive_;
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from state incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money state_incentive = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getStateIncentiveFieldBuilder() {
      if (stateIncentiveBuilder_ == null) {
        stateIncentiveBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getStateIncentive(), getParentForChildren(), isClean());
        stateIncentive_ = null;
      }
      return stateIncentiveBuilder_;
    }

    private com.google.type.Money utilityIncentive_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        utilityIncentiveBuilder_;
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     *
     * @return Whether the utilityIncentive field is set.
     */
    public boolean hasUtilityIncentive() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     *
     * @return The utilityIncentive.
     */
    public com.google.type.Money getUtilityIncentive() {
      if (utilityIncentiveBuilder_ == null) {
        return utilityIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : utilityIncentive_;
      } else {
        return utilityIncentiveBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public Builder setUtilityIncentive(com.google.type.Money value) {
      if (utilityIncentiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        utilityIncentive_ = value;
      } else {
        utilityIncentiveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public Builder setUtilityIncentive(com.google.type.Money.Builder builderForValue) {
      if (utilityIncentiveBuilder_ == null) {
        utilityIncentive_ = builderForValue.build();
      } else {
        utilityIncentiveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public Builder mergeUtilityIncentive(com.google.type.Money value) {
      if (utilityIncentiveBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && utilityIncentive_ != null
            && utilityIncentive_ != com.google.type.Money.getDefaultInstance()) {
          getUtilityIncentiveBuilder().mergeFrom(value);
        } else {
          utilityIncentive_ = value;
        }
      } else {
        utilityIncentiveBuilder_.mergeFrom(value);
      }
      if (utilityIncentive_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public Builder clearUtilityIncentive() {
      bitField0_ = (bitField0_ & ~0x00000010);
      utilityIncentive_ = null;
      if (utilityIncentiveBuilder_ != null) {
        utilityIncentiveBuilder_.dispose();
        utilityIncentiveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public com.google.type.Money.Builder getUtilityIncentiveBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getUtilityIncentiveFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    public com.google.type.MoneyOrBuilder getUtilityIncentiveOrBuilder() {
      if (utilityIncentiveBuilder_ != null) {
        return utilityIncentiveBuilder_.getMessageOrBuilder();
      } else {
        return utilityIncentive_ == null
            ? com.google.type.Money.getDefaultInstance()
            : utilityIncentive_;
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money available from utility incentives; this applies if the
     * user buys (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money utility_incentive = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getUtilityIncentiveFieldBuilder() {
      if (utilityIncentiveBuilder_ == null) {
        utilityIncentiveBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getUtilityIncentive(), getParentForChildren(), isClean());
        utilityIncentive_ = null;
      }
      return utilityIncentiveBuilder_;
    }

    private com.google.type.Money lifetimeSrecTotal_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        lifetimeSrecTotalBuilder_;
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     *
     * @return Whether the lifetimeSrecTotal field is set.
     */
    public boolean hasLifetimeSrecTotal() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     *
     * @return The lifetimeSrecTotal.
     */
    public com.google.type.Money getLifetimeSrecTotal() {
      if (lifetimeSrecTotalBuilder_ == null) {
        return lifetimeSrecTotal_ == null
            ? com.google.type.Money.getDefaultInstance()
            : lifetimeSrecTotal_;
      } else {
        return lifetimeSrecTotalBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public Builder setLifetimeSrecTotal(com.google.type.Money value) {
      if (lifetimeSrecTotalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lifetimeSrecTotal_ = value;
      } else {
        lifetimeSrecTotalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public Builder setLifetimeSrecTotal(com.google.type.Money.Builder builderForValue) {
      if (lifetimeSrecTotalBuilder_ == null) {
        lifetimeSrecTotal_ = builderForValue.build();
      } else {
        lifetimeSrecTotalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public Builder mergeLifetimeSrecTotal(com.google.type.Money value) {
      if (lifetimeSrecTotalBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)
            && lifetimeSrecTotal_ != null
            && lifetimeSrecTotal_ != com.google.type.Money.getDefaultInstance()) {
          getLifetimeSrecTotalBuilder().mergeFrom(value);
        } else {
          lifetimeSrecTotal_ = value;
        }
      } else {
        lifetimeSrecTotalBuilder_.mergeFrom(value);
      }
      if (lifetimeSrecTotal_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public Builder clearLifetimeSrecTotal() {
      bitField0_ = (bitField0_ & ~0x00000020);
      lifetimeSrecTotal_ = null;
      if (lifetimeSrecTotalBuilder_ != null) {
        lifetimeSrecTotalBuilder_.dispose();
        lifetimeSrecTotalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public com.google.type.Money.Builder getLifetimeSrecTotalBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getLifetimeSrecTotalFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    public com.google.type.MoneyOrBuilder getLifetimeSrecTotalOrBuilder() {
      if (lifetimeSrecTotalBuilder_ != null) {
        return lifetimeSrecTotalBuilder_.getMessageOrBuilder();
      } else {
        return lifetimeSrecTotal_ == null
            ? com.google.type.Money.getDefaultInstance()
            : lifetimeSrecTotal_;
      }
    }
    /**
     *
     *
     * <pre>
     * Amount of money the user will receive from Solar Renewable Energy
     * Credits over the panel lifetime; this applies if the user buys
     * (with or without a loan) the panels.
     * </pre>
     *
     * <code>.google.type.Money lifetime_srec_total = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getLifetimeSrecTotalFieldBuilder() {
      if (lifetimeSrecTotalBuilder_ == null) {
        lifetimeSrecTotalBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getLifetimeSrecTotal(), getParentForChildren(), isClean());
        lifetimeSrecTotal_ = null;
      }
      return lifetimeSrecTotalBuilder_;
    }

    private com.google.type.Money costOfElectricityWithoutSolar_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        costOfElectricityWithoutSolarBuilder_;
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     *
     * @return Whether the costOfElectricityWithoutSolar field is set.
     */
    public boolean hasCostOfElectricityWithoutSolar() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     *
     * @return The costOfElectricityWithoutSolar.
     */
    public com.google.type.Money getCostOfElectricityWithoutSolar() {
      if (costOfElectricityWithoutSolarBuilder_ == null) {
        return costOfElectricityWithoutSolar_ == null
            ? com.google.type.Money.getDefaultInstance()
            : costOfElectricityWithoutSolar_;
      } else {
        return costOfElectricityWithoutSolarBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public Builder setCostOfElectricityWithoutSolar(com.google.type.Money value) {
      if (costOfElectricityWithoutSolarBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        costOfElectricityWithoutSolar_ = value;
      } else {
        costOfElectricityWithoutSolarBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public Builder setCostOfElectricityWithoutSolar(com.google.type.Money.Builder builderForValue) {
      if (costOfElectricityWithoutSolarBuilder_ == null) {
        costOfElectricityWithoutSolar_ = builderForValue.build();
      } else {
        costOfElectricityWithoutSolarBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public Builder mergeCostOfElectricityWithoutSolar(com.google.type.Money value) {
      if (costOfElectricityWithoutSolarBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)
            && costOfElectricityWithoutSolar_ != null
            && costOfElectricityWithoutSolar_ != com.google.type.Money.getDefaultInstance()) {
          getCostOfElectricityWithoutSolarBuilder().mergeFrom(value);
        } else {
          costOfElectricityWithoutSolar_ = value;
        }
      } else {
        costOfElectricityWithoutSolarBuilder_.mergeFrom(value);
      }
      if (costOfElectricityWithoutSolar_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public Builder clearCostOfElectricityWithoutSolar() {
      bitField0_ = (bitField0_ & ~0x00000040);
      costOfElectricityWithoutSolar_ = null;
      if (costOfElectricityWithoutSolarBuilder_ != null) {
        costOfElectricityWithoutSolarBuilder_.dispose();
        costOfElectricityWithoutSolarBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public com.google.type.Money.Builder getCostOfElectricityWithoutSolarBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getCostOfElectricityWithoutSolarFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    public com.google.type.MoneyOrBuilder getCostOfElectricityWithoutSolarOrBuilder() {
      if (costOfElectricityWithoutSolarBuilder_ != null) {
        return costOfElectricityWithoutSolarBuilder_.getMessageOrBuilder();
      } else {
        return costOfElectricityWithoutSolar_ == null
            ? com.google.type.Money.getDefaultInstance()
            : costOfElectricityWithoutSolar_;
      }
    }
    /**
     *
     *
     * <pre>
     * Total cost of electricity the user would have paid over the
     * lifetime period if they didn't install solar.
     * </pre>
     *
     * <code>.google.type.Money cost_of_electricity_without_solar = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Money, com.google.type.Money.Builder, com.google.type.MoneyOrBuilder>
        getCostOfElectricityWithoutSolarFieldBuilder() {
      if (costOfElectricityWithoutSolarBuilder_ == null) {
        costOfElectricityWithoutSolarBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Money,
                com.google.type.Money.Builder,
                com.google.type.MoneyOrBuilder>(
                getCostOfElectricityWithoutSolar(), getParentForChildren(), isClean());
        costOfElectricityWithoutSolar_ = null;
      }
      return costOfElectricityWithoutSolarBuilder_;
    }

    private boolean netMeteringAllowed_;
    /**
     *
     *
     * <pre>
     * Whether net metering is allowed.
     * </pre>
     *
     * <code>bool net_metering_allowed = 8;</code>
     *
     * @return The netMeteringAllowed.
     */
    @java.lang.Override
    public boolean getNetMeteringAllowed() {
      return netMeteringAllowed_;
    }
    /**
     *
     *
     * <pre>
     * Whether net metering is allowed.
     * </pre>
     *
     * <code>bool net_metering_allowed = 8;</code>
     *
     * @param value The netMeteringAllowed to set.
     * @return This builder for chaining.
     */
    public Builder setNetMeteringAllowed(boolean value) {

      netMeteringAllowed_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether net metering is allowed.
     * </pre>
     *
     * <code>bool net_metering_allowed = 8;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearNetMeteringAllowed() {
      bitField0_ = (bitField0_ & ~0x00000080);
      netMeteringAllowed_ = false;
      onChanged();
      return this;
    }

    private float solarPercentage_;
    /**
     *
     *
     * <pre>
     * Percentage (0-100) of the user's power supplied by solar.
     * Valid for the first year but approximately correct for future years.
     * </pre>
     *
     * <code>optional float solar_percentage = 9;</code>
     *
     * @return Whether the solarPercentage field is set.
     */
    @java.lang.Override
    public boolean hasSolarPercentage() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     *
     *
     * <pre>
     * Percentage (0-100) of the user's power supplied by solar.
     * Valid for the first year but approximately correct for future years.
     * </pre>
     *
     * <code>optional float solar_percentage = 9;</code>
     *
     * @return The solarPercentage.
     */
    @java.lang.Override
    public float getSolarPercentage() {
      return solarPercentage_;
    }
    /**
     *
     *
     * <pre>
     * Percentage (0-100) of the user's power supplied by solar.
     * Valid for the first year but approximately correct for future years.
     * </pre>
     *
     * <code>optional float solar_percentage = 9;</code>
     *
     * @param value The solarPercentage to set.
     * @return This builder for chaining.
     */
    public Builder setSolarPercentage(float value) {

      solarPercentage_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Percentage (0-100) of the user's power supplied by solar.
     * Valid for the first year but approximately correct for future years.
     * </pre>
     *
     * <code>optional float solar_percentage = 9;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSolarPercentage() {
      bitField0_ = (bitField0_ & ~0x00000100);
      solarPercentage_ = 0F;
      onChanged();
      return this;
    }

    private float percentageExportedToGrid_;
    /**
     *
     *
     * <pre>
     * The percentage (0-100) of solar electricity production we assumed was
     * exported to the grid, based on the first quarter of production. This
     * affects the calculations if net metering is not allowed.
     * </pre>
     *
     * <code>optional float percentage_exported_to_grid = 10;</code>
     *
     * @return Whether the percentageExportedToGrid field is set.
     */
    @java.lang.Override
    public boolean hasPercentageExportedToGrid() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     *
     *
     * <pre>
     * The percentage (0-100) of solar electricity production we assumed was
     * exported to the grid, based on the first quarter of production. This
     * affects the calculations if net metering is not allowed.
     * </pre>
     *
     * <code>optional float percentage_exported_to_grid = 10;</code>
     *
     * @return The percentageExportedToGrid.
     */
    @java.lang.Override
    public float getPercentageExportedToGrid() {
      return percentageExportedToGrid_;
    }
    /**
     *
     *
     * <pre>
     * The percentage (0-100) of solar electricity production we assumed was
     * exported to the grid, based on the first quarter of production. This
     * affects the calculations if net metering is not allowed.
     * </pre>
     *
     * <code>optional float percentage_exported_to_grid = 10;</code>
     *
     * @param value The percentageExportedToGrid to set.
     * @return This builder for chaining.
     */
    public Builder setPercentageExportedToGrid(float value) {

      percentageExportedToGrid_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The percentage (0-100) of solar electricity production we assumed was
     * exported to the grid, based on the first quarter of production. This
     * affects the calculations if net metering is not allowed.
     * </pre>
     *
     * <code>optional float percentage_exported_to_grid = 10;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPercentageExportedToGrid() {
      bitField0_ = (bitField0_ & ~0x00000200);
      percentageExportedToGrid_ = 0F;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.FinancialDetails)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.FinancialDetails)
  private static final com.google.maps.solar.v1.FinancialDetails DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.FinancialDetails();
  }

  public static com.google.maps.solar.v1.FinancialDetails getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FinancialDetails> PARSER =
      new com.google.protobuf.AbstractParser<FinancialDetails>() {
        @java.lang.Override
        public FinancialDetails parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<FinancialDetails> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FinancialDetails> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.FinancialDetails getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
