/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

public interface RoofSegmentSizeAndSunshineStatsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Angle of the roof segment relative to the theoretical ground plane.
   * 0 = parallel to the ground, 90 = perpendicular to the ground.
   * </pre>
   *
   * <code>optional float pitch_degrees = 1;</code>
   *
   * @return Whether the pitchDegrees field is set.
   */
  boolean hasPitchDegrees();
  /**
   *
   *
   * <pre>
   * Angle of the roof segment relative to the theoretical ground plane.
   * 0 = parallel to the ground, 90 = perpendicular to the ground.
   * </pre>
   *
   * <code>optional float pitch_degrees = 1;</code>
   *
   * @return The pitchDegrees.
   */
  float getPitchDegrees();

  /**
   *
   *
   * <pre>
   * Compass direction the roof segment is pointing in. 0 = North, 90 =
   * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
   * near 0), azimuth is not well defined, so for consistency, we define it
   * arbitrarily to be 0 (North).
   * </pre>
   *
   * <code>optional float azimuth_degrees = 2;</code>
   *
   * @return Whether the azimuthDegrees field is set.
   */
  boolean hasAzimuthDegrees();
  /**
   *
   *
   * <pre>
   * Compass direction the roof segment is pointing in. 0 = North, 90 =
   * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
   * near 0), azimuth is not well defined, so for consistency, we define it
   * arbitrarily to be 0 (North).
   * </pre>
   *
   * <code>optional float azimuth_degrees = 2;</code>
   *
   * @return The azimuthDegrees.
   */
  float getAzimuthDegrees();

  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   *
   * @return Whether the stats field is set.
   */
  boolean hasStats();
  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   *
   * @return The stats.
   */
  com.google.maps.solar.v1.SizeAndSunshineStats getStats();
  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   */
  com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder getStatsOrBuilder();

  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   *
   * @return Whether the center field is set.
   */
  boolean hasCenter();
  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   *
   * @return The center.
   */
  com.google.type.LatLng getCenter();
  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   */
  com.google.type.LatLngOrBuilder getCenterOrBuilder();

  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   *
   * @return Whether the boundingBox field is set.
   */
  boolean hasBoundingBox();
  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   *
   * @return The boundingBox.
   */
  com.google.maps.solar.v1.LatLngBox getBoundingBox();
  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   */
  com.google.maps.solar.v1.LatLngBoxOrBuilder getBoundingBoxOrBuilder();

  /**
   *
   *
   * <pre>
   * The height of the roof segment plane, in meters above sea level,
   * at the point designated by `center`. Together with the pitch,
   * azimuth, and center location, this fully defines the roof segment
   * plane.
   * </pre>
   *
   * <code>optional float plane_height_at_center_meters = 6;</code>
   *
   * @return Whether the planeHeightAtCenterMeters field is set.
   */
  boolean hasPlaneHeightAtCenterMeters();
  /**
   *
   *
   * <pre>
   * The height of the roof segment plane, in meters above sea level,
   * at the point designated by `center`. Together with the pitch,
   * azimuth, and center location, this fully defines the roof segment
   * plane.
   * </pre>
   *
   * <code>optional float plane_height_at_center_meters = 6;</code>
   *
   * @return The planeHeightAtCenterMeters.
   */
  float getPlaneHeightAtCenterMeters();
}
