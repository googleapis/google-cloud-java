/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * Size and sunniness quantiles of a roof, or part of a roof.
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.SizeAndSunshineStats}
 */
public final class SizeAndSunshineStats extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.SizeAndSunshineStats)
    SizeAndSunshineStatsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use SizeAndSunshineStats.newBuilder() to construct.
  private SizeAndSunshineStats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SizeAndSunshineStats() {
    sunshineQuantiles_ = emptyFloatList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SizeAndSunshineStats();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_SizeAndSunshineStats_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_SizeAndSunshineStats_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.SizeAndSunshineStats.class,
            com.google.maps.solar.v1.SizeAndSunshineStats.Builder.class);
  }

  public static final int AREA_METERS2_FIELD_NUMBER = 1;
  private float areaMeters2_ = 0F;
  /**
   *
   *
   * <pre>
   * The area of the roof or roof segment, in m^2. This is the roof area
   * (accounting for tilt), not the ground footprint area.
   * </pre>
   *
   * <code>float area_meters2 = 1;</code>
   *
   * @return The areaMeters2.
   */
  @java.lang.Override
  public float getAreaMeters2() {
    return areaMeters2_;
  }

  public static final int SUNSHINE_QUANTILES_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.FloatList sunshineQuantiles_ = emptyFloatList();
  /**
   *
   *
   * <pre>
   * Quantiles of the pointwise sunniness across the area. If there
   * are N values here, this represents the (N-1)-iles. For example,
   * if there are 5 values, then they would be the quartiles (min,
   * 25%, 50%, 75%, max). Values are in annual kWh/kW like
   * [max_sunshine_hours_per_year]
   * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
   * </pre>
   *
   * <code>repeated float sunshine_quantiles = 2;</code>
   *
   * @return A list containing the sunshineQuantiles.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float> getSunshineQuantilesList() {
    return sunshineQuantiles_;
  }
  /**
   *
   *
   * <pre>
   * Quantiles of the pointwise sunniness across the area. If there
   * are N values here, this represents the (N-1)-iles. For example,
   * if there are 5 values, then they would be the quartiles (min,
   * 25%, 50%, 75%, max). Values are in annual kWh/kW like
   * [max_sunshine_hours_per_year]
   * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
   * </pre>
   *
   * <code>repeated float sunshine_quantiles = 2;</code>
   *
   * @return The count of sunshineQuantiles.
   */
  public int getSunshineQuantilesCount() {
    return sunshineQuantiles_.size();
  }
  /**
   *
   *
   * <pre>
   * Quantiles of the pointwise sunniness across the area. If there
   * are N values here, this represents the (N-1)-iles. For example,
   * if there are 5 values, then they would be the quartiles (min,
   * 25%, 50%, 75%, max). Values are in annual kWh/kW like
   * [max_sunshine_hours_per_year]
   * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
   * </pre>
   *
   * <code>repeated float sunshine_quantiles = 2;</code>
   *
   * @param index The index of the element to return.
   * @return The sunshineQuantiles at the given index.
   */
  public float getSunshineQuantiles(int index) {
    return sunshineQuantiles_.getFloat(index);
  }

  private int sunshineQuantilesMemoizedSerializedSize = -1;

  public static final int GROUND_AREA_METERS2_FIELD_NUMBER = 3;
  private float groundAreaMeters2_ = 0F;
  /**
   *
   *
   * <pre>
   * The ground footprint area covered by the roof or roof segment, in m^2.
   * </pre>
   *
   * <code>float ground_area_meters2 = 3;</code>
   *
   * @return The groundAreaMeters2.
   */
  @java.lang.Override
  public float getGroundAreaMeters2() {
    return groundAreaMeters2_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    getSerializedSize();
    if (java.lang.Float.floatToRawIntBits(areaMeters2_) != 0) {
      output.writeFloat(1, areaMeters2_);
    }
    if (getSunshineQuantilesList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(sunshineQuantilesMemoizedSerializedSize);
    }
    for (int i = 0; i < sunshineQuantiles_.size(); i++) {
      output.writeFloatNoTag(sunshineQuantiles_.getFloat(i));
    }
    if (java.lang.Float.floatToRawIntBits(groundAreaMeters2_) != 0) {
      output.writeFloat(3, groundAreaMeters2_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (java.lang.Float.floatToRawIntBits(areaMeters2_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(1, areaMeters2_);
    }
    {
      int dataSize = 0;
      dataSize = 4 * getSunshineQuantilesList().size();
      size += dataSize;
      if (!getSunshineQuantilesList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      sunshineQuantilesMemoizedSerializedSize = dataSize;
    }
    if (java.lang.Float.floatToRawIntBits(groundAreaMeters2_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(3, groundAreaMeters2_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.SizeAndSunshineStats)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.SizeAndSunshineStats other =
        (com.google.maps.solar.v1.SizeAndSunshineStats) obj;

    if (java.lang.Float.floatToIntBits(getAreaMeters2())
        != java.lang.Float.floatToIntBits(other.getAreaMeters2())) return false;
    if (!getSunshineQuantilesList().equals(other.getSunshineQuantilesList())) return false;
    if (java.lang.Float.floatToIntBits(getGroundAreaMeters2())
        != java.lang.Float.floatToIntBits(other.getGroundAreaMeters2())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + AREA_METERS2_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getAreaMeters2());
    if (getSunshineQuantilesCount() > 0) {
      hash = (37 * hash) + SUNSHINE_QUANTILES_FIELD_NUMBER;
      hash = (53 * hash) + getSunshineQuantilesList().hashCode();
    }
    hash = (37 * hash) + GROUND_AREA_METERS2_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getGroundAreaMeters2());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.maps.solar.v1.SizeAndSunshineStats prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Size and sunniness quantiles of a roof, or part of a roof.
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.SizeAndSunshineStats}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.SizeAndSunshineStats)
      com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SizeAndSunshineStats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SizeAndSunshineStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.SizeAndSunshineStats.class,
              com.google.maps.solar.v1.SizeAndSunshineStats.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.SizeAndSunshineStats.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      areaMeters2_ = 0F;
      sunshineQuantiles_ = emptyFloatList();
      groundAreaMeters2_ = 0F;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SizeAndSunshineStats_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SizeAndSunshineStats getDefaultInstanceForType() {
      return com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SizeAndSunshineStats build() {
      com.google.maps.solar.v1.SizeAndSunshineStats result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SizeAndSunshineStats buildPartial() {
      com.google.maps.solar.v1.SizeAndSunshineStats result =
          new com.google.maps.solar.v1.SizeAndSunshineStats(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.solar.v1.SizeAndSunshineStats result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.areaMeters2_ = areaMeters2_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        sunshineQuantiles_.makeImmutable();
        result.sunshineQuantiles_ = sunshineQuantiles_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.groundAreaMeters2_ = groundAreaMeters2_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.SizeAndSunshineStats) {
        return mergeFrom((com.google.maps.solar.v1.SizeAndSunshineStats) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.SizeAndSunshineStats other) {
      if (other == com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()) return this;
      if (other.getAreaMeters2() != 0F) {
        setAreaMeters2(other.getAreaMeters2());
      }
      if (!other.sunshineQuantiles_.isEmpty()) {
        if (sunshineQuantiles_.isEmpty()) {
          sunshineQuantiles_ = other.sunshineQuantiles_;
          sunshineQuantiles_.makeImmutable();
          bitField0_ |= 0x00000002;
        } else {
          ensureSunshineQuantilesIsMutable();
          sunshineQuantiles_.addAll(other.sunshineQuantiles_);
        }
        onChanged();
      }
      if (other.getGroundAreaMeters2() != 0F) {
        setGroundAreaMeters2(other.getGroundAreaMeters2());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13:
              {
                areaMeters2_ = input.readFloat();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
            case 21:
              {
                float v = input.readFloat();
                ensureSunshineQuantilesIsMutable();
                sunshineQuantiles_.addFloat(v);
                break;
              } // case 21
            case 18:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                int alloc = length > 4096 ? 4096 : length;
                ensureSunshineQuantilesIsMutable(alloc / 4);
                while (input.getBytesUntilLimit() > 0) {
                  sunshineQuantiles_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              } // case 18
            case 29:
              {
                groundAreaMeters2_ = input.readFloat();
                bitField0_ |= 0x00000004;
                break;
              } // case 29
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private float areaMeters2_;
    /**
     *
     *
     * <pre>
     * The area of the roof or roof segment, in m^2. This is the roof area
     * (accounting for tilt), not the ground footprint area.
     * </pre>
     *
     * <code>float area_meters2 = 1;</code>
     *
     * @return The areaMeters2.
     */
    @java.lang.Override
    public float getAreaMeters2() {
      return areaMeters2_;
    }
    /**
     *
     *
     * <pre>
     * The area of the roof or roof segment, in m^2. This is the roof area
     * (accounting for tilt), not the ground footprint area.
     * </pre>
     *
     * <code>float area_meters2 = 1;</code>
     *
     * @param value The areaMeters2 to set.
     * @return This builder for chaining.
     */
    public Builder setAreaMeters2(float value) {

      areaMeters2_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The area of the roof or roof segment, in m^2. This is the roof area
     * (accounting for tilt), not the ground footprint area.
     * </pre>
     *
     * <code>float area_meters2 = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAreaMeters2() {
      bitField0_ = (bitField0_ & ~0x00000001);
      areaMeters2_ = 0F;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList sunshineQuantiles_ = emptyFloatList();

    private void ensureSunshineQuantilesIsMutable() {
      if (!sunshineQuantiles_.isModifiable()) {
        sunshineQuantiles_ = makeMutableCopy(sunshineQuantiles_);
      }
      bitField0_ |= 0x00000002;
    }

    private void ensureSunshineQuantilesIsMutable(int capacity) {
      if (!sunshineQuantiles_.isModifiable()) {
        sunshineQuantiles_ = makeMutableCopy(sunshineQuantiles_, capacity);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @return A list containing the sunshineQuantiles.
     */
    public java.util.List<java.lang.Float> getSunshineQuantilesList() {
      sunshineQuantiles_.makeImmutable();
      return sunshineQuantiles_;
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @return The count of sunshineQuantiles.
     */
    public int getSunshineQuantilesCount() {
      return sunshineQuantiles_.size();
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @param index The index of the element to return.
     * @return The sunshineQuantiles at the given index.
     */
    public float getSunshineQuantiles(int index) {
      return sunshineQuantiles_.getFloat(index);
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @param index The index to set the value at.
     * @param value The sunshineQuantiles to set.
     * @return This builder for chaining.
     */
    public Builder setSunshineQuantiles(int index, float value) {

      ensureSunshineQuantilesIsMutable();
      sunshineQuantiles_.setFloat(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @param value The sunshineQuantiles to add.
     * @return This builder for chaining.
     */
    public Builder addSunshineQuantiles(float value) {

      ensureSunshineQuantilesIsMutable();
      sunshineQuantiles_.addFloat(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @param values The sunshineQuantiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllSunshineQuantiles(java.lang.Iterable<? extends java.lang.Float> values) {
      ensureSunshineQuantilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, sunshineQuantiles_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Quantiles of the pointwise sunniness across the area. If there
     * are N values here, this represents the (N-1)-iles. For example,
     * if there are 5 values, then they would be the quartiles (min,
     * 25%, 50%, 75%, max). Values are in annual kWh/kW like
     * [max_sunshine_hours_per_year]
     * [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].
     * </pre>
     *
     * <code>repeated float sunshine_quantiles = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSunshineQuantiles() {
      sunshineQuantiles_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private float groundAreaMeters2_;
    /**
     *
     *
     * <pre>
     * The ground footprint area covered by the roof or roof segment, in m^2.
     * </pre>
     *
     * <code>float ground_area_meters2 = 3;</code>
     *
     * @return The groundAreaMeters2.
     */
    @java.lang.Override
    public float getGroundAreaMeters2() {
      return groundAreaMeters2_;
    }
    /**
     *
     *
     * <pre>
     * The ground footprint area covered by the roof or roof segment, in m^2.
     * </pre>
     *
     * <code>float ground_area_meters2 = 3;</code>
     *
     * @param value The groundAreaMeters2 to set.
     * @return This builder for chaining.
     */
    public Builder setGroundAreaMeters2(float value) {

      groundAreaMeters2_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The ground footprint area covered by the roof or roof segment, in m^2.
     * </pre>
     *
     * <code>float ground_area_meters2 = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearGroundAreaMeters2() {
      bitField0_ = (bitField0_ & ~0x00000004);
      groundAreaMeters2_ = 0F;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.SizeAndSunshineStats)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.SizeAndSunshineStats)
  private static final com.google.maps.solar.v1.SizeAndSunshineStats DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.SizeAndSunshineStats();
  }

  public static com.google.maps.solar.v1.SizeAndSunshineStats getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SizeAndSunshineStats> PARSER =
      new com.google.protobuf.AbstractParser<SizeAndSunshineStats>() {
        @java.lang.Override
        public SizeAndSunshineStats parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<SizeAndSunshineStats> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SizeAndSunshineStats> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.SizeAndSunshineStats getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
