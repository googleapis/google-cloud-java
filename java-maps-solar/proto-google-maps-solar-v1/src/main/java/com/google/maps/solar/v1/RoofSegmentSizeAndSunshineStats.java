/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * Information about the size and sunniness quantiles of a roof segment.
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.RoofSegmentSizeAndSunshineStats}
 */
public final class RoofSegmentSizeAndSunshineStats extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)
    RoofSegmentSizeAndSunshineStatsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use RoofSegmentSizeAndSunshineStats.newBuilder() to construct.
  private RoofSegmentSizeAndSunshineStats(
      com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private RoofSegmentSizeAndSunshineStats() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new RoofSegmentSizeAndSunshineStats();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_RoofSegmentSizeAndSunshineStats_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_RoofSegmentSizeAndSunshineStats_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.class,
            com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.Builder.class);
  }

  private int bitField0_;
  public static final int PITCH_DEGREES_FIELD_NUMBER = 1;
  private float pitchDegrees_ = 0F;
  /**
   *
   *
   * <pre>
   * Angle of the roof segment relative to the theoretical ground plane.
   * 0 = parallel to the ground, 90 = perpendicular to the ground.
   * </pre>
   *
   * <code>optional float pitch_degrees = 1;</code>
   *
   * @return Whether the pitchDegrees field is set.
   */
  @java.lang.Override
  public boolean hasPitchDegrees() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Angle of the roof segment relative to the theoretical ground plane.
   * 0 = parallel to the ground, 90 = perpendicular to the ground.
   * </pre>
   *
   * <code>optional float pitch_degrees = 1;</code>
   *
   * @return The pitchDegrees.
   */
  @java.lang.Override
  public float getPitchDegrees() {
    return pitchDegrees_;
  }

  public static final int AZIMUTH_DEGREES_FIELD_NUMBER = 2;
  private float azimuthDegrees_ = 0F;
  /**
   *
   *
   * <pre>
   * Compass direction the roof segment is pointing in. 0 = North, 90 =
   * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
   * near 0), azimuth is not well defined, so for consistency, we define it
   * arbitrarily to be 0 (North).
   * </pre>
   *
   * <code>optional float azimuth_degrees = 2;</code>
   *
   * @return Whether the azimuthDegrees field is set.
   */
  @java.lang.Override
  public boolean hasAzimuthDegrees() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Compass direction the roof segment is pointing in. 0 = North, 90 =
   * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
   * near 0), azimuth is not well defined, so for consistency, we define it
   * arbitrarily to be 0 (North).
   * </pre>
   *
   * <code>optional float azimuth_degrees = 2;</code>
   *
   * @return The azimuthDegrees.
   */
  @java.lang.Override
  public float getAzimuthDegrees() {
    return azimuthDegrees_;
  }

  public static final int STATS_FIELD_NUMBER = 3;
  private com.google.maps.solar.v1.SizeAndSunshineStats stats_;
  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   *
   * @return Whether the stats field is set.
   */
  @java.lang.Override
  public boolean hasStats() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   *
   * @return The stats.
   */
  @java.lang.Override
  public com.google.maps.solar.v1.SizeAndSunshineStats getStats() {
    return stats_ == null
        ? com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()
        : stats_;
  }
  /**
   *
   *
   * <pre>
   * Total size and sunlight quantiles for the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
   */
  @java.lang.Override
  public com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder getStatsOrBuilder() {
    return stats_ == null
        ? com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()
        : stats_;
  }

  public static final int CENTER_FIELD_NUMBER = 4;
  private com.google.type.LatLng center_;
  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   *
   * @return Whether the center field is set.
   */
  @java.lang.Override
  public boolean hasCenter() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   *
   * @return The center.
   */
  @java.lang.Override
  public com.google.type.LatLng getCenter() {
    return center_ == null ? com.google.type.LatLng.getDefaultInstance() : center_;
  }
  /**
   *
   *
   * <pre>
   * A point near the center of the roof segment.
   * </pre>
   *
   * <code>.google.type.LatLng center = 4;</code>
   */
  @java.lang.Override
  public com.google.type.LatLngOrBuilder getCenterOrBuilder() {
    return center_ == null ? com.google.type.LatLng.getDefaultInstance() : center_;
  }

  public static final int BOUNDING_BOX_FIELD_NUMBER = 5;
  private com.google.maps.solar.v1.LatLngBox boundingBox_;
  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   *
   * @return Whether the boundingBox field is set.
   */
  @java.lang.Override
  public boolean hasBoundingBox() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   *
   * @return The boundingBox.
   */
  @java.lang.Override
  public com.google.maps.solar.v1.LatLngBox getBoundingBox() {
    return boundingBox_ == null
        ? com.google.maps.solar.v1.LatLngBox.getDefaultInstance()
        : boundingBox_;
  }
  /**
   *
   *
   * <pre>
   * The bounding box of the roof segment.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
   */
  @java.lang.Override
  public com.google.maps.solar.v1.LatLngBoxOrBuilder getBoundingBoxOrBuilder() {
    return boundingBox_ == null
        ? com.google.maps.solar.v1.LatLngBox.getDefaultInstance()
        : boundingBox_;
  }

  public static final int PLANE_HEIGHT_AT_CENTER_METERS_FIELD_NUMBER = 6;
  private float planeHeightAtCenterMeters_ = 0F;
  /**
   *
   *
   * <pre>
   * The height of the roof segment plane, in meters above sea level,
   * at the point designated by `center`. Together with the pitch,
   * azimuth, and center location, this fully defines the roof segment
   * plane.
   * </pre>
   *
   * <code>optional float plane_height_at_center_meters = 6;</code>
   *
   * @return Whether the planeHeightAtCenterMeters field is set.
   */
  @java.lang.Override
  public boolean hasPlaneHeightAtCenterMeters() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   *
   *
   * <pre>
   * The height of the roof segment plane, in meters above sea level,
   * at the point designated by `center`. Together with the pitch,
   * azimuth, and center location, this fully defines the roof segment
   * plane.
   * </pre>
   *
   * <code>optional float plane_height_at_center_meters = 6;</code>
   *
   * @return The planeHeightAtCenterMeters.
   */
  @java.lang.Override
  public float getPlaneHeightAtCenterMeters() {
    return planeHeightAtCenterMeters_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeFloat(1, pitchDegrees_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeFloat(2, azimuthDegrees_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getStats());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(4, getCenter());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(5, getBoundingBox());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeFloat(6, planeHeightAtCenterMeters_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(1, pitchDegrees_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, azimuthDegrees_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getStats());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getCenter());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getBoundingBox());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(6, planeHeightAtCenterMeters_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats other =
        (com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats) obj;

    if (hasPitchDegrees() != other.hasPitchDegrees()) return false;
    if (hasPitchDegrees()) {
      if (java.lang.Float.floatToIntBits(getPitchDegrees())
          != java.lang.Float.floatToIntBits(other.getPitchDegrees())) return false;
    }
    if (hasAzimuthDegrees() != other.hasAzimuthDegrees()) return false;
    if (hasAzimuthDegrees()) {
      if (java.lang.Float.floatToIntBits(getAzimuthDegrees())
          != java.lang.Float.floatToIntBits(other.getAzimuthDegrees())) return false;
    }
    if (hasStats() != other.hasStats()) return false;
    if (hasStats()) {
      if (!getStats().equals(other.getStats())) return false;
    }
    if (hasCenter() != other.hasCenter()) return false;
    if (hasCenter()) {
      if (!getCenter().equals(other.getCenter())) return false;
    }
    if (hasBoundingBox() != other.hasBoundingBox()) return false;
    if (hasBoundingBox()) {
      if (!getBoundingBox().equals(other.getBoundingBox())) return false;
    }
    if (hasPlaneHeightAtCenterMeters() != other.hasPlaneHeightAtCenterMeters()) return false;
    if (hasPlaneHeightAtCenterMeters()) {
      if (java.lang.Float.floatToIntBits(getPlaneHeightAtCenterMeters())
          != java.lang.Float.floatToIntBits(other.getPlaneHeightAtCenterMeters())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPitchDegrees()) {
      hash = (37 * hash) + PITCH_DEGREES_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(getPitchDegrees());
    }
    if (hasAzimuthDegrees()) {
      hash = (37 * hash) + AZIMUTH_DEGREES_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(getAzimuthDegrees());
    }
    if (hasStats()) {
      hash = (37 * hash) + STATS_FIELD_NUMBER;
      hash = (53 * hash) + getStats().hashCode();
    }
    if (hasCenter()) {
      hash = (37 * hash) + CENTER_FIELD_NUMBER;
      hash = (53 * hash) + getCenter().hashCode();
    }
    if (hasBoundingBox()) {
      hash = (37 * hash) + BOUNDING_BOX_FIELD_NUMBER;
      hash = (53 * hash) + getBoundingBox().hashCode();
    }
    if (hasPlaneHeightAtCenterMeters()) {
      hash = (37 * hash) + PLANE_HEIGHT_AT_CENTER_METERS_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(getPlaneHeightAtCenterMeters());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Information about the size and sunniness quantiles of a roof segment.
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.RoofSegmentSizeAndSunshineStats}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)
      com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStatsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_RoofSegmentSizeAndSunshineStats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_RoofSegmentSizeAndSunshineStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.class,
              com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getStatsFieldBuilder();
        getCenterFieldBuilder();
        getBoundingBoxFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      pitchDegrees_ = 0F;
      azimuthDegrees_ = 0F;
      stats_ = null;
      if (statsBuilder_ != null) {
        statsBuilder_.dispose();
        statsBuilder_ = null;
      }
      center_ = null;
      if (centerBuilder_ != null) {
        centerBuilder_.dispose();
        centerBuilder_ = null;
      }
      boundingBox_ = null;
      if (boundingBoxBuilder_ != null) {
        boundingBoxBuilder_.dispose();
        boundingBoxBuilder_ = null;
      }
      planeHeightAtCenterMeters_ = 0F;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_RoofSegmentSizeAndSunshineStats_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats getDefaultInstanceForType() {
      return com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats build() {
      com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats buildPartial() {
      com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats result =
          new com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.pitchDegrees_ = pitchDegrees_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.azimuthDegrees_ = azimuthDegrees_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.stats_ = statsBuilder_ == null ? stats_ : statsBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.center_ = centerBuilder_ == null ? center_ : centerBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.boundingBox_ =
            boundingBoxBuilder_ == null ? boundingBox_ : boundingBoxBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.planeHeightAtCenterMeters_ = planeHeightAtCenterMeters_;
        to_bitField0_ |= 0x00000020;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats) {
        return mergeFrom((com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats other) {
      if (other == com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats.getDefaultInstance())
        return this;
      if (other.hasPitchDegrees()) {
        setPitchDegrees(other.getPitchDegrees());
      }
      if (other.hasAzimuthDegrees()) {
        setAzimuthDegrees(other.getAzimuthDegrees());
      }
      if (other.hasStats()) {
        mergeStats(other.getStats());
      }
      if (other.hasCenter()) {
        mergeCenter(other.getCenter());
      }
      if (other.hasBoundingBox()) {
        mergeBoundingBox(other.getBoundingBox());
      }
      if (other.hasPlaneHeightAtCenterMeters()) {
        setPlaneHeightAtCenterMeters(other.getPlaneHeightAtCenterMeters());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13:
              {
                pitchDegrees_ = input.readFloat();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
            case 21:
              {
                azimuthDegrees_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
            case 26:
              {
                input.readMessage(getStatsFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(getCenterFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getBoundingBoxFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 53:
              {
                planeHeightAtCenterMeters_ = input.readFloat();
                bitField0_ |= 0x00000020;
                break;
              } // case 53
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private float pitchDegrees_;
    /**
     *
     *
     * <pre>
     * Angle of the roof segment relative to the theoretical ground plane.
     * 0 = parallel to the ground, 90 = perpendicular to the ground.
     * </pre>
     *
     * <code>optional float pitch_degrees = 1;</code>
     *
     * @return Whether the pitchDegrees field is set.
     */
    @java.lang.Override
    public boolean hasPitchDegrees() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Angle of the roof segment relative to the theoretical ground plane.
     * 0 = parallel to the ground, 90 = perpendicular to the ground.
     * </pre>
     *
     * <code>optional float pitch_degrees = 1;</code>
     *
     * @return The pitchDegrees.
     */
    @java.lang.Override
    public float getPitchDegrees() {
      return pitchDegrees_;
    }
    /**
     *
     *
     * <pre>
     * Angle of the roof segment relative to the theoretical ground plane.
     * 0 = parallel to the ground, 90 = perpendicular to the ground.
     * </pre>
     *
     * <code>optional float pitch_degrees = 1;</code>
     *
     * @param value The pitchDegrees to set.
     * @return This builder for chaining.
     */
    public Builder setPitchDegrees(float value) {

      pitchDegrees_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Angle of the roof segment relative to the theoretical ground plane.
     * 0 = parallel to the ground, 90 = perpendicular to the ground.
     * </pre>
     *
     * <code>optional float pitch_degrees = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPitchDegrees() {
      bitField0_ = (bitField0_ & ~0x00000001);
      pitchDegrees_ = 0F;
      onChanged();
      return this;
    }

    private float azimuthDegrees_;
    /**
     *
     *
     * <pre>
     * Compass direction the roof segment is pointing in. 0 = North, 90 =
     * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
     * near 0), azimuth is not well defined, so for consistency, we define it
     * arbitrarily to be 0 (North).
     * </pre>
     *
     * <code>optional float azimuth_degrees = 2;</code>
     *
     * @return Whether the azimuthDegrees field is set.
     */
    @java.lang.Override
    public boolean hasAzimuthDegrees() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Compass direction the roof segment is pointing in. 0 = North, 90 =
     * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
     * near 0), azimuth is not well defined, so for consistency, we define it
     * arbitrarily to be 0 (North).
     * </pre>
     *
     * <code>optional float azimuth_degrees = 2;</code>
     *
     * @return The azimuthDegrees.
     */
    @java.lang.Override
    public float getAzimuthDegrees() {
      return azimuthDegrees_;
    }
    /**
     *
     *
     * <pre>
     * Compass direction the roof segment is pointing in. 0 = North, 90 =
     * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
     * near 0), azimuth is not well defined, so for consistency, we define it
     * arbitrarily to be 0 (North).
     * </pre>
     *
     * <code>optional float azimuth_degrees = 2;</code>
     *
     * @param value The azimuthDegrees to set.
     * @return This builder for chaining.
     */
    public Builder setAzimuthDegrees(float value) {

      azimuthDegrees_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Compass direction the roof segment is pointing in. 0 = North, 90 =
     * East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
     * near 0), azimuth is not well defined, so for consistency, we define it
     * arbitrarily to be 0 (North).
     * </pre>
     *
     * <code>optional float azimuth_degrees = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAzimuthDegrees() {
      bitField0_ = (bitField0_ & ~0x00000002);
      azimuthDegrees_ = 0F;
      onChanged();
      return this;
    }

    private com.google.maps.solar.v1.SizeAndSunshineStats stats_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.solar.v1.SizeAndSunshineStats,
            com.google.maps.solar.v1.SizeAndSunshineStats.Builder,
            com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder>
        statsBuilder_;
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     *
     * @return Whether the stats field is set.
     */
    public boolean hasStats() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     *
     * @return The stats.
     */
    public com.google.maps.solar.v1.SizeAndSunshineStats getStats() {
      if (statsBuilder_ == null) {
        return stats_ == null
            ? com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()
            : stats_;
      } else {
        return statsBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public Builder setStats(com.google.maps.solar.v1.SizeAndSunshineStats value) {
      if (statsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stats_ = value;
      } else {
        statsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public Builder setStats(com.google.maps.solar.v1.SizeAndSunshineStats.Builder builderForValue) {
      if (statsBuilder_ == null) {
        stats_ = builderForValue.build();
      } else {
        statsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public Builder mergeStats(com.google.maps.solar.v1.SizeAndSunshineStats value) {
      if (statsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)
            && stats_ != null
            && stats_ != com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()) {
          getStatsBuilder().mergeFrom(value);
        } else {
          stats_ = value;
        }
      } else {
        statsBuilder_.mergeFrom(value);
      }
      if (stats_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public Builder clearStats() {
      bitField0_ = (bitField0_ & ~0x00000004);
      stats_ = null;
      if (statsBuilder_ != null) {
        statsBuilder_.dispose();
        statsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public com.google.maps.solar.v1.SizeAndSunshineStats.Builder getStatsBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getStatsFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    public com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder getStatsOrBuilder() {
      if (statsBuilder_ != null) {
        return statsBuilder_.getMessageOrBuilder();
      } else {
        return stats_ == null
            ? com.google.maps.solar.v1.SizeAndSunshineStats.getDefaultInstance()
            : stats_;
      }
    }
    /**
     *
     *
     * <pre>
     * Total size and sunlight quantiles for the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.SizeAndSunshineStats stats = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.solar.v1.SizeAndSunshineStats,
            com.google.maps.solar.v1.SizeAndSunshineStats.Builder,
            com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder>
        getStatsFieldBuilder() {
      if (statsBuilder_ == null) {
        statsBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.maps.solar.v1.SizeAndSunshineStats,
                com.google.maps.solar.v1.SizeAndSunshineStats.Builder,
                com.google.maps.solar.v1.SizeAndSunshineStatsOrBuilder>(
                getStats(), getParentForChildren(), isClean());
        stats_ = null;
      }
      return statsBuilder_;
    }

    private com.google.type.LatLng center_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.LatLng, com.google.type.LatLng.Builder, com.google.type.LatLngOrBuilder>
        centerBuilder_;
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     *
     * @return Whether the center field is set.
     */
    public boolean hasCenter() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     *
     * @return The center.
     */
    public com.google.type.LatLng getCenter() {
      if (centerBuilder_ == null) {
        return center_ == null ? com.google.type.LatLng.getDefaultInstance() : center_;
      } else {
        return centerBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public Builder setCenter(com.google.type.LatLng value) {
      if (centerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        center_ = value;
      } else {
        centerBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public Builder setCenter(com.google.type.LatLng.Builder builderForValue) {
      if (centerBuilder_ == null) {
        center_ = builderForValue.build();
      } else {
        centerBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public Builder mergeCenter(com.google.type.LatLng value) {
      if (centerBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)
            && center_ != null
            && center_ != com.google.type.LatLng.getDefaultInstance()) {
          getCenterBuilder().mergeFrom(value);
        } else {
          center_ = value;
        }
      } else {
        centerBuilder_.mergeFrom(value);
      }
      if (center_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public Builder clearCenter() {
      bitField0_ = (bitField0_ & ~0x00000008);
      center_ = null;
      if (centerBuilder_ != null) {
        centerBuilder_.dispose();
        centerBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public com.google.type.LatLng.Builder getCenterBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getCenterFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    public com.google.type.LatLngOrBuilder getCenterOrBuilder() {
      if (centerBuilder_ != null) {
        return centerBuilder_.getMessageOrBuilder();
      } else {
        return center_ == null ? com.google.type.LatLng.getDefaultInstance() : center_;
      }
    }
    /**
     *
     *
     * <pre>
     * A point near the center of the roof segment.
     * </pre>
     *
     * <code>.google.type.LatLng center = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.LatLng, com.google.type.LatLng.Builder, com.google.type.LatLngOrBuilder>
        getCenterFieldBuilder() {
      if (centerBuilder_ == null) {
        centerBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.LatLng,
                com.google.type.LatLng.Builder,
                com.google.type.LatLngOrBuilder>(getCenter(), getParentForChildren(), isClean());
        center_ = null;
      }
      return centerBuilder_;
    }

    private com.google.maps.solar.v1.LatLngBox boundingBox_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.solar.v1.LatLngBox,
            com.google.maps.solar.v1.LatLngBox.Builder,
            com.google.maps.solar.v1.LatLngBoxOrBuilder>
        boundingBoxBuilder_;
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     *
     * @return Whether the boundingBox field is set.
     */
    public boolean hasBoundingBox() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     *
     * @return The boundingBox.
     */
    public com.google.maps.solar.v1.LatLngBox getBoundingBox() {
      if (boundingBoxBuilder_ == null) {
        return boundingBox_ == null
            ? com.google.maps.solar.v1.LatLngBox.getDefaultInstance()
            : boundingBox_;
      } else {
        return boundingBoxBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public Builder setBoundingBox(com.google.maps.solar.v1.LatLngBox value) {
      if (boundingBoxBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        boundingBox_ = value;
      } else {
        boundingBoxBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public Builder setBoundingBox(com.google.maps.solar.v1.LatLngBox.Builder builderForValue) {
      if (boundingBoxBuilder_ == null) {
        boundingBox_ = builderForValue.build();
      } else {
        boundingBoxBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public Builder mergeBoundingBox(com.google.maps.solar.v1.LatLngBox value) {
      if (boundingBoxBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && boundingBox_ != null
            && boundingBox_ != com.google.maps.solar.v1.LatLngBox.getDefaultInstance()) {
          getBoundingBoxBuilder().mergeFrom(value);
        } else {
          boundingBox_ = value;
        }
      } else {
        boundingBoxBuilder_.mergeFrom(value);
      }
      if (boundingBox_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public Builder clearBoundingBox() {
      bitField0_ = (bitField0_ & ~0x00000010);
      boundingBox_ = null;
      if (boundingBoxBuilder_ != null) {
        boundingBoxBuilder_.dispose();
        boundingBoxBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public com.google.maps.solar.v1.LatLngBox.Builder getBoundingBoxBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getBoundingBoxFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    public com.google.maps.solar.v1.LatLngBoxOrBuilder getBoundingBoxOrBuilder() {
      if (boundingBoxBuilder_ != null) {
        return boundingBoxBuilder_.getMessageOrBuilder();
      } else {
        return boundingBox_ == null
            ? com.google.maps.solar.v1.LatLngBox.getDefaultInstance()
            : boundingBox_;
      }
    }
    /**
     *
     *
     * <pre>
     * The bounding box of the roof segment.
     * </pre>
     *
     * <code>.google.maps.solar.v1.LatLngBox bounding_box = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.solar.v1.LatLngBox,
            com.google.maps.solar.v1.LatLngBox.Builder,
            com.google.maps.solar.v1.LatLngBoxOrBuilder>
        getBoundingBoxFieldBuilder() {
      if (boundingBoxBuilder_ == null) {
        boundingBoxBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.maps.solar.v1.LatLngBox,
                com.google.maps.solar.v1.LatLngBox.Builder,
                com.google.maps.solar.v1.LatLngBoxOrBuilder>(
                getBoundingBox(), getParentForChildren(), isClean());
        boundingBox_ = null;
      }
      return boundingBoxBuilder_;
    }

    private float planeHeightAtCenterMeters_;
    /**
     *
     *
     * <pre>
     * The height of the roof segment plane, in meters above sea level,
     * at the point designated by `center`. Together with the pitch,
     * azimuth, and center location, this fully defines the roof segment
     * plane.
     * </pre>
     *
     * <code>optional float plane_height_at_center_meters = 6;</code>
     *
     * @return Whether the planeHeightAtCenterMeters field is set.
     */
    @java.lang.Override
    public boolean hasPlaneHeightAtCenterMeters() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     *
     *
     * <pre>
     * The height of the roof segment plane, in meters above sea level,
     * at the point designated by `center`. Together with the pitch,
     * azimuth, and center location, this fully defines the roof segment
     * plane.
     * </pre>
     *
     * <code>optional float plane_height_at_center_meters = 6;</code>
     *
     * @return The planeHeightAtCenterMeters.
     */
    @java.lang.Override
    public float getPlaneHeightAtCenterMeters() {
      return planeHeightAtCenterMeters_;
    }
    /**
     *
     *
     * <pre>
     * The height of the roof segment plane, in meters above sea level,
     * at the point designated by `center`. Together with the pitch,
     * azimuth, and center location, this fully defines the roof segment
     * plane.
     * </pre>
     *
     * <code>optional float plane_height_at_center_meters = 6;</code>
     *
     * @param value The planeHeightAtCenterMeters to set.
     * @return This builder for chaining.
     */
    public Builder setPlaneHeightAtCenterMeters(float value) {

      planeHeightAtCenterMeters_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The height of the roof segment plane, in meters above sea level,
     * at the point designated by `center`. Together with the pitch,
     * azimuth, and center location, this fully defines the roof segment
     * plane.
     * </pre>
     *
     * <code>optional float plane_height_at_center_meters = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPlaneHeightAtCenterMeters() {
      bitField0_ = (bitField0_ & ~0x00000020);
      planeHeightAtCenterMeters_ = 0F;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.RoofSegmentSizeAndSunshineStats)
  private static final com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats();
  }

  public static com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RoofSegmentSizeAndSunshineStats> PARSER =
      new com.google.protobuf.AbstractParser<RoofSegmentSizeAndSunshineStats>() {
        @java.lang.Override
        public RoofSegmentSizeAndSunshineStats parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<RoofSegmentSizeAndSunshineStats> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RoofSegmentSizeAndSunshineStats> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.RoofSegmentSizeAndSunshineStats getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
