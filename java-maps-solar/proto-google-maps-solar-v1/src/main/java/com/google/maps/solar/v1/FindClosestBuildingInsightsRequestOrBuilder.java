/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

public interface FindClosestBuildingInsightsRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.maps.solar.v1.FindClosestBuildingInsightsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude from which the API looks for the
   * nearest known building.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return Whether the location field is set.
   */
  boolean hasLocation();
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude from which the API looks for the
   * nearest known building.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The location.
   */
  com.google.type.LatLng getLocation();
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude from which the API looks for the
   * nearest known building.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.type.LatLngOrBuilder getLocationOrBuilder();

  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for requiredQuality.
   */
  int getRequiredQualityValue();
  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The requiredQuality.
   */
  com.google.maps.solar.v1.ImageryQuality getRequiredQuality();

  /**
   *
   *
   * <pre>
   * Optional. Whether to require exact quality of the imagery.
   * If set to false, the `required_quality` field is interpreted as the minimum
   * required quality, such that HIGH quality imagery may be returned when
   * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   * is interpreted as the exact required quality and only `MEDIUM` quality
   * imagery is returned if `required_quality` is set to `MEDIUM`.
   * </pre>
   *
   * <code>bool exact_quality_required = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The exactQualityRequired.
   */
  boolean getExactQualityRequired();
}
