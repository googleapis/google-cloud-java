/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

public interface GetDataLayersRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.maps.solar.v1.GetDataLayersRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return Whether the location field is set.
   */
  boolean hasLocation();
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The location.
   */
  com.google.type.LatLng getLocation();
  /**
   *
   *
   * <pre>
   * Required. The longitude and latitude for the center of the region to get
   * data for.
   * </pre>
   *
   * <code>.google.type.LatLng location = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.type.LatLngOrBuilder getLocationOrBuilder();

  /**
   *
   *
   * <pre>
   * Required. The radius, in meters, defining the region surrounding that
   * centre point for which data should be returned. The limitations
   * on this value are:
   *
   * * Any value up to 100m can always be specified.
   * * Values over 100m can be specified, as long as
   *   `radius_meters` &lt;= `pixel_size_meters * 1000`.
   * * However, for values over 175m, the `DataLayerView` in the
   *   request must not include monthly flux or hourly shade.
   * </pre>
   *
   * <code>float radius_meters = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The radiusMeters.
   */
  float getRadiusMeters();

  /**
   *
   *
   * <pre>
   * Optional. The desired subset of the data to return.
   * </pre>
   *
   * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for view.
   */
  int getViewValue();
  /**
   *
   *
   * <pre>
   * Optional. The desired subset of the data to return.
   * </pre>
   *
   * <code>.google.maps.solar.v1.DataLayerView view = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The view.
   */
  com.google.maps.solar.v1.DataLayerView getView();

  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for requiredQuality.
   */
  int getRequiredQualityValue();
  /**
   *
   *
   * <pre>
   * Optional. The minimum quality level allowed in the results. No result with
   * lower quality than this will be returned. Not specifying this is
   * equivalent to restricting to HIGH quality only.
   * </pre>
   *
   * <code>
   * .google.maps.solar.v1.ImageryQuality required_quality = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The requiredQuality.
   */
  com.google.maps.solar.v1.ImageryQuality getRequiredQuality();

  /**
   *
   *
   * <pre>
   * Optional. The minimum scale, in meters per pixel, of the data to return.
   * Values of 0.1 (the default, if this field is not set explicitly),
   * 0.25, 0.5, and 1.0 are supported. Imagery components whose normal
   * resolution is less than `pixel_size_meters` will be returned at
   * the resolution specified by `pixel_size_meters`; imagery
   * components whose normal resolution is equal to or greater than
   * `pixel_size_meters` will be returned at that normal resolution.
   * </pre>
   *
   * <code>float pixel_size_meters = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The pixelSizeMeters.
   */
  float getPixelSizeMeters();

  /**
   *
   *
   * <pre>
   * Optional. Whether to require exact quality of the imagery.
   * If set to false, the `required_quality` field is interpreted as the minimum
   * required quality, such that HIGH quality imagery may be returned when
   * `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   * is interpreted as the exact required quality and only `MEDIUM` quality
   * imagery is returned if `required_quality` is set to `MEDIUM`.
   * </pre>
   *
   * <code>bool exact_quality_required = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The exactQualityRequired.
   */
  boolean getExactQualityRequired();
}
