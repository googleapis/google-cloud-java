/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * SolarPanelConfig describes a particular placement of solar panels
 * on the roof.
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.SolarPanelConfig}
 */
public final class SolarPanelConfig extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.SolarPanelConfig)
    SolarPanelConfigOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use SolarPanelConfig.newBuilder() to construct.
  private SolarPanelConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SolarPanelConfig() {
    roofSegmentSummaries_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SolarPanelConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_SolarPanelConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_SolarPanelConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.SolarPanelConfig.class,
            com.google.maps.solar.v1.SolarPanelConfig.Builder.class);
  }

  public static final int PANELS_COUNT_FIELD_NUMBER = 1;
  private int panelsCount_ = 0;
  /**
   *
   *
   * <pre>
   * Total number of panels. Note that this is redundant to (the sum
   * of) the corresponding fields in [roof_segment_summaries]
   * [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries].
   * </pre>
   *
   * <code>int32 panels_count = 1;</code>
   *
   * @return The panelsCount.
   */
  @java.lang.Override
  public int getPanelsCount() {
    return panelsCount_;
  }

  public static final int YEARLY_ENERGY_DC_KWH_FIELD_NUMBER = 2;
  private float yearlyEnergyDcKwh_ = 0F;
  /**
   *
   *
   * <pre>
   * How much sunlight energy this layout captures over the course of a
   * year, in DC kWh, assuming the panels described above.
   * </pre>
   *
   * <code>float yearly_energy_dc_kwh = 2;</code>
   *
   * @return The yearlyEnergyDcKwh.
   */
  @java.lang.Override
  public float getYearlyEnergyDcKwh() {
    return yearlyEnergyDcKwh_;
  }

  public static final int ROOF_SEGMENT_SUMMARIES_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private java.util.List<com.google.maps.solar.v1.RoofSegmentSummary> roofSegmentSummaries_;
  /**
   *
   *
   * <pre>
   * Information about the production of each roof segment that is carrying
   * at least one panel in this layout. `roof_segment_summaries[i]` describes
   * the i-th roof segment, including its size, expected production and
   * orientation.
   * </pre>
   *
   * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.maps.solar.v1.RoofSegmentSummary> getRoofSegmentSummariesList() {
    return roofSegmentSummaries_;
  }
  /**
   *
   *
   * <pre>
   * Information about the production of each roof segment that is carrying
   * at least one panel in this layout. `roof_segment_summaries[i]` describes
   * the i-th roof segment, including its size, expected production and
   * orientation.
   * </pre>
   *
   * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder>
      getRoofSegmentSummariesOrBuilderList() {
    return roofSegmentSummaries_;
  }
  /**
   *
   *
   * <pre>
   * Information about the production of each roof segment that is carrying
   * at least one panel in this layout. `roof_segment_summaries[i]` describes
   * the i-th roof segment, including its size, expected production and
   * orientation.
   * </pre>
   *
   * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
   */
  @java.lang.Override
  public int getRoofSegmentSummariesCount() {
    return roofSegmentSummaries_.size();
  }
  /**
   *
   *
   * <pre>
   * Information about the production of each roof segment that is carrying
   * at least one panel in this layout. `roof_segment_summaries[i]` describes
   * the i-th roof segment, including its size, expected production and
   * orientation.
   * </pre>
   *
   * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
   */
  @java.lang.Override
  public com.google.maps.solar.v1.RoofSegmentSummary getRoofSegmentSummaries(int index) {
    return roofSegmentSummaries_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Information about the production of each roof segment that is carrying
   * at least one panel in this layout. `roof_segment_summaries[i]` describes
   * the i-th roof segment, including its size, expected production and
   * orientation.
   * </pre>
   *
   * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
   */
  @java.lang.Override
  public com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder getRoofSegmentSummariesOrBuilder(
      int index) {
    return roofSegmentSummaries_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (panelsCount_ != 0) {
      output.writeInt32(1, panelsCount_);
    }
    if (java.lang.Float.floatToRawIntBits(yearlyEnergyDcKwh_) != 0) {
      output.writeFloat(2, yearlyEnergyDcKwh_);
    }
    for (int i = 0; i < roofSegmentSummaries_.size(); i++) {
      output.writeMessage(4, roofSegmentSummaries_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (panelsCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, panelsCount_);
    }
    if (java.lang.Float.floatToRawIntBits(yearlyEnergyDcKwh_) != 0) {
      size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, yearlyEnergyDcKwh_);
    }
    for (int i = 0; i < roofSegmentSummaries_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(4, roofSegmentSummaries_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.SolarPanelConfig)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.SolarPanelConfig other =
        (com.google.maps.solar.v1.SolarPanelConfig) obj;

    if (getPanelsCount() != other.getPanelsCount()) return false;
    if (java.lang.Float.floatToIntBits(getYearlyEnergyDcKwh())
        != java.lang.Float.floatToIntBits(other.getYearlyEnergyDcKwh())) return false;
    if (!getRoofSegmentSummariesList().equals(other.getRoofSegmentSummariesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PANELS_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getPanelsCount();
    hash = (37 * hash) + YEARLY_ENERGY_DC_KWH_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(getYearlyEnergyDcKwh());
    if (getRoofSegmentSummariesCount() > 0) {
      hash = (37 * hash) + ROOF_SEGMENT_SUMMARIES_FIELD_NUMBER;
      hash = (53 * hash) + getRoofSegmentSummariesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.SolarPanelConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.maps.solar.v1.SolarPanelConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * SolarPanelConfig describes a particular placement of solar panels
   * on the roof.
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.SolarPanelConfig}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.SolarPanelConfig)
      com.google.maps.solar.v1.SolarPanelConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SolarPanelConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SolarPanelConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.SolarPanelConfig.class,
              com.google.maps.solar.v1.SolarPanelConfig.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.SolarPanelConfig.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      panelsCount_ = 0;
      yearlyEnergyDcKwh_ = 0F;
      if (roofSegmentSummariesBuilder_ == null) {
        roofSegmentSummaries_ = java.util.Collections.emptyList();
      } else {
        roofSegmentSummaries_ = null;
        roofSegmentSummariesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_SolarPanelConfig_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SolarPanelConfig getDefaultInstanceForType() {
      return com.google.maps.solar.v1.SolarPanelConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SolarPanelConfig build() {
      com.google.maps.solar.v1.SolarPanelConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.SolarPanelConfig buildPartial() {
      com.google.maps.solar.v1.SolarPanelConfig result =
          new com.google.maps.solar.v1.SolarPanelConfig(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.maps.solar.v1.SolarPanelConfig result) {
      if (roofSegmentSummariesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          roofSegmentSummaries_ = java.util.Collections.unmodifiableList(roofSegmentSummaries_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.roofSegmentSummaries_ = roofSegmentSummaries_;
      } else {
        result.roofSegmentSummaries_ = roofSegmentSummariesBuilder_.build();
      }
    }

    private void buildPartial0(com.google.maps.solar.v1.SolarPanelConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.panelsCount_ = panelsCount_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.yearlyEnergyDcKwh_ = yearlyEnergyDcKwh_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.SolarPanelConfig) {
        return mergeFrom((com.google.maps.solar.v1.SolarPanelConfig) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.SolarPanelConfig other) {
      if (other == com.google.maps.solar.v1.SolarPanelConfig.getDefaultInstance()) return this;
      if (other.getPanelsCount() != 0) {
        setPanelsCount(other.getPanelsCount());
      }
      if (other.getYearlyEnergyDcKwh() != 0F) {
        setYearlyEnergyDcKwh(other.getYearlyEnergyDcKwh());
      }
      if (roofSegmentSummariesBuilder_ == null) {
        if (!other.roofSegmentSummaries_.isEmpty()) {
          if (roofSegmentSummaries_.isEmpty()) {
            roofSegmentSummaries_ = other.roofSegmentSummaries_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureRoofSegmentSummariesIsMutable();
            roofSegmentSummaries_.addAll(other.roofSegmentSummaries_);
          }
          onChanged();
        }
      } else {
        if (!other.roofSegmentSummaries_.isEmpty()) {
          if (roofSegmentSummariesBuilder_.isEmpty()) {
            roofSegmentSummariesBuilder_.dispose();
            roofSegmentSummariesBuilder_ = null;
            roofSegmentSummaries_ = other.roofSegmentSummaries_;
            bitField0_ = (bitField0_ & ~0x00000004);
            roofSegmentSummariesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getRoofSegmentSummariesFieldBuilder()
                    : null;
          } else {
            roofSegmentSummariesBuilder_.addAllMessages(other.roofSegmentSummaries_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                panelsCount_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 21:
              {
                yearlyEnergyDcKwh_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
            case 34:
              {
                com.google.maps.solar.v1.RoofSegmentSummary m =
                    input.readMessage(
                        com.google.maps.solar.v1.RoofSegmentSummary.parser(), extensionRegistry);
                if (roofSegmentSummariesBuilder_ == null) {
                  ensureRoofSegmentSummariesIsMutable();
                  roofSegmentSummaries_.add(m);
                } else {
                  roofSegmentSummariesBuilder_.addMessage(m);
                }
                break;
              } // case 34
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private int panelsCount_;
    /**
     *
     *
     * <pre>
     * Total number of panels. Note that this is redundant to (the sum
     * of) the corresponding fields in [roof_segment_summaries]
     * [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries].
     * </pre>
     *
     * <code>int32 panels_count = 1;</code>
     *
     * @return The panelsCount.
     */
    @java.lang.Override
    public int getPanelsCount() {
      return panelsCount_;
    }
    /**
     *
     *
     * <pre>
     * Total number of panels. Note that this is redundant to (the sum
     * of) the corresponding fields in [roof_segment_summaries]
     * [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries].
     * </pre>
     *
     * <code>int32 panels_count = 1;</code>
     *
     * @param value The panelsCount to set.
     * @return This builder for chaining.
     */
    public Builder setPanelsCount(int value) {

      panelsCount_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Total number of panels. Note that this is redundant to (the sum
     * of) the corresponding fields in [roof_segment_summaries]
     * [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries].
     * </pre>
     *
     * <code>int32 panels_count = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPanelsCount() {
      bitField0_ = (bitField0_ & ~0x00000001);
      panelsCount_ = 0;
      onChanged();
      return this;
    }

    private float yearlyEnergyDcKwh_;
    /**
     *
     *
     * <pre>
     * How much sunlight energy this layout captures over the course of a
     * year, in DC kWh, assuming the panels described above.
     * </pre>
     *
     * <code>float yearly_energy_dc_kwh = 2;</code>
     *
     * @return The yearlyEnergyDcKwh.
     */
    @java.lang.Override
    public float getYearlyEnergyDcKwh() {
      return yearlyEnergyDcKwh_;
    }
    /**
     *
     *
     * <pre>
     * How much sunlight energy this layout captures over the course of a
     * year, in DC kWh, assuming the panels described above.
     * </pre>
     *
     * <code>float yearly_energy_dc_kwh = 2;</code>
     *
     * @param value The yearlyEnergyDcKwh to set.
     * @return This builder for chaining.
     */
    public Builder setYearlyEnergyDcKwh(float value) {

      yearlyEnergyDcKwh_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * How much sunlight energy this layout captures over the course of a
     * year, in DC kWh, assuming the panels described above.
     * </pre>
     *
     * <code>float yearly_energy_dc_kwh = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearYearlyEnergyDcKwh() {
      bitField0_ = (bitField0_ & ~0x00000002);
      yearlyEnergyDcKwh_ = 0F;
      onChanged();
      return this;
    }

    private java.util.List<com.google.maps.solar.v1.RoofSegmentSummary> roofSegmentSummaries_ =
        java.util.Collections.emptyList();

    private void ensureRoofSegmentSummariesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        roofSegmentSummaries_ =
            new java.util.ArrayList<com.google.maps.solar.v1.RoofSegmentSummary>(
                roofSegmentSummaries_);
        bitField0_ |= 0x00000004;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.maps.solar.v1.RoofSegmentSummary,
            com.google.maps.solar.v1.RoofSegmentSummary.Builder,
            com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder>
        roofSegmentSummariesBuilder_;

    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public java.util.List<com.google.maps.solar.v1.RoofSegmentSummary>
        getRoofSegmentSummariesList() {
      if (roofSegmentSummariesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(roofSegmentSummaries_);
      } else {
        return roofSegmentSummariesBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public int getRoofSegmentSummariesCount() {
      if (roofSegmentSummariesBuilder_ == null) {
        return roofSegmentSummaries_.size();
      } else {
        return roofSegmentSummariesBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public com.google.maps.solar.v1.RoofSegmentSummary getRoofSegmentSummaries(int index) {
      if (roofSegmentSummariesBuilder_ == null) {
        return roofSegmentSummaries_.get(index);
      } else {
        return roofSegmentSummariesBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder setRoofSegmentSummaries(
        int index, com.google.maps.solar.v1.RoofSegmentSummary value) {
      if (roofSegmentSummariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.set(index, value);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder setRoofSegmentSummaries(
        int index, com.google.maps.solar.v1.RoofSegmentSummary.Builder builderForValue) {
      if (roofSegmentSummariesBuilder_ == null) {
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.set(index, builderForValue.build());
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder addRoofSegmentSummaries(com.google.maps.solar.v1.RoofSegmentSummary value) {
      if (roofSegmentSummariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.add(value);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder addRoofSegmentSummaries(
        int index, com.google.maps.solar.v1.RoofSegmentSummary value) {
      if (roofSegmentSummariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.add(index, value);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder addRoofSegmentSummaries(
        com.google.maps.solar.v1.RoofSegmentSummary.Builder builderForValue) {
      if (roofSegmentSummariesBuilder_ == null) {
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.add(builderForValue.build());
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder addRoofSegmentSummaries(
        int index, com.google.maps.solar.v1.RoofSegmentSummary.Builder builderForValue) {
      if (roofSegmentSummariesBuilder_ == null) {
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.add(index, builderForValue.build());
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder addAllRoofSegmentSummaries(
        java.lang.Iterable<? extends com.google.maps.solar.v1.RoofSegmentSummary> values) {
      if (roofSegmentSummariesBuilder_ == null) {
        ensureRoofSegmentSummariesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, roofSegmentSummaries_);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder clearRoofSegmentSummaries() {
      if (roofSegmentSummariesBuilder_ == null) {
        roofSegmentSummaries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public Builder removeRoofSegmentSummaries(int index) {
      if (roofSegmentSummariesBuilder_ == null) {
        ensureRoofSegmentSummariesIsMutable();
        roofSegmentSummaries_.remove(index);
        onChanged();
      } else {
        roofSegmentSummariesBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public com.google.maps.solar.v1.RoofSegmentSummary.Builder getRoofSegmentSummariesBuilder(
        int index) {
      return getRoofSegmentSummariesFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder getRoofSegmentSummariesOrBuilder(
        int index) {
      if (roofSegmentSummariesBuilder_ == null) {
        return roofSegmentSummaries_.get(index);
      } else {
        return roofSegmentSummariesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public java.util.List<? extends com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder>
        getRoofSegmentSummariesOrBuilderList() {
      if (roofSegmentSummariesBuilder_ != null) {
        return roofSegmentSummariesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(roofSegmentSummaries_);
      }
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public com.google.maps.solar.v1.RoofSegmentSummary.Builder addRoofSegmentSummariesBuilder() {
      return getRoofSegmentSummariesFieldBuilder()
          .addBuilder(com.google.maps.solar.v1.RoofSegmentSummary.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public com.google.maps.solar.v1.RoofSegmentSummary.Builder addRoofSegmentSummariesBuilder(
        int index) {
      return getRoofSegmentSummariesFieldBuilder()
          .addBuilder(index, com.google.maps.solar.v1.RoofSegmentSummary.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Information about the production of each roof segment that is carrying
     * at least one panel in this layout. `roof_segment_summaries[i]` describes
     * the i-th roof segment, including its size, expected production and
     * orientation.
     * </pre>
     *
     * <code>repeated .google.maps.solar.v1.RoofSegmentSummary roof_segment_summaries = 4;</code>
     */
    public java.util.List<com.google.maps.solar.v1.RoofSegmentSummary.Builder>
        getRoofSegmentSummariesBuilderList() {
      return getRoofSegmentSummariesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.maps.solar.v1.RoofSegmentSummary,
            com.google.maps.solar.v1.RoofSegmentSummary.Builder,
            com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder>
        getRoofSegmentSummariesFieldBuilder() {
      if (roofSegmentSummariesBuilder_ == null) {
        roofSegmentSummariesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.maps.solar.v1.RoofSegmentSummary,
                com.google.maps.solar.v1.RoofSegmentSummary.Builder,
                com.google.maps.solar.v1.RoofSegmentSummaryOrBuilder>(
                roofSegmentSummaries_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        roofSegmentSummaries_ = null;
      }
      return roofSegmentSummariesBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.SolarPanelConfig)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.SolarPanelConfig)
  private static final com.google.maps.solar.v1.SolarPanelConfig DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.SolarPanelConfig();
  }

  public static com.google.maps.solar.v1.SolarPanelConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SolarPanelConfig> PARSER =
      new com.google.protobuf.AbstractParser<SolarPanelConfig>() {
        @java.lang.Override
        public SolarPanelConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<SolarPanelConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SolarPanelConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.SolarPanelConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
