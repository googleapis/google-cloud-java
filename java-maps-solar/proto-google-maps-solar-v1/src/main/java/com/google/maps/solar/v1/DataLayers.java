/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

/**
 *
 *
 * <pre>
 * Information about the solar potential of a region. The actual data
 * are contained in a number of GeoTIFF files covering the requested
 * region, for which this message contains URLs: Each string in the
 * `DataLayers` message contains a URL from which the
 * corresponding GeoTIFF can be fetched. These URLs are valid for a
 * few hours after they've been generated. Most of the GeoTIFF files
 * are at a resolution of 0.1m/pixel, but the monthly flux file is at
 * 0.5m/pixel, and the hourly shade files are at 1m/pixel. If a
 * `pixel_size_meters` value was specified in the
 * `GetDataLayersRequest`, then the minimum resolution in the GeoTIFF
 * files will be that value.
 * </pre>
 *
 * Protobuf type {@code google.maps.solar.v1.DataLayers}
 */
public final class DataLayers extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.maps.solar.v1.DataLayers)
    DataLayersOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use DataLayers.newBuilder() to construct.
  private DataLayers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private DataLayers() {
    dsmUrl_ = "";
    rgbUrl_ = "";
    maskUrl_ = "";
    annualFluxUrl_ = "";
    monthlyFluxUrl_ = "";
    hourlyShadeUrls_ = com.google.protobuf.LazyStringArrayList.emptyList();
    imageryQuality_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new DataLayers();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_DataLayers_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.solar.v1.SolarServiceProto
        .internal_static_google_maps_solar_v1_DataLayers_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.solar.v1.DataLayers.class,
            com.google.maps.solar.v1.DataLayers.Builder.class);
  }

  private int bitField0_;
  public static final int IMAGERY_DATE_FIELD_NUMBER = 1;
  private com.google.type.Date imageryDate_;
  /**
   *
   *
   * <pre>
   * When the source imagery (from which all the other data are derived) in this
   * region was taken. It is necessarily somewhat approximate, as the images may
   * have been taken over more than one day.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 1;</code>
   *
   * @return Whether the imageryDate field is set.
   */
  @java.lang.Override
  public boolean hasImageryDate() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * When the source imagery (from which all the other data are derived) in this
   * region was taken. It is necessarily somewhat approximate, as the images may
   * have been taken over more than one day.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 1;</code>
   *
   * @return The imageryDate.
   */
  @java.lang.Override
  public com.google.type.Date getImageryDate() {
    return imageryDate_ == null ? com.google.type.Date.getDefaultInstance() : imageryDate_;
  }
  /**
   *
   *
   * <pre>
   * When the source imagery (from which all the other data are derived) in this
   * region was taken. It is necessarily somewhat approximate, as the images may
   * have been taken over more than one day.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 1;</code>
   */
  @java.lang.Override
  public com.google.type.DateOrBuilder getImageryDateOrBuilder() {
    return imageryDate_ == null ? com.google.type.Date.getDefaultInstance() : imageryDate_;
  }

  public static final int IMAGERY_PROCESSED_DATE_FIELD_NUMBER = 2;
  private com.google.type.Date imageryProcessedDate_;
  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 2;</code>
   *
   * @return Whether the imageryProcessedDate field is set.
   */
  @java.lang.Override
  public boolean hasImageryProcessedDate() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 2;</code>
   *
   * @return The imageryProcessedDate.
   */
  @java.lang.Override
  public com.google.type.Date getImageryProcessedDate() {
    return imageryProcessedDate_ == null
        ? com.google.type.Date.getDefaultInstance()
        : imageryProcessedDate_;
  }
  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 2;</code>
   */
  @java.lang.Override
  public com.google.type.DateOrBuilder getImageryProcessedDateOrBuilder() {
    return imageryProcessedDate_ == null
        ? com.google.type.Date.getDefaultInstance()
        : imageryProcessedDate_;
  }

  public static final int DSM_URL_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object dsmUrl_ = "";
  /**
   *
   *
   * <pre>
   * The URL for an image of the DSM (Digital Surface Model) of the region.
   * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
   * (where we don't have data) are stored as -9999.
   * </pre>
   *
   * <code>string dsm_url = 3;</code>
   *
   * @return The dsmUrl.
   */
  @java.lang.Override
  public java.lang.String getDsmUrl() {
    java.lang.Object ref = dsmUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      dsmUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The URL for an image of the DSM (Digital Surface Model) of the region.
   * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
   * (where we don't have data) are stored as -9999.
   * </pre>
   *
   * <code>string dsm_url = 3;</code>
   *
   * @return The bytes for dsmUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDsmUrlBytes() {
    java.lang.Object ref = dsmUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      dsmUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RGB_URL_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object rgbUrl_ = "";
  /**
   *
   *
   * <pre>
   * The URL for an image of RGB data (aerial photo) of the region.
   * </pre>
   *
   * <code>string rgb_url = 4;</code>
   *
   * @return The rgbUrl.
   */
  @java.lang.Override
  public java.lang.String getRgbUrl() {
    java.lang.Object ref = rgbUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      rgbUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The URL for an image of RGB data (aerial photo) of the region.
   * </pre>
   *
   * <code>string rgb_url = 4;</code>
   *
   * @return The bytes for rgbUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getRgbUrlBytes() {
    java.lang.Object ref = rgbUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      rgbUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MASK_URL_FIELD_NUMBER = 5;

  @SuppressWarnings("serial")
  private volatile java.lang.Object maskUrl_ = "";
  /**
   *
   *
   * <pre>
   * The URL for the building mask image: one bit per pixel saying whether that
   * pixel is considered to be part of a rooftop or not.
   * </pre>
   *
   * <code>string mask_url = 5;</code>
   *
   * @return The maskUrl.
   */
  @java.lang.Override
  public java.lang.String getMaskUrl() {
    java.lang.Object ref = maskUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      maskUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The URL for the building mask image: one bit per pixel saying whether that
   * pixel is considered to be part of a rooftop or not.
   * </pre>
   *
   * <code>string mask_url = 5;</code>
   *
   * @return The bytes for maskUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getMaskUrlBytes() {
    java.lang.Object ref = maskUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      maskUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ANNUAL_FLUX_URL_FIELD_NUMBER = 6;

  @SuppressWarnings("serial")
  private volatile java.lang.Object annualFluxUrl_ = "";
  /**
   *
   *
   * <pre>
   * The URL for the annual flux map (annual sunlight on roofs) of the region.
   * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
   * location, not just building rooftops. Invalid locations are stored as
   * -9999: locations outside our coverage area will be invalid, and a few
   * locations inside the coverage area, where we were unable to calculate flux,
   * will also be invalid.
   * </pre>
   *
   * <code>string annual_flux_url = 6;</code>
   *
   * @return The annualFluxUrl.
   */
  @java.lang.Override
  public java.lang.String getAnnualFluxUrl() {
    java.lang.Object ref = annualFluxUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      annualFluxUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The URL for the annual flux map (annual sunlight on roofs) of the region.
   * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
   * location, not just building rooftops. Invalid locations are stored as
   * -9999: locations outside our coverage area will be invalid, and a few
   * locations inside the coverage area, where we were unable to calculate flux,
   * will also be invalid.
   * </pre>
   *
   * <code>string annual_flux_url = 6;</code>
   *
   * @return The bytes for annualFluxUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getAnnualFluxUrlBytes() {
    java.lang.Object ref = annualFluxUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      annualFluxUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MONTHLY_FLUX_URL_FIELD_NUMBER = 7;

  @SuppressWarnings("serial")
  private volatile java.lang.Object monthlyFluxUrl_ = "";
  /**
   *
   *
   * <pre>
   * The URL for the monthly flux map (sunlight on roofs, broken down by month)
   * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
   * will contain twelve bands, corresponding to January...December, in order.
   * </pre>
   *
   * <code>string monthly_flux_url = 7;</code>
   *
   * @return The monthlyFluxUrl.
   */
  @java.lang.Override
  public java.lang.String getMonthlyFluxUrl() {
    java.lang.Object ref = monthlyFluxUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      monthlyFluxUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The URL for the monthly flux map (sunlight on roofs, broken down by month)
   * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
   * will contain twelve bands, corresponding to January...December, in order.
   * </pre>
   *
   * <code>string monthly_flux_url = 7;</code>
   *
   * @return The bytes for monthlyFluxUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getMonthlyFluxUrlBytes() {
    java.lang.Object ref = monthlyFluxUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      monthlyFluxUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOURLY_SHADE_URLS_FIELD_NUMBER = 8;

  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList hourlyShadeUrls_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   *
   *
   * <pre>
   * Twelve URLs for hourly shade, corresponding to January...December, in
   * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
   * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
   * days of that month; a 1 bit means that the corresponding location is able
   * to see the sun at that day, of that hour, of that month. Invalid locations
   * are stored as -9999 (since this is negative, it has bit 31 set, and no
   * valid value could have bit 31 set as that would correspond to the 32nd day
   * of the month).
   *
   * An example may be useful. If you want to know whether a point (at
   * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
   * would:
   *
   * 1. fetch the sixth URL in this list (corresponding to June).
   * 1. look up the 17th channel (corresponding to 4pm).
   * 1. read the 32-bit value at (x, y).
   * 1. read bit 21 of the value (corresponding to the 22nd of the month).
   * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
   *
   * More formally:
   * Given `month` (1-12), `day` (1...month max; February has 28 days)
   * and `hour` (0-23), the shade/sun for that month/day/hour at a
   * position `(x, y)` is the bit
   * ```
   * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
   * ```
   * where `(x, y)` is spatial indexing, `[month - 1]` refers to
   * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
   * indexing into the channels, and a final non-zero result means
   * "sunny". There are no leap days, and DST doesn't exist (all days
   * are 24 hours long; noon is always "standard time" noon).
   * </pre>
   *
   * <code>repeated string hourly_shade_urls = 8;</code>
   *
   * @return A list containing the hourlyShadeUrls.
   */
  public com.google.protobuf.ProtocolStringList getHourlyShadeUrlsList() {
    return hourlyShadeUrls_;
  }
  /**
   *
   *
   * <pre>
   * Twelve URLs for hourly shade, corresponding to January...December, in
   * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
   * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
   * days of that month; a 1 bit means that the corresponding location is able
   * to see the sun at that day, of that hour, of that month. Invalid locations
   * are stored as -9999 (since this is negative, it has bit 31 set, and no
   * valid value could have bit 31 set as that would correspond to the 32nd day
   * of the month).
   *
   * An example may be useful. If you want to know whether a point (at
   * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
   * would:
   *
   * 1. fetch the sixth URL in this list (corresponding to June).
   * 1. look up the 17th channel (corresponding to 4pm).
   * 1. read the 32-bit value at (x, y).
   * 1. read bit 21 of the value (corresponding to the 22nd of the month).
   * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
   *
   * More formally:
   * Given `month` (1-12), `day` (1...month max; February has 28 days)
   * and `hour` (0-23), the shade/sun for that month/day/hour at a
   * position `(x, y)` is the bit
   * ```
   * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
   * ```
   * where `(x, y)` is spatial indexing, `[month - 1]` refers to
   * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
   * indexing into the channels, and a final non-zero result means
   * "sunny". There are no leap days, and DST doesn't exist (all days
   * are 24 hours long; noon is always "standard time" noon).
   * </pre>
   *
   * <code>repeated string hourly_shade_urls = 8;</code>
   *
   * @return The count of hourlyShadeUrls.
   */
  public int getHourlyShadeUrlsCount() {
    return hourlyShadeUrls_.size();
  }
  /**
   *
   *
   * <pre>
   * Twelve URLs for hourly shade, corresponding to January...December, in
   * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
   * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
   * days of that month; a 1 bit means that the corresponding location is able
   * to see the sun at that day, of that hour, of that month. Invalid locations
   * are stored as -9999 (since this is negative, it has bit 31 set, and no
   * valid value could have bit 31 set as that would correspond to the 32nd day
   * of the month).
   *
   * An example may be useful. If you want to know whether a point (at
   * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
   * would:
   *
   * 1. fetch the sixth URL in this list (corresponding to June).
   * 1. look up the 17th channel (corresponding to 4pm).
   * 1. read the 32-bit value at (x, y).
   * 1. read bit 21 of the value (corresponding to the 22nd of the month).
   * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
   *
   * More formally:
   * Given `month` (1-12), `day` (1...month max; February has 28 days)
   * and `hour` (0-23), the shade/sun for that month/day/hour at a
   * position `(x, y)` is the bit
   * ```
   * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
   * ```
   * where `(x, y)` is spatial indexing, `[month - 1]` refers to
   * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
   * indexing into the channels, and a final non-zero result means
   * "sunny". There are no leap days, and DST doesn't exist (all days
   * are 24 hours long; noon is always "standard time" noon).
   * </pre>
   *
   * <code>repeated string hourly_shade_urls = 8;</code>
   *
   * @param index The index of the element to return.
   * @return The hourlyShadeUrls at the given index.
   */
  public java.lang.String getHourlyShadeUrls(int index) {
    return hourlyShadeUrls_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Twelve URLs for hourly shade, corresponding to January...December, in
   * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
   * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
   * days of that month; a 1 bit means that the corresponding location is able
   * to see the sun at that day, of that hour, of that month. Invalid locations
   * are stored as -9999 (since this is negative, it has bit 31 set, and no
   * valid value could have bit 31 set as that would correspond to the 32nd day
   * of the month).
   *
   * An example may be useful. If you want to know whether a point (at
   * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
   * would:
   *
   * 1. fetch the sixth URL in this list (corresponding to June).
   * 1. look up the 17th channel (corresponding to 4pm).
   * 1. read the 32-bit value at (x, y).
   * 1. read bit 21 of the value (corresponding to the 22nd of the month).
   * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
   *
   * More formally:
   * Given `month` (1-12), `day` (1...month max; February has 28 days)
   * and `hour` (0-23), the shade/sun for that month/day/hour at a
   * position `(x, y)` is the bit
   * ```
   * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
   * ```
   * where `(x, y)` is spatial indexing, `[month - 1]` refers to
   * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
   * indexing into the channels, and a final non-zero result means
   * "sunny". There are no leap days, and DST doesn't exist (all days
   * are 24 hours long; noon is always "standard time" noon).
   * </pre>
   *
   * <code>repeated string hourly_shade_urls = 8;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the hourlyShadeUrls at the given index.
   */
  public com.google.protobuf.ByteString getHourlyShadeUrlsBytes(int index) {
    return hourlyShadeUrls_.getByteString(index);
  }

  public static final int IMAGERY_QUALITY_FIELD_NUMBER = 9;
  private int imageryQuality_ = 0;
  /**
   *
   *
   * <pre>
   * The quality of the result's imagery.
   * </pre>
   *
   * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
   *
   * @return The enum numeric value on the wire for imageryQuality.
   */
  @java.lang.Override
  public int getImageryQualityValue() {
    return imageryQuality_;
  }
  /**
   *
   *
   * <pre>
   * The quality of the result's imagery.
   * </pre>
   *
   * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
   *
   * @return The imageryQuality.
   */
  @java.lang.Override
  public com.google.maps.solar.v1.ImageryQuality getImageryQuality() {
    com.google.maps.solar.v1.ImageryQuality result =
        com.google.maps.solar.v1.ImageryQuality.forNumber(imageryQuality_);
    return result == null ? com.google.maps.solar.v1.ImageryQuality.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getImageryDate());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getImageryProcessedDate());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(dsmUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, dsmUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(rgbUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, rgbUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(maskUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, maskUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(annualFluxUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, annualFluxUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(monthlyFluxUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, monthlyFluxUrl_);
    }
    for (int i = 0; i < hourlyShadeUrls_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, hourlyShadeUrls_.getRaw(i));
    }
    if (imageryQuality_
        != com.google.maps.solar.v1.ImageryQuality.IMAGERY_QUALITY_UNSPECIFIED.getNumber()) {
      output.writeEnum(9, imageryQuality_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getImageryDate());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(2, getImageryProcessedDate());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(dsmUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, dsmUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(rgbUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, rgbUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(maskUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, maskUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(annualFluxUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, annualFluxUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(monthlyFluxUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, monthlyFluxUrl_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < hourlyShadeUrls_.size(); i++) {
        dataSize += computeStringSizeNoTag(hourlyShadeUrls_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHourlyShadeUrlsList().size();
    }
    if (imageryQuality_
        != com.google.maps.solar.v1.ImageryQuality.IMAGERY_QUALITY_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(9, imageryQuality_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.maps.solar.v1.DataLayers)) {
      return super.equals(obj);
    }
    com.google.maps.solar.v1.DataLayers other = (com.google.maps.solar.v1.DataLayers) obj;

    if (hasImageryDate() != other.hasImageryDate()) return false;
    if (hasImageryDate()) {
      if (!getImageryDate().equals(other.getImageryDate())) return false;
    }
    if (hasImageryProcessedDate() != other.hasImageryProcessedDate()) return false;
    if (hasImageryProcessedDate()) {
      if (!getImageryProcessedDate().equals(other.getImageryProcessedDate())) return false;
    }
    if (!getDsmUrl().equals(other.getDsmUrl())) return false;
    if (!getRgbUrl().equals(other.getRgbUrl())) return false;
    if (!getMaskUrl().equals(other.getMaskUrl())) return false;
    if (!getAnnualFluxUrl().equals(other.getAnnualFluxUrl())) return false;
    if (!getMonthlyFluxUrl().equals(other.getMonthlyFluxUrl())) return false;
    if (!getHourlyShadeUrlsList().equals(other.getHourlyShadeUrlsList())) return false;
    if (imageryQuality_ != other.imageryQuality_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasImageryDate()) {
      hash = (37 * hash) + IMAGERY_DATE_FIELD_NUMBER;
      hash = (53 * hash) + getImageryDate().hashCode();
    }
    if (hasImageryProcessedDate()) {
      hash = (37 * hash) + IMAGERY_PROCESSED_DATE_FIELD_NUMBER;
      hash = (53 * hash) + getImageryProcessedDate().hashCode();
    }
    hash = (37 * hash) + DSM_URL_FIELD_NUMBER;
    hash = (53 * hash) + getDsmUrl().hashCode();
    hash = (37 * hash) + RGB_URL_FIELD_NUMBER;
    hash = (53 * hash) + getRgbUrl().hashCode();
    hash = (37 * hash) + MASK_URL_FIELD_NUMBER;
    hash = (53 * hash) + getMaskUrl().hashCode();
    hash = (37 * hash) + ANNUAL_FLUX_URL_FIELD_NUMBER;
    hash = (53 * hash) + getAnnualFluxUrl().hashCode();
    hash = (37 * hash) + MONTHLY_FLUX_URL_FIELD_NUMBER;
    hash = (53 * hash) + getMonthlyFluxUrl().hashCode();
    if (getHourlyShadeUrlsCount() > 0) {
      hash = (37 * hash) + HOURLY_SHADE_URLS_FIELD_NUMBER;
      hash = (53 * hash) + getHourlyShadeUrlsList().hashCode();
    }
    hash = (37 * hash) + IMAGERY_QUALITY_FIELD_NUMBER;
    hash = (53 * hash) + imageryQuality_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.DataLayers parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.DataLayers parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.maps.solar.v1.DataLayers parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.maps.solar.v1.DataLayers prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Information about the solar potential of a region. The actual data
   * are contained in a number of GeoTIFF files covering the requested
   * region, for which this message contains URLs: Each string in the
   * `DataLayers` message contains a URL from which the
   * corresponding GeoTIFF can be fetched. These URLs are valid for a
   * few hours after they've been generated. Most of the GeoTIFF files
   * are at a resolution of 0.1m/pixel, but the monthly flux file is at
   * 0.5m/pixel, and the hourly shade files are at 1m/pixel. If a
   * `pixel_size_meters` value was specified in the
   * `GetDataLayersRequest`, then the minimum resolution in the GeoTIFF
   * files will be that value.
   * </pre>
   *
   * Protobuf type {@code google.maps.solar.v1.DataLayers}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.maps.solar.v1.DataLayers)
      com.google.maps.solar.v1.DataLayersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_DataLayers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_DataLayers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.solar.v1.DataLayers.class,
              com.google.maps.solar.v1.DataLayers.Builder.class);
    }

    // Construct using com.google.maps.solar.v1.DataLayers.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getImageryDateFieldBuilder();
        getImageryProcessedDateFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      imageryDate_ = null;
      if (imageryDateBuilder_ != null) {
        imageryDateBuilder_.dispose();
        imageryDateBuilder_ = null;
      }
      imageryProcessedDate_ = null;
      if (imageryProcessedDateBuilder_ != null) {
        imageryProcessedDateBuilder_.dispose();
        imageryProcessedDateBuilder_ = null;
      }
      dsmUrl_ = "";
      rgbUrl_ = "";
      maskUrl_ = "";
      annualFluxUrl_ = "";
      monthlyFluxUrl_ = "";
      hourlyShadeUrls_ = com.google.protobuf.LazyStringArrayList.emptyList();
      imageryQuality_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.maps.solar.v1.SolarServiceProto
          .internal_static_google_maps_solar_v1_DataLayers_descriptor;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.DataLayers getDefaultInstanceForType() {
      return com.google.maps.solar.v1.DataLayers.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.solar.v1.DataLayers build() {
      com.google.maps.solar.v1.DataLayers result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.solar.v1.DataLayers buildPartial() {
      com.google.maps.solar.v1.DataLayers result = new com.google.maps.solar.v1.DataLayers(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.solar.v1.DataLayers result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.imageryDate_ =
            imageryDateBuilder_ == null ? imageryDate_ : imageryDateBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.imageryProcessedDate_ =
            imageryProcessedDateBuilder_ == null
                ? imageryProcessedDate_
                : imageryProcessedDateBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.dsmUrl_ = dsmUrl_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.rgbUrl_ = rgbUrl_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.maskUrl_ = maskUrl_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.annualFluxUrl_ = annualFluxUrl_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.monthlyFluxUrl_ = monthlyFluxUrl_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        hourlyShadeUrls_.makeImmutable();
        result.hourlyShadeUrls_ = hourlyShadeUrls_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.imageryQuality_ = imageryQuality_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.solar.v1.DataLayers) {
        return mergeFrom((com.google.maps.solar.v1.DataLayers) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.solar.v1.DataLayers other) {
      if (other == com.google.maps.solar.v1.DataLayers.getDefaultInstance()) return this;
      if (other.hasImageryDate()) {
        mergeImageryDate(other.getImageryDate());
      }
      if (other.hasImageryProcessedDate()) {
        mergeImageryProcessedDate(other.getImageryProcessedDate());
      }
      if (!other.getDsmUrl().isEmpty()) {
        dsmUrl_ = other.dsmUrl_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getRgbUrl().isEmpty()) {
        rgbUrl_ = other.rgbUrl_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (!other.getMaskUrl().isEmpty()) {
        maskUrl_ = other.maskUrl_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (!other.getAnnualFluxUrl().isEmpty()) {
        annualFluxUrl_ = other.annualFluxUrl_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (!other.getMonthlyFluxUrl().isEmpty()) {
        monthlyFluxUrl_ = other.monthlyFluxUrl_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      if (!other.hourlyShadeUrls_.isEmpty()) {
        if (hourlyShadeUrls_.isEmpty()) {
          hourlyShadeUrls_ = other.hourlyShadeUrls_;
          bitField0_ |= 0x00000080;
        } else {
          ensureHourlyShadeUrlsIsMutable();
          hourlyShadeUrls_.addAll(other.hourlyShadeUrls_);
        }
        onChanged();
      }
      if (other.imageryQuality_ != 0) {
        setImageryQualityValue(other.getImageryQualityValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getImageryDateFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(
                    getImageryProcessedDateFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                dsmUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                rgbUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                maskUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                annualFluxUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            case 58:
              {
                monthlyFluxUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
            case 66:
              {
                java.lang.String s = input.readStringRequireUtf8();
                ensureHourlyShadeUrlsIsMutable();
                hourlyShadeUrls_.add(s);
                break;
              } // case 66
            case 72:
              {
                imageryQuality_ = input.readEnum();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.type.Date imageryDate_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
        imageryDateBuilder_;
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     *
     * @return Whether the imageryDate field is set.
     */
    public boolean hasImageryDate() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     *
     * @return The imageryDate.
     */
    public com.google.type.Date getImageryDate() {
      if (imageryDateBuilder_ == null) {
        return imageryDate_ == null ? com.google.type.Date.getDefaultInstance() : imageryDate_;
      } else {
        return imageryDateBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public Builder setImageryDate(com.google.type.Date value) {
      if (imageryDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        imageryDate_ = value;
      } else {
        imageryDateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public Builder setImageryDate(com.google.type.Date.Builder builderForValue) {
      if (imageryDateBuilder_ == null) {
        imageryDate_ = builderForValue.build();
      } else {
        imageryDateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public Builder mergeImageryDate(com.google.type.Date value) {
      if (imageryDateBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && imageryDate_ != null
            && imageryDate_ != com.google.type.Date.getDefaultInstance()) {
          getImageryDateBuilder().mergeFrom(value);
        } else {
          imageryDate_ = value;
        }
      } else {
        imageryDateBuilder_.mergeFrom(value);
      }
      if (imageryDate_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public Builder clearImageryDate() {
      bitField0_ = (bitField0_ & ~0x00000001);
      imageryDate_ = null;
      if (imageryDateBuilder_ != null) {
        imageryDateBuilder_.dispose();
        imageryDateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public com.google.type.Date.Builder getImageryDateBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getImageryDateFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    public com.google.type.DateOrBuilder getImageryDateOrBuilder() {
      if (imageryDateBuilder_ != null) {
        return imageryDateBuilder_.getMessageOrBuilder();
      } else {
        return imageryDate_ == null ? com.google.type.Date.getDefaultInstance() : imageryDate_;
      }
    }
    /**
     *
     *
     * <pre>
     * When the source imagery (from which all the other data are derived) in this
     * region was taken. It is necessarily somewhat approximate, as the images may
     * have been taken over more than one day.
     * </pre>
     *
     * <code>.google.type.Date imagery_date = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
        getImageryDateFieldBuilder() {
      if (imageryDateBuilder_ == null) {
        imageryDateBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>(
                getImageryDate(), getParentForChildren(), isClean());
        imageryDate_ = null;
      }
      return imageryDateBuilder_;
    }

    private com.google.type.Date imageryProcessedDate_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
        imageryProcessedDateBuilder_;
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     *
     * @return Whether the imageryProcessedDate field is set.
     */
    public boolean hasImageryProcessedDate() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     *
     * @return The imageryProcessedDate.
     */
    public com.google.type.Date getImageryProcessedDate() {
      if (imageryProcessedDateBuilder_ == null) {
        return imageryProcessedDate_ == null
            ? com.google.type.Date.getDefaultInstance()
            : imageryProcessedDate_;
      } else {
        return imageryProcessedDateBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public Builder setImageryProcessedDate(com.google.type.Date value) {
      if (imageryProcessedDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        imageryProcessedDate_ = value;
      } else {
        imageryProcessedDateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public Builder setImageryProcessedDate(com.google.type.Date.Builder builderForValue) {
      if (imageryProcessedDateBuilder_ == null) {
        imageryProcessedDate_ = builderForValue.build();
      } else {
        imageryProcessedDateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public Builder mergeImageryProcessedDate(com.google.type.Date value) {
      if (imageryProcessedDateBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && imageryProcessedDate_ != null
            && imageryProcessedDate_ != com.google.type.Date.getDefaultInstance()) {
          getImageryProcessedDateBuilder().mergeFrom(value);
        } else {
          imageryProcessedDate_ = value;
        }
      } else {
        imageryProcessedDateBuilder_.mergeFrom(value);
      }
      if (imageryProcessedDate_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public Builder clearImageryProcessedDate() {
      bitField0_ = (bitField0_ & ~0x00000002);
      imageryProcessedDate_ = null;
      if (imageryProcessedDateBuilder_ != null) {
        imageryProcessedDateBuilder_.dispose();
        imageryProcessedDateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public com.google.type.Date.Builder getImageryProcessedDateBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getImageryProcessedDateFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    public com.google.type.DateOrBuilder getImageryProcessedDateOrBuilder() {
      if (imageryProcessedDateBuilder_ != null) {
        return imageryProcessedDateBuilder_.getMessageOrBuilder();
      } else {
        return imageryProcessedDate_ == null
            ? com.google.type.Date.getDefaultInstance()
            : imageryProcessedDate_;
      }
    }
    /**
     *
     *
     * <pre>
     * When processing was completed on this imagery.
     * </pre>
     *
     * <code>.google.type.Date imagery_processed_date = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
        getImageryProcessedDateFieldBuilder() {
      if (imageryProcessedDateBuilder_ == null) {
        imageryProcessedDateBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>(
                getImageryProcessedDate(), getParentForChildren(), isClean());
        imageryProcessedDate_ = null;
      }
      return imageryProcessedDateBuilder_;
    }

    private java.lang.Object dsmUrl_ = "";
    /**
     *
     *
     * <pre>
     * The URL for an image of the DSM (Digital Surface Model) of the region.
     * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
     * (where we don't have data) are stored as -9999.
     * </pre>
     *
     * <code>string dsm_url = 3;</code>
     *
     * @return The dsmUrl.
     */
    public java.lang.String getDsmUrl() {
      java.lang.Object ref = dsmUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        dsmUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of the DSM (Digital Surface Model) of the region.
     * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
     * (where we don't have data) are stored as -9999.
     * </pre>
     *
     * <code>string dsm_url = 3;</code>
     *
     * @return The bytes for dsmUrl.
     */
    public com.google.protobuf.ByteString getDsmUrlBytes() {
      java.lang.Object ref = dsmUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        dsmUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of the DSM (Digital Surface Model) of the region.
     * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
     * (where we don't have data) are stored as -9999.
     * </pre>
     *
     * <code>string dsm_url = 3;</code>
     *
     * @param value The dsmUrl to set.
     * @return This builder for chaining.
     */
    public Builder setDsmUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      dsmUrl_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of the DSM (Digital Surface Model) of the region.
     * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
     * (where we don't have data) are stored as -9999.
     * </pre>
     *
     * <code>string dsm_url = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDsmUrl() {
      dsmUrl_ = getDefaultInstance().getDsmUrl();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of the DSM (Digital Surface Model) of the region.
     * Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations
     * (where we don't have data) are stored as -9999.
     * </pre>
     *
     * <code>string dsm_url = 3;</code>
     *
     * @param value The bytes for dsmUrl to set.
     * @return This builder for chaining.
     */
    public Builder setDsmUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      dsmUrl_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object rgbUrl_ = "";
    /**
     *
     *
     * <pre>
     * The URL for an image of RGB data (aerial photo) of the region.
     * </pre>
     *
     * <code>string rgb_url = 4;</code>
     *
     * @return The rgbUrl.
     */
    public java.lang.String getRgbUrl() {
      java.lang.Object ref = rgbUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rgbUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of RGB data (aerial photo) of the region.
     * </pre>
     *
     * <code>string rgb_url = 4;</code>
     *
     * @return The bytes for rgbUrl.
     */
    public com.google.protobuf.ByteString getRgbUrlBytes() {
      java.lang.Object ref = rgbUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        rgbUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of RGB data (aerial photo) of the region.
     * </pre>
     *
     * <code>string rgb_url = 4;</code>
     *
     * @param value The rgbUrl to set.
     * @return This builder for chaining.
     */
    public Builder setRgbUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      rgbUrl_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of RGB data (aerial photo) of the region.
     * </pre>
     *
     * <code>string rgb_url = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRgbUrl() {
      rgbUrl_ = getDefaultInstance().getRgbUrl();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for an image of RGB data (aerial photo) of the region.
     * </pre>
     *
     * <code>string rgb_url = 4;</code>
     *
     * @param value The bytes for rgbUrl to set.
     * @return This builder for chaining.
     */
    public Builder setRgbUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      rgbUrl_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private java.lang.Object maskUrl_ = "";
    /**
     *
     *
     * <pre>
     * The URL for the building mask image: one bit per pixel saying whether that
     * pixel is considered to be part of a rooftop or not.
     * </pre>
     *
     * <code>string mask_url = 5;</code>
     *
     * @return The maskUrl.
     */
    public java.lang.String getMaskUrl() {
      java.lang.Object ref = maskUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        maskUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the building mask image: one bit per pixel saying whether that
     * pixel is considered to be part of a rooftop or not.
     * </pre>
     *
     * <code>string mask_url = 5;</code>
     *
     * @return The bytes for maskUrl.
     */
    public com.google.protobuf.ByteString getMaskUrlBytes() {
      java.lang.Object ref = maskUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        maskUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the building mask image: one bit per pixel saying whether that
     * pixel is considered to be part of a rooftop or not.
     * </pre>
     *
     * <code>string mask_url = 5;</code>
     *
     * @param value The maskUrl to set.
     * @return This builder for chaining.
     */
    public Builder setMaskUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      maskUrl_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the building mask image: one bit per pixel saying whether that
     * pixel is considered to be part of a rooftop or not.
     * </pre>
     *
     * <code>string mask_url = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMaskUrl() {
      maskUrl_ = getDefaultInstance().getMaskUrl();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the building mask image: one bit per pixel saying whether that
     * pixel is considered to be part of a rooftop or not.
     * </pre>
     *
     * <code>string mask_url = 5;</code>
     *
     * @param value The bytes for maskUrl to set.
     * @return This builder for chaining.
     */
    public Builder setMaskUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      maskUrl_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object annualFluxUrl_ = "";
    /**
     *
     *
     * <pre>
     * The URL for the annual flux map (annual sunlight on roofs) of the region.
     * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
     * location, not just building rooftops. Invalid locations are stored as
     * -9999: locations outside our coverage area will be invalid, and a few
     * locations inside the coverage area, where we were unable to calculate flux,
     * will also be invalid.
     * </pre>
     *
     * <code>string annual_flux_url = 6;</code>
     *
     * @return The annualFluxUrl.
     */
    public java.lang.String getAnnualFluxUrl() {
      java.lang.Object ref = annualFluxUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        annualFluxUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the annual flux map (annual sunlight on roofs) of the region.
     * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
     * location, not just building rooftops. Invalid locations are stored as
     * -9999: locations outside our coverage area will be invalid, and a few
     * locations inside the coverage area, where we were unable to calculate flux,
     * will also be invalid.
     * </pre>
     *
     * <code>string annual_flux_url = 6;</code>
     *
     * @return The bytes for annualFluxUrl.
     */
    public com.google.protobuf.ByteString getAnnualFluxUrlBytes() {
      java.lang.Object ref = annualFluxUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        annualFluxUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the annual flux map (annual sunlight on roofs) of the region.
     * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
     * location, not just building rooftops. Invalid locations are stored as
     * -9999: locations outside our coverage area will be invalid, and a few
     * locations inside the coverage area, where we were unable to calculate flux,
     * will also be invalid.
     * </pre>
     *
     * <code>string annual_flux_url = 6;</code>
     *
     * @param value The annualFluxUrl to set.
     * @return This builder for chaining.
     */
    public Builder setAnnualFluxUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      annualFluxUrl_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the annual flux map (annual sunlight on roofs) of the region.
     * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
     * location, not just building rooftops. Invalid locations are stored as
     * -9999: locations outside our coverage area will be invalid, and a few
     * locations inside the coverage area, where we were unable to calculate flux,
     * will also be invalid.
     * </pre>
     *
     * <code>string annual_flux_url = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAnnualFluxUrl() {
      annualFluxUrl_ = getDefaultInstance().getAnnualFluxUrl();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the annual flux map (annual sunlight on roofs) of the region.
     * Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every
     * location, not just building rooftops. Invalid locations are stored as
     * -9999: locations outside our coverage area will be invalid, and a few
     * locations inside the coverage area, where we were unable to calculate flux,
     * will also be invalid.
     * </pre>
     *
     * <code>string annual_flux_url = 6;</code>
     *
     * @param value The bytes for annualFluxUrl to set.
     * @return This builder for chaining.
     */
    public Builder setAnnualFluxUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      annualFluxUrl_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private java.lang.Object monthlyFluxUrl_ = "";
    /**
     *
     *
     * <pre>
     * The URL for the monthly flux map (sunlight on roofs, broken down by month)
     * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
     * will contain twelve bands, corresponding to January...December, in order.
     * </pre>
     *
     * <code>string monthly_flux_url = 7;</code>
     *
     * @return The monthlyFluxUrl.
     */
    public java.lang.String getMonthlyFluxUrl() {
      java.lang.Object ref = monthlyFluxUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        monthlyFluxUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the monthly flux map (sunlight on roofs, broken down by month)
     * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
     * will contain twelve bands, corresponding to January...December, in order.
     * </pre>
     *
     * <code>string monthly_flux_url = 7;</code>
     *
     * @return The bytes for monthlyFluxUrl.
     */
    public com.google.protobuf.ByteString getMonthlyFluxUrlBytes() {
      java.lang.Object ref = monthlyFluxUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        monthlyFluxUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The URL for the monthly flux map (sunlight on roofs, broken down by month)
     * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
     * will contain twelve bands, corresponding to January...December, in order.
     * </pre>
     *
     * <code>string monthly_flux_url = 7;</code>
     *
     * @param value The monthlyFluxUrl to set.
     * @return This builder for chaining.
     */
    public Builder setMonthlyFluxUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      monthlyFluxUrl_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the monthly flux map (sunlight on roofs, broken down by month)
     * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
     * will contain twelve bands, corresponding to January...December, in order.
     * </pre>
     *
     * <code>string monthly_flux_url = 7;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMonthlyFluxUrl() {
      monthlyFluxUrl_ = getDefaultInstance().getMonthlyFluxUrl();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The URL for the monthly flux map (sunlight on roofs, broken down by month)
     * of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL
     * will contain twelve bands, corresponding to January...December, in order.
     * </pre>
     *
     * <code>string monthly_flux_url = 7;</code>
     *
     * @param value The bytes for monthlyFluxUrl to set.
     * @return This builder for chaining.
     */
    public Builder setMonthlyFluxUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      monthlyFluxUrl_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList hourlyShadeUrls_ =
        com.google.protobuf.LazyStringArrayList.emptyList();

    private void ensureHourlyShadeUrlsIsMutable() {
      if (!hourlyShadeUrls_.isModifiable()) {
        hourlyShadeUrls_ = new com.google.protobuf.LazyStringArrayList(hourlyShadeUrls_);
      }
      bitField0_ |= 0x00000080;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @return A list containing the hourlyShadeUrls.
     */
    public com.google.protobuf.ProtocolStringList getHourlyShadeUrlsList() {
      hourlyShadeUrls_.makeImmutable();
      return hourlyShadeUrls_;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @return The count of hourlyShadeUrls.
     */
    public int getHourlyShadeUrlsCount() {
      return hourlyShadeUrls_.size();
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param index The index of the element to return.
     * @return The hourlyShadeUrls at the given index.
     */
    public java.lang.String getHourlyShadeUrls(int index) {
      return hourlyShadeUrls_.get(index);
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the hourlyShadeUrls at the given index.
     */
    public com.google.protobuf.ByteString getHourlyShadeUrlsBytes(int index) {
      return hourlyShadeUrls_.getByteString(index);
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param index The index to set the value at.
     * @param value The hourlyShadeUrls to set.
     * @return This builder for chaining.
     */
    public Builder setHourlyShadeUrls(int index, java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHourlyShadeUrlsIsMutable();
      hourlyShadeUrls_.set(index, value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param value The hourlyShadeUrls to add.
     * @return This builder for chaining.
     */
    public Builder addHourlyShadeUrls(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHourlyShadeUrlsIsMutable();
      hourlyShadeUrls_.add(value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param values The hourlyShadeUrls to add.
     * @return This builder for chaining.
     */
    public Builder addAllHourlyShadeUrls(java.lang.Iterable<java.lang.String> values) {
      ensureHourlyShadeUrlsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, hourlyShadeUrls_);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearHourlyShadeUrls() {
      hourlyShadeUrls_ = com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);
      ;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Twelve URLs for hourly shade, corresponding to January...December, in
     * order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of
     * the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31
     * days of that month; a 1 bit means that the corresponding location is able
     * to see the sun at that day, of that hour, of that month. Invalid locations
     * are stored as -9999 (since this is negative, it has bit 31 set, and no
     * valid value could have bit 31 set as that would correspond to the 32nd day
     * of the month).
     *
     * An example may be useful. If you want to know whether a point (at
     * pixel location (x, y)) saw sun at 4pm on the 22nd of June you
     * would:
     *
     * 1. fetch the sixth URL in this list (corresponding to June).
     * 1. look up the 17th channel (corresponding to 4pm).
     * 1. read the 32-bit value at (x, y).
     * 1. read bit 21 of the value (corresponding to the 22nd of the month).
     * 1. if that bit is a 1, then that spot saw the sun at 4pm 22 June.
     *
     * More formally:
     * Given `month` (1-12), `day` (1...month max; February has 28 days)
     * and `hour` (0-23), the shade/sun for that month/day/hour at a
     * position `(x, y)` is the bit
     * ```
     * (hourly_shade[month - 1])(x, y)[hour] &amp; (1 &lt;&lt; (day - 1))
     * ```
     * where `(x, y)` is spatial indexing, `[month - 1]` refers to
     * fetching the `month - 1`st URL (indexing from zero), `[hour]` is
     * indexing into the channels, and a final non-zero result means
     * "sunny". There are no leap days, and DST doesn't exist (all days
     * are 24 hours long; noon is always "standard time" noon).
     * </pre>
     *
     * <code>repeated string hourly_shade_urls = 8;</code>
     *
     * @param value The bytes of the hourlyShadeUrls to add.
     * @return This builder for chaining.
     */
    public Builder addHourlyShadeUrlsBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      ensureHourlyShadeUrlsIsMutable();
      hourlyShadeUrls_.add(value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private int imageryQuality_ = 0;
    /**
     *
     *
     * <pre>
     * The quality of the result's imagery.
     * </pre>
     *
     * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
     *
     * @return The enum numeric value on the wire for imageryQuality.
     */
    @java.lang.Override
    public int getImageryQualityValue() {
      return imageryQuality_;
    }
    /**
     *
     *
     * <pre>
     * The quality of the result's imagery.
     * </pre>
     *
     * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
     *
     * @param value The enum numeric value on the wire for imageryQuality to set.
     * @return This builder for chaining.
     */
    public Builder setImageryQualityValue(int value) {
      imageryQuality_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The quality of the result's imagery.
     * </pre>
     *
     * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
     *
     * @return The imageryQuality.
     */
    @java.lang.Override
    public com.google.maps.solar.v1.ImageryQuality getImageryQuality() {
      com.google.maps.solar.v1.ImageryQuality result =
          com.google.maps.solar.v1.ImageryQuality.forNumber(imageryQuality_);
      return result == null ? com.google.maps.solar.v1.ImageryQuality.UNRECOGNIZED : result;
    }
    /**
     *
     *
     * <pre>
     * The quality of the result's imagery.
     * </pre>
     *
     * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
     *
     * @param value The imageryQuality to set.
     * @return This builder for chaining.
     */
    public Builder setImageryQuality(com.google.maps.solar.v1.ImageryQuality value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      imageryQuality_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The quality of the result's imagery.
     * </pre>
     *
     * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 9;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearImageryQuality() {
      bitField0_ = (bitField0_ & ~0x00000100);
      imageryQuality_ = 0;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.maps.solar.v1.DataLayers)
  }

  // @@protoc_insertion_point(class_scope:google.maps.solar.v1.DataLayers)
  private static final com.google.maps.solar.v1.DataLayers DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.maps.solar.v1.DataLayers();
  }

  public static com.google.maps.solar.v1.DataLayers getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DataLayers> PARSER =
      new com.google.protobuf.AbstractParser<DataLayers>() {
        @java.lang.Override
        public DataLayers parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<DataLayers> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DataLayers> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.solar.v1.DataLayers getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
