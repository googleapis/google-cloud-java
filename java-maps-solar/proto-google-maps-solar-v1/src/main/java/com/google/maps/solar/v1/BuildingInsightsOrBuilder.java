/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/solar/v1/solar_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.solar.v1;

public interface BuildingInsightsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.maps.solar.v1.BuildingInsights)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The resource name for the building, of the format `building/&lt;place ID&gt;`.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * The resource name for the building, of the format `building/&lt;place ID&gt;`.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * A point near the center of the building.
   * </pre>
   *
   * <code>.google.type.LatLng center = 2;</code>
   *
   * @return Whether the center field is set.
   */
  boolean hasCenter();
  /**
   *
   *
   * <pre>
   * A point near the center of the building.
   * </pre>
   *
   * <code>.google.type.LatLng center = 2;</code>
   *
   * @return The center.
   */
  com.google.type.LatLng getCenter();
  /**
   *
   *
   * <pre>
   * A point near the center of the building.
   * </pre>
   *
   * <code>.google.type.LatLng center = 2;</code>
   */
  com.google.type.LatLngOrBuilder getCenterOrBuilder();

  /**
   *
   *
   * <pre>
   * The bounding box of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 9;</code>
   *
   * @return Whether the boundingBox field is set.
   */
  boolean hasBoundingBox();
  /**
   *
   *
   * <pre>
   * The bounding box of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 9;</code>
   *
   * @return The boundingBox.
   */
  com.google.maps.solar.v1.LatLngBox getBoundingBox();
  /**
   *
   *
   * <pre>
   * The bounding box of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.LatLngBox bounding_box = 9;</code>
   */
  com.google.maps.solar.v1.LatLngBoxOrBuilder getBoundingBoxOrBuilder();

  /**
   *
   *
   * <pre>
   * Date that the underlying imagery was acquired. This is approximate.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 3;</code>
   *
   * @return Whether the imageryDate field is set.
   */
  boolean hasImageryDate();
  /**
   *
   *
   * <pre>
   * Date that the underlying imagery was acquired. This is approximate.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 3;</code>
   *
   * @return The imageryDate.
   */
  com.google.type.Date getImageryDate();
  /**
   *
   *
   * <pre>
   * Date that the underlying imagery was acquired. This is approximate.
   * </pre>
   *
   * <code>.google.type.Date imagery_date = 3;</code>
   */
  com.google.type.DateOrBuilder getImageryDateOrBuilder();

  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 11;</code>
   *
   * @return Whether the imageryProcessedDate field is set.
   */
  boolean hasImageryProcessedDate();
  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 11;</code>
   *
   * @return The imageryProcessedDate.
   */
  com.google.type.Date getImageryProcessedDate();
  /**
   *
   *
   * <pre>
   * When processing was completed on this imagery.
   * </pre>
   *
   * <code>.google.type.Date imagery_processed_date = 11;</code>
   */
  com.google.type.DateOrBuilder getImageryProcessedDateOrBuilder();

  /**
   *
   *
   * <pre>
   * Postal code (e.g., US zip code) this building is contained by.
   * </pre>
   *
   * <code>string postal_code = 4;</code>
   *
   * @return The postalCode.
   */
  java.lang.String getPostalCode();
  /**
   *
   *
   * <pre>
   * Postal code (e.g., US zip code) this building is contained by.
   * </pre>
   *
   * <code>string postal_code = 4;</code>
   *
   * @return The bytes for postalCode.
   */
  com.google.protobuf.ByteString getPostalCodeBytes();

  /**
   *
   *
   * <pre>
   * Administrative area 1 (e.g., in the US, the state) that contains this
   * building. For example, in the US, the abbreviation might be "MA" or "CA."
   * </pre>
   *
   * <code>string administrative_area = 5;</code>
   *
   * @return The administrativeArea.
   */
  java.lang.String getAdministrativeArea();
  /**
   *
   *
   * <pre>
   * Administrative area 1 (e.g., in the US, the state) that contains this
   * building. For example, in the US, the abbreviation might be "MA" or "CA."
   * </pre>
   *
   * <code>string administrative_area = 5;</code>
   *
   * @return The bytes for administrativeArea.
   */
  com.google.protobuf.ByteString getAdministrativeAreaBytes();

  /**
   *
   *
   * <pre>
   * Statistical area (e.g., US census tract) this building is in.
   * </pre>
   *
   * <code>string statistical_area = 6;</code>
   *
   * @return The statisticalArea.
   */
  java.lang.String getStatisticalArea();
  /**
   *
   *
   * <pre>
   * Statistical area (e.g., US census tract) this building is in.
   * </pre>
   *
   * <code>string statistical_area = 6;</code>
   *
   * @return The bytes for statisticalArea.
   */
  com.google.protobuf.ByteString getStatisticalAreaBytes();

  /**
   *
   *
   * <pre>
   * Region code for the country (or region) this building is in.
   * </pre>
   *
   * <code>string region_code = 7;</code>
   *
   * @return The regionCode.
   */
  java.lang.String getRegionCode();
  /**
   *
   *
   * <pre>
   * Region code for the country (or region) this building is in.
   * </pre>
   *
   * <code>string region_code = 7;</code>
   *
   * @return The bytes for regionCode.
   */
  com.google.protobuf.ByteString getRegionCodeBytes();

  /**
   *
   *
   * <pre>
   * Solar potential of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SolarPotential solar_potential = 8;</code>
   *
   * @return Whether the solarPotential field is set.
   */
  boolean hasSolarPotential();
  /**
   *
   *
   * <pre>
   * Solar potential of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SolarPotential solar_potential = 8;</code>
   *
   * @return The solarPotential.
   */
  com.google.maps.solar.v1.SolarPotential getSolarPotential();
  /**
   *
   *
   * <pre>
   * Solar potential of the building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.SolarPotential solar_potential = 8;</code>
   */
  com.google.maps.solar.v1.SolarPotentialOrBuilder getSolarPotentialOrBuilder();

  /**
   *
   *
   * <pre>
   * The quality of the imagery used to compute the data for this building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 10;</code>
   *
   * @return The enum numeric value on the wire for imageryQuality.
   */
  int getImageryQualityValue();
  /**
   *
   *
   * <pre>
   * The quality of the imagery used to compute the data for this building.
   * </pre>
   *
   * <code>.google.maps.solar.v1.ImageryQuality imagery_quality = 10;</code>
   *
   * @return The imageryQuality.
   */
  com.google.maps.solar.v1.ImageryQuality getImageryQuality();
}
