/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/talent/v4/histogram.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.talent.v4;

public interface HistogramQueryResultOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.talent.v4.HistogramQueryResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Requested histogram expression.
   * </pre>
   *
   * <code>string histogram_query = 1;</code>
   *
   * @return The histogramQuery.
   */
  java.lang.String getHistogramQuery();
  /**
   *
   *
   * <pre>
   * Requested histogram expression.
   * </pre>
   *
   * <code>string histogram_query = 1;</code>
   *
   * @return The bytes for histogramQuery.
   */
  com.google.protobuf.ByteString getHistogramQueryBytes();

  /**
   *
   *
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   *
   * The key format is:
   *
   * * (for string histogram) string values stored in the field.
   * * (for named numeric bucket) name specified in `bucket()` function, like
   *   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
   * * (for anonymous numeric bucket) range formatted as `&lt;low&gt;-&lt;high&gt;`, for
   *   example, `0-1000`, `MIN-0`, and `0-MAX`.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  int getHistogramCount();
  /**
   *
   *
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   *
   * The key format is:
   *
   * * (for string histogram) string values stored in the field.
   * * (for named numeric bucket) name specified in `bucket()` function, like
   *   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
   * * (for anonymous numeric bucket) range formatted as `&lt;low&gt;-&lt;high&gt;`, for
   *   example, `0-1000`, `MIN-0`, and `0-MAX`.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  boolean containsHistogram(java.lang.String key);
  /** Use {@link #getHistogramMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Long> getHistogram();
  /**
   *
   *
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   *
   * The key format is:
   *
   * * (for string histogram) string values stored in the field.
   * * (for named numeric bucket) name specified in `bucket()` function, like
   *   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
   * * (for anonymous numeric bucket) range formatted as `&lt;low&gt;-&lt;high&gt;`, for
   *   example, `0-1000`, `MIN-0`, and `0-MAX`.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.Long> getHistogramMap();
  /**
   *
   *
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   *
   * The key format is:
   *
   * * (for string histogram) string values stored in the field.
   * * (for named numeric bucket) name specified in `bucket()` function, like
   *   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
   * * (for anonymous numeric bucket) range formatted as `&lt;low&gt;-&lt;high&gt;`, for
   *   example, `0-1000`, `MIN-0`, and `0-MAX`.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  long getHistogramOrDefault(java.lang.String key, long defaultValue);
  /**
   *
   *
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   *
   * The key format is:
   *
   * * (for string histogram) string values stored in the field.
   * * (for named numeric bucket) name specified in `bucket()` function, like
   *   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
   * * (for anonymous numeric bucket) range formatted as `&lt;low&gt;-&lt;high&gt;`, for
   *   example, `0-1000`, `MIN-0`, and `0-MAX`.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  long getHistogramOrThrow(java.lang.String key);
}
