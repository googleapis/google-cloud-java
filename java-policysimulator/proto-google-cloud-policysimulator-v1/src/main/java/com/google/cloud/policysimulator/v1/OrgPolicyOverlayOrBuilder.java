/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/policysimulator/v1/orgpolicy.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.policysimulator.v1;

public interface OrgPolicyOverlayOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.policysimulator.v1.OrgPolicyOverlay)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy changes to preview violations for.
   *
   * Any existing OrgPolicies with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * policies in the overlay were created or updated.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay policies = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<com.google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay>
      getPoliciesList();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy changes to preview violations for.
   *
   * Any existing OrgPolicies with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * policies in the overlay were created or updated.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay policies = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay getPolicies(int index);

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy changes to preview violations for.
   *
   * Any existing OrgPolicies with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * policies in the overlay were created or updated.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay policies = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getPoliciesCount();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy changes to preview violations for.
   *
   * Any existing OrgPolicies with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * policies in the overlay were created or updated.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay policies = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<
          ? extends com.google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlayOrBuilder>
      getPoliciesOrBuilderList();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy changes to preview violations for.
   *
   * Any existing OrgPolicies with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * policies in the overlay were created or updated.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlay policies = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.policysimulator.v1.OrgPolicyOverlay.PolicyOverlayOrBuilder getPoliciesOrBuilder(
      int index);

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for.
   *
   * Any existing CustomConstraints with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * custom constraints in the overlay were instantiated.
   *
   * Only a single custom_constraint is supported in the overlay at a time.
   * For evaluating multiple constraints, multiple
   * `GenerateOrgPolicyViolationsPreview` requests are made, where each request
   * evaluates a single constraint.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay custom_constraints = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<com.google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay>
      getCustomConstraintsList();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for.
   *
   * Any existing CustomConstraints with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * custom constraints in the overlay were instantiated.
   *
   * Only a single custom_constraint is supported in the overlay at a time.
   * For evaluating multiple constraints, multiple
   * `GenerateOrgPolicyViolationsPreview` requests are made, where each request
   * evaluates a single constraint.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay custom_constraints = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay getCustomConstraints(
      int index);

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for.
   *
   * Any existing CustomConstraints with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * custom constraints in the overlay were instantiated.
   *
   * Only a single custom_constraint is supported in the overlay at a time.
   * For evaluating multiple constraints, multiple
   * `GenerateOrgPolicyViolationsPreview` requests are made, where each request
   * evaluates a single constraint.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay custom_constraints = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getCustomConstraintsCount();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for.
   *
   * Any existing CustomConstraints with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * custom constraints in the overlay were instantiated.
   *
   * Only a single custom_constraint is supported in the overlay at a time.
   * For evaluating multiple constraints, multiple
   * `GenerateOrgPolicyViolationsPreview` requests are made, where each request
   * evaluates a single constraint.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay custom_constraints = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<
          ? extends
              com.google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlayOrBuilder>
      getCustomConstraintsOrBuilderList();

  /**
   *
   *
   * <pre>
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for.
   *
   * Any existing CustomConstraints with the same name will be overridden
   * in the simulation. That is, violations will be determined as if all
   * custom constraints in the overlay were instantiated.
   *
   * Only a single custom_constraint is supported in the overlay at a time.
   * For evaluating multiple constraints, multiple
   * `GenerateOrgPolicyViolationsPreview` requests are made, where each request
   * evaluates a single constraint.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlay custom_constraints = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.policysimulator.v1.OrgPolicyOverlay.CustomConstraintOverlayOrBuilder
      getCustomConstraintsOrBuilder(int index);
}
