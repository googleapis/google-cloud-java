/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/automl/v1beta1/data_stats.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.automl.v1beta1;

public interface Float64StatsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.automl.v1beta1.Float64Stats)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The mean of the series.
   * </pre>
   *
   * <code>double mean = 1;</code>
   *
   * @return The mean.
   */
  double getMean();

  /**
   *
   *
   * <pre>
   * The standard deviation of the series.
   * </pre>
   *
   * <code>double standard_deviation = 2;</code>
   *
   * @return The standardDeviation.
   */
  double getStandardDeviation();

  /**
   *
   *
   * <pre>
   * Ordered from 0 to k k-quantile values of the data series of n values.
   * The value at index i is, approximately, the i*n/k-th smallest value in the
   * series; for i = 0 and i = k these are, respectively, the min and max
   * values.
   * </pre>
   *
   * <code>repeated double quantiles = 3;</code>
   *
   * @return A list containing the quantiles.
   */
  java.util.List<java.lang.Double> getQuantilesList();
  /**
   *
   *
   * <pre>
   * Ordered from 0 to k k-quantile values of the data series of n values.
   * The value at index i is, approximately, the i*n/k-th smallest value in the
   * series; for i = 0 and i = k these are, respectively, the min and max
   * values.
   * </pre>
   *
   * <code>repeated double quantiles = 3;</code>
   *
   * @return The count of quantiles.
   */
  int getQuantilesCount();
  /**
   *
   *
   * <pre>
   * Ordered from 0 to k k-quantile values of the data series of n values.
   * The value at index i is, approximately, the i*n/k-th smallest value in the
   * series; for i = 0 and i = k these are, respectively, the min and max
   * values.
   * </pre>
   *
   * <code>repeated double quantiles = 3;</code>
   *
   * @param index The index of the element to return.
   * @return The quantiles at the given index.
   */
  double getQuantiles(int index);

  /**
   *
   *
   * <pre>
   * Histogram buckets of the data series. Sorted by the min value of the
   * bucket, ascendingly, and the number of the buckets is dynamically
   * generated. The buckets are non-overlapping and completely cover whole
   * FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * </pre>
   *
   * <code>repeated .google.cloud.automl.v1beta1.Float64Stats.HistogramBucket histogram_buckets = 4;
   * </code>
   */
  java.util.List<com.google.cloud.automl.v1beta1.Float64Stats.HistogramBucket>
      getHistogramBucketsList();
  /**
   *
   *
   * <pre>
   * Histogram buckets of the data series. Sorted by the min value of the
   * bucket, ascendingly, and the number of the buckets is dynamically
   * generated. The buckets are non-overlapping and completely cover whole
   * FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * </pre>
   *
   * <code>repeated .google.cloud.automl.v1beta1.Float64Stats.HistogramBucket histogram_buckets = 4;
   * </code>
   */
  com.google.cloud.automl.v1beta1.Float64Stats.HistogramBucket getHistogramBuckets(int index);
  /**
   *
   *
   * <pre>
   * Histogram buckets of the data series. Sorted by the min value of the
   * bucket, ascendingly, and the number of the buckets is dynamically
   * generated. The buckets are non-overlapping and completely cover whole
   * FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * </pre>
   *
   * <code>repeated .google.cloud.automl.v1beta1.Float64Stats.HistogramBucket histogram_buckets = 4;
   * </code>
   */
  int getHistogramBucketsCount();
  /**
   *
   *
   * <pre>
   * Histogram buckets of the data series. Sorted by the min value of the
   * bucket, ascendingly, and the number of the buckets is dynamically
   * generated. The buckets are non-overlapping and completely cover whole
   * FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * </pre>
   *
   * <code>repeated .google.cloud.automl.v1beta1.Float64Stats.HistogramBucket histogram_buckets = 4;
   * </code>
   */
  java.util.List<? extends com.google.cloud.automl.v1beta1.Float64Stats.HistogramBucketOrBuilder>
      getHistogramBucketsOrBuilderList();
  /**
   *
   *
   * <pre>
   * Histogram buckets of the data series. Sorted by the min value of the
   * bucket, ascendingly, and the number of the buckets is dynamically
   * generated. The buckets are non-overlapping and completely cover whole
   * FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * </pre>
   *
   * <code>repeated .google.cloud.automl.v1beta1.Float64Stats.HistogramBucket histogram_buckets = 4;
   * </code>
   */
  com.google.cloud.automl.v1beta1.Float64Stats.HistogramBucketOrBuilder
      getHistogramBucketsOrBuilder(int index);
}
