/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/admanager/v1/report_definition.proto

// Protobuf Java Version: 3.25.8
package com.google.ads.admanager.v1;

/**
 *
 *
 * <pre>
 * The definition of how a report should be run.
 * </pre>
 *
 * Protobuf type {@code google.ads.admanager.v1.ReportDefinition}
 */
public final class ReportDefinition extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition)
    ReportDefinitionOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use ReportDefinition.newBuilder() to construct.
  private ReportDefinition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ReportDefinition() {
    dimensions_ = java.util.Collections.emptyList();
    metrics_ = java.util.Collections.emptyList();
    filters_ = java.util.Collections.emptyList();
    timeZoneSource_ = 0;
    timeZone_ = "";
    currencyCode_ = "";
    customDimensionKeyIds_ = emptyLongList();
    lineItemCustomFieldIds_ = emptyLongList();
    orderCustomFieldIds_ = emptyLongList();
    creativeCustomFieldIds_ = emptyLongList();
    reportType_ = 0;
    timePeriodColumn_ = 0;
    flags_ = java.util.Collections.emptyList();
    sorts_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ReportDefinition();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.ads.admanager.v1.ReportDefinitionProto
        .internal_static_google_ads_admanager_v1_ReportDefinition_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ads.admanager.v1.ReportDefinitionProto
        .internal_static_google_ads_admanager_v1_ReportDefinition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ads.admanager.v1.ReportDefinition.class,
            com.google.ads.admanager.v1.ReportDefinition.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Supported report types.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.ReportType}
   */
  public enum ReportType implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>REPORT_TYPE_UNSPECIFIED = 0;</code>
     */
    REPORT_TYPE_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * Historical.
     * </pre>
     *
     * <code>HISTORICAL = 1;</code>
     */
    HISTORICAL(1),
    /**
     *
     *
     * <pre>
     * Reach.
     * </pre>
     *
     * <code>REACH = 5;</code>
     */
    REACH(5),
    /**
     *
     *
     * <pre>
     * Privacy and messaging.
     * </pre>
     *
     * <code>PRIVACY_AND_MESSAGING = 6;</code>
     */
    PRIVACY_AND_MESSAGING(6),
    /**
     *
     *
     * <pre>
     * Ad speed.
     * </pre>
     *
     * <code>AD_SPEED = 13;</code>
     */
    AD_SPEED(13),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>REPORT_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int REPORT_TYPE_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     * Historical.
     * </pre>
     *
     * <code>HISTORICAL = 1;</code>
     */
    public static final int HISTORICAL_VALUE = 1;

    /**
     *
     *
     * <pre>
     * Reach.
     * </pre>
     *
     * <code>REACH = 5;</code>
     */
    public static final int REACH_VALUE = 5;

    /**
     *
     *
     * <pre>
     * Privacy and messaging.
     * </pre>
     *
     * <code>PRIVACY_AND_MESSAGING = 6;</code>
     */
    public static final int PRIVACY_AND_MESSAGING_VALUE = 6;

    /**
     *
     *
     * <pre>
     * Ad speed.
     * </pre>
     *
     * <code>AD_SPEED = 13;</code>
     */
    public static final int AD_SPEED_VALUE = 13;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ReportType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ReportType forNumber(int value) {
      switch (value) {
        case 0:
          return REPORT_TYPE_UNSPECIFIED;
        case 1:
          return HISTORICAL;
        case 5:
          return REACH;
        case 6:
          return PRIVACY_AND_MESSAGING;
        case 13:
          return AD_SPEED;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ReportType> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ReportType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ReportType>() {
          public ReportType findValueByNumber(int number) {
            return ReportType.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(0);
    }

    private static final ReportType[] VALUES = values();

    public static ReportType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ReportType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.ReportType)
  }

  /**
   *
   *
   * <pre>
   * Reporting dimensions.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.Dimension}
   */
  public enum Dimension implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>DIMENSION_UNSPECIFIED = 0;</code>
     */
    DIMENSION_UNSPECIFIED(0, 0),
    /**
     *
     *
     * <pre>
     *  The measurement source of a video ad.
     *
     *
     *
     * Corresponds to "Active View measurement source value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASUREMENT_SOURCE = 575;</code>
     */
    ACTIVE_VIEW_MEASUREMENT_SOURCE(1, 575),
    /**
     *
     *
     * <pre>
     * Active View measurement source localized name.
     *
     *
     *
     * Corresponds to "Active View measurement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME = 576;</code>
     */
    ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME(2, 576),
    /**
     *
     *
     * <pre>
     * Advertiser credit status ENUM
     *
     *
     *
     * Corresponds to "Advertiser credit status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_CREDIT_STATUS = 475;</code>
     */
    ADVERTISER_CREDIT_STATUS(3, 475),
    /**
     *
     *
     * <pre>
     * Advertiser credit status locallized name
     *
     *
     *
     * Corresponds to "Advertiser credit status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_CREDIT_STATUS_NAME = 476;</code>
     */
    ADVERTISER_CREDIT_STATUS_NAME(4, 476),
    /**
     *
     *
     * <pre>
     * The domain name of the advertiser.
     *
     *
     *
     * Corresponds to "Advertiser domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_DOMAIN_NAME = 242;</code>
     */
    ADVERTISER_DOMAIN_NAME(5, 242),
    /**
     *
     *
     * <pre>
     * The ID used in an external system for advertiser identification
     *
     *
     *
     * Corresponds to "Advertiser external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_EXTERNAL_ID = 228;</code>
     */
    ADVERTISER_EXTERNAL_ID(6, 228),
    /**
     *
     *
     * <pre>
     * The ID of an advertiser company assigned to an order
     *
     *
     *
     * Corresponds to "Advertiser ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ADVERTISER_ID = 131;</code>
     */
    ADVERTISER_ID(7, 131),
    /**
     *
     *
     * <pre>
     * Labels applied to the advertiser
     *  can be used for either competitive exclusion or ad exclusion
     *
     *
     *
     * Corresponds to "Advertiser labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ADVERTISER_LABELS = 230;</code>
     */
    ADVERTISER_LABELS(8, 230),
    /**
     *
     *
     * <pre>
     * Label ids applied to the advertiser
     *  can be used for either competitive exclusion or ad exclusion
     *
     *
     *
     * Corresponds to "Advertiser label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ADVERTISER_LABEL_IDS = 229;</code>
     */
    ADVERTISER_LABEL_IDS(9, 229),
    /**
     *
     *
     * <pre>
     * The name of an advertiser company assigned to an order
     *
     *
     *
     * Corresponds to "Advertiser" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_NAME = 132;</code>
     */
    ADVERTISER_NAME(10, 132),
    /**
     *
     *
     * <pre>
     * The name of the contact associated with an advertiser company
     *
     *
     *
     * Corresponds to "Advertiser primary contact" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_PRIMARY_CONTACT = 227;</code>
     */
    ADVERTISER_PRIMARY_CONTACT(11, 227),
    /**
     *
     *
     * <pre>
     * Advertiser status ENUM
     *
     *
     *
     * Corresponds to "Advertiser status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_STATUS = 471;</code>
     */
    ADVERTISER_STATUS(12, 471),
    /**
     *
     *
     * <pre>
     * Advertiser status locallized name
     *
     *
     *
     * Corresponds to "Advertiser status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_STATUS_NAME = 472;</code>
     */
    ADVERTISER_STATUS_NAME(13, 472),
    /**
     *
     *
     * <pre>
     * Advertiser type ENUM
     *
     *
     *
     * Corresponds to "Advertiser type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_TYPE = 473;</code>
     */
    ADVERTISER_TYPE(14, 473),
    /**
     *
     *
     * <pre>
     * Advertiser type locallized name
     *
     *
     *
     * Corresponds to "Advertiser type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_TYPE_NAME = 474;</code>
     */
    ADVERTISER_TYPE_NAME(15, 474),
    /**
     *
     *
     * <pre>
     * The category of an advertiser, such as Arts &amp; Entertainment or Travel &amp;
     *  Tourism.
     *
     *
     *
     * Corresponds to "Advertiser vertical" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_VERTICAL = 580;</code>
     */
    ADVERTISER_VERTICAL(16, 580),
    /**
     *
     *
     * <pre>
     * Classification of different Ad Exchange products.
     *
     *
     *
     * Corresponds to "Ad Exchange product value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADX_PRODUCT = 499;</code>
     */
    ADX_PRODUCT(17, 499),
    /**
     *
     *
     * <pre>
     * Localized name of the classification of different Ad Exchange
     *  products.
     *
     *
     *
     * Corresponds to "Ad Exchange product" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADX_PRODUCT_NAME = 500;</code>
     */
    ADX_PRODUCT_NAME(18, 500),
    /**
     *
     *
     * <pre>
     * Ad experiences type.
     *
     *
     *
     * Corresponds to "Ad experiences value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_EXPERIENCES_TYPE = 641;</code>
     */
    AD_EXPERIENCES_TYPE(19, 641),
    /**
     *
     *
     * <pre>
     * Localized name of the Ad experiences type.
     *
     *
     *
     * Corresponds to "Ad experiences" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_EXPERIENCES_TYPE_NAME = 642;</code>
     */
    AD_EXPERIENCES_TYPE_NAME(20, 642),
    /**
     *
     *
     * <pre>
     * Shows an ENUM value describing whether a given piece of publisher
     *  inventory was above (ATF) or below the fold (BTF) of a page.
     *
     *
     *
     * Corresponds to "Ad location value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_LOCATION = 390;</code>
     */
    AD_LOCATION(21, 390),
    /**
     *
     *
     * <pre>
     * Shows a localized string describing whether a given piece of publisher
     *  inventory was above (ATF) or below the fold (BTF) of a page.
     *
     *
     *
     * Corresponds to "Ad location" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_LOCATION_NAME = 391;</code>
     */
    AD_LOCATION_NAME(22, 391),
    /**
     *
     *
     * <pre>
     * The domain of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_DOMAIN = 620;</code>
     */
    AD_TECHNOLOGY_PROVIDER_DOMAIN(23, 620),
    /**
     *
     *
     * <pre>
     * The ID of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_ID = 621;</code>
     */
    AD_TECHNOLOGY_PROVIDER_ID(24, 621),
    /**
     *
     *
     * <pre>
     * The name of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_NAME = 622;</code>
     */
    AD_TECHNOLOGY_PROVIDER_NAME(25, 622),
    /**
     *
     *
     * <pre>
     * Segmentation of ad types.
     *
     *
     *
     * Corresponds to "Ad type value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_TYPE = 497;</code>
     */
    AD_TYPE(26, 497),
    /**
     *
     *
     * <pre>
     * Localized name of the ad type.
     *
     *
     *
     * Corresponds to "Ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TYPE_NAME = 498;</code>
     */
    AD_TYPE_NAME(27, 498),
    /**
     *
     *
     * <pre>
     * The code of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE = 64;</code>
     */
    AD_UNIT_CODE(28, 64),
    /**
     *
     *
     * <pre>
     * The code of the first level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_1 = 65;</code>
     */
    AD_UNIT_CODE_LEVEL_1(29, 65),
    /**
     *
     *
     * <pre>
     * The code of the tenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_10 = 74;</code>
     */
    AD_UNIT_CODE_LEVEL_10(30, 74),
    /**
     *
     *
     * <pre>
     * The code of the eleventh level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_11 = 75;</code>
     */
    AD_UNIT_CODE_LEVEL_11(31, 75),
    /**
     *
     *
     * <pre>
     * The code of the twelfth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_12 = 76;</code>
     */
    AD_UNIT_CODE_LEVEL_12(32, 76),
    /**
     *
     *
     * <pre>
     * The code of the thirteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_13 = 77;</code>
     */
    AD_UNIT_CODE_LEVEL_13(33, 77),
    /**
     *
     *
     * <pre>
     * The code of the fourteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_14 = 78;</code>
     */
    AD_UNIT_CODE_LEVEL_14(34, 78),
    /**
     *
     *
     * <pre>
     * The code of the fifteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_15 = 79;</code>
     */
    AD_UNIT_CODE_LEVEL_15(35, 79),
    /**
     *
     *
     * <pre>
     * The code of the sixteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_16 = 80;</code>
     */
    AD_UNIT_CODE_LEVEL_16(36, 80),
    /**
     *
     *
     * <pre>
     * The code of the second level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_2 = 66;</code>
     */
    AD_UNIT_CODE_LEVEL_2(37, 66),
    /**
     *
     *
     * <pre>
     * The code of the third level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_3 = 67;</code>
     */
    AD_UNIT_CODE_LEVEL_3(38, 67),
    /**
     *
     *
     * <pre>
     * The code of the fourth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_4 = 68;</code>
     */
    AD_UNIT_CODE_LEVEL_4(39, 68),
    /**
     *
     *
     * <pre>
     * The code of the fifth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_5 = 69;</code>
     */
    AD_UNIT_CODE_LEVEL_5(40, 69),
    /**
     *
     *
     * <pre>
     * The code of the sixth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_6 = 70;</code>
     */
    AD_UNIT_CODE_LEVEL_6(41, 70),
    /**
     *
     *
     * <pre>
     * The code of the seventh level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_7 = 71;</code>
     */
    AD_UNIT_CODE_LEVEL_7(42, 71),
    /**
     *
     *
     * <pre>
     * The code of the eighth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_8 = 72;</code>
     */
    AD_UNIT_CODE_LEVEL_8(43, 72),
    /**
     *
     *
     * <pre>
     * The code of the ninth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_9 = 73;</code>
     */
    AD_UNIT_CODE_LEVEL_9(44, 73),
    /**
     *
     *
     * <pre>
     * The ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID = 25;</code>
     */
    AD_UNIT_ID(45, 25),
    /**
     *
     *
     * <pre>
     * The full hierarchy of ad unit IDs where the ad was requested, from
     *  root to leaf, excluding the root ad unit ID.
     *
     *
     *
     * Corresponds to "Ad unit ID (all levels)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>AD_UNIT_ID_ALL_LEVEL = 27;</code>
     */
    AD_UNIT_ID_ALL_LEVEL(46, 27),
    /**
     *
     *
     * <pre>
     * The first level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_1 = 30;</code>
     */
    AD_UNIT_ID_LEVEL_1(47, 30),
    /**
     *
     *
     * <pre>
     * The tenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_10 = 48;</code>
     */
    AD_UNIT_ID_LEVEL_10(48, 48),
    /**
     *
     *
     * <pre>
     * The eleventh level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_11 = 50;</code>
     */
    AD_UNIT_ID_LEVEL_11(49, 50),
    /**
     *
     *
     * <pre>
     * The twelfth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_12 = 52;</code>
     */
    AD_UNIT_ID_LEVEL_12(50, 52),
    /**
     *
     *
     * <pre>
     * The thirteenth level ad unit ID of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_13 = 54;</code>
     */
    AD_UNIT_ID_LEVEL_13(51, 54),
    /**
     *
     *
     * <pre>
     * The fourteenth level ad unit ID of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_14 = 56;</code>
     */
    AD_UNIT_ID_LEVEL_14(52, 56),
    /**
     *
     *
     * <pre>
     * The fifteenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_15 = 58;</code>
     */
    AD_UNIT_ID_LEVEL_15(53, 58),
    /**
     *
     *
     * <pre>
     * The sixteenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_16 = 60;</code>
     */
    AD_UNIT_ID_LEVEL_16(54, 60),
    /**
     *
     *
     * <pre>
     * The second level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_2 = 32;</code>
     */
    AD_UNIT_ID_LEVEL_2(55, 32),
    /**
     *
     *
     * <pre>
     * The third level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_3 = 34;</code>
     */
    AD_UNIT_ID_LEVEL_3(56, 34),
    /**
     *
     *
     * <pre>
     * The fourth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_4 = 36;</code>
     */
    AD_UNIT_ID_LEVEL_4(57, 36),
    /**
     *
     *
     * <pre>
     * The fifth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_5 = 38;</code>
     */
    AD_UNIT_ID_LEVEL_5(58, 38),
    /**
     *
     *
     * <pre>
     * The sixth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_6 = 40;</code>
     */
    AD_UNIT_ID_LEVEL_6(59, 40),
    /**
     *
     *
     * <pre>
     * The seventh level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_7 = 42;</code>
     */
    AD_UNIT_ID_LEVEL_7(60, 42),
    /**
     *
     *
     * <pre>
     * The eighth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_8 = 44;</code>
     */
    AD_UNIT_ID_LEVEL_8(61, 44),
    /**
     *
     *
     * <pre>
     * The ninth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_9 = 46;</code>
     */
    AD_UNIT_ID_LEVEL_9(62, 46),
    /**
     *
     *
     * <pre>
     * The top-level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID (top level)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_TOP_LEVEL = 142;</code>
     */
    AD_UNIT_ID_TOP_LEVEL(63, 142),
    /**
     *
     *
     * <pre>
     * The name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME = 26;</code>
     */
    AD_UNIT_NAME(64, 26),
    /**
     *
     *
     * <pre>
     * The full hierarchy of ad unit names where the ad was requested, from
     *  root to leaf, excluding the root ad unit name.
     *
     *
     *
     * Corresponds to "Ad unit (all levels)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>AD_UNIT_NAME_ALL_LEVEL = 29;</code>
     */
    AD_UNIT_NAME_ALL_LEVEL(65, 29),
    /**
     *
     *
     * <pre>
     * The first level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_1 = 31;</code>
     */
    AD_UNIT_NAME_LEVEL_1(66, 31),
    /**
     *
     *
     * <pre>
     * The tenth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_10 = 49;</code>
     */
    AD_UNIT_NAME_LEVEL_10(67, 49),
    /**
     *
     *
     * <pre>
     * The eleventh level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_11 = 51;</code>
     */
    AD_UNIT_NAME_LEVEL_11(68, 51),
    /**
     *
     *
     * <pre>
     * The twelfth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_12 = 53;</code>
     */
    AD_UNIT_NAME_LEVEL_12(69, 53),
    /**
     *
     *
     * <pre>
     * The thirteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_13 = 55;</code>
     */
    AD_UNIT_NAME_LEVEL_13(70, 55),
    /**
     *
     *
     * <pre>
     * The fourteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_14 = 57;</code>
     */
    AD_UNIT_NAME_LEVEL_14(71, 57),
    /**
     *
     *
     * <pre>
     * The fifteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_15 = 59;</code>
     */
    AD_UNIT_NAME_LEVEL_15(72, 59),
    /**
     *
     *
     * <pre>
     * The sixteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_16 = 61;</code>
     */
    AD_UNIT_NAME_LEVEL_16(73, 61),
    /**
     *
     *
     * <pre>
     * The second level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_2 = 33;</code>
     */
    AD_UNIT_NAME_LEVEL_2(74, 33),
    /**
     *
     *
     * <pre>
     * The third level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_3 = 35;</code>
     */
    AD_UNIT_NAME_LEVEL_3(75, 35),
    /**
     *
     *
     * <pre>
     * The fourth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_4 = 37;</code>
     */
    AD_UNIT_NAME_LEVEL_4(76, 37),
    /**
     *
     *
     * <pre>
     * The fifth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_5 = 39;</code>
     */
    AD_UNIT_NAME_LEVEL_5(77, 39),
    /**
     *
     *
     * <pre>
     * The sixth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_6 = 41;</code>
     */
    AD_UNIT_NAME_LEVEL_6(78, 41),
    /**
     *
     *
     * <pre>
     * The seventh level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_7 = 43;</code>
     */
    AD_UNIT_NAME_LEVEL_7(79, 43),
    /**
     *
     *
     * <pre>
     * The eighth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_8 = 45;</code>
     */
    AD_UNIT_NAME_LEVEL_8(80, 45),
    /**
     *
     *
     * <pre>
     * The ninth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_9 = 47;</code>
     */
    AD_UNIT_NAME_LEVEL_9(81, 47),
    /**
     *
     *
     * <pre>
     * The top-level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit (top level)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_TOP_LEVEL = 143;</code>
     */
    AD_UNIT_NAME_TOP_LEVEL(82, 143),
    /**
     *
     *
     * <pre>
     * The reward amount of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit reward amount" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_UNIT_REWARD_AMOUNT = 63;</code>
     */
    AD_UNIT_REWARD_AMOUNT(83, 63),
    /**
     *
     *
     * <pre>
     * The reward type of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit reward type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_REWARD_TYPE = 62;</code>
     */
    AD_UNIT_REWARD_TYPE(84, 62),
    /**
     *
     *
     * <pre>
     * The status of the ad unit
     *
     *
     *
     * Corresponds to "Ad unit status value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_UNIT_STATUS = 206;</code>
     */
    AD_UNIT_STATUS(85, 206),
    /**
     *
     *
     * <pre>
     * The name of the status of the ad unit
     *
     *
     *
     * Corresponds to "Ad unit status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_STATUS_NAME = 207;</code>
     */
    AD_UNIT_STATUS_NAME(86, 207),
    /**
     *
     *
     * <pre>
     * The ID of an agency at level 1 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 1)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_1_ID = 565;</code>
     */
    AGENCY_LEVEL_1_ID(87, 565),
    /**
     *
     *
     * <pre>
     * The name of an agency at level 1 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 1)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_1_NAME = 566;</code>
     */
    AGENCY_LEVEL_1_NAME(88, 566),
    /**
     *
     *
     * <pre>
     * The ID of an agency at level 2 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 2)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_2_ID = 567;</code>
     */
    AGENCY_LEVEL_2_ID(89, 567),
    /**
     *
     *
     * <pre>
     * The name of an agency at level 2 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 2)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_2_NAME = 568;</code>
     */
    AGENCY_LEVEL_2_NAME(90, 568),
    /**
     *
     *
     * <pre>
     * The ID of an agency at level 3 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 3)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_3_ID = 569;</code>
     */
    AGENCY_LEVEL_3_ID(91, 569),
    /**
     *
     *
     * <pre>
     * The name of an agency at level 3 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 3)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_3_NAME = 570;</code>
     */
    AGENCY_LEVEL_3_NAME(92, 570),
    /**
     *
     *
     * <pre>
     * User age bracket enum.
     *
     *
     *
     * Corresponds to "Age bracket value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AGE_BRACKET = 508;</code>
     */
    AGE_BRACKET(93, 508),
    /**
     *
     *
     * <pre>
     * Localized user age bracket returned from Google Analytics. For example,
     *  "18-24", "25-34", "35-44", "45-54", "55-64", "65+".
     *
     *
     *
     * Corresponds to "Age bracket" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGE_BRACKET_NAME = 582;</code>
     */
    AGE_BRACKET_NAME(94, 582),
    /**
     *
     *
     * <pre>
     * Enum value for App Tracking Transparency consent status.
     *
     *
     *
     * Corresponds to "App Tracking Transparency consent status value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>APP_TRACKING_TRANSPARENCY_CONSENT_STATUS = 442;</code>
     */
    APP_TRACKING_TRANSPARENCY_CONSENT_STATUS(95, 442),
    /**
     *
     *
     * <pre>
     * Localized string value for App Tracking Transparency consent status.
     *
     *
     *
     * Corresponds to "App Tracking Transparency consent status" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME = 443;</code>
     */
    APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME(96, 443),
    /**
     *
     *
     * <pre>
     * The app version.
     *
     *
     *
     * Corresponds to "App version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>APP_VERSION = 392;</code>
     */
    APP_VERSION(97, 392),
    /**
     *
     *
     * <pre>
     * The name of Auction Package deal
     *
     *
     *
     * Corresponds to "Auction package deal" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUCTION_PACKAGE_DEAL = 579;</code>
     */
    AUCTION_PACKAGE_DEAL(98, 579),
    /**
     *
     *
     * <pre>
     * The ID of Auction Package deal
     *
     *
     *
     * Corresponds to "Auction package deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AUCTION_PACKAGE_DEAL_ID = 571;</code>
     */
    AUCTION_PACKAGE_DEAL_ID(99, 571),
    /**
     *
     *
     * <pre>
     * ID of targeted audience segment, including all first-party and
     *  third-party segments that matched the user on the winning line item.
     *
     *
     *
     * Corresponds to "Audience segment ID (targeted)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AUDIENCE_SEGMENT_ID_TARGETED = 584;</code>
     */
    AUDIENCE_SEGMENT_ID_TARGETED(100, 584),
    /**
     *
     *
     * <pre>
     * Name of targeted audience segment, including all first-party and
     *  third-party segments that matched the user on the winning line item.
     *
     *
     *
     * Corresponds to "Audience segment (targeted)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUDIENCE_SEGMENT_TARGETED = 585;</code>
     */
    AUDIENCE_SEGMENT_TARGETED(101, 585),
    /**
     *
     *
     * <pre>
     * Enum value of Auto refreshed traffic.
     *
     *
     *
     * Corresponds to "Auto refreshed traffic value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AUTO_REFRESHED_TRAFFIC = 421;</code>
     */
    AUTO_REFRESHED_TRAFFIC(102, 421),
    /**
     *
     *
     * <pre>
     * Indicates if the traffic is from auto-refreshed ad requests.
     *
     *
     *
     * Corresponds to "Auto refreshed traffic" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUTO_REFRESHED_TRAFFIC_NAME = 422;</code>
     */
    AUTO_REFRESHED_TRAFFIC_NAME(103, 422),
    /**
     *
     *
     * <pre>
     * The encrypted version of BIDDER_ID.
     *
     *
     *
     * Corresponds to "Bidder encrypted ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BIDDER_ENCRYPTED_ID = 493;</code>
     */
    BIDDER_ENCRYPTED_ID(104, 493),
    /**
     *
     *
     * <pre>
     * The name of the bidder.
     *
     *
     *
     * Corresponds to "Bidder" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BIDDER_NAME = 494;</code>
     */
    BIDDER_NAME(105, 494),
    /**
     *
     *
     * <pre>
     * The cpm range within which a bid falls.
     *
     *
     *
     * Corresponds to "Bid Range" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BID_RANGE`
     * </pre>
     *
     * <code>BID_RANGE = 679;</code>
     */
    BID_RANGE(106, 679),
    /**
     *
     *
     * <pre>
     * The reason a bid was rejected.
     *
     *
     *
     * Corresponds to "Bid rejection reason value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BID_REJECTION_REASON = 599;</code>
     */
    BID_REJECTION_REASON(107, 599),
    /**
     *
     *
     * <pre>
     * The localized name of the reason a bid was rejected.
     *
     *
     *
     * Corresponds to "Bid rejection reason" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BID_REJECTION_REASON_NAME = 600;</code>
     */
    BID_REJECTION_REASON_NAME(108, 600),
    /**
     *
     *
     * <pre>
     * The amount of information about the Publisher's page sent to the buyer
     *  who purchased the impressions.
     *
     *
     *
     * Corresponds to "Branding type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BRANDING_TYPE = 383;</code>
     */
    BRANDING_TYPE(109, 383),
    /**
     *
     *
     * <pre>
     * The localized version of branding type, the amount of information about
     *  the Publisher's page sent to the buyer who purchased the impressions.
     *
     *
     *
     * Corresponds to "Branding type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BRANDING_TYPE_NAME = 384;</code>
     */
    BRANDING_TYPE_NAME(110, 384),
    /**
     *
     *
     * <pre>
     * Browser category.
     *
     *
     *
     * Corresponds to "Browser category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BROWSER_CATEGORY = 119;</code>
     */
    BROWSER_CATEGORY(111, 119),
    /**
     *
     *
     * <pre>
     * Browser category name.
     *
     *
     *
     * Corresponds to "Browser category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BROWSER_CATEGORY_NAME = 120;</code>
     */
    BROWSER_CATEGORY_NAME(112, 120),
    /**
     *
     *
     * <pre>
     * The ID of the browser.
     *
     *
     *
     * Corresponds to "Browser ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>BROWSER_ID = 235;</code>
     */
    BROWSER_ID(113, 235),
    /**
     *
     *
     * <pre>
     * The name of the browser.
     *
     *
     *
     * Corresponds to "Browser" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BROWSER_NAME = 236;</code>
     */
    BROWSER_NAME(114, 236),
    /**
     *
     *
     * <pre>
     * The ID of the buyer network.
     *
     *
     *
     * Corresponds to "Buyer network ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BUYER_NETWORK_ID = 448;</code>
     */
    BUYER_NETWORK_ID(115, 448),
    /**
     *
     *
     * <pre>
     * The name of the buyer network.
     *
     *
     *
     * Corresponds to "Buyer network" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BUYER_NETWORK_NAME = 449;</code>
     */
    BUYER_NETWORK_NAME(116, 449),
    /**
     *
     *
     * <pre>
     * The callout status category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Callout status category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CALLOUT_STATUS_CATEGORY = 588;</code>
     */
    CALLOUT_STATUS_CATEGORY(117, 588),
    /**
     *
     *
     * <pre>
     * The callout status category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Callout status category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CALLOUT_STATUS_CATEGORY_NAME = 589;</code>
     */
    CALLOUT_STATUS_CATEGORY_NAME(118, 589),
    /**
     *
     *
     * <pre>
     * Mobile carrier ID.
     *
     *
     *
     * Corresponds to "Carrier ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CARRIER_ID = 369;</code>
     */
    CARRIER_ID(119, 369),
    /**
     *
     *
     * <pre>
     * Name of the mobile carrier.
     *
     *
     *
     * Corresponds to "Carrier" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CARRIER_NAME = 368;</code>
     */
    CARRIER_NAME(120, 368),
    /**
     *
     *
     * <pre>
     * Inventory segmentation by channel.
     *
     *
     *
     * Corresponds to "Channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHANNEL = 501;</code>
     */
    CHANNEL(121, 501),
    /**
     *
     *
     * <pre>
     * Child Publisher Network Code
     *
     *
     *
     * Corresponds to "Child network code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHILD_NETWORK_CODE = 542;</code>
     */
    CHILD_NETWORK_CODE(122, 542),
    /**
     *
     *
     * <pre>
     * Child Publisher Network ID
     *
     *
     *
     * Corresponds to "Child network ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CHILD_NETWORK_ID = 544;</code>
     */
    CHILD_NETWORK_ID(123, 544),
    /**
     *
     *
     * <pre>
     * Child Partner Network Name
     *
     *
     *
     * Corresponds to "Child network" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHILD_PARTNER_NAME = 543;</code>
     */
    CHILD_PARTNER_NAME(124, 543),
    /**
     *
     *
     * <pre>
     * The criteria ID of the city in which the ad served.
     *
     *
     *
     * Corresponds to "City ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CITY_ID = 459;</code>
     */
    CITY_ID(125, 459),
    /**
     *
     *
     * <pre>
     * The name of the city in which the ad served.
     *
     *
     *
     * Corresponds to "City" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CITY_NAME = 452;</code>
     */
    CITY_NAME(126, 452),
    /**
     *
     *
     * <pre>
     * The ID of an advertiser, classified by Google, associated with a creative
     *  transacted
     *
     *
     *
     * Corresponds to "Advertiser ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CLASSIFIED_ADVERTISER_ID = 133;</code>
     */
    CLASSIFIED_ADVERTISER_ID(127, 133),
    /**
     *
     *
     * <pre>
     * The name of an advertiser, classified by Google, associated with a
     *  creative transacted
     *
     *
     *
     * Corresponds to "Advertiser (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CLASSIFIED_ADVERTISER_NAME = 134;</code>
     */
    CLASSIFIED_ADVERTISER_NAME(128, 134),
    /**
     *
     *
     * <pre>
     * ID of the brand, as classified by Google,
     *
     *
     *
     * Corresponds to "Brand ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CLASSIFIED_BRAND_ID = 243;</code>
     */
    CLASSIFIED_BRAND_ID(129, 243),
    /**
     *
     *
     * <pre>
     * Name of the brand, as classified by Google,
     *
     *
     *
     * Corresponds to "Brand (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CLASSIFIED_BRAND_NAME = 244;</code>
     */
    CLASSIFIED_BRAND_NAME(130, 244),
    /**
     *
     *
     * <pre>
     * The display name of the CMS content.
     *
     *
     *
     * Corresponds to "Content source name" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_CMS_NAME = 643;</code>
     */
    CONTENT_CMS_NAME(131, 643),
    /**
     *
     *
     * <pre>
     * The CMS content ID of the video content.
     *
     *
     *
     * Corresponds to "ID of the video in the content source" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_CMS_VIDEO_ID = 644;</code>
     */
    CONTENT_CMS_VIDEO_ID(132, 644),
    /**
     *
     *
     * <pre>
     * ID of the video content served.
     *
     *
     *
     * Corresponds to "Content ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CONTENT_ID = 246;</code>
     */
    CONTENT_ID(133, 246),
    /**
     *
     *
     * <pre>
     * Content mapping presence ENUM value
     *
     *
     *
     * Corresponds to "Content mapping presence value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CONTENT_MAPPING_PRESENCE = 731;</code>
     */
    CONTENT_MAPPING_PRESENCE(134, 731),
    /**
     *
     *
     * <pre>
     * Content mapping presence name
     *
     *
     *
     * Corresponds to "Content mapping presence" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_MAPPING_PRESENCE_NAME = 732;</code>
     */
    CONTENT_MAPPING_PRESENCE_NAME(135, 732),
    /**
     *
     *
     * <pre>
     * Name of the video content served.
     *
     *
     *
     * Corresponds to "Content" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_NAME = 247;</code>
     */
    CONTENT_NAME(136, 247),
    /**
     *
     *
     * <pre>
     * The continent in which the ad served (derived from country).
     *
     *
     *
     * Corresponds to "Continent value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CONTINENT = 469;</code>
     */
    CONTINENT(137, 469),
    /**
     *
     *
     * <pre>
     * The name of the continent in which the ad served (derived from country).
     *
     *
     *
     * Corresponds to "Continent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTINENT_NAME = 470;</code>
     */
    CONTINENT_NAME(138, 470),
    /**
     *
     *
     * <pre>
     * The ISO code of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>COUNTRY_CODE = 466;</code>
     */
    COUNTRY_CODE(139, 466),
    /**
     *
     *
     * <pre>
     * The criteria ID of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>COUNTRY_ID = 11;</code>
     */
    COUNTRY_ID(140, 11),
    /**
     *
     *
     * <pre>
     * The name of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>COUNTRY_NAME = 12;</code>
     */
    COUNTRY_NAME(141, 12),
    /**
     *
     *
     * <pre>
     * Enum value of creative billing type
     *
     *
     *
     * Corresponds to "Creative billing type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_BILLING_TYPE = 366;</code>
     */
    CREATIVE_BILLING_TYPE(142, 366),
    /**
     *
     *
     * <pre>
     * Localized string value of creative billing type
     *
     *
     *
     * Corresponds to "Creative billing type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_BILLING_TYPE_NAME = 367;</code>
     */
    CREATIVE_BILLING_TYPE_NAME(143, 367),
    /**
     *
     *
     * <pre>
     * Represents the click-through URL of a creative
     *
     *
     *
     * Corresponds to "Creative click through url" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_CLICK_THROUGH_URL = 174;</code>
     */
    CREATIVE_CLICK_THROUGH_URL(144, 174),
    /**
     *
     *
     * <pre>
     * The ID of a creative
     *
     *
     *
     * Corresponds to "Creative ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CREATIVE_ID = 138;</code>
     */
    CREATIVE_ID(145, 138),
    /**
     *
     *
     * <pre>
     * Creative name
     *
     *
     *
     * Corresponds to "Creative" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_NAME = 139;</code>
     */
    CREATIVE_NAME(146, 139),
    /**
     *
     *
     * <pre>
     * Creative Policies filtering.
     *
     *
     *
     * Corresponds to "Creative policies filtering value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_POLICIES_FILTERING = 711;</code>
     */
    CREATIVE_POLICIES_FILTERING(147, 711),
    /**
     *
     *
     * <pre>
     * Localized name of the Creative Policies filtering.
     *
     *
     *
     * Corresponds to "Creative policies filtering" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_POLICIES_FILTERING_NAME = 712;</code>
     */
    CREATIVE_POLICIES_FILTERING_NAME(148, 712),
    /**
     *
     *
     * <pre>
     * Creative Protections filtering (Publisher Blocks Enforcement).
     *
     *
     *
     * Corresponds to "Creative protections filtering value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_PROTECTIONS_FILTERING = 704;</code>
     */
    CREATIVE_PROTECTIONS_FILTERING(149, 704),
    /**
     *
     *
     * <pre>
     * Localized name of the Creative Protections filtering.
     *
     *
     *
     * Corresponds to "Creative protections filtering" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_PROTECTIONS_FILTERING_NAME = 705;</code>
     */
    CREATIVE_PROTECTIONS_FILTERING_NAME(150, 705),
    /**
     *
     *
     * <pre>
     * ENUM describing whether the creative is part of a creative set and if so,
     *  what its role in the creative set is.
     *
     *
     *
     * Corresponds to "Creative set role type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_SET_ROLE_TYPE = 686;</code>
     */
    CREATIVE_SET_ROLE_TYPE(151, 686),
    /**
     *
     *
     * <pre>
     * Localized name describing whether the creative is part of a creative set
     *  and if so, what its role in the creative set is.
     *
     *
     *
     * Corresponds to "Creative set role type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_SET_ROLE_TYPE_NAME = 687;</code>
     */
    CREATIVE_SET_ROLE_TYPE_NAME(152, 687),
    /**
     *
     *
     * <pre>
     * Creative technology ENUM
     *
     *
     *
     * Corresponds to "Creative technology value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_TECHNOLOGY = 148;</code>
     */
    CREATIVE_TECHNOLOGY(153, 148),
    /**
     *
     *
     * <pre>
     * Creative technology locallized name
     *
     *
     *
     * Corresponds to "Creative technology" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_TECHNOLOGY_NAME = 149;</code>
     */
    CREATIVE_TECHNOLOGY_NAME(154, 149),
    /**
     *
     *
     * <pre>
     * Third party vendor name of a creative
     *
     *
     *
     * Corresponds to "Creative third party vendor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_THIRD_PARTY_VENDOR = 361;</code>
     */
    CREATIVE_THIRD_PARTY_VENDOR(155, 361),
    /**
     *
     *
     * <pre>
     * Enum value of creative type
     *
     *
     *
     * Corresponds to "Creative type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_TYPE = 344;</code>
     */
    CREATIVE_TYPE(156, 344),
    /**
     *
     *
     * <pre>
     * Localized string name of creative type
     *
     *
     *
     * Corresponds to "Creative type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_TYPE_NAME = 345;</code>
     */
    CREATIVE_TYPE_NAME(157, 345),
    /**
     *
     *
     * <pre>
     * Creative vendor ID.
     *
     *
     *
     * Corresponds to "Creative vendor ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CREATIVE_VENDOR_ID = 706;</code>
     */
    CREATIVE_VENDOR_ID(158, 706),
    /**
     *
     *
     * <pre>
     * Name of the Creative vendor.
     *
     *
     *
     * Corresponds to "Creative vendor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_VENDOR_NAME = 707;</code>
     */
    CREATIVE_VENDOR_NAME(159, 707),
    /**
     *
     *
     * <pre>
     * The third party where Google Ad Manager was redirected for the creative,
     *  based on the domain.
     *
     *
     *
     * Corresponds to "Creative video redirect third party" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_VIDEO_REDIRECT_THIRD_PARTY = 562;</code>
     */
    CREATIVE_VIDEO_REDIRECT_THIRD_PARTY(160, 562),
    /**
     *
     *
     * <pre>
     * The ID of a Curation partner
     *
     *
     *
     * Corresponds to "Curation partner ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CURATOR_ID = 572;</code>
     */
    CURATOR_ID(161, 572),
    /**
     *
     *
     * <pre>
     * The name of a Curation partner
     *
     *
     *
     * Corresponds to "Curation partner" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CURATOR_NAME = 573;</code>
     */
    CURATOR_NAME(162, 573),
    /**
     *
     *
     * <pre>
     * Custom event ID
     *
     *
     *
     * Corresponds to "Custom event id" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CUSTOM_EVENT_ID = 737;</code>
     */
    CUSTOM_EVENT_ID(163, 737),
    /**
     *
     *
     * <pre>
     * Custom event name
     *
     *
     *
     * Corresponds to "Custom event" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_EVENT_NAME = 735;</code>
     */
    CUSTOM_EVENT_NAME(164, 735),
    /**
     *
     *
     * <pre>
     * Custom event type
     *
     *
     *
     * Corresponds to "Custom event type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CUSTOM_EVENT_TYPE = 736;</code>
     */
    CUSTOM_EVENT_TYPE(165, 736),
    /**
     *
     *
     * <pre>
     * Localized name of the custom event type
     *
     *
     *
     * Corresponds to "Custom event type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_EVENT_TYPE_NAME = 738;</code>
     */
    CUSTOM_EVENT_TYPE_NAME(166, 738),
    /**
     *
     *
     * <pre>
     * The ID of an ad spot. An ad spot can be added to an ad break template, as
     *  well as directly targeted by a video line item.
     *
     *
     *
     * Corresponds to "Custom spot ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CUSTOM_SPOT_ID = 423;</code>
     */
    CUSTOM_SPOT_ID(167, 423),
    /**
     *
     *
     * <pre>
     * The name of an ad spot. An ad spot can be added to an ad break
     *  template, as well as directly targeted by a video line item.
     *
     *
     *
     * Corresponds to "Custom spot" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_SPOT_NAME = 424;</code>
     */
    CUSTOM_SPOT_NAME(168, 424),
    /**
     *
     *
     * <pre>
     * Breaks down reporting data by date.
     *
     *
     *
     * Corresponds to "Date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>DATE = 3;</code>
     */
    DATE(169, 3),
    /**
     *
     *
     * <pre>
     * Breaks down reporting data by day of the week. Monday is 1 and 7 is
     *  Sunday.
     *
     *
     *
     * Corresponds to "Day of week" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DAY_OF_WEEK = 4;</code>
     */
    DAY_OF_WEEK(170, 4),
    /**
     *
     *
     * <pre>
     * The ID of the buyer of a deal.
     *
     *
     *
     * Corresponds to "Deal buyer ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEAL_BUYER_ID = 240;</code>
     */
    DEAL_BUYER_ID(171, 240),
    /**
     *
     *
     * <pre>
     * The name of the buyer of a deal.
     *
     *
     *
     * Corresponds to "Deal buyer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_BUYER_NAME = 241;</code>
     */
    DEAL_BUYER_NAME(172, 241),
    /**
     *
     *
     * <pre>
     * Deal ID
     *
     *
     *
     * Corresponds to "Deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_ID = 436;</code>
     */
    DEAL_ID(173, 436),
    /**
     *
     *
     * <pre>
     * Deal name
     *
     *
     *
     * Corresponds to "Deal" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_NAME = 437;</code>
     */
    DEAL_NAME(174, 437),
    /**
     *
     *
     * <pre>
     * The ID of the secure signals that were sent to the bidder who won the
     *  impression.
     *
     *
     *
     * Corresponds to "Secure signal ID (delivered)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DELIVERED_SECURE_SIGNAL_ID = 309;</code>
     */
    DELIVERED_SECURE_SIGNAL_ID(175, 309),
    /**
     *
     *
     * <pre>
     * The name of the secure signals that were sent to the bidder who won the
     *  impression.
     *
     *
     *
     * Corresponds to "Secure signal name (delivered)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DELIVERED_SECURE_SIGNAL_NAME = 310;</code>
     */
    DELIVERED_SECURE_SIGNAL_NAME(176, 310),
    /**
     *
     *
     * <pre>
     * Demand channel.
     *
     *
     *
     * Corresponds to "Demand channel value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_CHANNEL = 9;</code>
     */
    DEMAND_CHANNEL(177, 9),
    /**
     *
     *
     * <pre>
     * Demand channel name.
     *
     *
     *
     * Corresponds to "Demand channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_CHANNEL_NAME = 10;</code>
     */
    DEMAND_CHANNEL_NAME(178, 10),
    /**
     *
     *
     * <pre>
     * Demand source.
     *
     *
     *
     * Corresponds to "Demand source value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_SOURCE = 592;</code>
     */
    DEMAND_SOURCE(179, 592),
    /**
     *
     *
     * <pre>
     * Demand source name.
     *
     *
     *
     * Corresponds to "Demand source" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_SOURCE_NAME = 593;</code>
     */
    DEMAND_SOURCE_NAME(180, 593),
    /**
     *
     *
     * <pre>
     * Demand subchannel.
     *
     *
     *
     * Corresponds to "Demand subchannel value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_SUBCHANNEL = 22;</code>
     */
    DEMAND_SUBCHANNEL(181, 22),
    /**
     *
     *
     * <pre>
     * Demand subchannel name.
     *
     *
     *
     * Corresponds to "Demand subchannel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_SUBCHANNEL_NAME = 23;</code>
     */
    DEMAND_SUBCHANNEL_NAME(182, 23),
    /**
     *
     *
     * <pre>
     * The device on which an ad was served.
     *
     *
     *
     * Corresponds to "Device value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEVICE = 226;</code>
     */
    DEVICE(183, 226),
    /**
     *
     *
     * <pre>
     * The device category to which an ad is being targeted.
     *
     *
     *
     * Corresponds to "Device category value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEVICE_CATEGORY = 15;</code>
     */
    DEVICE_CATEGORY(184, 15),
    /**
     *
     *
     * <pre>
     * The name of the category of device (smartphone, feature phone, tablet, or
     *  desktop) to which an ad is being targeted.
     *
     *
     *
     * Corresponds to "Device category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_CATEGORY_NAME = 16;</code>
     */
    DEVICE_CATEGORY_NAME(185, 16),
    /**
     *
     *
     * <pre>
     * Device manufacturer ID
     *
     *
     *
     * Corresponds to "Device manufacturer ID" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEVICE_MANUFACTURER_ID = 525;</code>
     */
    DEVICE_MANUFACTURER_ID(186, 525),
    /**
     *
     *
     * <pre>
     * Device manufacturer name
     *
     *
     *
     * Corresponds to "Device manufacturer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_MANUFACTURER_NAME = 526;</code>
     */
    DEVICE_MANUFACTURER_NAME(187, 526),
    /**
     *
     *
     * <pre>
     * Device model ID
     *
     *
     *
     * Corresponds to "Device model ID" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEVICE_MODEL_ID = 527;</code>
     */
    DEVICE_MODEL_ID(188, 527),
    /**
     *
     *
     * <pre>
     * Device model name
     *
     *
     *
     * Corresponds to "Device model" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_MODEL_NAME = 528;</code>
     */
    DEVICE_MODEL_NAME(189, 528),
    /**
     *
     *
     * <pre>
     * The localized name of the device on which an ad was served.
     *
     *
     *
     * Corresponds to "Device" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_NAME = 225;</code>
     */
    DEVICE_NAME(190, 225),
    /**
     *
     *
     * <pre>
     * The ID of DSP Seat
     *
     *
     *
     * Corresponds to "DSP seat ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DSP_SEAT_ID = 564;</code>
     */
    DSP_SEAT_ID(191, 564),
    /**
     *
     *
     * <pre>
     * Categorization of inventory sources based on AdX dynamic allocation
     *  backfill type.
     *
     *
     *
     * Corresponds to "Dynamic allocation value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DYNAMIC_ALLOCATION_TYPE = 502;</code>
     */
    DYNAMIC_ALLOCATION_TYPE(192, 502),
    /**
     *
     *
     * <pre>
     * Localized name of the dynamic allocation type.
     *
     *
     *
     * Corresponds to "Dynamic allocation" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DYNAMIC_ALLOCATION_TYPE_NAME = 503;</code>
     */
    DYNAMIC_ALLOCATION_TYPE_NAME(193, 503),
    /**
     *
     *
     * <pre>
     * Status of Encrypted Signals for Publishers delivery.
     *
     *
     *
     * Corresponds to "Secure signal delivery value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ESP_DELIVERY = 623;</code>
     */
    ESP_DELIVERY(194, 623),
    /**
     *
     *
     * <pre>
     * Localized name of the ESP delivery status.
     *
     *
     *
     * Corresponds to "Secure signal delivery" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ESP_DELIVERY_NAME = 624;</code>
     */
    ESP_DELIVERY_NAME(195, 624),
    /**
     *
     *
     * <pre>
     * Whether Encrypted Signals for Publishers are present on the ad request.
     *
     *
     *
     * Corresponds to "Secure signal presence value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ESP_PRESENCE = 625;</code>
     */
    ESP_PRESENCE(196, 625),
    /**
     *
     *
     * <pre>
     * Localized name of the ESP presence status.
     *
     *
     *
     * Corresponds to "Secure signal presence" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ESP_PRESENCE_NAME = 626;</code>
     */
    ESP_PRESENCE_NAME(197, 626),
    /**
     *
     *
     * <pre>
     * Exchange bidding deal ID.
     *
     *
     *
     * Corresponds to "Exchange bidding deal id" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_ID = 715;</code>
     */
    EXCHANGE_BIDDING_DEAL_ID(198, 715),
    /**
     *
     *
     * <pre>
     * Exchange bidding deal type.
     *
     *
     *
     * Corresponds to "Exchange bidding deal type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_TYPE = 714;</code>
     */
    EXCHANGE_BIDDING_DEAL_TYPE(199, 714),
    /**
     *
     *
     * <pre>
     * Localized name of the exchange bidding deal type.
     *
     *
     *
     * Corresponds to "Exchange bidding deal type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_TYPE_NAME = 723;</code>
     */
    EXCHANGE_BIDDING_DEAL_TYPE_NAME(200, 723),
    /**
     *
     *
     * <pre>
     * ID of the yield partner as classified by Google
     *
     *
     *
     * Corresponds to "Yield partner ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>EXCHANGE_THIRD_PARTY_COMPANY_ID = 185;</code>
     */
    EXCHANGE_THIRD_PARTY_COMPANY_ID(201, 185),
    /**
     *
     *
     * <pre>
     * Name of the yield partner as classified by Google
     *
     *
     *
     * Corresponds to "Yield partner (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_THIRD_PARTY_COMPANY_NAME = 186;</code>
     */
    EXCHANGE_THIRD_PARTY_COMPANY_NAME(202, 186),
    /**
     *
     *
     * <pre>
     * The ID of the first look pricing rule.
     *
     *
     *
     * Corresponds to "First look pricing rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>FIRST_LOOK_PRICING_RULE_ID = 248;</code>
     */
    FIRST_LOOK_PRICING_RULE_ID(203, 248),
    /**
     *
     *
     * <pre>
     * The name of the first look pricing rule.
     *
     *
     *
     * Corresponds to "First look pricing rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>FIRST_LOOK_PRICING_RULE_NAME = 249;</code>
     */
    FIRST_LOOK_PRICING_RULE_NAME(204, 249),
    /**
     *
     *
     * <pre>
     * Whether a first-party user identifier was present on a given
     *  ad-request.
     *
     *
     *
     * Corresponds to "First-party ID status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>FIRST_PARTY_ID_STATUS = 404;</code>
     */
    FIRST_PARTY_ID_STATUS(205, 404),
    /**
     *
     *
     * <pre>
     * The localized name of whether a first-party user identifier was present
     *  on a given ad-request.
     *
     *
     *
     * Corresponds to "First-party ID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>FIRST_PARTY_ID_STATUS_NAME = 405;</code>
     */
    FIRST_PARTY_ID_STATUS_NAME(206, 405),
    /**
     *
     *
     * <pre>
     * User gender enum value returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Gender value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>GENDER = 509;</code>
     */
    GENDER(207, 509),
    /**
     *
     *
     * <pre>
     * Localized user gender returned from Google Analytics. For example,
     *  "male", "female".
     *
     *
     *
     * Corresponds to "Gender" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>GENDER_NAME = 583;</code>
     */
    GENDER_NAME(208, 583),
    /**
     *
     *
     * <pre>
     * The ID of a Google Analytics stream. For example, web site or mobile app
     *
     *
     *
     * Corresponds to "Google Analytics stream ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_STREAM_ID = 519;</code>
     */
    GOOGLE_ANALYTICS_STREAM_ID(209, 519),
    /**
     *
     *
     * <pre>
     * The name of a Google Analytics stream. For example,
     *  web site or mobile app.
     *
     *
     *
     * Corresponds to "Google Analytics stream" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_STREAM_NAME = 520;</code>
     */
    GOOGLE_ANALYTICS_STREAM_NAME(210, 520),
    /**
     *
     *
     * <pre>
     * The ID of the header bidding trafficking yield partner.
     *
     *
     *
     * Corresponds to "Yield partner ID (header bidding trafficking)" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>HBT_YIELD_PARTNER_ID = 659;</code>
     */
    HBT_YIELD_PARTNER_ID(211, 659),
    /**
     *
     *
     * <pre>
     * The name of the header bidding trafficking yield partner.
     *
     *
     *
     * Corresponds to "Yield partner (header bidding trafficking)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>HBT_YIELD_PARTNER_NAME = 660;</code>
     */
    HBT_YIELD_PARTNER_NAME(212, 660),
    /**
     *
     *
     * <pre>
     * Header Bidder integration type.
     *
     *
     *
     * Corresponds to "Header bidder integration type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>HEADER_BIDDER_INTEGRATION_TYPE = 718;</code>
     */
    HEADER_BIDDER_INTEGRATION_TYPE(213, 718),
    /**
     *
     *
     * <pre>
     * Localized name of the Header Bidder integration type.
     *
     *
     *
     * Corresponds to "Header bidder integration type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>HEADER_BIDDER_INTEGRATION_TYPE_NAME = 719;</code>
     */
    HEADER_BIDDER_INTEGRATION_TYPE_NAME(214, 719),
    /**
     *
     *
     * <pre>
     * Breaks down reporting data by hour in one day.
     *
     *
     *
     * Corresponds to "Hour" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>HOUR = 100;</code>
     */
    HOUR(215, 100),
    /**
     *
     *
     * <pre>
     * Impression Counting Method ENUM.
     *
     *
     *
     * Corresponds to "Impression counting method value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>IMPRESSION_COUNTING_METHOD = 577;</code>
     */
    IMPRESSION_COUNTING_METHOD(216, 577),
    /**
     *
     *
     * <pre>
     * Localized impression counting method name.
     *
     *
     *
     * Corresponds to "Impression counting method" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>IMPRESSION_COUNTING_METHOD_NAME = 578;</code>
     */
    IMPRESSION_COUNTING_METHOD_NAME(217, 578),
    /**
     *
     *
     * <pre>
     * The interaction type of an ad.
     *
     *
     *
     * Corresponds to "Interaction type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INTERACTION_TYPE = 223;</code>
     */
    INTERACTION_TYPE(218, 223),
    /**
     *
     *
     * <pre>
     * The localized name of the interaction type of an ad.
     *
     *
     *
     * Corresponds to "Interaction type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INTERACTION_TYPE_NAME = 224;</code>
     */
    INTERACTION_TYPE_NAME(219, 224),
    /**
     *
     *
     * <pre>
     * User interest returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Interests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INTEREST = 510;</code>
     */
    INTEREST(220, 510),
    /**
     *
     *
     * <pre>
     * Inventory format.
     *  The format of the ad unit (e.g, banner) where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory format value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_FORMAT = 17;</code>
     */
    INVENTORY_FORMAT(221, 17),
    /**
     *
     *
     * <pre>
     * Inventory format name.
     *  The format of the ad unit (e.g, banner) where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory format" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_FORMAT_NAME = 18;</code>
     */
    INVENTORY_FORMAT_NAME(222, 18),
    /**
     *
     *
     * <pre>
     * The ID of the inventory share assignment.
     *
     *
     *
     * Corresponds to "Inventory share assignment ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>INVENTORY_SHARE_ASSIGNMENT_ID = 648;</code>
     */
    INVENTORY_SHARE_ASSIGNMENT_ID(223, 648),
    /**
     *
     *
     * <pre>
     * The name of the inventory share assignment.
     *
     *
     *
     * Corresponds to "Inventory share assignment" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_ASSIGNMENT_NAME = 649;</code>
     */
    INVENTORY_SHARE_ASSIGNMENT_NAME(224, 649),
    /**
     *
     *
     * <pre>
     * The result of an inventory share.
     *
     *
     *
     * Corresponds to "Inventory share outcome value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_OUTCOME = 603;</code>
     */
    INVENTORY_SHARE_OUTCOME(225, 603),
    /**
     *
     *
     * <pre>
     * The localized name of the result of an inventory share.
     *
     *
     *
     * Corresponds to "Inventory share outcome" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_OUTCOME_NAME = 604;</code>
     */
    INVENTORY_SHARE_OUTCOME_NAME(226, 604),
    /**
     *
     *
     * <pre>
     * The partner ad server of the inventory share.
     *
     *
     *
     * Corresponds to "Inventory share partner ad server value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_AD_SERVER = 652;</code>
     */
    INVENTORY_SHARE_PARTNER_AD_SERVER(227, 652),
    /**
     *
     *
     * <pre>
     * The localized name of the partner ad server.
     *
     *
     *
     * Corresponds to "Inventory share partner ad server" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_AD_SERVER_NAME = 653;</code>
     */
    INVENTORY_SHARE_PARTNER_AD_SERVER_NAME(228, 653),
    /**
     *
     *
     * <pre>
     * The target share percent of the inventory share assignment
     *
     *
     *
     * Corresponds to "Partner target share percent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TARGET_SHARE_PERCENT = 654;</code>
     */
    INVENTORY_SHARE_TARGET_SHARE_PERCENT(229, 654),
    /**
     *
     *
     * <pre>
     * The type of the inventory share.
     *
     *
     *
     * Corresponds to "Inventory share type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TYPE = 650;</code>
     */
    INVENTORY_SHARE_TYPE(230, 650),
    /**
     *
     *
     * <pre>
     * The localized name of the inventory share type.
     *
     *
     *
     * Corresponds to "Inventory share type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TYPE_NAME = 651;</code>
     */
    INVENTORY_SHARE_TYPE_NAME(231, 651),
    /**
     *
     *
     * <pre>
     * Inventory type.
     *  The kind of web page or device where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory type (expanded) value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_TYPE = 19;</code>
     */
    INVENTORY_TYPE(232, 19),
    /**
     *
     *
     * <pre>
     * Inventory type name.
     *  The kind of web page or device where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory type (expanded)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_TYPE_NAME = 20;</code>
     */
    INVENTORY_TYPE_NAME(233, 20),
    /**
     *
     *
     * <pre>
     * Whether traffic is Adx Direct.
     *
     *
     *
     * Corresponds to "Is AdX Direct" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_ADX_DIRECT = 382;</code>
     */
    IS_ADX_DIRECT(234, 382),
    /**
     *
     *
     * <pre>
     * If curation was targeted by the buyer when buying the impression
     *
     *
     *
     * Corresponds to "Is curation targeted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_CURATION_TARGETED = 574;</code>
     */
    IS_CURATION_TARGETED(235, 574),
    /**
     *
     *
     * <pre>
     * Whether the query was dropped.
     *
     *
     *
     * Corresponds to "Is Dropped" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_DROPPED = 464;</code>
     */
    IS_DROPPED(236, 464),
    /**
     *
     *
     * <pre>
     * Whether traffic is First Look.
     *
     *
     *
     * Corresponds to "Is First Look" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_FIRST_LOOK_DEAL = 401;</code>
     */
    IS_FIRST_LOOK_DEAL(237, 401),
    /**
     *
     *
     * <pre>
     * The Custom Targeting Value ID
     *
     *
     *
     * Corresponds to "Key-values ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>KEY_VALUES_ID = 214;</code>
     */
    KEY_VALUES_ID(238, 214),
    /**
     *
     *
     * <pre>
     * The Custom Targeting Value formatted like `{keyName}={valueName}`
     *
     *
     *
     * Corresponds to "Key-values" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>KEY_VALUES_NAME = 215;</code>
     */
    KEY_VALUES_NAME(239, 215),
    /**
     *
     *
     * <pre>
     * The agency of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item agency" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_AGENCY = 663;</code>
     */
    LINE_ITEM_AGENCY(240, 663),
    /**
     *
     *
     * <pre>
     * Whether a Line item is archived.
     *
     *
     *
     * Corresponds to "Line item is archived" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_ARCHIVED = 188;</code>
     */
    LINE_ITEM_ARCHIVED(241, 188),
    /**
     *
     *
     * <pre>
     * Line item comanion delivery option ENUM value.
     *
     *
     *
     * Corresponds to "Line item companion delivery option value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COMPANION_DELIVERY_OPTION = 204;</code>
     */
    LINE_ITEM_COMPANION_DELIVERY_OPTION(242, 204),
    /**
     *
     *
     * <pre>
     * Localized line item comanion delivery option name.
     *
     *
     *
     * Corresponds to "Line item companion delivery option" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME = 205;</code>
     */
    LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME(243, 205),
    /**
     *
     *
     * <pre>
     * The computed status of the LineItem.
     *
     *
     *
     * Corresponds to "Line item computed status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COMPUTED_STATUS = 250;</code>
     */
    LINE_ITEM_COMPUTED_STATUS(244, 250),
    /**
     *
     *
     * <pre>
     * The localized name of the computed status of the LineItem.
     *
     *
     *
     * Corresponds to "Line item computed status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COMPUTED_STATUS_NAME = 251;</code>
     */
    LINE_ITEM_COMPUTED_STATUS_NAME(245, 251),
    /**
     *
     *
     * <pre>
     * The contracted units bought for the Line item.
     *
     *
     *
     * Corresponds to "Line item contracted quantity" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_CONTRACTED_QUANTITY = 92;</code>
     */
    LINE_ITEM_CONTRACTED_QUANTITY(246, 92),
    /**
     *
     *
     * <pre>
     * The cost per unit of the Line item.
     *
     *
     *
     * Corresponds to "Line item rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_COST_PER_UNIT = 85;</code>
     */
    LINE_ITEM_COST_PER_UNIT(247, 85),
    /**
     *
     *
     * <pre>
     * Line item cost type ENUM value.
     *
     *
     *
     * Corresponds to "Line item cost type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COST_TYPE = 212;</code>
     */
    LINE_ITEM_COST_TYPE(248, 212),
    /**
     *
     *
     * <pre>
     * Localized line item cost type name.
     *
     *
     *
     * Corresponds to "Line item cost type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COST_TYPE_NAME = 213;</code>
     */
    LINE_ITEM_COST_TYPE_NAME(249, 213),
    /**
     *
     *
     * <pre>
     * Represent the end date of a creative associated with line item
     *
     *
     *
     * Corresponds to "Line item creative end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_END_DATE = 176;</code>
     */
    LINE_ITEM_CREATIVE_END_DATE(250, 176),
    /**
     *
     *
     * <pre>
     * The creative rotation type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item creative rotation type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_ROTATION_TYPE = 189;</code>
     */
    LINE_ITEM_CREATIVE_ROTATION_TYPE(251, 189),
    /**
     *
     *
     * <pre>
     * The localized name of the creative rotation type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item creative rotation type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME = 190;</code>
     */
    LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME(252, 190),
    /**
     *
     *
     * <pre>
     * Represent the start date of a creative associated with line item
     *
     *
     *
     * Corresponds to "Line item creative start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_START_DATE = 175;</code>
     */
    LINE_ITEM_CREATIVE_START_DATE(253, 175),
    /**
     *
     *
     * <pre>
     * The 3 letter currency code of the Line Item
     *
     *
     *
     * Corresponds to "Line item currency code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_CURRENCY_CODE = 180;</code>
     */
    LINE_ITEM_CURRENCY_CODE(254, 180),
    /**
     *
     *
     * <pre>
     * The progress made for the delivery of the Line item.
     *
     *
     *
     * Corresponds to "Line item delivery indicator" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_INDICATOR = 87;</code>
     */
    LINE_ITEM_DELIVERY_INDICATOR(255, 87),
    /**
     *
     *
     * <pre>
     * The delivery rate type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item delivery rate type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_RATE_TYPE = 191;</code>
     */
    LINE_ITEM_DELIVERY_RATE_TYPE(256, 191),
    /**
     *
     *
     * <pre>
     * The localized name of the delivery rate type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item delivery rate type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_RATE_TYPE_NAME = 192;</code>
     */
    LINE_ITEM_DELIVERY_RATE_TYPE_NAME(257, 192),
    /**
     *
     *
     * <pre>
     * The discount of the LineItem in whole units in the LineItem's currency
     *  code, or if unspecified the Network's currency code.
     *
     *
     *
     * Corresponds to "Line item discount (absolute)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_DISCOUNT_ABSOLUTE = 195;</code>
     */
    LINE_ITEM_DISCOUNT_ABSOLUTE(258, 195),
    /**
     *
     *
     * <pre>
     * The discount of the LineItem in percentage.
     *
     *
     *
     * Corresponds to "Line item discount (percentage)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `WHOLE_PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_DISCOUNT_PERCENTAGE = 196;</code>
     */
    LINE_ITEM_DISCOUNT_PERCENTAGE(259, 196),
    /**
     *
     *
     * <pre>
     * The end date of the Line item.
     *
     *
     *
     * Corresponds to "Line item end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_END_DATE = 81;</code>
     */
    LINE_ITEM_END_DATE(260, 81),
    /**
     *
     *
     * <pre>
     * The end date and time of the Line item.
     *
     *
     *
     * Corresponds to "Line item end time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>LINE_ITEM_END_DATE_TIME = 83;</code>
     */
    LINE_ITEM_END_DATE_TIME(261, 83),
    /**
     *
     *
     * <pre>
     * The ENUM value of the environment a LineItem is targeting.
     *
     *
     *
     * Corresponds to "Line item environment type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_ENVIRONMENT_TYPE = 201;</code>
     */
    LINE_ITEM_ENVIRONMENT_TYPE(262, 201),
    /**
     *
     *
     * <pre>
     * The localized name of the environment a LineItem is targeting.
     *
     *
     *
     * Corresponds to "Line item environment type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_ENVIRONMENT_TYPE_NAME = 202;</code>
     */
    LINE_ITEM_ENVIRONMENT_TYPE_NAME(263, 202),
    /**
     *
     *
     * <pre>
     * The deal ID of the Line item. Set for Programmatic Direct campaigns.
     *
     *
     *
     * Corresponds to "Line item deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>LINE_ITEM_EXTERNAL_DEAL_ID = 97;</code>
     */
    LINE_ITEM_EXTERNAL_DEAL_ID(264, 97),
    /**
     *
     *
     * <pre>
     * The external ID of the Line item.
     *
     *
     *
     * Corresponds to "Line item external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_EXTERNAL_ID = 86;</code>
     */
    LINE_ITEM_EXTERNAL_ID(265, 86),
    /**
     *
     *
     * <pre>
     * The frequency cap of the Line item (descriptive string).
     *
     *
     *
     * Corresponds to "Line item frequency cap" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_FREQUENCY_CAP = 256;</code>
     */
    LINE_ITEM_FREQUENCY_CAP(266, 256),
    /**
     *
     *
     * <pre>
     * Line item ID.
     *
     *
     *
     * Corresponds to "Line item ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>LINE_ITEM_ID = 1;</code>
     */
    LINE_ITEM_ID(267, 1),
    /**
     *
     *
     * <pre>
     * Line item labels.
     *
     *
     *
     * Corresponds to "Line item labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_LABELS = 667;</code>
     */
    LINE_ITEM_LABELS(268, 667),
    /**
     *
     *
     * <pre>
     * Line item label IDs.
     *
     *
     *
     * Corresponds to "Line item label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_LABEL_IDS = 665;</code>
     */
    LINE_ITEM_LABEL_IDS(269, 665),
    /**
     *
     *
     * <pre>
     * The application that last modified the Line Item.
     *
     *
     *
     * Corresponds to "Line item last modified by app" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_LAST_MODIFIED_BY_APP = 181;</code>
     */
    LINE_ITEM_LAST_MODIFIED_BY_APP(270, 181),
    /**
     *
     *
     * <pre>
     * The total number of clicks delivered of the lifetime of the Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_CLICKS = 95;</code>
     */
    LINE_ITEM_LIFETIME_CLICKS(271, 95),
    /**
     *
     *
     * <pre>
     * The total number of impressions delivered over the lifetime of the
     *  Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_IMPRESSIONS = 94;</code>
     */
    LINE_ITEM_LIFETIME_IMPRESSIONS(272, 94),
    /**
     *
     *
     * <pre>
     * The total number of viewable impressions delivered over the lifetime of
     *  the Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS = 96;</code>
     */
    LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS(273, 96),
    /**
     *
     *
     * <pre>
     * Whether or not the Line item is Makegood. Makegood refers to free
     *  inventory offered to buyers to compensate for mistakes or under-delivery
     *  in the original campaigns.
     *
     *
     *
     * Corresponds to "Line item is makegood" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_MAKEGOOD = 89;</code>
     */
    LINE_ITEM_MAKEGOOD(274, 89),
    /**
     *
     *
     * <pre>
     * Line item Name.
     *
     *
     *
     * Corresponds to "Line item" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_NAME = 2;</code>
     */
    LINE_ITEM_NAME(275, 2),
    /**
     *
     *
     * <pre>
     * The cost of booking for the Line item (non-CPD).
     *
     *
     *
     * Corresponds to "Line item booked revenue (exclude CPD)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_NON_CPD_BOOKED_REVENUE = 98;</code>
     */
    LINE_ITEM_NON_CPD_BOOKED_REVENUE(276, 98),
    /**
     *
     *
     * <pre>
     * Whether a Line item is eligible for opitimization.
     *
     *
     *
     * Corresponds to "Line item is optimizable" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_OPTIMIZABLE = 90;</code>
     */
    LINE_ITEM_OPTIMIZABLE(277, 90),
    /**
     *
     *
     * <pre>
     * The PO number of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item PO number" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PO_NUMBER = 669;</code>
     */
    LINE_ITEM_PO_NUMBER(278, 669),
    /**
     *
     *
     * <pre>
     * Goal type ENUM value of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_TYPE = 210;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_TYPE(279, 210),
    /**
     *
     *
     * <pre>
     * Localized goal type name of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_TYPE_NAME = 211;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_TYPE_NAME(280, 211),
    /**
     *
     *
     * <pre>
     * The total number of impressions or clicks that are reserved for a
     *  line item. For line items of type BULK or PRICE_PRIORITY, this
     *  represents the number of remaining impressions reserved. If the line
     *  item has an impression cap goal, this represents the number of
     *  impressions or conversions that the line item will stop serving at if
     *  reached.
     *
     *
     *
     * Corresponds to "Line item primary goal units (absolute)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE = 93;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE(281, 93),
    /**
     *
     *
     * <pre>
     * The percentage of impressions or clicks that are reserved for a
     *  line item. For line items of type SPONSORSHIP, this represents the
     *  percentage of available impressions reserved. For line items of type
     *  NETWORK or HOUSE, this represents the percentage of remaining
     *  impressions reserved.
     *
     *
     *
     * Corresponds to "Line item primary goal units (percentage)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `WHOLE_PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE = 396;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE(282, 396),
    /**
     *
     *
     * <pre>
     * Unit type ENUM value of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal unit type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE = 208;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE(283, 208),
    /**
     *
     *
     * <pre>
     * Localized unit type name of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal unit type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME = 209;</code>
     */
    LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME(284, 209),
    /**
     *
     *
     * <pre>
     * The priority of this Line item as a value between 1 and 16.
     *  In general, a lower priority means more serving priority for the
     *  Line item.
     *
     *
     *
     * Corresponds to "Line item priority" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_PRIORITY = 24;</code>
     */
    LINE_ITEM_PRIORITY(285, 24),
    /**
     *
     *
     * <pre>
     * ENUM value describing the state of inventory reservation for the
     *  LineItem.
     *
     *
     *
     * Corresponds to "Line item reservation status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_RESERVATION_STATUS = 304;</code>
     */
    LINE_ITEM_RESERVATION_STATUS(286, 304),
    /**
     *
     *
     * <pre>
     * Localized string describing the state of inventory reservation for the
     *  LineItem.
     *
     *
     *
     * Corresponds to "Line item reservation status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_RESERVATION_STATUS_NAME = 305;</code>
     */
    LINE_ITEM_RESERVATION_STATUS_NAME(287, 305),
    /**
     *
     *
     * <pre>
     * The sales person of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item salesperson" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_SALESPERSON = 671;</code>
     */
    LINE_ITEM_SALESPERSON(288, 671),
    /**
     *
     *
     * <pre>
     * The secondary sales people of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item secondary salespeople" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_SECONDARY_SALESPEOPLE = 673;</code>
     */
    LINE_ITEM_SECONDARY_SALESPEOPLE(289, 673),
    /**
     *
     *
     * <pre>
     * The secondary traffickers of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item secondary traffickers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_SECONDARY_TRAFFICKERS = 675;</code>
     */
    LINE_ITEM_SECONDARY_TRAFFICKERS(290, 675),
    /**
     *
     *
     * <pre>
     * The start date of the Line item.
     *
     *
     *
     * Corresponds to "Line item start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_START_DATE = 82;</code>
     */
    LINE_ITEM_START_DATE(291, 82),
    /**
     *
     *
     * <pre>
     * The start date and time of the Line item.
     *
     *
     *
     * Corresponds to "Line item start time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>LINE_ITEM_START_DATE_TIME = 84;</code>
     */
    LINE_ITEM_START_DATE_TIME(292, 84),
    /**
     *
     *
     * <pre>
     * The trafficker of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item trafficker" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_TRAFFICKER = 677;</code>
     */
    LINE_ITEM_TRAFFICKER(293, 677),
    /**
     *
     *
     * <pre>
     * Line item type ENUM value.
     *
     *
     *
     * Corresponds to "Line item type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_TYPE = 193;</code>
     */
    LINE_ITEM_TYPE(294, 193),
    /**
     *
     *
     * <pre>
     * Localized line item type name.
     *
     *
     *
     * Corresponds to "Line item type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_TYPE_NAME = 194;</code>
     */
    LINE_ITEM_TYPE_NAME(295, 194),
    /**
     *
     *
     * <pre>
     * Whether the Line item end time and end date is set to effectively never
     *  end.
     *
     *
     *
     * Corresponds to "Line item is unlimited end time" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_UNLIMITED_END = 187;</code>
     */
    LINE_ITEM_UNLIMITED_END(296, 187),
    /**
     *
     *
     * <pre>
     * The artificial cost per unit used by the Ad server to help rank
     *  inventory.
     *
     *
     *
     * Corresponds to "Line item value cost per unit" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_VALUE_COST_PER_UNIT = 88;</code>
     */
    LINE_ITEM_VALUE_COST_PER_UNIT(297, 88),
    /**
     *
     *
     * <pre>
     * The web property code used for dynamic allocation Line Items.
     *
     *
     *
     * Corresponds to "Line item web property code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_WEB_PROPERTY_CODE = 179;</code>
     */
    LINE_ITEM_WEB_PROPERTY_CODE(298, 179),
    /**
     *
     *
     * <pre>
     * The ID of creative, includes regular creatives, and master and companions
     *  in case of creative sets
     *
     *
     *
     * Corresponds to "Master and Companion creative ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>MASTER_COMPANION_CREATIVE_ID = 140;</code>
     */
    MASTER_COMPANION_CREATIVE_ID(299, 140),
    /**
     *
     *
     * <pre>
     * Name of creative, includes regular creatives, and master and companions
     *  in case of creative sets
     *
     *
     *
     * Corresponds to "Master and Companion creative" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MASTER_COMPANION_CREATIVE_NAME = 141;</code>
     */
    MASTER_COMPANION_CREATIVE_NAME(300, 141),
    /**
     *
     *
     * <pre>
     * Mediation type.
     *
     *
     *
     * Corresponds to "Mediation type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MEDIATION_TYPE = 701;</code>
     */
    MEDIATION_TYPE(301, 701),
    /**
     *
     *
     * <pre>
     * Localized mediation type name.
     *
     *
     *
     * Corresponds to "Mediation type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MEDIATION_TYPE_NAME = 754;</code>
     */
    MEDIATION_TYPE_NAME(302, 754),
    /**
     *
     *
     * <pre>
     * The ID of the yield partner for Mediation.
     *
     *
     *
     * Corresponds to "Yield partner ID (mediation)" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>MEDIATION_YIELD_PARTNER_ID = 661;</code>
     */
    MEDIATION_YIELD_PARTNER_ID(303, 661),
    /**
     *
     *
     * <pre>
     * The name of the yield partner for Mediation.
     *
     *
     *
     * Corresponds to "Yield partner (mediation)" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MEDIATION_YIELD_PARTNER_NAME = 662;</code>
     */
    MEDIATION_YIELD_PARTNER_NAME(304, 662),
    /**
     *
     *
     * <pre>
     * The criteria ID of the metro area in which the ad served.
     *
     *
     *
     * Corresponds to "Metro ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>METRO_ID = 453;</code>
     */
    METRO_ID(305, 453),
    /**
     *
     *
     * <pre>
     * The name of the metro area in which the ad served.
     *
     *
     *
     * Corresponds to "Metro" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>METRO_NAME = 454;</code>
     */
    METRO_NAME(306, 454),
    /**
     *
     *
     * <pre>
     * Whether the mobile app is free.
     *
     *
     *
     * Corresponds to "App is free" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>MOBILE_APP_FREE = 128;</code>
     */
    MOBILE_APP_FREE(307, 128),
    /**
     *
     *
     * <pre>
     * URL of app icon for the mobile app.
     *
     *
     *
     * Corresponds to "App icon URL" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_ICON_URL = 129;</code>
     */
    MOBILE_APP_ICON_URL(308, 129),
    /**
     *
     *
     * <pre>
     * The ID of the Mobile App.
     *
     *
     *
     * Corresponds to "App ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_ID = 123;</code>
     */
    MOBILE_APP_ID(309, 123),
    /**
     *
     *
     * <pre>
     * The name of the mobile app.
     *
     *
     *
     * Corresponds to "App" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_NAME = 127;</code>
     */
    MOBILE_APP_NAME(310, 127),
    /**
     *
     *
     * <pre>
     * Ownership status of the mobile app.
     *
     *
     *
     * Corresponds to "App ownership status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_APP_OWNERSHIP_STATUS = 311;</code>
     */
    MOBILE_APP_OWNERSHIP_STATUS(311, 311),
    /**
     *
     *
     * <pre>
     * Ownership status of the mobile app.
     *
     *
     *
     * Corresponds to "App ownership status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_OWNERSHIP_STATUS_NAME = 312;</code>
     */
    MOBILE_APP_OWNERSHIP_STATUS_NAME(312, 312),
    /**
     *
     *
     * <pre>
     * The App Store of the mobile app.
     *
     *
     *
     * Corresponds to "App store value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_APP_STORE = 125;</code>
     */
    MOBILE_APP_STORE(313, 125),
    /**
     *
     *
     * <pre>
     * The localized name of the mobile app store.
     *
     *
     *
     * Corresponds to "App store" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_STORE_NAME = 245;</code>
     */
    MOBILE_APP_STORE_NAME(314, 245),
    /**
     *
     *
     * <pre>
     * Mobile inventory type.
     *  Identifies whether a mobile ad came from a regular web page, an AMP web
     *  page, or a mobile app.
     *  Values match the Inventory type dimension available in the Overview Home
     *  dashboard. Note: Video takes precedence over any other value, for
     *  example, if there is an in-stream video impression on a desktop device,
     *  it will be attributed to in-stream video and not desktop web.
     *
     *
     *
     * Corresponds to "Inventory type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_INVENTORY_TYPE = 99;</code>
     */
    MOBILE_INVENTORY_TYPE(315, 99),
    /**
     *
     *
     * <pre>
     * Mobile inventory type name.
     *  Identifies whether a mobile ad came from a regular web page, an AMP web
     *  page, or a mobile app.
     *
     *
     *
     * Corresponds to "Inventory type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_INVENTORY_TYPE_NAME = 21;</code>
     */
    MOBILE_INVENTORY_TYPE_NAME(316, 21),
    /**
     *
     *
     * <pre>
     * Mobile rendering SDK.
     *
     *
     *
     * Corresponds to "Rendering SDK value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_RENDERING_SDK = 646;</code>
     */
    MOBILE_RENDERING_SDK(317, 646),
    /**
     *
     *
     * <pre>
     * Localized name of the Mobile rendering SDK.
     *
     *
     *
     * Corresponds to "Rendering SDK" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_RENDERING_SDK_NAME = 647;</code>
     */
    MOBILE_RENDERING_SDK_NAME(318, 647),
    /**
     *
     *
     * <pre>
     * The major version of the mobile SDK.
     *
     *
     *
     * Corresponds to "App SDK major version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MOBILE_SDK_MAJOR_VERSION = 692;</code>
     */
    MOBILE_SDK_MAJOR_VERSION(319, 692),
    /**
     *
     *
     * <pre>
     * The minor version of the mobile SDK.
     *
     *
     *
     * Corresponds to "App SDK minor version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MOBILE_SDK_MINOR_VERSION = 693;</code>
     */
    MOBILE_SDK_MINOR_VERSION(320, 693),
    /**
     *
     *
     * <pre>
     * SDK version of the mobile device.
     *
     *
     *
     * Corresponds to "App SDK version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_SDK_VERSION_NAME = 130;</code>
     */
    MOBILE_SDK_VERSION_NAME(321, 130),
    /**
     *
     *
     * <pre>
     * Breaks down reporting data by month and year.
     *
     *
     *
     * Corresponds to "Month and year" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MONTH_YEAR = 6;</code>
     */
    MONTH_YEAR(322, 6),
    /**
     *
     *
     * <pre>
     * Native ad format ID.
     *
     *
     *
     * Corresponds to "Native ad format ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>NATIVE_AD_FORMAT_ID = 255;</code>
     */
    NATIVE_AD_FORMAT_ID(323, 255),
    /**
     *
     *
     * <pre>
     * Native ad format name.
     *
     *
     *
     * Corresponds to "Native ad format" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NATIVE_AD_FORMAT_NAME = 254;</code>
     */
    NATIVE_AD_FORMAT_NAME(324, 254),
    /**
     *
     *
     * <pre>
     * Native style ID.
     *
     *
     *
     * Corresponds to "Native style ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>NATIVE_STYLE_ID = 253;</code>
     */
    NATIVE_STYLE_ID(325, 253),
    /**
     *
     *
     * <pre>
     * Native style name.
     *
     *
     *
     * Corresponds to "Native style" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NATIVE_STYLE_NAME = 252;</code>
     */
    NATIVE_STYLE_NAME(326, 252),
    /**
     *
     *
     * <pre>
     * No fill reason category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "No fill reason category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>NO_FILL_REASON_CATEGORY = 586;</code>
     */
    NO_FILL_REASON_CATEGORY(327, 586),
    /**
     *
     *
     * <pre>
     * No fill reason category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "No fill reason category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NO_FILL_REASON_CATEGORY_NAME = 587;</code>
     */
    NO_FILL_REASON_CATEGORY_NAME(328, 587),
    /**
     *
     *
     * <pre>
     * Operating system category.
     *
     *
     *
     * Corresponds to "Operating system category value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_CATEGORY = 117;</code>
     */
    OPERATING_SYSTEM_CATEGORY(329, 117),
    /**
     *
     *
     * <pre>
     * Operating system category name.
     *
     *
     *
     * Corresponds to "Operating system category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_CATEGORY_NAME = 118;</code>
     */
    OPERATING_SYSTEM_CATEGORY_NAME(330, 118),
    /**
     *
     *
     * <pre>
     * ID of the operating system version.
     *
     *
     *
     * Corresponds to "Operating system ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_VERSION_ID = 238;</code>
     */
    OPERATING_SYSTEM_VERSION_ID(331, 238),
    /**
     *
     *
     * <pre>
     * Details of the operating system, including version.
     *
     *
     *
     * Corresponds to "Operating system" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_VERSION_NAME = 237;</code>
     */
    OPERATING_SYSTEM_VERSION_NAME(332, 237),
    /**
     *
     *
     * <pre>
     * Enum value of the optimization type.
     *
     *
     *
     * Corresponds to "Optimization type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>OPTIMIZATION_TYPE = 639;</code>
     */
    OPTIMIZATION_TYPE(333, 639),
    /**
     *
     *
     * <pre>
     * Localized name of the optimization type.
     *
     *
     *
     * Corresponds to "Optimization type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPTIMIZATION_TYPE_NAME = 640;</code>
     */
    OPTIMIZATION_TYPE_NAME(334, 640),
    /**
     *
     *
     * <pre>
     * Order agency.
     *
     *
     *
     * Corresponds to "Order agency" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_AGENCY = 150;</code>
     */
    ORDER_AGENCY(335, 150),
    /**
     *
     *
     * <pre>
     * Order agency ID.
     *
     *
     *
     * Corresponds to "Order agency ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_AGENCY_ID = 151;</code>
     */
    ORDER_AGENCY_ID(336, 151),
    /**
     *
     *
     * <pre>
     * Order booked CPC.
     *
     *
     *
     * Corresponds to "Order booked CPC" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_BOOKED_CPC = 152;</code>
     */
    ORDER_BOOKED_CPC(337, 152),
    /**
     *
     *
     * <pre>
     * Order booked CPM.
     *
     *
     *
     * Corresponds to "Order booked CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_BOOKED_CPM = 153;</code>
     */
    ORDER_BOOKED_CPM(338, 153),
    /**
     *
     *
     * <pre>
     * Order delivery status ENUM value.
     *
     *
     *
     * Corresponds to "Order delivery status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ORDER_DELIVERY_STATUS = 231;</code>
     */
    ORDER_DELIVERY_STATUS(339, 231),
    /**
     *
     *
     * <pre>
     * Order delivery status localized name.
     *
     *
     *
     * Corresponds to "Order delivery status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_DELIVERY_STATUS_NAME = 239;</code>
     */
    ORDER_DELIVERY_STATUS_NAME(340, 239),
    /**
     *
     *
     * <pre>
     * Order end date.
     *
     *
     *
     * Corresponds to "Order end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>ORDER_END_DATE = 154;</code>
     */
    ORDER_END_DATE(341, 154),
    /**
     *
     *
     * <pre>
     * Order end date and time.
     *
     *
     *
     * Corresponds to "Order end time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>ORDER_END_DATE_TIME = 155;</code>
     */
    ORDER_END_DATE_TIME(342, 155),
    /**
     *
     *
     * <pre>
     * Order external ID.
     *
     *
     *
     * Corresponds to "Order external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_EXTERNAL_ID = 156;</code>
     */
    ORDER_EXTERNAL_ID(343, 156),
    /**
     *
     *
     * <pre>
     * Order ID.
     *
     *
     *
     * Corresponds to "Order ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_ID = 7;</code>
     */
    ORDER_ID(344, 7),
    /**
     *
     *
     * <pre>
     * Order labels.
     *
     *
     *
     * Corresponds to "Order labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_LABELS = 170;</code>
     */
    ORDER_LABELS(345, 170),
    /**
     *
     *
     * <pre>
     * Order labels IDs.
     *
     *
     *
     * Corresponds to "Order label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_LABEL_IDS = 171;</code>
     */
    ORDER_LABEL_IDS(346, 171),
    /**
     *
     *
     * <pre>
     * Order lifetime clicks.
     *
     *
     *
     * Corresponds to "Order lifetime clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_LIFETIME_CLICKS = 158;</code>
     */
    ORDER_LIFETIME_CLICKS(347, 158),
    /**
     *
     *
     * <pre>
     * Order lifetime impressions.
     *
     *
     *
     * Corresponds to "Order lifetime impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_LIFETIME_IMPRESSIONS = 159;</code>
     */
    ORDER_LIFETIME_IMPRESSIONS(348, 159),
    /**
     *
     *
     * <pre>
     * Order name.
     *
     *
     *
     * Corresponds to "Order" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_NAME = 8;</code>
     */
    ORDER_NAME(349, 8),
    /**
     *
     *
     * <pre>
     * Order PO number.
     *
     *
     *
     * Corresponds to "Order PO number" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_PO_NUMBER = 160;</code>
     */
    ORDER_PO_NUMBER(350, 160),
    /**
     *
     *
     * <pre>
     * Whether the Order is programmatic.
     *
     *
     *
     * Corresponds to "Order is programmatic" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>ORDER_PROGRAMMATIC = 157;</code>
     */
    ORDER_PROGRAMMATIC(351, 157),
    /**
     *
     *
     * <pre>
     * Order sales person.
     *
     *
     *
     * Corresponds to "Order salesperson" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_SALESPERSON = 161;</code>
     */
    ORDER_SALESPERSON(352, 161),
    /**
     *
     *
     * <pre>
     * Order sales person ID.
     *
     *
     *
     * Corresponds to "Order salesperson ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_SALESPERSON_ID = 629;</code>
     */
    ORDER_SALESPERSON_ID(353, 629),
    /**
     *
     *
     * <pre>
     * Order secondary sales people.
     *
     *
     *
     * Corresponds to "Order secondary salespeople" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_SALESPEOPLE = 164;</code>
     */
    ORDER_SECONDARY_SALESPEOPLE(354, 164),
    /**
     *
     *
     * <pre>
     * Order secondary sales people ID.
     *
     *
     *
     * Corresponds to "Order secondary salespeople ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_SALESPEOPLE_ID = 165;</code>
     */
    ORDER_SECONDARY_SALESPEOPLE_ID(355, 165),
    /**
     *
     *
     * <pre>
     * Order secondary traffickers.
     *
     *
     *
     * Corresponds to "Order secondary traffickers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_TRAFFICKERS = 166;</code>
     */
    ORDER_SECONDARY_TRAFFICKERS(356, 166),
    /**
     *
     *
     * <pre>
     * Order secondary traffickers ID.
     *
     *
     *
     * Corresponds to "Order secondary trafficker IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_TRAFFICKERS_ID = 167;</code>
     */
    ORDER_SECONDARY_TRAFFICKERS_ID(357, 167),
    /**
     *
     *
     * <pre>
     * Order start date.
     *
     *
     *
     * Corresponds to "Order start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>ORDER_START_DATE = 168;</code>
     */
    ORDER_START_DATE(358, 168),
    /**
     *
     *
     * <pre>
     * Order start date and time.
     *
     *
     *
     * Corresponds to "Order start time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>ORDER_START_DATE_TIME = 169;</code>
     */
    ORDER_START_DATE_TIME(359, 169),
    /**
     *
     *
     * <pre>
     * Order trafficker.
     *
     *
     *
     * Corresponds to "Order trafficker" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_TRAFFICKER = 162;</code>
     */
    ORDER_TRAFFICKER(360, 162),
    /**
     *
     *
     * <pre>
     * Order trafficker ID.
     *
     *
     *
     * Corresponds to "Order trafficker ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_TRAFFICKER_ID = 163;</code>
     */
    ORDER_TRAFFICKER_ID(361, 163),
    /**
     *
     *
     * <pre>
     * Whether the Order end time and end date is set to effectively never
     *  end.
     *
     *
     *
     * Corresponds to "Order is unlimited end time" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>ORDER_UNLIMITED_END = 203;</code>
     */
    ORDER_UNLIMITED_END(362, 203),
    /**
     *
     *
     * <pre>
     * Page path is the part of a page URL that comes after the domain but
     *  before the query strings from Google Analytics.
     *
     *
     *
     * Corresponds to "Page path" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_PATH = 511;</code>
     */
    PAGE_PATH(363, 511),
    /**
     *
     *
     * <pre>
     * Page title (web) and screen class (mobile) returned from Google
     *  Analytics.
     *
     *
     *
     * Corresponds to "Page title and screen class" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_TITLE_AND_SCREEN_CLASS = 512;</code>
     */
    PAGE_TITLE_AND_SCREEN_CLASS(364, 512),
    /**
     *
     *
     * <pre>
     * Page title (web) and screen name (mobile) returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Page title and screen name" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_TITLE_AND_SCREEN_NAME = 513;</code>
     */
    PAGE_TITLE_AND_SCREEN_NAME(365, 513),
    /**
     *
     *
     * <pre>
     * Placement ID
     *
     *
     *
     * Corresponds to "Placement ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PLACEMENT_ID = 113;</code>
     */
    PLACEMENT_ID(366, 113),
    /**
     *
     *
     * <pre>
     * The full list of placement IDs associated with the ad unit.
     *
     *
     *
     * Corresponds to "Placement ID (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PLACEMENT_ID_ALL = 144;</code>
     */
    PLACEMENT_ID_ALL(367, 144),
    /**
     *
     *
     * <pre>
     * Placement name
     *
     *
     *
     * Corresponds to "Placement" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PLACEMENT_NAME = 114;</code>
     */
    PLACEMENT_NAME(368, 114),
    /**
     *
     *
     * <pre>
     * The full list of placement names associated with the ad unit.
     *
     *
     *
     * Corresponds to "Placement (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PLACEMENT_NAME_ALL = 145;</code>
     */
    PLACEMENT_NAME_ALL(369, 145),
    /**
     *
     *
     * <pre>
     * Placement status ENUM value
     *
     *
     *
     * Corresponds to "Placement status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PLACEMENT_STATUS = 362;</code>
     */
    PLACEMENT_STATUS(370, 362),
    /**
     *
     *
     * <pre>
     * Localized placement status name.
     *
     *
     *
     * Corresponds to "Placement status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PLACEMENT_STATUS_NAME = 364;</code>
     */
    PLACEMENT_STATUS_NAME(371, 364),
    /**
     *
     *
     * <pre>
     * The full list of localized placement status names associated with the ad
     *  unit.
     *
     *
     *
     * Corresponds to "Placement status (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PLACEMENT_STATUS_NAME_ALL = 365;</code>
     */
    PLACEMENT_STATUS_NAME_ALL(372, 365),
    /**
     *
     *
     * <pre>
     * The criteria ID of the postal code in which the ad served.
     *
     *
     *
     * Corresponds to "Postal code ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>POSTAL_CODE_ID = 455;</code>
     */
    POSTAL_CODE_ID(373, 455),
    /**
     *
     *
     * <pre>
     * The name of the postal code in which the ad served.
     *
     *
     *
     * Corresponds to "Postal code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>POSTAL_CODE_NAME = 456;</code>
     */
    POSTAL_CODE_NAME(374, 456),
    /**
     *
     *
     * <pre>
     * Indicates the valid PPID (Publisher provided identifier) status on a
     *  given ad request.
     *
     *
     *
     * Corresponds to "PPID status value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PPID_STATUS = 406;</code>
     */
    PPID_STATUS(375, 406),
    /**
     *
     *
     * <pre>
     * The localized name of that indicates the valid PPID (Publisher provided
     *  identifier) status on a given ad request.
     *
     *
     *
     * Corresponds to "PPID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PPID_STATUS_NAME = 407;</code>
     */
    PPID_STATUS_NAME(376, 407),
    /**
     *
     *
     * <pre>
     * Predicted viewability score bucket.
     *
     *
     *
     * Corresponds to "Predicted viewability bucket value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PREDICTED_VIEWABILITY_BUCKET = 633;</code>
     */
    PREDICTED_VIEWABILITY_BUCKET(377, 633),
    /**
     *
     *
     * <pre>
     * The localized name of the predicted viewability score bucket.
     *
     *
     *
     * Corresponds to "Predicted viewability bucket" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PREDICTED_VIEWABILITY_BUCKET_NAME = 634;</code>
     */
    PREDICTED_VIEWABILITY_BUCKET_NAME(378, 634),
    /**
     *
     *
     * <pre>
     * The ID of the secure signals sent in the ad request.
     *
     *
     *
     * Corresponds to "Secure signal ID (presented)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PRESENTED_SECURE_SIGNAL_ID = 495;</code>
     */
    PRESENTED_SECURE_SIGNAL_ID(379, 495),
    /**
     *
     *
     * <pre>
     * The name of the secure signals sent in the ad request.
     *
     *
     *
     * Corresponds to "Secure signal name (presented)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PRESENTED_SECURE_SIGNAL_NAME = 496;</code>
     */
    PRESENTED_SECURE_SIGNAL_NAME(380, 496),
    /**
     *
     *
     * <pre>
     * The ID type selected for personalization.
     *
     *
     *
     * Corresponds to "Primary personalization ID type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PRIMARY_PERSONALIZATION_ID_TYPE = 408;</code>
     */
    PRIMARY_PERSONALIZATION_ID_TYPE(381, 408),
    /**
     *
     *
     * <pre>
     * The localized name of the ID type selected for personalization.
     *
     *
     *
     * Corresponds to "Primary personalization ID type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PRIMARY_PERSONALIZATION_ID_TYPE_NAME = 409;</code>
     */
    PRIMARY_PERSONALIZATION_ID_TYPE_NAME(382, 409),
    /**
     *
     *
     * <pre>
     * Programmatic channel.
     *  The type of transaction that occurred in Ad Exchange.
     *
     *
     *
     * Corresponds to "Programmatic channel value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PROGRAMMATIC_CHANNEL = 13;</code>
     */
    PROGRAMMATIC_CHANNEL(385, 13),
    /**
     *
     *
     * <pre>
     * Programmatic channel name.
     *  The type of transaction that occurred in Ad Exchange.
     *
     *
     *
     * Corresponds to "Programmatic channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PROGRAMMATIC_CHANNEL_NAME = 14;</code>
     */
    PROGRAMMATIC_CHANNEL_NAME(386, 14),
    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (all levels)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE = 410;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE(387, 410),
    /**
     *
     *
     * <pre>
     * The ancestor chain of IDs of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS = 546;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS(388, 546),
    /**
     *
     *
     * <pre>
     * The ancestor chain of names of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME = 412;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME(389, 412),
    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER = 413;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER(390, 413),
    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE = 414;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE(391, 414),
    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (delivered)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE = 425;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE(392, 425),
    /**
     *
     *
     * <pre>
     * The ancestor chain of IDs of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS = 545;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS(393, 545),
    /**
     *
     *
     * <pre>
     * The ancestor chain of names of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals (delivered)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME = 427;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME(394, 427),
    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER = 428;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER(395, 428),
    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE = 429;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE(396, 429),
    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (top level)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE = 415;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE(397, 415),
    /**
     *
     *
     * <pre>
     * ID of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID = 416;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID(398, 416),
    /**
     *
     *
     * <pre>
     * Name of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals (top level)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME = 417;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME(399, 417),
    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER = 418;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER(400, 418),
    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE = 419;</code>
     */
    PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE(401, 419),
    /**
     *
     *
     * <pre>
     * Data provider ID associated with a publisher provided signal.
     *
     *
     *
     * Corresponds to "Publisher provided signals (data provider ID)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID = 136;</code>
     */
    PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID(402, 136),
    /**
     *
     *
     * <pre>
     * Data provider name associated with a publisher provided signal.
     *
     *
     *
     * Corresponds to "Publisher provided signals (data provider)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME = 137;</code>
     */
    PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME(403, 137),
    /**
     *
     *
     * <pre>
     * The criteria ID of the region (for example, US state) in which the ad
     *  served.
     *
     *
     *
     * Corresponds to "Region ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>REGION_ID = 457;</code>
     */
    REGION_ID(404, 457),
    /**
     *
     *
     * <pre>
     * The name of the region (for example, US state) in which the ad
     *  served.
     *
     *
     *
     * Corresponds to "Region" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REGION_NAME = 458;</code>
     */
    REGION_NAME(405, 458),
    /**
     *
     *
     * <pre>
     * The rejection class category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejection class category value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>REJECTION_CLASS_CATEGORY = 590;</code>
     */
    REJECTION_CLASS_CATEGORY(406, 590),
    /**
     *
     *
     * <pre>
     * The rejection class category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejection class category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REJECTION_CLASS_CATEGORY_NAME = 591;</code>
     */
    REJECTION_CLASS_CATEGORY_NAME(407, 591),
    /**
     *
     *
     * <pre>
     * The size of a rendered creative, It can differ with the creative's size
     *  if a creative is shown in an ad slot of a different size.
     *
     *
     *
     * Corresponds to "Rendered creative size" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>RENDERED_CREATIVE_SIZE = 343;</code>
     */
    RENDERED_CREATIVE_SIZE(408, 343),
    /**
     *
     *
     * <pre>
     * Inventory Requested Ad Sizes dimension
     *
     *
     *
     * Corresponds to "Requested ad sizes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REQUESTED_AD_SIZES = 352;</code>
     */
    REQUESTED_AD_SIZES(409, 352),
    /**
     *
     *
     * <pre>
     * Request type ENUM
     *
     *
     *
     * Corresponds to "Request type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>REQUEST_TYPE = 146;</code>
     */
    REQUEST_TYPE(410, 146),
    /**
     *
     *
     * <pre>
     * Request type locallized name
     *
     *
     *
     * Corresponds to "Request type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REQUEST_TYPE_NAME = 147;</code>
     */
    REQUEST_TYPE_NAME(411, 147),
    /**
     *
     *
     * <pre>
     * Indicates if a request was eligible for server-side unwrapping.
     *
     *
     *
     * Corresponds to "Server-side unwrapping eligible" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_ELIGIBLE = 597;</code>
     */
    SERVER_SIDE_UNWRAPPING_ELIGIBLE(412, 597),
    /**
     *
     *
     * <pre>
     * The serving restriction mode for privacy.
     *
     *
     *
     * Corresponds to "Serving restriction value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>SERVING_RESTRICTION = 631;</code>
     */
    SERVING_RESTRICTION(413, 631),
    /**
     *
     *
     * <pre>
     * The localized name of the serving restriction mode for privacy.
     *
     *
     *
     * Corresponds to "Serving restriction" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>SERVING_RESTRICTION_NAME = 632;</code>
     */
    SERVING_RESTRICTION_NAME(414, 632),
    /**
     *
     *
     * <pre>
     * Information about domain or subdomains.
     *
     *
     *
     * Corresponds to "Site" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>SITE = 387;</code>
     */
    SITE(415, 387),
    /**
     *
     *
     * <pre>
     * The ID of the browser, device or other environment into which a line item
     *  or creative was served.
     *
     *
     *
     * Corresponds to "Targeting ID" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>TARGETING_ID = 232;</code>
     */
    TARGETING_ID(416, 232),
    /**
     *
     *
     * <pre>
     * Information about the browser, device and other environments into which
     *  a line item or creative was served.
     *
     *
     *
     * Corresponds to "Targeting" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TARGETING_NAME = 233;</code>
     */
    TARGETING_NAME(417, 233),
    /**
     *
     *
     * <pre>
     * The way in which advertisers targeted their ads.
     *
     *
     *
     * Corresponds to "Targeting type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TARGETING_TYPE = 385;</code>
     */
    TARGETING_TYPE(418, 385),
    /**
     *
     *
     * <pre>
     * The localized name of the way in which advertisers targeted their ads.
     *
     *
     *
     * Corresponds to "Targeting type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TARGETING_TYPE_NAME = 386;</code>
     */
    TARGETING_TYPE_NAME(419, 386),
    /**
     *
     *
     * <pre>
     * Whether a third-party cookie or device ID was present on a given ad
     *  request.
     *
     *
     *
     * Corresponds to "Third-party ID status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>THIRD_PARTY_ID_STATUS = 402;</code>
     */
    THIRD_PARTY_ID_STATUS(420, 402),
    /**
     *
     *
     * <pre>
     * The localized name of whether a third-party cookie or device ID was
     *  present on a given ad request.
     *
     *
     *
     * Corresponds to "Third-party ID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>THIRD_PARTY_ID_STATUS_NAME = 403;</code>
     */
    THIRD_PARTY_ID_STATUS_NAME(421, 403),
    /**
     *
     *
     * <pre>
     * Reports the status of Topics in the ad request.
     *
     *
     *
     * Corresponds to "Topics status value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TOPICS_STATUS = 504;</code>
     */
    TOPICS_STATUS(422, 504),
    /**
     *
     *
     * <pre>
     * The localized name of the status of Topics in the ad request.
     *
     *
     *
     * Corresponds to "Topics status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TOPICS_STATUS_NAME = 505;</code>
     */
    TOPICS_STATUS_NAME(423, 505),
    /**
     *
     *
     * <pre>
     * Inventory top private domain dimension
     *
     *
     *
     * Corresponds to "Domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TOP_PRIVATE_DOMAIN = 444;</code>
     */
    TOP_PRIVATE_DOMAIN(424, 444),
    /**
     *
     *
     * <pre>
     * Inventory Traffic source dimension
     *
     *
     *
     * Corresponds to "Traffic source value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TRAFFIC_SOURCE = 388;</code>
     */
    TRAFFIC_SOURCE(425, 388),
    /**
     *
     *
     * <pre>
     * Inventory Traffic source dimension name
     *
     *
     *
     * Corresponds to "Traffic source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TRAFFIC_SOURCE_NAME = 389;</code>
     */
    TRAFFIC_SOURCE_NAME(426, 389),
    /**
     *
     *
     * <pre>
     * Unified pricing rule ID dimension
     *
     *
     *
     * Corresponds to "Unified pricing rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>UNIFIED_PRICING_RULE_ID = 393;</code>
     */
    UNIFIED_PRICING_RULE_ID(427, 393),
    /**
     *
     *
     * <pre>
     * Unified pricing rule name dimension
     *
     *
     *
     * Corresponds to "Unified pricing rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>UNIFIED_PRICING_RULE_NAME = 394;</code>
     */
    UNIFIED_PRICING_RULE_NAME(428, 394),
    /**
     *
     *
     * <pre>
     * A URL defined under a publisher's inventory.
     *
     *
     *
     * Corresponds to "URL" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>URL = 506;</code>
     */
    URL(429, 506),
    /**
     *
     *
     * <pre>
     * A URL defined under a publisher's inventory.
     *
     *
     *
     * Corresponds to "URL ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>URL_ID = 507;</code>
     */
    URL_ID(430, 507),
    /**
     *
     *
     * <pre>
     * Enum value for the entitlement source.
     *
     *
     *
     * Corresponds to "Entitlement source value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>USER_MESSAGES_ENTITLEMENT_SOURCE = 635;</code>
     */
    USER_MESSAGES_ENTITLEMENT_SOURCE(431, 635),
    /**
     *
     *
     * <pre>
     * The localized name of the entitlement source.
     *
     *
     *
     * Corresponds to "Entitlement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>USER_MESSAGES_ENTITLEMENT_SOURCE_NAME = 636;</code>
     */
    USER_MESSAGES_ENTITLEMENT_SOURCE_NAME(432, 636),
    /**
     *
     *
     * <pre>
     * Targeting criteria ID for the operating system group. Used for User
     *  Messages reports.
     *
     *
     *
     * Corresponds to "Operating system group ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID = 637;</code>
     */
    USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID(433, 637),
    /**
     *
     *
     * <pre>
     * The name of the operating system group. Used for User Messages reports.
     *
     *
     *
     * Corresponds to "Operating system group" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME = 638;</code>
     */
    USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME(434, 638),
    /**
     *
     *
     * <pre>
     * The VAST version of the creative that is returned for an ad request.
     *
     *
     *
     * Corresponds to "Vast version value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VAST_VERSION = 554;</code>
     */
    VAST_VERSION(435, 554),
    /**
     *
     *
     * <pre>
     * The localized name of the VAST version of the creative that is returned
     *  for an ad request.
     *
     *
     *
     * Corresponds to "Vast version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VAST_VERSION_NAME = 555;</code>
     */
    VAST_VERSION_NAME(436, 555),
    /**
     *
     *
     * <pre>
     * The break type of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad break type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_BREAK_TYPE = 556;</code>
     */
    VIDEO_AD_BREAK_TYPE(437, 556),
    /**
     *
     *
     * <pre>
     * The localized name of the break type of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad break type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_BREAK_TYPE_NAME = 557;</code>
     */
    VIDEO_AD_BREAK_TYPE_NAME(438, 557),
    /**
     *
     *
     * <pre>
     * Video ad duration
     *
     *
     *
     * Corresponds to "Video ad duration" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_DURATION = 450;</code>
     */
    VIDEO_AD_DURATION(439, 450),
    /**
     *
     *
     * <pre>
     * The name of the video ad formats rule used to control the ad formats
     *  eligible for your inventory.
     *
     *
     *
     * Corresponds to "Video ad formats rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_FORMATS_RULE = 561;</code>
     */
    VIDEO_AD_FORMATS_RULE(440, 561),
    /**
     *
     *
     * <pre>
     * The ID of the video ad formats rule used to control the ad formats
     *  eligible for your inventory.
     *
     *
     *
     * Corresponds to "Video ad formats rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>VIDEO_AD_FORMATS_RULE_ID = 560;</code>
     */
    VIDEO_AD_FORMATS_RULE_ID(441, 560),
    /**
     *
     *
     * <pre>
     * The duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION = 558;</code>
     */
    VIDEO_AD_REQUEST_DURATION(442, 558),
    /**
     *
     *
     * <pre>
     * The localized name of the midpoint of the duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration midpoint" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME = 751;</code>
     */
    VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME(443, 751),
    /**
     *
     *
     * <pre>
     * The localized name of the duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION_NAME = 559;</code>
     */
    VIDEO_AD_REQUEST_DURATION_NAME(444, 559),
    /**
     *
     *
     * <pre>
     * The video ad request source enum.
     *
     *
     *
     * Corresponds to "Ad request source value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_SOURCE = 438;</code>
     */
    VIDEO_AD_REQUEST_SOURCE(445, 438),
    /**
     *
     *
     * <pre>
     * The localized name of the video ad request source.
     *
     *
     *
     * Corresponds to "Ad request source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_SOURCE_NAME = 439;</code>
     */
    VIDEO_AD_REQUEST_SOURCE_NAME(446, 439),
    /**
     *
     *
     * <pre>
     * Video ad type
     *
     *
     *
     * Corresponds to "Video ad type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_TYPE = 432;</code>
     */
    VIDEO_AD_TYPE(447, 432),
    /**
     *
     *
     * <pre>
     * Video ad type localized name
     *
     *
     *
     * Corresponds to "Video ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_TYPE_NAME = 433;</code>
     */
    VIDEO_AD_TYPE_NAME(448, 433),
    /**
     *
     *
     * <pre>
     * The continuous play type of the video ad impression.
     *
     *
     *
     * Corresponds to "Video continuous play type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_CONTINUOUS_PLAY_TYPE = 721;</code>
     */
    VIDEO_CONTINUOUS_PLAY_TYPE(449, 721),
    /**
     *
     *
     * <pre>
     * Video continuous play type localized name.
     *
     *
     *
     * Corresponds to "Video continuous play type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_CONTINUOUS_PLAY_TYPE_NAME = 722;</code>
     */
    VIDEO_CONTINUOUS_PLAY_TYPE_NAME(450, 722),
    /**
     *
     *
     * <pre>
     * Fallback position of the video ad.
     *
     *
     *
     * Corresponds to "Fallback position" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_FALLBACK_POSITION = 530;</code>
     */
    VIDEO_FALLBACK_POSITION(451, 530),
    /**
     *
     *
     * <pre>
     * The performance of the video ad inventory broken out by source.
     *
     *
     *
     * Corresponds to "Video measurement source value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_MEASUREMENT_SOURCE = 601;</code>
     */
    VIDEO_MEASUREMENT_SOURCE(452, 601),
    /**
     *
     *
     * <pre>
     * Video measurement source localized name.
     *
     *
     *
     * Corresponds to "Video measurement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_MEASUREMENT_SOURCE_NAME = 602;</code>
     */
    VIDEO_MEASUREMENT_SOURCE_NAME(453, 602),
    /**
     *
     *
     * <pre>
     * The video placement enum as defined by ADCOM 1.0-202303.
     *
     *
     *
     * Corresponds to "Video placement value (new)" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_PLCMT = 172;</code>
     */
    VIDEO_PLCMT(454, 172),
    /**
     *
     *
     * <pre>
     * The localized name of the video placement as defined by ADCOM 1.0-202303.
     *
     *
     *
     * Corresponds to "Video placement (new)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_PLCMT_NAME = 173;</code>
     */
    VIDEO_PLCMT_NAME(455, 173),
    /**
     *
     *
     * <pre>
     * The position in the video pod. For example 0, 1, 2, etc.
     *
     *
     *
     * Corresponds to "Position in pod" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_POSITION_IN_POD = 538;</code>
     */
    VIDEO_POSITION_IN_POD(456, 538),
    /**
     *
     *
     * <pre>
     * The position of the pod in the video stream. For example pre-roll,
     *  mid-roll, post-roll.
     *
     *
     *
     * Corresponds to "Position of pod" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_POSITION_OF_POD = 539;</code>
     */
    VIDEO_POSITION_OF_POD(457, 539),
    /**
     *
     *
     * <pre>
     * The video SDK version enum.
     *
     *
     *
     * Corresponds to "Video SDK version value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_SDK_VERSION = 440;</code>
     */
    VIDEO_SDK_VERSION(458, 440),
    /**
     *
     *
     * <pre>
     * The localized name of the video SDK version.
     *
     *
     *
     * Corresponds to "Video SDK version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_SDK_VERSION_NAME = 441;</code>
     */
    VIDEO_SDK_VERSION_NAME(459, 441),
    /**
     *
     *
     * <pre>
     * Video stitcher type.
     *
     *
     *
     * Corresponds to "Video stitcher type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_STITCHER_TYPE = 752;</code>
     */
    VIDEO_STITCHER_TYPE(460, 752),
    /**
     *
     *
     * <pre>
     * Localized name of the video stitcher type.
     *
     *
     *
     * Corresponds to "Video stitcher type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_STITCHER_TYPE_NAME = 753;</code>
     */
    VIDEO_STITCHER_TYPE_NAME(461, 753),
    /**
     *
     *
     * <pre>
     * Breaks down reporting data by week of the year.
     *
     *
     *
     * Corresponds to "Week" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>WEEK = 5;</code>
     */
    WEEK(462, 5),
    /**
     *
     *
     * <pre>
     * Name of the company within a yield group
     *
     *
     *
     * Corresponds to "Yield partner" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_BUYER_NAME = 184;</code>
     */
    YIELD_GROUP_BUYER_NAME(463, 184),
    /**
     *
     *
     * <pre>
     * Tag of the company within a yield group.
     *
     *
     *
     * Corresponds to "Yield group buyer tag" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_BUYER_TAG_NAME = 627;</code>
     */
    YIELD_GROUP_BUYER_TAG_NAME(464, 627),
    /**
     *
     *
     * <pre>
     * ID of the group of ad networks or exchanges used for Mediation and Open
     *  Bidding
     *
     *
     *
     * Corresponds to "Yield group ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>YIELD_GROUP_ID = 182;</code>
     */
    YIELD_GROUP_ID(465, 182),
    /**
     *
     *
     * <pre>
     * Name of the group of ad networks or exchanges used for Mediation and Open
     *  Bidding
     *
     *
     *
     * Corresponds to "Yield group" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_NAME = 183;</code>
     */
    YIELD_GROUP_NAME(466, 183),
    /**
     *
     *
     * <pre>
     * YouTube instream ad duration bucket.
     *
     *
     *
     * Corresponds to "Ad duration value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>YOUTUBE_AD_DURATION_BUCKET = 430;</code>
     */
    YOUTUBE_AD_DURATION_BUCKET(467, 430),
    /**
     *
     *
     * <pre>
     * YouTube instream ad duration bucket name.
     *
     *
     *
     * Corresponds to "Ad duration" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YOUTUBE_AD_DURATION_BUCKET_NAME = 431;</code>
     */
    YOUTUBE_AD_DURATION_BUCKET_NAME(468, 431),
    /**
     *
     *
     * <pre>
     * YouTube instream Ad Type.
     *
     *
     *
     * Corresponds to "YouTube ad type ID" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>YOUTUBE_AD_TYPE = 399;</code>
     */
    YOUTUBE_AD_TYPE(469, 399),
    /**
     *
     *
     * <pre>
     * YouTube instream Ad Type locallized name.
     *
     *
     *
     * Corresponds to "YouTube ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YOUTUBE_AD_TYPE_NAME = 400;</code>
     */
    YOUTUBE_AD_TYPE_NAME(470, 400),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID = 10000;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID(471, 10000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID = 10001;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID(472, 10001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID = 10002;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID(473, 10002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID = 10003;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID(474, 10003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID = 10004;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID(475, 10004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID = 10005;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID(476, 10005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID = 10006;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID(477, 10006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID = 10007;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID(478, 10007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID = 10008;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID(479, 10008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID = 10009;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID(480, 10009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID = 10010;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID(481, 10010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID = 10011;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID(482, 10011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID = 10012;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID(483, 10012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID = 10013;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID(484, 10013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID = 10014;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID(485, 10014),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_0_VALUE = 11000;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_0_VALUE(486, 11000),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_1_VALUE = 11001;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_1_VALUE(487, 11001),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_2_VALUE = 11002;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_2_VALUE(488, 11002),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_3_VALUE = 11003;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_3_VALUE(489, 11003),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_4_VALUE = 11004;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_4_VALUE(490, 11004),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_5_VALUE = 11005;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_5_VALUE(491, 11005),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_6_VALUE = 11006;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_6_VALUE(492, 11006),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_7_VALUE = 11007;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_7_VALUE(493, 11007),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_8_VALUE = 11008;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_8_VALUE(494, 11008),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_9_VALUE = 11009;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_9_VALUE(495, 11009),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_10_VALUE = 11010;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_10_VALUE(496, 11010),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_11_VALUE = 11011;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_11_VALUE(497, 11011),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_12_VALUE = 11012;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_12_VALUE(498, 11012),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_13_VALUE = 11013;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_13_VALUE(499, 11013),
    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_14_VALUE = 11014;</code>
     */
    LINE_ITEM_CUSTOM_FIELD_14_VALUE(500, 11014),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_0_OPTION_ID = 12000;</code>
     */
    ORDER_CUSTOM_FIELD_0_OPTION_ID(501, 12000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_1_OPTION_ID = 12001;</code>
     */
    ORDER_CUSTOM_FIELD_1_OPTION_ID(502, 12001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_2_OPTION_ID = 12002;</code>
     */
    ORDER_CUSTOM_FIELD_2_OPTION_ID(503, 12002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_3_OPTION_ID = 12003;</code>
     */
    ORDER_CUSTOM_FIELD_3_OPTION_ID(504, 12003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_4_OPTION_ID = 12004;</code>
     */
    ORDER_CUSTOM_FIELD_4_OPTION_ID(505, 12004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_5_OPTION_ID = 12005;</code>
     */
    ORDER_CUSTOM_FIELD_5_OPTION_ID(506, 12005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_6_OPTION_ID = 12006;</code>
     */
    ORDER_CUSTOM_FIELD_6_OPTION_ID(507, 12006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_7_OPTION_ID = 12007;</code>
     */
    ORDER_CUSTOM_FIELD_7_OPTION_ID(508, 12007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_8_OPTION_ID = 12008;</code>
     */
    ORDER_CUSTOM_FIELD_8_OPTION_ID(509, 12008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_9_OPTION_ID = 12009;</code>
     */
    ORDER_CUSTOM_FIELD_9_OPTION_ID(510, 12009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_10_OPTION_ID = 12010;</code>
     */
    ORDER_CUSTOM_FIELD_10_OPTION_ID(511, 12010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_11_OPTION_ID = 12011;</code>
     */
    ORDER_CUSTOM_FIELD_11_OPTION_ID(512, 12011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_12_OPTION_ID = 12012;</code>
     */
    ORDER_CUSTOM_FIELD_12_OPTION_ID(513, 12012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_13_OPTION_ID = 12013;</code>
     */
    ORDER_CUSTOM_FIELD_13_OPTION_ID(514, 12013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_14_OPTION_ID = 12014;</code>
     */
    ORDER_CUSTOM_FIELD_14_OPTION_ID(515, 12014),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 0 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_0_VALUE = 13000;</code>
     */
    ORDER_CUSTOM_FIELD_0_VALUE(516, 13000),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 1 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_1_VALUE = 13001;</code>
     */
    ORDER_CUSTOM_FIELD_1_VALUE(517, 13001),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 2 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_2_VALUE = 13002;</code>
     */
    ORDER_CUSTOM_FIELD_2_VALUE(518, 13002),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 3 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_3_VALUE = 13003;</code>
     */
    ORDER_CUSTOM_FIELD_3_VALUE(519, 13003),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 4 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_4_VALUE = 13004;</code>
     */
    ORDER_CUSTOM_FIELD_4_VALUE(520, 13004),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 5 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_5_VALUE = 13005;</code>
     */
    ORDER_CUSTOM_FIELD_5_VALUE(521, 13005),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 6 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_6_VALUE = 13006;</code>
     */
    ORDER_CUSTOM_FIELD_6_VALUE(522, 13006),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 7 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_7_VALUE = 13007;</code>
     */
    ORDER_CUSTOM_FIELD_7_VALUE(523, 13007),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 8 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_8_VALUE = 13008;</code>
     */
    ORDER_CUSTOM_FIELD_8_VALUE(524, 13008),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 9 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_9_VALUE = 13009;</code>
     */
    ORDER_CUSTOM_FIELD_9_VALUE(525, 13009),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_10_VALUE = 13010;</code>
     */
    ORDER_CUSTOM_FIELD_10_VALUE(526, 13010),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_11_VALUE = 13011;</code>
     */
    ORDER_CUSTOM_FIELD_11_VALUE(527, 13011),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_12_VALUE = 13012;</code>
     */
    ORDER_CUSTOM_FIELD_12_VALUE(528, 13012),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_13_VALUE = 13013;</code>
     */
    ORDER_CUSTOM_FIELD_13_VALUE(529, 13013),
    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_14_VALUE = 13014;</code>
     */
    ORDER_CUSTOM_FIELD_14_VALUE(530, 13014),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_0_OPTION_ID = 14000;</code>
     */
    CREATIVE_CUSTOM_FIELD_0_OPTION_ID(531, 14000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_1_OPTION_ID = 14001;</code>
     */
    CREATIVE_CUSTOM_FIELD_1_OPTION_ID(532, 14001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_2_OPTION_ID = 14002;</code>
     */
    CREATIVE_CUSTOM_FIELD_2_OPTION_ID(533, 14002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_3_OPTION_ID = 14003;</code>
     */
    CREATIVE_CUSTOM_FIELD_3_OPTION_ID(534, 14003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_4_OPTION_ID = 14004;</code>
     */
    CREATIVE_CUSTOM_FIELD_4_OPTION_ID(535, 14004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_5_OPTION_ID = 14005;</code>
     */
    CREATIVE_CUSTOM_FIELD_5_OPTION_ID(536, 14005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_6_OPTION_ID = 14006;</code>
     */
    CREATIVE_CUSTOM_FIELD_6_OPTION_ID(537, 14006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_7_OPTION_ID = 14007;</code>
     */
    CREATIVE_CUSTOM_FIELD_7_OPTION_ID(538, 14007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_8_OPTION_ID = 14008;</code>
     */
    CREATIVE_CUSTOM_FIELD_8_OPTION_ID(539, 14008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_9_OPTION_ID = 14009;</code>
     */
    CREATIVE_CUSTOM_FIELD_9_OPTION_ID(540, 14009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_10_OPTION_ID = 14010;</code>
     */
    CREATIVE_CUSTOM_FIELD_10_OPTION_ID(541, 14010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_11_OPTION_ID = 14011;</code>
     */
    CREATIVE_CUSTOM_FIELD_11_OPTION_ID(542, 14011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_12_OPTION_ID = 14012;</code>
     */
    CREATIVE_CUSTOM_FIELD_12_OPTION_ID(543, 14012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_13_OPTION_ID = 14013;</code>
     */
    CREATIVE_CUSTOM_FIELD_13_OPTION_ID(544, 14013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_14_OPTION_ID = 14014;</code>
     */
    CREATIVE_CUSTOM_FIELD_14_OPTION_ID(545, 14014),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_0_VALUE = 15000;</code>
     */
    CREATIVE_CUSTOM_FIELD_0_VALUE(546, 15000),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_1_VALUE = 15001;</code>
     */
    CREATIVE_CUSTOM_FIELD_1_VALUE(547, 15001),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_2_VALUE = 15002;</code>
     */
    CREATIVE_CUSTOM_FIELD_2_VALUE(548, 15002),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_3_VALUE = 15003;</code>
     */
    CREATIVE_CUSTOM_FIELD_3_VALUE(549, 15003),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_4_VALUE = 15004;</code>
     */
    CREATIVE_CUSTOM_FIELD_4_VALUE(550, 15004),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_5_VALUE = 15005;</code>
     */
    CREATIVE_CUSTOM_FIELD_5_VALUE(551, 15005),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_6_VALUE = 15006;</code>
     */
    CREATIVE_CUSTOM_FIELD_6_VALUE(552, 15006),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_7_VALUE = 15007;</code>
     */
    CREATIVE_CUSTOM_FIELD_7_VALUE(553, 15007),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_8_VALUE = 15008;</code>
     */
    CREATIVE_CUSTOM_FIELD_8_VALUE(554, 15008),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_9_VALUE = 15009;</code>
     */
    CREATIVE_CUSTOM_FIELD_9_VALUE(555, 15009),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_10_VALUE = 15010;</code>
     */
    CREATIVE_CUSTOM_FIELD_10_VALUE(556, 15010),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_11_VALUE = 15011;</code>
     */
    CREATIVE_CUSTOM_FIELD_11_VALUE(557, 15011),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_12_VALUE = 15012;</code>
     */
    CREATIVE_CUSTOM_FIELD_12_VALUE(558, 15012),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_13_VALUE = 15013;</code>
     */
    CREATIVE_CUSTOM_FIELD_13_VALUE(559, 15013),
    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_14_VALUE = 15014;</code>
     */
    CREATIVE_CUSTOM_FIELD_14_VALUE(560, 15014),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID = 16000;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID(561, 16000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID = 16001;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID(562, 16001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID = 16002;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID(563, 16002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID = 16003;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID(564, 16003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID = 16004;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID(565, 16004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID = 16005;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID(566, 16005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID = 16006;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID(567, 16006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID = 16007;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID(568, 16007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID = 16008;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID(569, 16008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID = 16009;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID(570, 16009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID = 16010;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID(571, 16010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID = 16011;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID(572, 16011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID = 16012;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID(573, 16012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID = 16013;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID(574, 16013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID = 16014;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID(575, 16014),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 0 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE = 17000;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE(576, 17000),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 1 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE = 17001;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE(577, 17001),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 2 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE = 17002;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE(578, 17002),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 3 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE = 17003;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE(579, 17003),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 4 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE = 17004;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE(580, 17004),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 5 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE = 17005;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE(581, 17005),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 6 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE = 17006;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE(582, 17006),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 7 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE = 17007;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE(583, 17007),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 8 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE = 17008;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE(584, 17008),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 9 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE = 17009;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE(585, 17009),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 10 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE = 17010;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE(586, 17010),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 11 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE = 17011;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE(587, 17011),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 12 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE = 17012;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE(588, 17012),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 13 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE = 17013;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE(589, 17013),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 14 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE = 17014;</code>
     */
    BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE(590, 17014),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 0 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID = 18000;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID(591, 18000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID = 18001;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID(592, 18001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID = 18002;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID(593, 18002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID = 18003;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID(594, 18003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID = 18004;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID(595, 18004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID = 18005;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID(596, 18005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID = 18006;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID(597, 18006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID = 18007;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID(598, 18007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID = 18008;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID(599, 18008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID = 18009;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID(600, 18009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID = 18010;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID(601, 18010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID = 18011;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID(602, 18011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID = 18012;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID(603, 18012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID = 18013;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID(604, 18013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID = 18014;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID(605, 18014),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE = 19000;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE(606, 19000),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE = 19001;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE(607, 19001),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE = 19002;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE(608, 19002),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE = 19003;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE(609, 19003),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE = 19004;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE(610, 19004),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE = 19005;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE(611, 19005),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE = 19006;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE(612, 19006),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE = 19007;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE(613, 19007),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE = 19008;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE(614, 19008),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE = 19009;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE(615, 19009),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE = 19010;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE(616, 19010),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE = 19011;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE(617, 19011),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE = 19012;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE(618, 19012),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE = 19013;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE(619, 19013),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE = 19014;</code>
     */
    BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE(620, 19014),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID = 20000;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID(621, 20000),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID = 20001;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID(622, 20001),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID = 20002;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID(623, 20002),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID = 20003;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID(624, 20003),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID = 20004;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID(625, 20004),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID = 20005;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID(626, 20005),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID = 20006;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID(627, 20006),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID = 20007;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID(628, 20007),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID = 20008;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID(629, 20008),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID = 20009;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID(630, 20009),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID = 20010;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID(631, 20010),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID = 20011;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID(632, 20011),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID = 20012;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID(633, 20012),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID = 20013;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID(634, 20013),
    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID = 20014;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID(635, 20014),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE = 21000;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE(636, 21000),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 1 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE = 21001;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE(637, 21001),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 2 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE = 21002;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE(638, 21002),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 3 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE = 21003;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE(639, 21003),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 4 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE = 21004;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE(640, 21004),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 5 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE = 21005;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE(641, 21005),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 6 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE = 21006;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE(642, 21006),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 7 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE = 21007;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE(643, 21007),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 8 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE = 21008;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE(644, 21008),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 9 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE = 21009;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE(645, 21009),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 10 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE = 21010;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE(646, 21010),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 11 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE = 21011;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE(647, 21011),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 12 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE = 21012;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE(648, 21012),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 13 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE = 21013;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE(649, 21013),
    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 14 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE = 21014;</code>
     */
    BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE(650, 21014),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 0 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_0_VALUE_ID = 100000;</code>
     */
    CUSTOM_DIMENSION_0_VALUE_ID(651, 100000),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 1 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_1_VALUE_ID = 100001;</code>
     */
    CUSTOM_DIMENSION_1_VALUE_ID(652, 100001),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 2 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_2_VALUE_ID = 100002;</code>
     */
    CUSTOM_DIMENSION_2_VALUE_ID(653, 100002),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 3 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_3_VALUE_ID = 100003;</code>
     */
    CUSTOM_DIMENSION_3_VALUE_ID(654, 100003),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 4 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_4_VALUE_ID = 100004;</code>
     */
    CUSTOM_DIMENSION_4_VALUE_ID(655, 100004),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 5 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_5_VALUE_ID = 100005;</code>
     */
    CUSTOM_DIMENSION_5_VALUE_ID(656, 100005),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 6 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_6_VALUE_ID = 100006;</code>
     */
    CUSTOM_DIMENSION_6_VALUE_ID(657, 100006),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_7_VALUE_ID = 100007;</code>
     */
    CUSTOM_DIMENSION_7_VALUE_ID(658, 100007),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 8 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_8_VALUE_ID = 100008;</code>
     */
    CUSTOM_DIMENSION_8_VALUE_ID(659, 100008),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_9_VALUE_ID = 100009;</code>
     */
    CUSTOM_DIMENSION_9_VALUE_ID(660, 100009),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 0 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_0_VALUE = 101000;</code>
     */
    CUSTOM_DIMENSION_0_VALUE(661, 101000),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 1 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_1_VALUE = 101001;</code>
     */
    CUSTOM_DIMENSION_1_VALUE(662, 101001),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 2 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_2_VALUE = 101002;</code>
     */
    CUSTOM_DIMENSION_2_VALUE(663, 101002),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 3 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_3_VALUE = 101003;</code>
     */
    CUSTOM_DIMENSION_3_VALUE(664, 101003),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 4 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_4_VALUE = 101004;</code>
     */
    CUSTOM_DIMENSION_4_VALUE(665, 101004),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 5 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_5_VALUE = 101005;</code>
     */
    CUSTOM_DIMENSION_5_VALUE(666, 101005),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 6 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_6_VALUE = 101006;</code>
     */
    CUSTOM_DIMENSION_6_VALUE(667, 101006),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 7 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_7_VALUE = 101007;</code>
     */
    CUSTOM_DIMENSION_7_VALUE(668, 101007),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 8 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_8_VALUE = 101008;</code>
     */
    CUSTOM_DIMENSION_8_VALUE(669, 101008),
    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_9_VALUE = 101009;</code>
     */
    CUSTOM_DIMENSION_9_VALUE(670, 101009),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     *
     *
     * <pre>
     * Deprecated. Dimension has been renamed to `DEAL_BUYER_ID`.
     * The server will normalize any requests using this value to
     * `DEAL_BUYER_ID`.
     * This value will be removed on or after October 10, 2025.
     * </pre>
     *
     * <code>PROGRAMMATIC_BUYER_ID = 240 [deprecated = true];</code>
     */
    public static final Dimension PROGRAMMATIC_BUYER_ID = DEAL_BUYER_ID;

    /**
     *
     *
     * <pre>
     * Deprecated. Dimension has been renamed to `DEAL_BUYER_NAME`.
     * The server will normalize any requests using this value to
     * `DEAL_BUYER_NAME`.
     * This value will be removed on or after October 10, 2025.
     * </pre>
     *
     * <code>PROGRAMMATIC_BUYER_NAME = 241 [deprecated = true];</code>
     */
    public static final Dimension PROGRAMMATIC_BUYER_NAME = DEAL_BUYER_NAME;

    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>DIMENSION_UNSPECIFIED = 0;</code>
     */
    public static final int DIMENSION_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     *  The measurement source of a video ad.
     *
     *
     *
     * Corresponds to "Active View measurement source value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASUREMENT_SOURCE = 575;</code>
     */
    public static final int ACTIVE_VIEW_MEASUREMENT_SOURCE_VALUE = 575;

    /**
     *
     *
     * <pre>
     * Active View measurement source localized name.
     *
     *
     *
     * Corresponds to "Active View measurement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME = 576;</code>
     */
    public static final int ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME_VALUE = 576;

    /**
     *
     *
     * <pre>
     * Advertiser credit status ENUM
     *
     *
     *
     * Corresponds to "Advertiser credit status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_CREDIT_STATUS = 475;</code>
     */
    public static final int ADVERTISER_CREDIT_STATUS_VALUE = 475;

    /**
     *
     *
     * <pre>
     * Advertiser credit status locallized name
     *
     *
     *
     * Corresponds to "Advertiser credit status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_CREDIT_STATUS_NAME = 476;</code>
     */
    public static final int ADVERTISER_CREDIT_STATUS_NAME_VALUE = 476;

    /**
     *
     *
     * <pre>
     * The domain name of the advertiser.
     *
     *
     *
     * Corresponds to "Advertiser domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_DOMAIN_NAME = 242;</code>
     */
    public static final int ADVERTISER_DOMAIN_NAME_VALUE = 242;

    /**
     *
     *
     * <pre>
     * The ID used in an external system for advertiser identification
     *
     *
     *
     * Corresponds to "Advertiser external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_EXTERNAL_ID = 228;</code>
     */
    public static final int ADVERTISER_EXTERNAL_ID_VALUE = 228;

    /**
     *
     *
     * <pre>
     * The ID of an advertiser company assigned to an order
     *
     *
     *
     * Corresponds to "Advertiser ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ADVERTISER_ID = 131;</code>
     */
    public static final int ADVERTISER_ID_VALUE = 131;

    /**
     *
     *
     * <pre>
     * Labels applied to the advertiser
     *  can be used for either competitive exclusion or ad exclusion
     *
     *
     *
     * Corresponds to "Advertiser labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ADVERTISER_LABELS = 230;</code>
     */
    public static final int ADVERTISER_LABELS_VALUE = 230;

    /**
     *
     *
     * <pre>
     * Label ids applied to the advertiser
     *  can be used for either competitive exclusion or ad exclusion
     *
     *
     *
     * Corresponds to "Advertiser label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ADVERTISER_LABEL_IDS = 229;</code>
     */
    public static final int ADVERTISER_LABEL_IDS_VALUE = 229;

    /**
     *
     *
     * <pre>
     * The name of an advertiser company assigned to an order
     *
     *
     *
     * Corresponds to "Advertiser" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_NAME = 132;</code>
     */
    public static final int ADVERTISER_NAME_VALUE = 132;

    /**
     *
     *
     * <pre>
     * The name of the contact associated with an advertiser company
     *
     *
     *
     * Corresponds to "Advertiser primary contact" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_PRIMARY_CONTACT = 227;</code>
     */
    public static final int ADVERTISER_PRIMARY_CONTACT_VALUE = 227;

    /**
     *
     *
     * <pre>
     * Advertiser status ENUM
     *
     *
     *
     * Corresponds to "Advertiser status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_STATUS = 471;</code>
     */
    public static final int ADVERTISER_STATUS_VALUE = 471;

    /**
     *
     *
     * <pre>
     * Advertiser status locallized name
     *
     *
     *
     * Corresponds to "Advertiser status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_STATUS_NAME = 472;</code>
     */
    public static final int ADVERTISER_STATUS_NAME_VALUE = 472;

    /**
     *
     *
     * <pre>
     * Advertiser type ENUM
     *
     *
     *
     * Corresponds to "Advertiser type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADVERTISER_TYPE = 473;</code>
     */
    public static final int ADVERTISER_TYPE_VALUE = 473;

    /**
     *
     *
     * <pre>
     * Advertiser type locallized name
     *
     *
     *
     * Corresponds to "Advertiser type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_TYPE_NAME = 474;</code>
     */
    public static final int ADVERTISER_TYPE_NAME_VALUE = 474;

    /**
     *
     *
     * <pre>
     * The category of an advertiser, such as Arts &amp; Entertainment or Travel &amp;
     *  Tourism.
     *
     *
     *
     * Corresponds to "Advertiser vertical" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADVERTISER_VERTICAL = 580;</code>
     */
    public static final int ADVERTISER_VERTICAL_VALUE = 580;

    /**
     *
     *
     * <pre>
     * Classification of different Ad Exchange products.
     *
     *
     *
     * Corresponds to "Ad Exchange product value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ADX_PRODUCT = 499;</code>
     */
    public static final int ADX_PRODUCT_VALUE = 499;

    /**
     *
     *
     * <pre>
     * Localized name of the classification of different Ad Exchange
     *  products.
     *
     *
     *
     * Corresponds to "Ad Exchange product" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ADX_PRODUCT_NAME = 500;</code>
     */
    public static final int ADX_PRODUCT_NAME_VALUE = 500;

    /**
     *
     *
     * <pre>
     * Ad experiences type.
     *
     *
     *
     * Corresponds to "Ad experiences value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_EXPERIENCES_TYPE = 641;</code>
     */
    public static final int AD_EXPERIENCES_TYPE_VALUE = 641;

    /**
     *
     *
     * <pre>
     * Localized name of the Ad experiences type.
     *
     *
     *
     * Corresponds to "Ad experiences" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_EXPERIENCES_TYPE_NAME = 642;</code>
     */
    public static final int AD_EXPERIENCES_TYPE_NAME_VALUE = 642;

    /**
     *
     *
     * <pre>
     * Shows an ENUM value describing whether a given piece of publisher
     *  inventory was above (ATF) or below the fold (BTF) of a page.
     *
     *
     *
     * Corresponds to "Ad location value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_LOCATION = 390;</code>
     */
    public static final int AD_LOCATION_VALUE = 390;

    /**
     *
     *
     * <pre>
     * Shows a localized string describing whether a given piece of publisher
     *  inventory was above (ATF) or below the fold (BTF) of a page.
     *
     *
     *
     * Corresponds to "Ad location" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_LOCATION_NAME = 391;</code>
     */
    public static final int AD_LOCATION_NAME_VALUE = 391;

    /**
     *
     *
     * <pre>
     * The domain of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_DOMAIN = 620;</code>
     */
    public static final int AD_TECHNOLOGY_PROVIDER_DOMAIN_VALUE = 620;

    /**
     *
     *
     * <pre>
     * The ID of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_ID = 621;</code>
     */
    public static final int AD_TECHNOLOGY_PROVIDER_ID_VALUE = 621;

    /**
     *
     *
     * <pre>
     * The name of the ad technology provider associated with the bid.
     *
     *
     *
     * Corresponds to "Ad technology provider" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TECHNOLOGY_PROVIDER_NAME = 622;</code>
     */
    public static final int AD_TECHNOLOGY_PROVIDER_NAME_VALUE = 622;

    /**
     *
     *
     * <pre>
     * Segmentation of ad types.
     *
     *
     *
     * Corresponds to "Ad type value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_TYPE = 497;</code>
     */
    public static final int AD_TYPE_VALUE = 497;

    /**
     *
     *
     * <pre>
     * Localized name of the ad type.
     *
     *
     *
     * Corresponds to "Ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_TYPE_NAME = 498;</code>
     */
    public static final int AD_TYPE_NAME_VALUE = 498;

    /**
     *
     *
     * <pre>
     * The code of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE = 64;</code>
     */
    public static final int AD_UNIT_CODE_VALUE = 64;

    /**
     *
     *
     * <pre>
     * The code of the first level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_1 = 65;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_1_VALUE = 65;

    /**
     *
     *
     * <pre>
     * The code of the tenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_10 = 74;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_10_VALUE = 74;

    /**
     *
     *
     * <pre>
     * The code of the eleventh level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_11 = 75;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_11_VALUE = 75;

    /**
     *
     *
     * <pre>
     * The code of the twelfth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_12 = 76;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_12_VALUE = 76;

    /**
     *
     *
     * <pre>
     * The code of the thirteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_13 = 77;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_13_VALUE = 77;

    /**
     *
     *
     * <pre>
     * The code of the fourteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_14 = 78;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_14_VALUE = 78;

    /**
     *
     *
     * <pre>
     * The code of the fifteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_15 = 79;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_15_VALUE = 79;

    /**
     *
     *
     * <pre>
     * The code of the sixteenth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_16 = 80;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_16_VALUE = 80;

    /**
     *
     *
     * <pre>
     * The code of the second level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_2 = 66;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_2_VALUE = 66;

    /**
     *
     *
     * <pre>
     * The code of the third level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_3 = 67;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_3_VALUE = 67;

    /**
     *
     *
     * <pre>
     * The code of the fourth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_4 = 68;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_4_VALUE = 68;

    /**
     *
     *
     * <pre>
     * The code of the fifth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_5 = 69;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_5_VALUE = 69;

    /**
     *
     *
     * <pre>
     * The code of the sixth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_6 = 70;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_6_VALUE = 70;

    /**
     *
     *
     * <pre>
     * The code of the seventh level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_7 = 71;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_7_VALUE = 71;

    /**
     *
     *
     * <pre>
     * The code of the eighth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_8 = 72;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_8_VALUE = 72;

    /**
     *
     *
     * <pre>
     * The code of the ninth level ad unit of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit code level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_CODE_LEVEL_9 = 73;</code>
     */
    public static final int AD_UNIT_CODE_LEVEL_9_VALUE = 73;

    /**
     *
     *
     * <pre>
     * The ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID = 25;</code>
     */
    public static final int AD_UNIT_ID_VALUE = 25;

    /**
     *
     *
     * <pre>
     * The full hierarchy of ad unit IDs where the ad was requested, from
     *  root to leaf, excluding the root ad unit ID.
     *
     *
     *
     * Corresponds to "Ad unit ID (all levels)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>AD_UNIT_ID_ALL_LEVEL = 27;</code>
     */
    public static final int AD_UNIT_ID_ALL_LEVEL_VALUE = 27;

    /**
     *
     *
     * <pre>
     * The first level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_1 = 30;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_1_VALUE = 30;

    /**
     *
     *
     * <pre>
     * The tenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_10 = 48;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_10_VALUE = 48;

    /**
     *
     *
     * <pre>
     * The eleventh level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_11 = 50;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_11_VALUE = 50;

    /**
     *
     *
     * <pre>
     * The twelfth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_12 = 52;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_12_VALUE = 52;

    /**
     *
     *
     * <pre>
     * The thirteenth level ad unit ID of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_13 = 54;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_13_VALUE = 54;

    /**
     *
     *
     * <pre>
     * The fourteenth level ad unit ID of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_14 = 56;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_14_VALUE = 56;

    /**
     *
     *
     * <pre>
     * The fifteenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_15 = 58;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_15_VALUE = 58;

    /**
     *
     *
     * <pre>
     * The sixteenth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_16 = 60;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_16_VALUE = 60;

    /**
     *
     *
     * <pre>
     * The second level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_2 = 32;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_2_VALUE = 32;

    /**
     *
     *
     * <pre>
     * The third level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_3 = 34;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_3_VALUE = 34;

    /**
     *
     *
     * <pre>
     * The fourth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_4 = 36;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_4_VALUE = 36;

    /**
     *
     *
     * <pre>
     * The fifth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_5 = 38;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_5_VALUE = 38;

    /**
     *
     *
     * <pre>
     * The sixth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_6 = 40;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_6_VALUE = 40;

    /**
     *
     *
     * <pre>
     * The seventh level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_7 = 42;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_7_VALUE = 42;

    /**
     *
     *
     * <pre>
     * The eighth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_8 = 44;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_8_VALUE = 44;

    /**
     *
     *
     * <pre>
     * The ninth level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_LEVEL_9 = 46;</code>
     */
    public static final int AD_UNIT_ID_LEVEL_9_VALUE = 46;

    /**
     *
     *
     * <pre>
     * The top-level ad unit ID of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit ID (top level)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AD_UNIT_ID_TOP_LEVEL = 142;</code>
     */
    public static final int AD_UNIT_ID_TOP_LEVEL_VALUE = 142;

    /**
     *
     *
     * <pre>
     * The name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME = 26;</code>
     */
    public static final int AD_UNIT_NAME_VALUE = 26;

    /**
     *
     *
     * <pre>
     * The full hierarchy of ad unit names where the ad was requested, from
     *  root to leaf, excluding the root ad unit name.
     *
     *
     *
     * Corresponds to "Ad unit (all levels)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>AD_UNIT_NAME_ALL_LEVEL = 29;</code>
     */
    public static final int AD_UNIT_NAME_ALL_LEVEL_VALUE = 29;

    /**
     *
     *
     * <pre>
     * The first level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 1" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_1 = 31;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_1_VALUE = 31;

    /**
     *
     *
     * <pre>
     * The tenth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 10" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_10 = 49;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_10_VALUE = 49;

    /**
     *
     *
     * <pre>
     * The eleventh level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 11" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_11 = 51;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_11_VALUE = 51;

    /**
     *
     *
     * <pre>
     * The twelfth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 12" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_12 = 53;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_12_VALUE = 53;

    /**
     *
     *
     * <pre>
     * The thirteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 13" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_13 = 55;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_13_VALUE = 55;

    /**
     *
     *
     * <pre>
     * The fourteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 14" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_14 = 57;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_14_VALUE = 57;

    /**
     *
     *
     * <pre>
     * The fifteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 15" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_15 = 59;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_15_VALUE = 59;

    /**
     *
     *
     * <pre>
     * The sixteenth level ad unit name of the ad unit where the ad was
     *  requested.
     *
     *
     *
     * Corresponds to "Ad unit level 16" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_16 = 61;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_16_VALUE = 61;

    /**
     *
     *
     * <pre>
     * The second level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 2" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_2 = 33;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_2_VALUE = 33;

    /**
     *
     *
     * <pre>
     * The third level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 3" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_3 = 35;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_3_VALUE = 35;

    /**
     *
     *
     * <pre>
     * The fourth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 4" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_4 = 37;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_4_VALUE = 37;

    /**
     *
     *
     * <pre>
     * The fifth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 5" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_5 = 39;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_5_VALUE = 39;

    /**
     *
     *
     * <pre>
     * The sixth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 6" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_6 = 41;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_6_VALUE = 41;

    /**
     *
     *
     * <pre>
     * The seventh level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 7" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_7 = 43;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_7_VALUE = 43;

    /**
     *
     *
     * <pre>
     * The eighth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 8" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_8 = 45;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_8_VALUE = 45;

    /**
     *
     *
     * <pre>
     * The ninth level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit level 9" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_LEVEL_9 = 47;</code>
     */
    public static final int AD_UNIT_NAME_LEVEL_9_VALUE = 47;

    /**
     *
     *
     * <pre>
     * The top-level ad unit name of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit (top level)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_NAME_TOP_LEVEL = 143;</code>
     */
    public static final int AD_UNIT_NAME_TOP_LEVEL_VALUE = 143;

    /**
     *
     *
     * <pre>
     * The reward amount of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit reward amount" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_UNIT_REWARD_AMOUNT = 63;</code>
     */
    public static final int AD_UNIT_REWARD_AMOUNT_VALUE = 63;

    /**
     *
     *
     * <pre>
     * The reward type of the ad unit where the ad was requested.
     *
     *
     *
     * Corresponds to "Ad unit reward type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
     * `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_REWARD_TYPE = 62;</code>
     */
    public static final int AD_UNIT_REWARD_TYPE_VALUE = 62;

    /**
     *
     *
     * <pre>
     * The status of the ad unit
     *
     *
     *
     * Corresponds to "Ad unit status value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AD_UNIT_STATUS = 206;</code>
     */
    public static final int AD_UNIT_STATUS_VALUE = 206;

    /**
     *
     *
     * <pre>
     * The name of the status of the ad unit
     *
     *
     *
     * Corresponds to "Ad unit status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AD_UNIT_STATUS_NAME = 207;</code>
     */
    public static final int AD_UNIT_STATUS_NAME_VALUE = 207;

    /**
     *
     *
     * <pre>
     * The ID of an agency at level 1 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 1)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_1_ID = 565;</code>
     */
    public static final int AGENCY_LEVEL_1_ID_VALUE = 565;

    /**
     *
     *
     * <pre>
     * The name of an agency at level 1 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 1)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_1_NAME = 566;</code>
     */
    public static final int AGENCY_LEVEL_1_NAME_VALUE = 566;

    /**
     *
     *
     * <pre>
     * The ID of an agency at level 2 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 2)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_2_ID = 567;</code>
     */
    public static final int AGENCY_LEVEL_2_ID_VALUE = 567;

    /**
     *
     *
     * <pre>
     * The name of an agency at level 2 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 2)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_2_NAME = 568;</code>
     */
    public static final int AGENCY_LEVEL_2_NAME_VALUE = 568;

    /**
     *
     *
     * <pre>
     * The ID of an agency at level 3 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency ID (Level 3)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AGENCY_LEVEL_3_ID = 569;</code>
     */
    public static final int AGENCY_LEVEL_3_ID_VALUE = 569;

    /**
     *
     *
     * <pre>
     * The name of an agency at level 3 of agency hierarchy.
     *
     *
     *
     * Corresponds to "Agency (Level 3)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGENCY_LEVEL_3_NAME = 570;</code>
     */
    public static final int AGENCY_LEVEL_3_NAME_VALUE = 570;

    /**
     *
     *
     * <pre>
     * User age bracket enum.
     *
     *
     *
     * Corresponds to "Age bracket value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AGE_BRACKET = 508;</code>
     */
    public static final int AGE_BRACKET_VALUE = 508;

    /**
     *
     *
     * <pre>
     * Localized user age bracket returned from Google Analytics. For example,
     *  "18-24", "25-34", "35-44", "45-54", "55-64", "65+".
     *
     *
     *
     * Corresponds to "Age bracket" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AGE_BRACKET_NAME = 582;</code>
     */
    public static final int AGE_BRACKET_NAME_VALUE = 582;

    /**
     *
     *
     * <pre>
     * Enum value for App Tracking Transparency consent status.
     *
     *
     *
     * Corresponds to "App Tracking Transparency consent status value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>APP_TRACKING_TRANSPARENCY_CONSENT_STATUS = 442;</code>
     */
    public static final int APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_VALUE = 442;

    /**
     *
     *
     * <pre>
     * Localized string value for App Tracking Transparency consent status.
     *
     *
     *
     * Corresponds to "App Tracking Transparency consent status" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME = 443;</code>
     */
    public static final int APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME_VALUE = 443;

    /**
     *
     *
     * <pre>
     * The app version.
     *
     *
     *
     * Corresponds to "App version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>APP_VERSION = 392;</code>
     */
    public static final int APP_VERSION_VALUE = 392;

    /**
     *
     *
     * <pre>
     * The name of Auction Package deal
     *
     *
     *
     * Corresponds to "Auction package deal" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUCTION_PACKAGE_DEAL = 579;</code>
     */
    public static final int AUCTION_PACKAGE_DEAL_VALUE = 579;

    /**
     *
     *
     * <pre>
     * The ID of Auction Package deal
     *
     *
     *
     * Corresponds to "Auction package deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AUCTION_PACKAGE_DEAL_ID = 571;</code>
     */
    public static final int AUCTION_PACKAGE_DEAL_ID_VALUE = 571;

    /**
     *
     *
     * <pre>
     * ID of targeted audience segment, including all first-party and
     *  third-party segments that matched the user on the winning line item.
     *
     *
     *
     * Corresponds to "Audience segment ID (targeted)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>AUDIENCE_SEGMENT_ID_TARGETED = 584;</code>
     */
    public static final int AUDIENCE_SEGMENT_ID_TARGETED_VALUE = 584;

    /**
     *
     *
     * <pre>
     * Name of targeted audience segment, including all first-party and
     *  third-party segments that matched the user on the winning line item.
     *
     *
     *
     * Corresponds to "Audience segment (targeted)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUDIENCE_SEGMENT_TARGETED = 585;</code>
     */
    public static final int AUDIENCE_SEGMENT_TARGETED_VALUE = 585;

    /**
     *
     *
     * <pre>
     * Enum value of Auto refreshed traffic.
     *
     *
     *
     * Corresponds to "Auto refreshed traffic value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>AUTO_REFRESHED_TRAFFIC = 421;</code>
     */
    public static final int AUTO_REFRESHED_TRAFFIC_VALUE = 421;

    /**
     *
     *
     * <pre>
     * Indicates if the traffic is from auto-refreshed ad requests.
     *
     *
     *
     * Corresponds to "Auto refreshed traffic" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>AUTO_REFRESHED_TRAFFIC_NAME = 422;</code>
     */
    public static final int AUTO_REFRESHED_TRAFFIC_NAME_VALUE = 422;

    /**
     *
     *
     * <pre>
     * The encrypted version of BIDDER_ID.
     *
     *
     *
     * Corresponds to "Bidder encrypted ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BIDDER_ENCRYPTED_ID = 493;</code>
     */
    public static final int BIDDER_ENCRYPTED_ID_VALUE = 493;

    /**
     *
     *
     * <pre>
     * The name of the bidder.
     *
     *
     *
     * Corresponds to "Bidder" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BIDDER_NAME = 494;</code>
     */
    public static final int BIDDER_NAME_VALUE = 494;

    /**
     *
     *
     * <pre>
     * The cpm range within which a bid falls.
     *
     *
     *
     * Corresponds to "Bid Range" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BID_RANGE`
     * </pre>
     *
     * <code>BID_RANGE = 679;</code>
     */
    public static final int BID_RANGE_VALUE = 679;

    /**
     *
     *
     * <pre>
     * The reason a bid was rejected.
     *
     *
     *
     * Corresponds to "Bid rejection reason value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BID_REJECTION_REASON = 599;</code>
     */
    public static final int BID_REJECTION_REASON_VALUE = 599;

    /**
     *
     *
     * <pre>
     * The localized name of the reason a bid was rejected.
     *
     *
     *
     * Corresponds to "Bid rejection reason" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BID_REJECTION_REASON_NAME = 600;</code>
     */
    public static final int BID_REJECTION_REASON_NAME_VALUE = 600;

    /**
     *
     *
     * <pre>
     * The amount of information about the Publisher's page sent to the buyer
     *  who purchased the impressions.
     *
     *
     *
     * Corresponds to "Branding type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BRANDING_TYPE = 383;</code>
     */
    public static final int BRANDING_TYPE_VALUE = 383;

    /**
     *
     *
     * <pre>
     * The localized version of branding type, the amount of information about
     *  the Publisher's page sent to the buyer who purchased the impressions.
     *
     *
     *
     * Corresponds to "Branding type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BRANDING_TYPE_NAME = 384;</code>
     */
    public static final int BRANDING_TYPE_NAME_VALUE = 384;

    /**
     *
     *
     * <pre>
     * Browser category.
     *
     *
     *
     * Corresponds to "Browser category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>BROWSER_CATEGORY = 119;</code>
     */
    public static final int BROWSER_CATEGORY_VALUE = 119;

    /**
     *
     *
     * <pre>
     * Browser category name.
     *
     *
     *
     * Corresponds to "Browser category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BROWSER_CATEGORY_NAME = 120;</code>
     */
    public static final int BROWSER_CATEGORY_NAME_VALUE = 120;

    /**
     *
     *
     * <pre>
     * The ID of the browser.
     *
     *
     *
     * Corresponds to "Browser ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>BROWSER_ID = 235;</code>
     */
    public static final int BROWSER_ID_VALUE = 235;

    /**
     *
     *
     * <pre>
     * The name of the browser.
     *
     *
     *
     * Corresponds to "Browser" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BROWSER_NAME = 236;</code>
     */
    public static final int BROWSER_NAME_VALUE = 236;

    /**
     *
     *
     * <pre>
     * The ID of the buyer network.
     *
     *
     *
     * Corresponds to "Buyer network ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BUYER_NETWORK_ID = 448;</code>
     */
    public static final int BUYER_NETWORK_ID_VALUE = 448;

    /**
     *
     *
     * <pre>
     * The name of the buyer network.
     *
     *
     *
     * Corresponds to "Buyer network" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>BUYER_NETWORK_NAME = 449;</code>
     */
    public static final int BUYER_NETWORK_NAME_VALUE = 449;

    /**
     *
     *
     * <pre>
     * The callout status category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Callout status category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CALLOUT_STATUS_CATEGORY = 588;</code>
     */
    public static final int CALLOUT_STATUS_CATEGORY_VALUE = 588;

    /**
     *
     *
     * <pre>
     * The callout status category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Callout status category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CALLOUT_STATUS_CATEGORY_NAME = 589;</code>
     */
    public static final int CALLOUT_STATUS_CATEGORY_NAME_VALUE = 589;

    /**
     *
     *
     * <pre>
     * Mobile carrier ID.
     *
     *
     *
     * Corresponds to "Carrier ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CARRIER_ID = 369;</code>
     */
    public static final int CARRIER_ID_VALUE = 369;

    /**
     *
     *
     * <pre>
     * Name of the mobile carrier.
     *
     *
     *
     * Corresponds to "Carrier" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CARRIER_NAME = 368;</code>
     */
    public static final int CARRIER_NAME_VALUE = 368;

    /**
     *
     *
     * <pre>
     * Inventory segmentation by channel.
     *
     *
     *
     * Corresponds to "Channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHANNEL = 501;</code>
     */
    public static final int CHANNEL_VALUE = 501;

    /**
     *
     *
     * <pre>
     * Child Publisher Network Code
     *
     *
     *
     * Corresponds to "Child network code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHILD_NETWORK_CODE = 542;</code>
     */
    public static final int CHILD_NETWORK_CODE_VALUE = 542;

    /**
     *
     *
     * <pre>
     * Child Publisher Network ID
     *
     *
     *
     * Corresponds to "Child network ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CHILD_NETWORK_ID = 544;</code>
     */
    public static final int CHILD_NETWORK_ID_VALUE = 544;

    /**
     *
     *
     * <pre>
     * Child Partner Network Name
     *
     *
     *
     * Corresponds to "Child network" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CHILD_PARTNER_NAME = 543;</code>
     */
    public static final int CHILD_PARTNER_NAME_VALUE = 543;

    /**
     *
     *
     * <pre>
     * The criteria ID of the city in which the ad served.
     *
     *
     *
     * Corresponds to "City ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CITY_ID = 459;</code>
     */
    public static final int CITY_ID_VALUE = 459;

    /**
     *
     *
     * <pre>
     * The name of the city in which the ad served.
     *
     *
     *
     * Corresponds to "City" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CITY_NAME = 452;</code>
     */
    public static final int CITY_NAME_VALUE = 452;

    /**
     *
     *
     * <pre>
     * The ID of an advertiser, classified by Google, associated with a creative
     *  transacted
     *
     *
     *
     * Corresponds to "Advertiser ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CLASSIFIED_ADVERTISER_ID = 133;</code>
     */
    public static final int CLASSIFIED_ADVERTISER_ID_VALUE = 133;

    /**
     *
     *
     * <pre>
     * The name of an advertiser, classified by Google, associated with a
     *  creative transacted
     *
     *
     *
     * Corresponds to "Advertiser (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CLASSIFIED_ADVERTISER_NAME = 134;</code>
     */
    public static final int CLASSIFIED_ADVERTISER_NAME_VALUE = 134;

    /**
     *
     *
     * <pre>
     * ID of the brand, as classified by Google,
     *
     *
     *
     * Corresponds to "Brand ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CLASSIFIED_BRAND_ID = 243;</code>
     */
    public static final int CLASSIFIED_BRAND_ID_VALUE = 243;

    /**
     *
     *
     * <pre>
     * Name of the brand, as classified by Google,
     *
     *
     *
     * Corresponds to "Brand (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CLASSIFIED_BRAND_NAME = 244;</code>
     */
    public static final int CLASSIFIED_BRAND_NAME_VALUE = 244;

    /**
     *
     *
     * <pre>
     * The display name of the CMS content.
     *
     *
     *
     * Corresponds to "Content source name" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_CMS_NAME = 643;</code>
     */
    public static final int CONTENT_CMS_NAME_VALUE = 643;

    /**
     *
     *
     * <pre>
     * The CMS content ID of the video content.
     *
     *
     *
     * Corresponds to "ID of the video in the content source" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_CMS_VIDEO_ID = 644;</code>
     */
    public static final int CONTENT_CMS_VIDEO_ID_VALUE = 644;

    /**
     *
     *
     * <pre>
     * ID of the video content served.
     *
     *
     *
     * Corresponds to "Content ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CONTENT_ID = 246;</code>
     */
    public static final int CONTENT_ID_VALUE = 246;

    /**
     *
     *
     * <pre>
     * Content mapping presence ENUM value
     *
     *
     *
     * Corresponds to "Content mapping presence value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CONTENT_MAPPING_PRESENCE = 731;</code>
     */
    public static final int CONTENT_MAPPING_PRESENCE_VALUE = 731;

    /**
     *
     *
     * <pre>
     * Content mapping presence name
     *
     *
     *
     * Corresponds to "Content mapping presence" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_MAPPING_PRESENCE_NAME = 732;</code>
     */
    public static final int CONTENT_MAPPING_PRESENCE_NAME_VALUE = 732;

    /**
     *
     *
     * <pre>
     * Name of the video content served.
     *
     *
     *
     * Corresponds to "Content" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTENT_NAME = 247;</code>
     */
    public static final int CONTENT_NAME_VALUE = 247;

    /**
     *
     *
     * <pre>
     * The continent in which the ad served (derived from country).
     *
     *
     *
     * Corresponds to "Continent value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CONTINENT = 469;</code>
     */
    public static final int CONTINENT_VALUE = 469;

    /**
     *
     *
     * <pre>
     * The name of the continent in which the ad served (derived from country).
     *
     *
     *
     * Corresponds to "Continent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CONTINENT_NAME = 470;</code>
     */
    public static final int CONTINENT_NAME_VALUE = 470;

    /**
     *
     *
     * <pre>
     * The ISO code of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>COUNTRY_CODE = 466;</code>
     */
    public static final int COUNTRY_CODE_VALUE = 466;

    /**
     *
     *
     * <pre>
     * The criteria ID of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>COUNTRY_ID = 11;</code>
     */
    public static final int COUNTRY_ID_VALUE = 11;

    /**
     *
     *
     * <pre>
     * The name of the country in which the ad served.
     *
     *
     *
     * Corresponds to "Country" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>COUNTRY_NAME = 12;</code>
     */
    public static final int COUNTRY_NAME_VALUE = 12;

    /**
     *
     *
     * <pre>
     * Enum value of creative billing type
     *
     *
     *
     * Corresponds to "Creative billing type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_BILLING_TYPE = 366;</code>
     */
    public static final int CREATIVE_BILLING_TYPE_VALUE = 366;

    /**
     *
     *
     * <pre>
     * Localized string value of creative billing type
     *
     *
     *
     * Corresponds to "Creative billing type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_BILLING_TYPE_NAME = 367;</code>
     */
    public static final int CREATIVE_BILLING_TYPE_NAME_VALUE = 367;

    /**
     *
     *
     * <pre>
     * Represents the click-through URL of a creative
     *
     *
     *
     * Corresponds to "Creative click through url" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_CLICK_THROUGH_URL = 174;</code>
     */
    public static final int CREATIVE_CLICK_THROUGH_URL_VALUE = 174;

    /**
     *
     *
     * <pre>
     * The ID of a creative
     *
     *
     *
     * Corresponds to "Creative ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CREATIVE_ID = 138;</code>
     */
    public static final int CREATIVE_ID_VALUE = 138;

    /**
     *
     *
     * <pre>
     * Creative name
     *
     *
     *
     * Corresponds to "Creative" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_NAME = 139;</code>
     */
    public static final int CREATIVE_NAME_VALUE = 139;

    /**
     *
     *
     * <pre>
     * Creative Policies filtering.
     *
     *
     *
     * Corresponds to "Creative policies filtering value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_POLICIES_FILTERING = 711;</code>
     */
    public static final int CREATIVE_POLICIES_FILTERING_VALUE = 711;

    /**
     *
     *
     * <pre>
     * Localized name of the Creative Policies filtering.
     *
     *
     *
     * Corresponds to "Creative policies filtering" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_POLICIES_FILTERING_NAME = 712;</code>
     */
    public static final int CREATIVE_POLICIES_FILTERING_NAME_VALUE = 712;

    /**
     *
     *
     * <pre>
     * Creative Protections filtering (Publisher Blocks Enforcement).
     *
     *
     *
     * Corresponds to "Creative protections filtering value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_PROTECTIONS_FILTERING = 704;</code>
     */
    public static final int CREATIVE_PROTECTIONS_FILTERING_VALUE = 704;

    /**
     *
     *
     * <pre>
     * Localized name of the Creative Protections filtering.
     *
     *
     *
     * Corresponds to "Creative protections filtering" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_PROTECTIONS_FILTERING_NAME = 705;</code>
     */
    public static final int CREATIVE_PROTECTIONS_FILTERING_NAME_VALUE = 705;

    /**
     *
     *
     * <pre>
     * ENUM describing whether the creative is part of a creative set and if so,
     *  what its role in the creative set is.
     *
     *
     *
     * Corresponds to "Creative set role type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_SET_ROLE_TYPE = 686;</code>
     */
    public static final int CREATIVE_SET_ROLE_TYPE_VALUE = 686;

    /**
     *
     *
     * <pre>
     * Localized name describing whether the creative is part of a creative set
     *  and if so, what its role in the creative set is.
     *
     *
     *
     * Corresponds to "Creative set role type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_SET_ROLE_TYPE_NAME = 687;</code>
     */
    public static final int CREATIVE_SET_ROLE_TYPE_NAME_VALUE = 687;

    /**
     *
     *
     * <pre>
     * Creative technology ENUM
     *
     *
     *
     * Corresponds to "Creative technology value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_TECHNOLOGY = 148;</code>
     */
    public static final int CREATIVE_TECHNOLOGY_VALUE = 148;

    /**
     *
     *
     * <pre>
     * Creative technology locallized name
     *
     *
     *
     * Corresponds to "Creative technology" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_TECHNOLOGY_NAME = 149;</code>
     */
    public static final int CREATIVE_TECHNOLOGY_NAME_VALUE = 149;

    /**
     *
     *
     * <pre>
     * Third party vendor name of a creative
     *
     *
     *
     * Corresponds to "Creative third party vendor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_THIRD_PARTY_VENDOR = 361;</code>
     */
    public static final int CREATIVE_THIRD_PARTY_VENDOR_VALUE = 361;

    /**
     *
     *
     * <pre>
     * Enum value of creative type
     *
     *
     *
     * Corresponds to "Creative type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CREATIVE_TYPE = 344;</code>
     */
    public static final int CREATIVE_TYPE_VALUE = 344;

    /**
     *
     *
     * <pre>
     * Localized string name of creative type
     *
     *
     *
     * Corresponds to "Creative type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_TYPE_NAME = 345;</code>
     */
    public static final int CREATIVE_TYPE_NAME_VALUE = 345;

    /**
     *
     *
     * <pre>
     * Creative vendor ID.
     *
     *
     *
     * Corresponds to "Creative vendor ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CREATIVE_VENDOR_ID = 706;</code>
     */
    public static final int CREATIVE_VENDOR_ID_VALUE = 706;

    /**
     *
     *
     * <pre>
     * Name of the Creative vendor.
     *
     *
     *
     * Corresponds to "Creative vendor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_VENDOR_NAME = 707;</code>
     */
    public static final int CREATIVE_VENDOR_NAME_VALUE = 707;

    /**
     *
     *
     * <pre>
     * The third party where Google Ad Manager was redirected for the creative,
     *  based on the domain.
     *
     *
     *
     * Corresponds to "Creative video redirect third party" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CREATIVE_VIDEO_REDIRECT_THIRD_PARTY = 562;</code>
     */
    public static final int CREATIVE_VIDEO_REDIRECT_THIRD_PARTY_VALUE = 562;

    /**
     *
     *
     * <pre>
     * The ID of a Curation partner
     *
     *
     *
     * Corresponds to "Curation partner ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CURATOR_ID = 572;</code>
     */
    public static final int CURATOR_ID_VALUE = 572;

    /**
     *
     *
     * <pre>
     * The name of a Curation partner
     *
     *
     *
     * Corresponds to "Curation partner" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CURATOR_NAME = 573;</code>
     */
    public static final int CURATOR_NAME_VALUE = 573;

    /**
     *
     *
     * <pre>
     * Custom event ID
     *
     *
     *
     * Corresponds to "Custom event id" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CUSTOM_EVENT_ID = 737;</code>
     */
    public static final int CUSTOM_EVENT_ID_VALUE = 737;

    /**
     *
     *
     * <pre>
     * Custom event name
     *
     *
     *
     * Corresponds to "Custom event" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_EVENT_NAME = 735;</code>
     */
    public static final int CUSTOM_EVENT_NAME_VALUE = 735;

    /**
     *
     *
     * <pre>
     * Custom event type
     *
     *
     *
     * Corresponds to "Custom event type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>CUSTOM_EVENT_TYPE = 736;</code>
     */
    public static final int CUSTOM_EVENT_TYPE_VALUE = 736;

    /**
     *
     *
     * <pre>
     * Localized name of the custom event type
     *
     *
     *
     * Corresponds to "Custom event type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_EVENT_TYPE_NAME = 738;</code>
     */
    public static final int CUSTOM_EVENT_TYPE_NAME_VALUE = 738;

    /**
     *
     *
     * <pre>
     * The ID of an ad spot. An ad spot can be added to an ad break template, as
     *  well as directly targeted by a video line item.
     *
     *
     *
     * Corresponds to "Custom spot ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>CUSTOM_SPOT_ID = 423;</code>
     */
    public static final int CUSTOM_SPOT_ID_VALUE = 423;

    /**
     *
     *
     * <pre>
     * The name of an ad spot. An ad spot can be added to an ad break
     *  template, as well as directly targeted by a video line item.
     *
     *
     *
     * Corresponds to "Custom spot" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>CUSTOM_SPOT_NAME = 424;</code>
     */
    public static final int CUSTOM_SPOT_NAME_VALUE = 424;

    /**
     *
     *
     * <pre>
     * Breaks down reporting data by date.
     *
     *
     *
     * Corresponds to "Date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>DATE = 3;</code>
     */
    public static final int DATE_VALUE = 3;

    /**
     *
     *
     * <pre>
     * Breaks down reporting data by day of the week. Monday is 1 and 7 is
     *  Sunday.
     *
     *
     *
     * Corresponds to "Day of week" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DAY_OF_WEEK = 4;</code>
     */
    public static final int DAY_OF_WEEK_VALUE = 4;

    /**
     *
     *
     * <pre>
     * The ID of the buyer of a deal.
     *
     *
     *
     * Corresponds to "Deal buyer ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEAL_BUYER_ID = 240;</code>
     */
    public static final int DEAL_BUYER_ID_VALUE = 240;

    /**
     *
     *
     * <pre>
     * The name of the buyer of a deal.
     *
     *
     *
     * Corresponds to "Deal buyer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_BUYER_NAME = 241;</code>
     */
    public static final int DEAL_BUYER_NAME_VALUE = 241;

    /**
     *
     *
     * <pre>
     * Deal ID
     *
     *
     *
     * Corresponds to "Deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_ID = 436;</code>
     */
    public static final int DEAL_ID_VALUE = 436;

    /**
     *
     *
     * <pre>
     * Deal name
     *
     *
     *
     * Corresponds to "Deal" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEAL_NAME = 437;</code>
     */
    public static final int DEAL_NAME_VALUE = 437;

    /**
     *
     *
     * <pre>
     * The ID of the secure signals that were sent to the bidder who won the
     *  impression.
     *
     *
     *
     * Corresponds to "Secure signal ID (delivered)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DELIVERED_SECURE_SIGNAL_ID = 309;</code>
     */
    public static final int DELIVERED_SECURE_SIGNAL_ID_VALUE = 309;

    /**
     *
     *
     * <pre>
     * The name of the secure signals that were sent to the bidder who won the
     *  impression.
     *
     *
     *
     * Corresponds to "Secure signal name (delivered)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DELIVERED_SECURE_SIGNAL_NAME = 310;</code>
     */
    public static final int DELIVERED_SECURE_SIGNAL_NAME_VALUE = 310;

    /**
     *
     *
     * <pre>
     * Demand channel.
     *
     *
     *
     * Corresponds to "Demand channel value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_CHANNEL = 9;</code>
     */
    public static final int DEMAND_CHANNEL_VALUE = 9;

    /**
     *
     *
     * <pre>
     * Demand channel name.
     *
     *
     *
     * Corresponds to "Demand channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_CHANNEL_NAME = 10;</code>
     */
    public static final int DEMAND_CHANNEL_NAME_VALUE = 10;

    /**
     *
     *
     * <pre>
     * Demand source.
     *
     *
     *
     * Corresponds to "Demand source value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_SOURCE = 592;</code>
     */
    public static final int DEMAND_SOURCE_VALUE = 592;

    /**
     *
     *
     * <pre>
     * Demand source name.
     *
     *
     *
     * Corresponds to "Demand source" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_SOURCE_NAME = 593;</code>
     */
    public static final int DEMAND_SOURCE_NAME_VALUE = 593;

    /**
     *
     *
     * <pre>
     * Demand subchannel.
     *
     *
     *
     * Corresponds to "Demand subchannel value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEMAND_SUBCHANNEL = 22;</code>
     */
    public static final int DEMAND_SUBCHANNEL_VALUE = 22;

    /**
     *
     *
     * <pre>
     * Demand subchannel name.
     *
     *
     *
     * Corresponds to "Demand subchannel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEMAND_SUBCHANNEL_NAME = 23;</code>
     */
    public static final int DEMAND_SUBCHANNEL_NAME_VALUE = 23;

    /**
     *
     *
     * <pre>
     * The device on which an ad was served.
     *
     *
     *
     * Corresponds to "Device value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEVICE = 226;</code>
     */
    public static final int DEVICE_VALUE = 226;

    /**
     *
     *
     * <pre>
     * The device category to which an ad is being targeted.
     *
     *
     *
     * Corresponds to "Device category value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DEVICE_CATEGORY = 15;</code>
     */
    public static final int DEVICE_CATEGORY_VALUE = 15;

    /**
     *
     *
     * <pre>
     * The name of the category of device (smartphone, feature phone, tablet, or
     *  desktop) to which an ad is being targeted.
     *
     *
     *
     * Corresponds to "Device category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_CATEGORY_NAME = 16;</code>
     */
    public static final int DEVICE_CATEGORY_NAME_VALUE = 16;

    /**
     *
     *
     * <pre>
     * Device manufacturer ID
     *
     *
     *
     * Corresponds to "Device manufacturer ID" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEVICE_MANUFACTURER_ID = 525;</code>
     */
    public static final int DEVICE_MANUFACTURER_ID_VALUE = 525;

    /**
     *
     *
     * <pre>
     * Device manufacturer name
     *
     *
     *
     * Corresponds to "Device manufacturer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_MANUFACTURER_NAME = 526;</code>
     */
    public static final int DEVICE_MANUFACTURER_NAME_VALUE = 526;

    /**
     *
     *
     * <pre>
     * Device model ID
     *
     *
     *
     * Corresponds to "Device model ID" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>DEVICE_MODEL_ID = 527;</code>
     */
    public static final int DEVICE_MODEL_ID_VALUE = 527;

    /**
     *
     *
     * <pre>
     * Device model name
     *
     *
     *
     * Corresponds to "Device model" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_MODEL_NAME = 528;</code>
     */
    public static final int DEVICE_MODEL_NAME_VALUE = 528;

    /**
     *
     *
     * <pre>
     * The localized name of the device on which an ad was served.
     *
     *
     *
     * Corresponds to "Device" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DEVICE_NAME = 225;</code>
     */
    public static final int DEVICE_NAME_VALUE = 225;

    /**
     *
     *
     * <pre>
     * The ID of DSP Seat
     *
     *
     *
     * Corresponds to "DSP seat ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DSP_SEAT_ID = 564;</code>
     */
    public static final int DSP_SEAT_ID_VALUE = 564;

    /**
     *
     *
     * <pre>
     * Categorization of inventory sources based on AdX dynamic allocation
     *  backfill type.
     *
     *
     *
     * Corresponds to "Dynamic allocation value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>DYNAMIC_ALLOCATION_TYPE = 502;</code>
     */
    public static final int DYNAMIC_ALLOCATION_TYPE_VALUE = 502;

    /**
     *
     *
     * <pre>
     * Localized name of the dynamic allocation type.
     *
     *
     *
     * Corresponds to "Dynamic allocation" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>DYNAMIC_ALLOCATION_TYPE_NAME = 503;</code>
     */
    public static final int DYNAMIC_ALLOCATION_TYPE_NAME_VALUE = 503;

    /**
     *
     *
     * <pre>
     * Status of Encrypted Signals for Publishers delivery.
     *
     *
     *
     * Corresponds to "Secure signal delivery value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ESP_DELIVERY = 623;</code>
     */
    public static final int ESP_DELIVERY_VALUE = 623;

    /**
     *
     *
     * <pre>
     * Localized name of the ESP delivery status.
     *
     *
     *
     * Corresponds to "Secure signal delivery" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ESP_DELIVERY_NAME = 624;</code>
     */
    public static final int ESP_DELIVERY_NAME_VALUE = 624;

    /**
     *
     *
     * <pre>
     * Whether Encrypted Signals for Publishers are present on the ad request.
     *
     *
     *
     * Corresponds to "Secure signal presence value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ESP_PRESENCE = 625;</code>
     */
    public static final int ESP_PRESENCE_VALUE = 625;

    /**
     *
     *
     * <pre>
     * Localized name of the ESP presence status.
     *
     *
     *
     * Corresponds to "Secure signal presence" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ESP_PRESENCE_NAME = 626;</code>
     */
    public static final int ESP_PRESENCE_NAME_VALUE = 626;

    /**
     *
     *
     * <pre>
     * Exchange bidding deal ID.
     *
     *
     *
     * Corresponds to "Exchange bidding deal id" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_ID = 715;</code>
     */
    public static final int EXCHANGE_BIDDING_DEAL_ID_VALUE = 715;

    /**
     *
     *
     * <pre>
     * Exchange bidding deal type.
     *
     *
     *
     * Corresponds to "Exchange bidding deal type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_TYPE = 714;</code>
     */
    public static final int EXCHANGE_BIDDING_DEAL_TYPE_VALUE = 714;

    /**
     *
     *
     * <pre>
     * Localized name of the exchange bidding deal type.
     *
     *
     *
     * Corresponds to "Exchange bidding deal type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_BIDDING_DEAL_TYPE_NAME = 723;</code>
     */
    public static final int EXCHANGE_BIDDING_DEAL_TYPE_NAME_VALUE = 723;

    /**
     *
     *
     * <pre>
     * ID of the yield partner as classified by Google
     *
     *
     *
     * Corresponds to "Yield partner ID (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>EXCHANGE_THIRD_PARTY_COMPANY_ID = 185;</code>
     */
    public static final int EXCHANGE_THIRD_PARTY_COMPANY_ID_VALUE = 185;

    /**
     *
     *
     * <pre>
     * Name of the yield partner as classified by Google
     *
     *
     *
     * Corresponds to "Yield partner (classified)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>EXCHANGE_THIRD_PARTY_COMPANY_NAME = 186;</code>
     */
    public static final int EXCHANGE_THIRD_PARTY_COMPANY_NAME_VALUE = 186;

    /**
     *
     *
     * <pre>
     * The ID of the first look pricing rule.
     *
     *
     *
     * Corresponds to "First look pricing rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>FIRST_LOOK_PRICING_RULE_ID = 248;</code>
     */
    public static final int FIRST_LOOK_PRICING_RULE_ID_VALUE = 248;

    /**
     *
     *
     * <pre>
     * The name of the first look pricing rule.
     *
     *
     *
     * Corresponds to "First look pricing rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>FIRST_LOOK_PRICING_RULE_NAME = 249;</code>
     */
    public static final int FIRST_LOOK_PRICING_RULE_NAME_VALUE = 249;

    /**
     *
     *
     * <pre>
     * Whether a first-party user identifier was present on a given
     *  ad-request.
     *
     *
     *
     * Corresponds to "First-party ID status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>FIRST_PARTY_ID_STATUS = 404;</code>
     */
    public static final int FIRST_PARTY_ID_STATUS_VALUE = 404;

    /**
     *
     *
     * <pre>
     * The localized name of whether a first-party user identifier was present
     *  on a given ad-request.
     *
     *
     *
     * Corresponds to "First-party ID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>FIRST_PARTY_ID_STATUS_NAME = 405;</code>
     */
    public static final int FIRST_PARTY_ID_STATUS_NAME_VALUE = 405;

    /**
     *
     *
     * <pre>
     * User gender enum value returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Gender value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>GENDER = 509;</code>
     */
    public static final int GENDER_VALUE = 509;

    /**
     *
     *
     * <pre>
     * Localized user gender returned from Google Analytics. For example,
     *  "male", "female".
     *
     *
     *
     * Corresponds to "Gender" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>GENDER_NAME = 583;</code>
     */
    public static final int GENDER_NAME_VALUE = 583;

    /**
     *
     *
     * <pre>
     * The ID of a Google Analytics stream. For example, web site or mobile app
     *
     *
     *
     * Corresponds to "Google Analytics stream ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_STREAM_ID = 519;</code>
     */
    public static final int GOOGLE_ANALYTICS_STREAM_ID_VALUE = 519;

    /**
     *
     *
     * <pre>
     * The name of a Google Analytics stream. For example,
     *  web site or mobile app.
     *
     *
     *
     * Corresponds to "Google Analytics stream" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_STREAM_NAME = 520;</code>
     */
    public static final int GOOGLE_ANALYTICS_STREAM_NAME_VALUE = 520;

    /**
     *
     *
     * <pre>
     * The ID of the header bidding trafficking yield partner.
     *
     *
     *
     * Corresponds to "Yield partner ID (header bidding trafficking)" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>HBT_YIELD_PARTNER_ID = 659;</code>
     */
    public static final int HBT_YIELD_PARTNER_ID_VALUE = 659;

    /**
     *
     *
     * <pre>
     * The name of the header bidding trafficking yield partner.
     *
     *
     *
     * Corresponds to "Yield partner (header bidding trafficking)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>HBT_YIELD_PARTNER_NAME = 660;</code>
     */
    public static final int HBT_YIELD_PARTNER_NAME_VALUE = 660;

    /**
     *
     *
     * <pre>
     * Header Bidder integration type.
     *
     *
     *
     * Corresponds to "Header bidder integration type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>HEADER_BIDDER_INTEGRATION_TYPE = 718;</code>
     */
    public static final int HEADER_BIDDER_INTEGRATION_TYPE_VALUE = 718;

    /**
     *
     *
     * <pre>
     * Localized name of the Header Bidder integration type.
     *
     *
     *
     * Corresponds to "Header bidder integration type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>HEADER_BIDDER_INTEGRATION_TYPE_NAME = 719;</code>
     */
    public static final int HEADER_BIDDER_INTEGRATION_TYPE_NAME_VALUE = 719;

    /**
     *
     *
     * <pre>
     * Breaks down reporting data by hour in one day.
     *
     *
     *
     * Corresponds to "Hour" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>HOUR = 100;</code>
     */
    public static final int HOUR_VALUE = 100;

    /**
     *
     *
     * <pre>
     * Impression Counting Method ENUM.
     *
     *
     *
     * Corresponds to "Impression counting method value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>IMPRESSION_COUNTING_METHOD = 577;</code>
     */
    public static final int IMPRESSION_COUNTING_METHOD_VALUE = 577;

    /**
     *
     *
     * <pre>
     * Localized impression counting method name.
     *
     *
     *
     * Corresponds to "Impression counting method" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>IMPRESSION_COUNTING_METHOD_NAME = 578;</code>
     */
    public static final int IMPRESSION_COUNTING_METHOD_NAME_VALUE = 578;

    /**
     *
     *
     * <pre>
     * The interaction type of an ad.
     *
     *
     *
     * Corresponds to "Interaction type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INTERACTION_TYPE = 223;</code>
     */
    public static final int INTERACTION_TYPE_VALUE = 223;

    /**
     *
     *
     * <pre>
     * The localized name of the interaction type of an ad.
     *
     *
     *
     * Corresponds to "Interaction type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INTERACTION_TYPE_NAME = 224;</code>
     */
    public static final int INTERACTION_TYPE_NAME_VALUE = 224;

    /**
     *
     *
     * <pre>
     * User interest returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Interests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INTEREST = 510;</code>
     */
    public static final int INTEREST_VALUE = 510;

    /**
     *
     *
     * <pre>
     * Inventory format.
     *  The format of the ad unit (e.g, banner) where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory format value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_FORMAT = 17;</code>
     */
    public static final int INVENTORY_FORMAT_VALUE = 17;

    /**
     *
     *
     * <pre>
     * Inventory format name.
     *  The format of the ad unit (e.g, banner) where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory format" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_FORMAT_NAME = 18;</code>
     */
    public static final int INVENTORY_FORMAT_NAME_VALUE = 18;

    /**
     *
     *
     * <pre>
     * The ID of the inventory share assignment.
     *
     *
     *
     * Corresponds to "Inventory share assignment ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>INVENTORY_SHARE_ASSIGNMENT_ID = 648;</code>
     */
    public static final int INVENTORY_SHARE_ASSIGNMENT_ID_VALUE = 648;

    /**
     *
     *
     * <pre>
     * The name of the inventory share assignment.
     *
     *
     *
     * Corresponds to "Inventory share assignment" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_ASSIGNMENT_NAME = 649;</code>
     */
    public static final int INVENTORY_SHARE_ASSIGNMENT_NAME_VALUE = 649;

    /**
     *
     *
     * <pre>
     * The result of an inventory share.
     *
     *
     *
     * Corresponds to "Inventory share outcome value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_OUTCOME = 603;</code>
     */
    public static final int INVENTORY_SHARE_OUTCOME_VALUE = 603;

    /**
     *
     *
     * <pre>
     * The localized name of the result of an inventory share.
     *
     *
     *
     * Corresponds to "Inventory share outcome" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_OUTCOME_NAME = 604;</code>
     */
    public static final int INVENTORY_SHARE_OUTCOME_NAME_VALUE = 604;

    /**
     *
     *
     * <pre>
     * The partner ad server of the inventory share.
     *
     *
     *
     * Corresponds to "Inventory share partner ad server value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_AD_SERVER = 652;</code>
     */
    public static final int INVENTORY_SHARE_PARTNER_AD_SERVER_VALUE = 652;

    /**
     *
     *
     * <pre>
     * The localized name of the partner ad server.
     *
     *
     *
     * Corresponds to "Inventory share partner ad server" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_AD_SERVER_NAME = 653;</code>
     */
    public static final int INVENTORY_SHARE_PARTNER_AD_SERVER_NAME_VALUE = 653;

    /**
     *
     *
     * <pre>
     * The target share percent of the inventory share assignment
     *
     *
     *
     * Corresponds to "Partner target share percent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TARGET_SHARE_PERCENT = 654;</code>
     */
    public static final int INVENTORY_SHARE_TARGET_SHARE_PERCENT_VALUE = 654;

    /**
     *
     *
     * <pre>
     * The type of the inventory share.
     *
     *
     *
     * Corresponds to "Inventory share type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TYPE = 650;</code>
     */
    public static final int INVENTORY_SHARE_TYPE_VALUE = 650;

    /**
     *
     *
     * <pre>
     * The localized name of the inventory share type.
     *
     *
     *
     * Corresponds to "Inventory share type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_SHARE_TYPE_NAME = 651;</code>
     */
    public static final int INVENTORY_SHARE_TYPE_NAME_VALUE = 651;

    /**
     *
     *
     * <pre>
     * Inventory type.
     *  The kind of web page or device where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory type (expanded) value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>INVENTORY_TYPE = 19;</code>
     */
    public static final int INVENTORY_TYPE_VALUE = 19;

    /**
     *
     *
     * <pre>
     * Inventory type name.
     *  The kind of web page or device where the ad was requested.
     *
     *
     *
     * Corresponds to "Inventory type (expanded)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>INVENTORY_TYPE_NAME = 20;</code>
     */
    public static final int INVENTORY_TYPE_NAME_VALUE = 20;

    /**
     *
     *
     * <pre>
     * Whether traffic is Adx Direct.
     *
     *
     *
     * Corresponds to "Is AdX Direct" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_ADX_DIRECT = 382;</code>
     */
    public static final int IS_ADX_DIRECT_VALUE = 382;

    /**
     *
     *
     * <pre>
     * If curation was targeted by the buyer when buying the impression
     *
     *
     *
     * Corresponds to "Is curation targeted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_CURATION_TARGETED = 574;</code>
     */
    public static final int IS_CURATION_TARGETED_VALUE = 574;

    /**
     *
     *
     * <pre>
     * Whether the query was dropped.
     *
     *
     *
     * Corresponds to "Is Dropped" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_DROPPED = 464;</code>
     */
    public static final int IS_DROPPED_VALUE = 464;

    /**
     *
     *
     * <pre>
     * Whether traffic is First Look.
     *
     *
     *
     * Corresponds to "Is First Look" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>IS_FIRST_LOOK_DEAL = 401;</code>
     */
    public static final int IS_FIRST_LOOK_DEAL_VALUE = 401;

    /**
     *
     *
     * <pre>
     * The Custom Targeting Value ID
     *
     *
     *
     * Corresponds to "Key-values ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>KEY_VALUES_ID = 214;</code>
     */
    public static final int KEY_VALUES_ID_VALUE = 214;

    /**
     *
     *
     * <pre>
     * The Custom Targeting Value formatted like `{keyName}={valueName}`
     *
     *
     *
     * Corresponds to "Key-values" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>KEY_VALUES_NAME = 215;</code>
     */
    public static final int KEY_VALUES_NAME_VALUE = 215;

    /**
     *
     *
     * <pre>
     * The agency of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item agency" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_AGENCY = 663;</code>
     */
    public static final int LINE_ITEM_AGENCY_VALUE = 663;

    /**
     *
     *
     * <pre>
     * Whether a Line item is archived.
     *
     *
     *
     * Corresponds to "Line item is archived" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_ARCHIVED = 188;</code>
     */
    public static final int LINE_ITEM_ARCHIVED_VALUE = 188;

    /**
     *
     *
     * <pre>
     * Line item comanion delivery option ENUM value.
     *
     *
     *
     * Corresponds to "Line item companion delivery option value" in the Ad
     * Manager UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COMPANION_DELIVERY_OPTION = 204;</code>
     */
    public static final int LINE_ITEM_COMPANION_DELIVERY_OPTION_VALUE = 204;

    /**
     *
     *
     * <pre>
     * Localized line item comanion delivery option name.
     *
     *
     *
     * Corresponds to "Line item companion delivery option" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME = 205;</code>
     */
    public static final int LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME_VALUE = 205;

    /**
     *
     *
     * <pre>
     * The computed status of the LineItem.
     *
     *
     *
     * Corresponds to "Line item computed status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COMPUTED_STATUS = 250;</code>
     */
    public static final int LINE_ITEM_COMPUTED_STATUS_VALUE = 250;

    /**
     *
     *
     * <pre>
     * The localized name of the computed status of the LineItem.
     *
     *
     *
     * Corresponds to "Line item computed status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COMPUTED_STATUS_NAME = 251;</code>
     */
    public static final int LINE_ITEM_COMPUTED_STATUS_NAME_VALUE = 251;

    /**
     *
     *
     * <pre>
     * The contracted units bought for the Line item.
     *
     *
     *
     * Corresponds to "Line item contracted quantity" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_CONTRACTED_QUANTITY = 92;</code>
     */
    public static final int LINE_ITEM_CONTRACTED_QUANTITY_VALUE = 92;

    /**
     *
     *
     * <pre>
     * The cost per unit of the Line item.
     *
     *
     *
     * Corresponds to "Line item rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_COST_PER_UNIT = 85;</code>
     */
    public static final int LINE_ITEM_COST_PER_UNIT_VALUE = 85;

    /**
     *
     *
     * <pre>
     * Line item cost type ENUM value.
     *
     *
     *
     * Corresponds to "Line item cost type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_COST_TYPE = 212;</code>
     */
    public static final int LINE_ITEM_COST_TYPE_VALUE = 212;

    /**
     *
     *
     * <pre>
     * Localized line item cost type name.
     *
     *
     *
     * Corresponds to "Line item cost type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_COST_TYPE_NAME = 213;</code>
     */
    public static final int LINE_ITEM_COST_TYPE_NAME_VALUE = 213;

    /**
     *
     *
     * <pre>
     * Represent the end date of a creative associated with line item
     *
     *
     *
     * Corresponds to "Line item creative end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_END_DATE = 176;</code>
     */
    public static final int LINE_ITEM_CREATIVE_END_DATE_VALUE = 176;

    /**
     *
     *
     * <pre>
     * The creative rotation type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item creative rotation type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_ROTATION_TYPE = 189;</code>
     */
    public static final int LINE_ITEM_CREATIVE_ROTATION_TYPE_VALUE = 189;

    /**
     *
     *
     * <pre>
     * The localized name of the creative rotation type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item creative rotation type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME = 190;</code>
     */
    public static final int LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME_VALUE = 190;

    /**
     *
     *
     * <pre>
     * Represent the start date of a creative associated with line item
     *
     *
     *
     * Corresponds to "Line item creative start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_CREATIVE_START_DATE = 175;</code>
     */
    public static final int LINE_ITEM_CREATIVE_START_DATE_VALUE = 175;

    /**
     *
     *
     * <pre>
     * The 3 letter currency code of the Line Item
     *
     *
     *
     * Corresponds to "Line item currency code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_CURRENCY_CODE = 180;</code>
     */
    public static final int LINE_ITEM_CURRENCY_CODE_VALUE = 180;

    /**
     *
     *
     * <pre>
     * The progress made for the delivery of the Line item.
     *
     *
     *
     * Corresponds to "Line item delivery indicator" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_INDICATOR = 87;</code>
     */
    public static final int LINE_ITEM_DELIVERY_INDICATOR_VALUE = 87;

    /**
     *
     *
     * <pre>
     * The delivery rate type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item delivery rate type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_RATE_TYPE = 191;</code>
     */
    public static final int LINE_ITEM_DELIVERY_RATE_TYPE_VALUE = 191;

    /**
     *
     *
     * <pre>
     * The localized name of the delivery rate type of the LineItem.
     *
     *
     *
     * Corresponds to "Line item delivery rate type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_DELIVERY_RATE_TYPE_NAME = 192;</code>
     */
    public static final int LINE_ITEM_DELIVERY_RATE_TYPE_NAME_VALUE = 192;

    /**
     *
     *
     * <pre>
     * The discount of the LineItem in whole units in the LineItem's currency
     *  code, or if unspecified the Network's currency code.
     *
     *
     *
     * Corresponds to "Line item discount (absolute)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_DISCOUNT_ABSOLUTE = 195;</code>
     */
    public static final int LINE_ITEM_DISCOUNT_ABSOLUTE_VALUE = 195;

    /**
     *
     *
     * <pre>
     * The discount of the LineItem in percentage.
     *
     *
     *
     * Corresponds to "Line item discount (percentage)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `WHOLE_PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_DISCOUNT_PERCENTAGE = 196;</code>
     */
    public static final int LINE_ITEM_DISCOUNT_PERCENTAGE_VALUE = 196;

    /**
     *
     *
     * <pre>
     * The end date of the Line item.
     *
     *
     *
     * Corresponds to "Line item end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_END_DATE = 81;</code>
     */
    public static final int LINE_ITEM_END_DATE_VALUE = 81;

    /**
     *
     *
     * <pre>
     * The end date and time of the Line item.
     *
     *
     *
     * Corresponds to "Line item end time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>LINE_ITEM_END_DATE_TIME = 83;</code>
     */
    public static final int LINE_ITEM_END_DATE_TIME_VALUE = 83;

    /**
     *
     *
     * <pre>
     * The ENUM value of the environment a LineItem is targeting.
     *
     *
     *
     * Corresponds to "Line item environment type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_ENVIRONMENT_TYPE = 201;</code>
     */
    public static final int LINE_ITEM_ENVIRONMENT_TYPE_VALUE = 201;

    /**
     *
     *
     * <pre>
     * The localized name of the environment a LineItem is targeting.
     *
     *
     *
     * Corresponds to "Line item environment type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_ENVIRONMENT_TYPE_NAME = 202;</code>
     */
    public static final int LINE_ITEM_ENVIRONMENT_TYPE_NAME_VALUE = 202;

    /**
     *
     *
     * <pre>
     * The deal ID of the Line item. Set for Programmatic Direct campaigns.
     *
     *
     *
     * Corresponds to "Line item deal ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>LINE_ITEM_EXTERNAL_DEAL_ID = 97;</code>
     */
    public static final int LINE_ITEM_EXTERNAL_DEAL_ID_VALUE = 97;

    /**
     *
     *
     * <pre>
     * The external ID of the Line item.
     *
     *
     *
     * Corresponds to "Line item external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_EXTERNAL_ID = 86;</code>
     */
    public static final int LINE_ITEM_EXTERNAL_ID_VALUE = 86;

    /**
     *
     *
     * <pre>
     * The frequency cap of the Line item (descriptive string).
     *
     *
     *
     * Corresponds to "Line item frequency cap" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_FREQUENCY_CAP = 256;</code>
     */
    public static final int LINE_ITEM_FREQUENCY_CAP_VALUE = 256;

    /**
     *
     *
     * <pre>
     * Line item ID.
     *
     *
     *
     * Corresponds to "Line item ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>LINE_ITEM_ID = 1;</code>
     */
    public static final int LINE_ITEM_ID_VALUE = 1;

    /**
     *
     *
     * <pre>
     * Line item labels.
     *
     *
     *
     * Corresponds to "Line item labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_LABELS = 667;</code>
     */
    public static final int LINE_ITEM_LABELS_VALUE = 667;

    /**
     *
     *
     * <pre>
     * Line item label IDs.
     *
     *
     *
     * Corresponds to "Line item label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_LABEL_IDS = 665;</code>
     */
    public static final int LINE_ITEM_LABEL_IDS_VALUE = 665;

    /**
     *
     *
     * <pre>
     * The application that last modified the Line Item.
     *
     *
     *
     * Corresponds to "Line item last modified by app" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_LAST_MODIFIED_BY_APP = 181;</code>
     */
    public static final int LINE_ITEM_LAST_MODIFIED_BY_APP_VALUE = 181;

    /**
     *
     *
     * <pre>
     * The total number of clicks delivered of the lifetime of the Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_CLICKS = 95;</code>
     */
    public static final int LINE_ITEM_LIFETIME_CLICKS_VALUE = 95;

    /**
     *
     *
     * <pre>
     * The total number of impressions delivered over the lifetime of the
     *  Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_IMPRESSIONS = 94;</code>
     */
    public static final int LINE_ITEM_LIFETIME_IMPRESSIONS_VALUE = 94;

    /**
     *
     *
     * <pre>
     * The total number of viewable impressions delivered over the lifetime of
     *  the Line item.
     *
     *
     *
     * Corresponds to "Line item lifetime viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS = 96;</code>
     */
    public static final int LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS_VALUE = 96;

    /**
     *
     *
     * <pre>
     * Whether or not the Line item is Makegood. Makegood refers to free
     *  inventory offered to buyers to compensate for mistakes or under-delivery
     *  in the original campaigns.
     *
     *
     *
     * Corresponds to "Line item is makegood" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_MAKEGOOD = 89;</code>
     */
    public static final int LINE_ITEM_MAKEGOOD_VALUE = 89;

    /**
     *
     *
     * <pre>
     * Line item Name.
     *
     *
     *
     * Corresponds to "Line item" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_NAME = 2;</code>
     */
    public static final int LINE_ITEM_NAME_VALUE = 2;

    /**
     *
     *
     * <pre>
     * The cost of booking for the Line item (non-CPD).
     *
     *
     *
     * Corresponds to "Line item booked revenue (exclude CPD)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_NON_CPD_BOOKED_REVENUE = 98;</code>
     */
    public static final int LINE_ITEM_NON_CPD_BOOKED_REVENUE_VALUE = 98;

    /**
     *
     *
     * <pre>
     * Whether a Line item is eligible for opitimization.
     *
     *
     *
     * Corresponds to "Line item is optimizable" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_OPTIMIZABLE = 90;</code>
     */
    public static final int LINE_ITEM_OPTIMIZABLE_VALUE = 90;

    /**
     *
     *
     * <pre>
     * The PO number of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item PO number" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PO_NUMBER = 669;</code>
     */
    public static final int LINE_ITEM_PO_NUMBER_VALUE = 669;

    /**
     *
     *
     * <pre>
     * Goal type ENUM value of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_TYPE = 210;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_TYPE_VALUE = 210;

    /**
     *
     *
     * <pre>
     * Localized goal type name of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_TYPE_NAME = 211;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_TYPE_NAME_VALUE = 211;

    /**
     *
     *
     * <pre>
     * The total number of impressions or clicks that are reserved for a
     *  line item. For line items of type BULK or PRICE_PRIORITY, this
     *  represents the number of remaining impressions reserved. If the line
     *  item has an impression cap goal, this represents the number of
     *  impressions or conversions that the line item will stop serving at if
     *  reached.
     *
     *
     *
     * Corresponds to "Line item primary goal units (absolute)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE = 93;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE_VALUE = 93;

    /**
     *
     *
     * <pre>
     * The percentage of impressions or clicks that are reserved for a
     *  line item. For line items of type SPONSORSHIP, this represents the
     *  percentage of available impressions reserved. For line items of type
     *  NETWORK or HOUSE, this represents the percentage of remaining
     *  impressions reserved.
     *
     *
     *
     * Corresponds to "Line item primary goal units (percentage)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `WHOLE_PERCENT`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE = 396;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE_VALUE = 396;

    /**
     *
     *
     * <pre>
     * Unit type ENUM value of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal unit type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE = 208;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_VALUE = 208;

    /**
     *
     *
     * <pre>
     * Localized unit type name of the primary goal of the line item.
     *
     *
     *
     * Corresponds to "Line item primary goal unit type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME = 209;</code>
     */
    public static final int LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME_VALUE = 209;

    /**
     *
     *
     * <pre>
     * The priority of this Line item as a value between 1 and 16.
     *  In general, a lower priority means more serving priority for the
     *  Line item.
     *
     *
     *
     * Corresponds to "Line item priority" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>LINE_ITEM_PRIORITY = 24;</code>
     */
    public static final int LINE_ITEM_PRIORITY_VALUE = 24;

    /**
     *
     *
     * <pre>
     * ENUM value describing the state of inventory reservation for the
     *  LineItem.
     *
     *
     *
     * Corresponds to "Line item reservation status value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_RESERVATION_STATUS = 304;</code>
     */
    public static final int LINE_ITEM_RESERVATION_STATUS_VALUE = 304;

    /**
     *
     *
     * <pre>
     * Localized string describing the state of inventory reservation for the
     *  LineItem.
     *
     *
     *
     * Corresponds to "Line item reservation status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_RESERVATION_STATUS_NAME = 305;</code>
     */
    public static final int LINE_ITEM_RESERVATION_STATUS_NAME_VALUE = 305;

    /**
     *
     *
     * <pre>
     * The sales person of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item salesperson" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_SALESPERSON = 671;</code>
     */
    public static final int LINE_ITEM_SALESPERSON_VALUE = 671;

    /**
     *
     *
     * <pre>
     * The secondary sales people of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item secondary salespeople" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_SECONDARY_SALESPEOPLE = 673;</code>
     */
    public static final int LINE_ITEM_SECONDARY_SALESPEOPLE_VALUE = 673;

    /**
     *
     *
     * <pre>
     * The secondary traffickers of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item secondary traffickers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>LINE_ITEM_SECONDARY_TRAFFICKERS = 675;</code>
     */
    public static final int LINE_ITEM_SECONDARY_TRAFFICKERS_VALUE = 675;

    /**
     *
     *
     * <pre>
     * The start date of the Line item.
     *
     *
     *
     * Corresponds to "Line item start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>LINE_ITEM_START_DATE = 82;</code>
     */
    public static final int LINE_ITEM_START_DATE_VALUE = 82;

    /**
     *
     *
     * <pre>
     * The start date and time of the Line item.
     *
     *
     *
     * Corresponds to "Line item start time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>LINE_ITEM_START_DATE_TIME = 84;</code>
     */
    public static final int LINE_ITEM_START_DATE_TIME_VALUE = 84;

    /**
     *
     *
     * <pre>
     * The trafficker of the order associated with the line item.
     *
     *
     *
     * Corresponds to "Line item trafficker" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_TRAFFICKER = 677;</code>
     */
    public static final int LINE_ITEM_TRAFFICKER_VALUE = 677;

    /**
     *
     *
     * <pre>
     * Line item type ENUM value.
     *
     *
     *
     * Corresponds to "Line item type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>LINE_ITEM_TYPE = 193;</code>
     */
    public static final int LINE_ITEM_TYPE_VALUE = 193;

    /**
     *
     *
     * <pre>
     * Localized line item type name.
     *
     *
     *
     * Corresponds to "Line item type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_TYPE_NAME = 194;</code>
     */
    public static final int LINE_ITEM_TYPE_NAME_VALUE = 194;

    /**
     *
     *
     * <pre>
     * Whether the Line item end time and end date is set to effectively never
     *  end.
     *
     *
     *
     * Corresponds to "Line item is unlimited end time" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>LINE_ITEM_UNLIMITED_END = 187;</code>
     */
    public static final int LINE_ITEM_UNLIMITED_END_VALUE = 187;

    /**
     *
     *
     * <pre>
     * The artificial cost per unit used by the Ad server to help rank
     *  inventory.
     *
     *
     *
     * Corresponds to "Line item value cost per unit" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>LINE_ITEM_VALUE_COST_PER_UNIT = 88;</code>
     */
    public static final int LINE_ITEM_VALUE_COST_PER_UNIT_VALUE = 88;

    /**
     *
     *
     * <pre>
     * The web property code used for dynamic allocation Line Items.
     *
     *
     *
     * Corresponds to "Line item web property code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>LINE_ITEM_WEB_PROPERTY_CODE = 179;</code>
     */
    public static final int LINE_ITEM_WEB_PROPERTY_CODE_VALUE = 179;

    /**
     *
     *
     * <pre>
     * The ID of creative, includes regular creatives, and master and companions
     *  in case of creative sets
     *
     *
     *
     * Corresponds to "Master and Companion creative ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>MASTER_COMPANION_CREATIVE_ID = 140;</code>
     */
    public static final int MASTER_COMPANION_CREATIVE_ID_VALUE = 140;

    /**
     *
     *
     * <pre>
     * Name of creative, includes regular creatives, and master and companions
     *  in case of creative sets
     *
     *
     *
     * Corresponds to "Master and Companion creative" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MASTER_COMPANION_CREATIVE_NAME = 141;</code>
     */
    public static final int MASTER_COMPANION_CREATIVE_NAME_VALUE = 141;

    /**
     *
     *
     * <pre>
     * Mediation type.
     *
     *
     *
     * Corresponds to "Mediation type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MEDIATION_TYPE = 701;</code>
     */
    public static final int MEDIATION_TYPE_VALUE = 701;

    /**
     *
     *
     * <pre>
     * Localized mediation type name.
     *
     *
     *
     * Corresponds to "Mediation type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MEDIATION_TYPE_NAME = 754;</code>
     */
    public static final int MEDIATION_TYPE_NAME_VALUE = 754;

    /**
     *
     *
     * <pre>
     * The ID of the yield partner for Mediation.
     *
     *
     *
     * Corresponds to "Yield partner ID (mediation)" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>MEDIATION_YIELD_PARTNER_ID = 661;</code>
     */
    public static final int MEDIATION_YIELD_PARTNER_ID_VALUE = 661;

    /**
     *
     *
     * <pre>
     * The name of the yield partner for Mediation.
     *
     *
     *
     * Corresponds to "Yield partner (mediation)" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MEDIATION_YIELD_PARTNER_NAME = 662;</code>
     */
    public static final int MEDIATION_YIELD_PARTNER_NAME_VALUE = 662;

    /**
     *
     *
     * <pre>
     * The criteria ID of the metro area in which the ad served.
     *
     *
     *
     * Corresponds to "Metro ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>METRO_ID = 453;</code>
     */
    public static final int METRO_ID_VALUE = 453;

    /**
     *
     *
     * <pre>
     * The name of the metro area in which the ad served.
     *
     *
     *
     * Corresponds to "Metro" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>METRO_NAME = 454;</code>
     */
    public static final int METRO_NAME_VALUE = 454;

    /**
     *
     *
     * <pre>
     * Whether the mobile app is free.
     *
     *
     *
     * Corresponds to "App is free" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>MOBILE_APP_FREE = 128;</code>
     */
    public static final int MOBILE_APP_FREE_VALUE = 128;

    /**
     *
     *
     * <pre>
     * URL of app icon for the mobile app.
     *
     *
     *
     * Corresponds to "App icon URL" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_ICON_URL = 129;</code>
     */
    public static final int MOBILE_APP_ICON_URL_VALUE = 129;

    /**
     *
     *
     * <pre>
     * The ID of the Mobile App.
     *
     *
     *
     * Corresponds to "App ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_ID = 123;</code>
     */
    public static final int MOBILE_APP_ID_VALUE = 123;

    /**
     *
     *
     * <pre>
     * The name of the mobile app.
     *
     *
     *
     * Corresponds to "App" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_NAME = 127;</code>
     */
    public static final int MOBILE_APP_NAME_VALUE = 127;

    /**
     *
     *
     * <pre>
     * Ownership status of the mobile app.
     *
     *
     *
     * Corresponds to "App ownership status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_APP_OWNERSHIP_STATUS = 311;</code>
     */
    public static final int MOBILE_APP_OWNERSHIP_STATUS_VALUE = 311;

    /**
     *
     *
     * <pre>
     * Ownership status of the mobile app.
     *
     *
     *
     * Corresponds to "App ownership status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_OWNERSHIP_STATUS_NAME = 312;</code>
     */
    public static final int MOBILE_APP_OWNERSHIP_STATUS_NAME_VALUE = 312;

    /**
     *
     *
     * <pre>
     * The App Store of the mobile app.
     *
     *
     *
     * Corresponds to "App store value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_APP_STORE = 125;</code>
     */
    public static final int MOBILE_APP_STORE_VALUE = 125;

    /**
     *
     *
     * <pre>
     * The localized name of the mobile app store.
     *
     *
     *
     * Corresponds to "App store" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_APP_STORE_NAME = 245;</code>
     */
    public static final int MOBILE_APP_STORE_NAME_VALUE = 245;

    /**
     *
     *
     * <pre>
     * Mobile inventory type.
     *  Identifies whether a mobile ad came from a regular web page, an AMP web
     *  page, or a mobile app.
     *  Values match the Inventory type dimension available in the Overview Home
     *  dashboard. Note: Video takes precedence over any other value, for
     *  example, if there is an in-stream video impression on a desktop device,
     *  it will be attributed to in-stream video and not desktop web.
     *
     *
     *
     * Corresponds to "Inventory type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_INVENTORY_TYPE = 99;</code>
     */
    public static final int MOBILE_INVENTORY_TYPE_VALUE = 99;

    /**
     *
     *
     * <pre>
     * Mobile inventory type name.
     *  Identifies whether a mobile ad came from a regular web page, an AMP web
     *  page, or a mobile app.
     *
     *
     *
     * Corresponds to "Inventory type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_INVENTORY_TYPE_NAME = 21;</code>
     */
    public static final int MOBILE_INVENTORY_TYPE_NAME_VALUE = 21;

    /**
     *
     *
     * <pre>
     * Mobile rendering SDK.
     *
     *
     *
     * Corresponds to "Rendering SDK value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>MOBILE_RENDERING_SDK = 646;</code>
     */
    public static final int MOBILE_RENDERING_SDK_VALUE = 646;

    /**
     *
     *
     * <pre>
     * Localized name of the Mobile rendering SDK.
     *
     *
     *
     * Corresponds to "Rendering SDK" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_RENDERING_SDK_NAME = 647;</code>
     */
    public static final int MOBILE_RENDERING_SDK_NAME_VALUE = 647;

    /**
     *
     *
     * <pre>
     * The major version of the mobile SDK.
     *
     *
     *
     * Corresponds to "App SDK major version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MOBILE_SDK_MAJOR_VERSION = 692;</code>
     */
    public static final int MOBILE_SDK_MAJOR_VERSION_VALUE = 692;

    /**
     *
     *
     * <pre>
     * The minor version of the mobile SDK.
     *
     *
     *
     * Corresponds to "App SDK minor version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MOBILE_SDK_MINOR_VERSION = 693;</code>
     */
    public static final int MOBILE_SDK_MINOR_VERSION_VALUE = 693;

    /**
     *
     *
     * <pre>
     * SDK version of the mobile device.
     *
     *
     *
     * Corresponds to "App SDK version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>MOBILE_SDK_VERSION_NAME = 130;</code>
     */
    public static final int MOBILE_SDK_VERSION_NAME_VALUE = 130;

    /**
     *
     *
     * <pre>
     * Breaks down reporting data by month and year.
     *
     *
     *
     * Corresponds to "Month and year" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MONTH_YEAR = 6;</code>
     */
    public static final int MONTH_YEAR_VALUE = 6;

    /**
     *
     *
     * <pre>
     * Native ad format ID.
     *
     *
     *
     * Corresponds to "Native ad format ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>NATIVE_AD_FORMAT_ID = 255;</code>
     */
    public static final int NATIVE_AD_FORMAT_ID_VALUE = 255;

    /**
     *
     *
     * <pre>
     * Native ad format name.
     *
     *
     *
     * Corresponds to "Native ad format" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NATIVE_AD_FORMAT_NAME = 254;</code>
     */
    public static final int NATIVE_AD_FORMAT_NAME_VALUE = 254;

    /**
     *
     *
     * <pre>
     * Native style ID.
     *
     *
     *
     * Corresponds to "Native style ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>NATIVE_STYLE_ID = 253;</code>
     */
    public static final int NATIVE_STYLE_ID_VALUE = 253;

    /**
     *
     *
     * <pre>
     * Native style name.
     *
     *
     *
     * Corresponds to "Native style" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NATIVE_STYLE_NAME = 252;</code>
     */
    public static final int NATIVE_STYLE_NAME_VALUE = 252;

    /**
     *
     *
     * <pre>
     * No fill reason category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "No fill reason category value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>NO_FILL_REASON_CATEGORY = 586;</code>
     */
    public static final int NO_FILL_REASON_CATEGORY_VALUE = 586;

    /**
     *
     *
     * <pre>
     * No fill reason category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "No fill reason category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>NO_FILL_REASON_CATEGORY_NAME = 587;</code>
     */
    public static final int NO_FILL_REASON_CATEGORY_NAME_VALUE = 587;

    /**
     *
     *
     * <pre>
     * Operating system category.
     *
     *
     *
     * Corresponds to "Operating system category value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_CATEGORY = 117;</code>
     */
    public static final int OPERATING_SYSTEM_CATEGORY_VALUE = 117;

    /**
     *
     *
     * <pre>
     * Operating system category name.
     *
     *
     *
     * Corresponds to "Operating system category" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_CATEGORY_NAME = 118;</code>
     */
    public static final int OPERATING_SYSTEM_CATEGORY_NAME_VALUE = 118;

    /**
     *
     *
     * <pre>
     * ID of the operating system version.
     *
     *
     *
     * Corresponds to "Operating system ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_VERSION_ID = 238;</code>
     */
    public static final int OPERATING_SYSTEM_VERSION_ID_VALUE = 238;

    /**
     *
     *
     * <pre>
     * Details of the operating system, including version.
     *
     *
     *
     * Corresponds to "Operating system" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPERATING_SYSTEM_VERSION_NAME = 237;</code>
     */
    public static final int OPERATING_SYSTEM_VERSION_NAME_VALUE = 237;

    /**
     *
     *
     * <pre>
     * Enum value of the optimization type.
     *
     *
     *
     * Corresponds to "Optimization type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>OPTIMIZATION_TYPE = 639;</code>
     */
    public static final int OPTIMIZATION_TYPE_VALUE = 639;

    /**
     *
     *
     * <pre>
     * Localized name of the optimization type.
     *
     *
     *
     * Corresponds to "Optimization type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>OPTIMIZATION_TYPE_NAME = 640;</code>
     */
    public static final int OPTIMIZATION_TYPE_NAME_VALUE = 640;

    /**
     *
     *
     * <pre>
     * Order agency.
     *
     *
     *
     * Corresponds to "Order agency" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_AGENCY = 150;</code>
     */
    public static final int ORDER_AGENCY_VALUE = 150;

    /**
     *
     *
     * <pre>
     * Order agency ID.
     *
     *
     *
     * Corresponds to "Order agency ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_AGENCY_ID = 151;</code>
     */
    public static final int ORDER_AGENCY_ID_VALUE = 151;

    /**
     *
     *
     * <pre>
     * Order booked CPC.
     *
     *
     *
     * Corresponds to "Order booked CPC" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_BOOKED_CPC = 152;</code>
     */
    public static final int ORDER_BOOKED_CPC_VALUE = 152;

    /**
     *
     *
     * <pre>
     * Order booked CPM.
     *
     *
     *
     * Corresponds to "Order booked CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_BOOKED_CPM = 153;</code>
     */
    public static final int ORDER_BOOKED_CPM_VALUE = 153;

    /**
     *
     *
     * <pre>
     * Order delivery status ENUM value.
     *
     *
     *
     * Corresponds to "Order delivery status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>ORDER_DELIVERY_STATUS = 231;</code>
     */
    public static final int ORDER_DELIVERY_STATUS_VALUE = 231;

    /**
     *
     *
     * <pre>
     * Order delivery status localized name.
     *
     *
     *
     * Corresponds to "Order delivery status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_DELIVERY_STATUS_NAME = 239;</code>
     */
    public static final int ORDER_DELIVERY_STATUS_NAME_VALUE = 239;

    /**
     *
     *
     * <pre>
     * Order end date.
     *
     *
     *
     * Corresponds to "Order end date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>ORDER_END_DATE = 154;</code>
     */
    public static final int ORDER_END_DATE_VALUE = 154;

    /**
     *
     *
     * <pre>
     * Order end date and time.
     *
     *
     *
     * Corresponds to "Order end time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>ORDER_END_DATE_TIME = 155;</code>
     */
    public static final int ORDER_END_DATE_TIME_VALUE = 155;

    /**
     *
     *
     * <pre>
     * Order external ID.
     *
     *
     *
     * Corresponds to "Order external ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_EXTERNAL_ID = 156;</code>
     */
    public static final int ORDER_EXTERNAL_ID_VALUE = 156;

    /**
     *
     *
     * <pre>
     * Order ID.
     *
     *
     *
     * Corresponds to "Order ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_ID = 7;</code>
     */
    public static final int ORDER_ID_VALUE = 7;

    /**
     *
     *
     * <pre>
     * Order labels.
     *
     *
     *
     * Corresponds to "Order labels" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_LABELS = 170;</code>
     */
    public static final int ORDER_LABELS_VALUE = 170;

    /**
     *
     *
     * <pre>
     * Order labels IDs.
     *
     *
     *
     * Corresponds to "Order label IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_LABEL_IDS = 171;</code>
     */
    public static final int ORDER_LABEL_IDS_VALUE = 171;

    /**
     *
     *
     * <pre>
     * Order lifetime clicks.
     *
     *
     *
     * Corresponds to "Order lifetime clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_LIFETIME_CLICKS = 158;</code>
     */
    public static final int ORDER_LIFETIME_CLICKS_VALUE = 158;

    /**
     *
     *
     * <pre>
     * Order lifetime impressions.
     *
     *
     *
     * Corresponds to "Order lifetime impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ORDER_LIFETIME_IMPRESSIONS = 159;</code>
     */
    public static final int ORDER_LIFETIME_IMPRESSIONS_VALUE = 159;

    /**
     *
     *
     * <pre>
     * Order name.
     *
     *
     *
     * Corresponds to "Order" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_NAME = 8;</code>
     */
    public static final int ORDER_NAME_VALUE = 8;

    /**
     *
     *
     * <pre>
     * Order PO number.
     *
     *
     *
     * Corresponds to "Order PO number" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_PO_NUMBER = 160;</code>
     */
    public static final int ORDER_PO_NUMBER_VALUE = 160;

    /**
     *
     *
     * <pre>
     * Whether the Order is programmatic.
     *
     *
     *
     * Corresponds to "Order is programmatic" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>ORDER_PROGRAMMATIC = 157;</code>
     */
    public static final int ORDER_PROGRAMMATIC_VALUE = 157;

    /**
     *
     *
     * <pre>
     * Order sales person.
     *
     *
     *
     * Corresponds to "Order salesperson" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_SALESPERSON = 161;</code>
     */
    public static final int ORDER_SALESPERSON_VALUE = 161;

    /**
     *
     *
     * <pre>
     * Order sales person ID.
     *
     *
     *
     * Corresponds to "Order salesperson ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_SALESPERSON_ID = 629;</code>
     */
    public static final int ORDER_SALESPERSON_ID_VALUE = 629;

    /**
     *
     *
     * <pre>
     * Order secondary sales people.
     *
     *
     *
     * Corresponds to "Order secondary salespeople" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_SALESPEOPLE = 164;</code>
     */
    public static final int ORDER_SECONDARY_SALESPEOPLE_VALUE = 164;

    /**
     *
     *
     * <pre>
     * Order secondary sales people ID.
     *
     *
     *
     * Corresponds to "Order secondary salespeople ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_SALESPEOPLE_ID = 165;</code>
     */
    public static final int ORDER_SECONDARY_SALESPEOPLE_ID_VALUE = 165;

    /**
     *
     *
     * <pre>
     * Order secondary traffickers.
     *
     *
     *
     * Corresponds to "Order secondary traffickers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_TRAFFICKERS = 166;</code>
     */
    public static final int ORDER_SECONDARY_TRAFFICKERS_VALUE = 166;

    /**
     *
     *
     * <pre>
     * Order secondary traffickers ID.
     *
     *
     *
     * Corresponds to "Order secondary trafficker IDs" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>ORDER_SECONDARY_TRAFFICKERS_ID = 167;</code>
     */
    public static final int ORDER_SECONDARY_TRAFFICKERS_ID_VALUE = 167;

    /**
     *
     *
     * <pre>
     * Order start date.
     *
     *
     *
     * Corresponds to "Order start date" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `DATE`
     * </pre>
     *
     * <code>ORDER_START_DATE = 168;</code>
     */
    public static final int ORDER_START_DATE_VALUE = 168;

    /**
     *
     *
     * <pre>
     * Order start date and time.
     *
     *
     *
     * Corresponds to "Order start time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `AD_SPEED`
     *
     * Data format: `TIMESTAMP`
     * </pre>
     *
     * <code>ORDER_START_DATE_TIME = 169;</code>
     */
    public static final int ORDER_START_DATE_TIME_VALUE = 169;

    /**
     *
     *
     * <pre>
     * Order trafficker.
     *
     *
     *
     * Corresponds to "Order trafficker" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>ORDER_TRAFFICKER = 162;</code>
     */
    public static final int ORDER_TRAFFICKER_VALUE = 162;

    /**
     *
     *
     * <pre>
     * Order trafficker ID.
     *
     *
     *
     * Corresponds to "Order trafficker ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>ORDER_TRAFFICKER_ID = 163;</code>
     */
    public static final int ORDER_TRAFFICKER_ID_VALUE = 163;

    /**
     *
     *
     * <pre>
     * Whether the Order end time and end date is set to effectively never
     *  end.
     *
     *
     *
     * Corresponds to "Order is unlimited end time" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>ORDER_UNLIMITED_END = 203;</code>
     */
    public static final int ORDER_UNLIMITED_END_VALUE = 203;

    /**
     *
     *
     * <pre>
     * Page path is the part of a page URL that comes after the domain but
     *  before the query strings from Google Analytics.
     *
     *
     *
     * Corresponds to "Page path" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_PATH = 511;</code>
     */
    public static final int PAGE_PATH_VALUE = 511;

    /**
     *
     *
     * <pre>
     * Page title (web) and screen class (mobile) returned from Google
     *  Analytics.
     *
     *
     *
     * Corresponds to "Page title and screen class" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_TITLE_AND_SCREEN_CLASS = 512;</code>
     */
    public static final int PAGE_TITLE_AND_SCREEN_CLASS_VALUE = 512;

    /**
     *
     *
     * <pre>
     * Page title (web) and screen name (mobile) returned from Google Analytics.
     *
     *
     *
     * Corresponds to "Page title and screen name" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PAGE_TITLE_AND_SCREEN_NAME = 513;</code>
     */
    public static final int PAGE_TITLE_AND_SCREEN_NAME_VALUE = 513;

    /**
     *
     *
     * <pre>
     * Placement ID
     *
     *
     *
     * Corresponds to "Placement ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PLACEMENT_ID = 113;</code>
     */
    public static final int PLACEMENT_ID_VALUE = 113;

    /**
     *
     *
     * <pre>
     * The full list of placement IDs associated with the ad unit.
     *
     *
     *
     * Corresponds to "Placement ID (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PLACEMENT_ID_ALL = 144;</code>
     */
    public static final int PLACEMENT_ID_ALL_VALUE = 144;

    /**
     *
     *
     * <pre>
     * Placement name
     *
     *
     *
     * Corresponds to "Placement" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PLACEMENT_NAME = 114;</code>
     */
    public static final int PLACEMENT_NAME_VALUE = 114;

    /**
     *
     *
     * <pre>
     * The full list of placement names associated with the ad unit.
     *
     *
     *
     * Corresponds to "Placement (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PLACEMENT_NAME_ALL = 145;</code>
     */
    public static final int PLACEMENT_NAME_ALL_VALUE = 145;

    /**
     *
     *
     * <pre>
     * Placement status ENUM value
     *
     *
     *
     * Corresponds to "Placement status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PLACEMENT_STATUS = 362;</code>
     */
    public static final int PLACEMENT_STATUS_VALUE = 362;

    /**
     *
     *
     * <pre>
     * Localized placement status name.
     *
     *
     *
     * Corresponds to "Placement status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PLACEMENT_STATUS_NAME = 364;</code>
     */
    public static final int PLACEMENT_STATUS_NAME_VALUE = 364;

    /**
     *
     *
     * <pre>
     * The full list of localized placement status names associated with the ad
     *  unit.
     *
     *
     *
     * Corresponds to "Placement status (all)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PLACEMENT_STATUS_NAME_ALL = 365;</code>
     */
    public static final int PLACEMENT_STATUS_NAME_ALL_VALUE = 365;

    /**
     *
     *
     * <pre>
     * The criteria ID of the postal code in which the ad served.
     *
     *
     *
     * Corresponds to "Postal code ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>POSTAL_CODE_ID = 455;</code>
     */
    public static final int POSTAL_CODE_ID_VALUE = 455;

    /**
     *
     *
     * <pre>
     * The name of the postal code in which the ad served.
     *
     *
     *
     * Corresponds to "Postal code" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>POSTAL_CODE_NAME = 456;</code>
     */
    public static final int POSTAL_CODE_NAME_VALUE = 456;

    /**
     *
     *
     * <pre>
     * Indicates the valid PPID (Publisher provided identifier) status on a
     *  given ad request.
     *
     *
     *
     * Corresponds to "PPID status value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PPID_STATUS = 406;</code>
     */
    public static final int PPID_STATUS_VALUE = 406;

    /**
     *
     *
     * <pre>
     * The localized name of that indicates the valid PPID (Publisher provided
     *  identifier) status on a given ad request.
     *
     *
     *
     * Corresponds to "PPID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PPID_STATUS_NAME = 407;</code>
     */
    public static final int PPID_STATUS_NAME_VALUE = 407;

    /**
     *
     *
     * <pre>
     * Predicted viewability score bucket.
     *
     *
     *
     * Corresponds to "Predicted viewability bucket value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PREDICTED_VIEWABILITY_BUCKET = 633;</code>
     */
    public static final int PREDICTED_VIEWABILITY_BUCKET_VALUE = 633;

    /**
     *
     *
     * <pre>
     * The localized name of the predicted viewability score bucket.
     *
     *
     *
     * Corresponds to "Predicted viewability bucket" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PREDICTED_VIEWABILITY_BUCKET_NAME = 634;</code>
     */
    public static final int PREDICTED_VIEWABILITY_BUCKET_NAME_VALUE = 634;

    /**
     *
     *
     * <pre>
     * The ID of the secure signals sent in the ad request.
     *
     *
     *
     * Corresponds to "Secure signal ID (presented)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PRESENTED_SECURE_SIGNAL_ID = 495;</code>
     */
    public static final int PRESENTED_SECURE_SIGNAL_ID_VALUE = 495;

    /**
     *
     *
     * <pre>
     * The name of the secure signals sent in the ad request.
     *
     *
     *
     * Corresponds to "Secure signal name (presented)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PRESENTED_SECURE_SIGNAL_NAME = 496;</code>
     */
    public static final int PRESENTED_SECURE_SIGNAL_NAME_VALUE = 496;

    /**
     *
     *
     * <pre>
     * The ID type selected for personalization.
     *
     *
     *
     * Corresponds to "Primary personalization ID type value" in the Ad Manager
     * UI (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PRIMARY_PERSONALIZATION_ID_TYPE = 408;</code>
     */
    public static final int PRIMARY_PERSONALIZATION_ID_TYPE_VALUE = 408;

    /**
     *
     *
     * <pre>
     * The localized name of the ID type selected for personalization.
     *
     *
     *
     * Corresponds to "Primary personalization ID type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PRIMARY_PERSONALIZATION_ID_TYPE_NAME = 409;</code>
     */
    public static final int PRIMARY_PERSONALIZATION_ID_TYPE_NAME_VALUE = 409;

    /**
     *
     *
     * <pre>
     * Deprecated. Dimension has been renamed to `DEAL_BUYER_ID`.
     * The server will normalize any requests using this value to
     * `DEAL_BUYER_ID`.
     * This value will be removed on or after October 10, 2025.
     * </pre>
     *
     * <code>PROGRAMMATIC_BUYER_ID = 240 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int PROGRAMMATIC_BUYER_ID_VALUE = 240;

    /**
     *
     *
     * <pre>
     * Deprecated. Dimension has been renamed to `DEAL_BUYER_NAME`.
     * The server will normalize any requests using this value to
     * `DEAL_BUYER_NAME`.
     * This value will be removed on or after October 10, 2025.
     * </pre>
     *
     * <code>PROGRAMMATIC_BUYER_NAME = 241 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int PROGRAMMATIC_BUYER_NAME_VALUE = 241;

    /**
     *
     *
     * <pre>
     * Programmatic channel.
     *  The type of transaction that occurred in Ad Exchange.
     *
     *
     *
     * Corresponds to "Programmatic channel value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>PROGRAMMATIC_CHANNEL = 13;</code>
     */
    public static final int PROGRAMMATIC_CHANNEL_VALUE = 13;

    /**
     *
     *
     * <pre>
     * Programmatic channel name.
     *  The type of transaction that occurred in Ad Exchange.
     *
     *
     *
     * Corresponds to "Programmatic channel" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PROGRAMMATIC_CHANNEL_NAME = 14;</code>
     */
    public static final int PROGRAMMATIC_CHANNEL_NAME_VALUE = 14;

    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (all levels)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE = 410;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE_VALUE = 410;

    /**
     *
     *
     * <pre>
     * The ancestor chain of IDs of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS = 546;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS_VALUE = 546;

    /**
     *
     *
     * <pre>
     * The ancestor chain of names of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME = 412;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME_VALUE = 412;

    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER = 413;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER_VALUE = 413;

    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (all levels).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (all levels)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE = 414;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE_VALUE = 414;

    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (delivered)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE = 425;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE_VALUE = 425;

    /**
     *
     *
     * <pre>
     * The ancestor chain of IDs of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS = 545;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS_VALUE = 545;

    /**
     *
     *
     * <pre>
     * The ancestor chain of names of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals (delivered)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME = 427;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME_VALUE = 427;

    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER = 428;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER_VALUE = 428;

    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (delivered).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (delivered)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE = 429;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE_VALUE = 429;

    /**
     *
     *
     * <pre>
     * External code ID of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals external code (top level)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE = 415;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE_VALUE = 415;

    /**
     *
     *
     * <pre>
     * ID of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals ID (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID = 416;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID_VALUE = 416;

    /**
     *
     *
     * <pre>
     * Name of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals (top level)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING_LIST`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME = 417;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME_VALUE = 417;

    /**
     *
     *
     * <pre>
     * Tier of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals tier (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER = 418;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER_VALUE = 418;

    /**
     *
     *
     * <pre>
     * Type of a publisher provided signal (top level).
     *
     *
     *
     * Corresponds to "Publisher provided signals type (top level)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE = 419;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE_VALUE = 419;

    /**
     *
     *
     * <pre>
     * Data provider ID associated with a publisher provided signal.
     *
     *
     *
     * Corresponds to "Publisher provided signals (data provider ID)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID = 136;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID_VALUE = 136;

    /**
     *
     *
     * <pre>
     * Data provider name associated with a publisher provided signal.
     *
     *
     *
     * Corresponds to "Publisher provided signals (data provider)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME = 137;</code>
     */
    public static final int PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME_VALUE = 137;

    /**
     *
     *
     * <pre>
     * The criteria ID of the region (for example, US state) in which the ad
     *  served.
     *
     *
     *
     * Corresponds to "Region ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>REGION_ID = 457;</code>
     */
    public static final int REGION_ID_VALUE = 457;

    /**
     *
     *
     * <pre>
     * The name of the region (for example, US state) in which the ad
     *  served.
     *
     *
     *
     * Corresponds to "Region" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REGION_NAME = 458;</code>
     */
    public static final int REGION_NAME_VALUE = 458;

    /**
     *
     *
     * <pre>
     * The rejection class category in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejection class category value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>REJECTION_CLASS_CATEGORY = 590;</code>
     */
    public static final int REJECTION_CLASS_CATEGORY_VALUE = 590;

    /**
     *
     *
     * <pre>
     * The rejection class category name in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejection class category" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REJECTION_CLASS_CATEGORY_NAME = 591;</code>
     */
    public static final int REJECTION_CLASS_CATEGORY_NAME_VALUE = 591;

    /**
     *
     *
     * <pre>
     * The size of a rendered creative, It can differ with the creative's size
     *  if a creative is shown in an ad slot of a different size.
     *
     *
     *
     * Corresponds to "Rendered creative size" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>RENDERED_CREATIVE_SIZE = 343;</code>
     */
    public static final int RENDERED_CREATIVE_SIZE_VALUE = 343;

    /**
     *
     *
     * <pre>
     * Inventory Requested Ad Sizes dimension
     *
     *
     *
     * Corresponds to "Requested ad sizes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REQUESTED_AD_SIZES = 352;</code>
     */
    public static final int REQUESTED_AD_SIZES_VALUE = 352;

    /**
     *
     *
     * <pre>
     * Request type ENUM
     *
     *
     *
     * Corresponds to "Request type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>REQUEST_TYPE = 146;</code>
     */
    public static final int REQUEST_TYPE_VALUE = 146;

    /**
     *
     *
     * <pre>
     * Request type locallized name
     *
     *
     *
     * Corresponds to "Request type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>REQUEST_TYPE_NAME = 147;</code>
     */
    public static final int REQUEST_TYPE_NAME_VALUE = 147;

    /**
     *
     *
     * <pre>
     * Indicates if a request was eligible for server-side unwrapping.
     *
     *
     *
     * Corresponds to "Server-side unwrapping eligible" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `BOOLEAN`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_ELIGIBLE = 597;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_ELIGIBLE_VALUE = 597;

    /**
     *
     *
     * <pre>
     * The serving restriction mode for privacy.
     *
     *
     *
     * Corresponds to "Serving restriction value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>SERVING_RESTRICTION = 631;</code>
     */
    public static final int SERVING_RESTRICTION_VALUE = 631;

    /**
     *
     *
     * <pre>
     * The localized name of the serving restriction mode for privacy.
     *
     *
     *
     * Corresponds to "Serving restriction" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>SERVING_RESTRICTION_NAME = 632;</code>
     */
    public static final int SERVING_RESTRICTION_NAME_VALUE = 632;

    /**
     *
     *
     * <pre>
     * Information about domain or subdomains.
     *
     *
     *
     * Corresponds to "Site" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>SITE = 387;</code>
     */
    public static final int SITE_VALUE = 387;

    /**
     *
     *
     * <pre>
     * The ID of the browser, device or other environment into which a line item
     *  or creative was served.
     *
     *
     *
     * Corresponds to "Targeting ID" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>TARGETING_ID = 232;</code>
     */
    public static final int TARGETING_ID_VALUE = 232;

    /**
     *
     *
     * <pre>
     * Information about the browser, device and other environments into which
     *  a line item or creative was served.
     *
     *
     *
     * Corresponds to "Targeting" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TARGETING_NAME = 233;</code>
     */
    public static final int TARGETING_NAME_VALUE = 233;

    /**
     *
     *
     * <pre>
     * The way in which advertisers targeted their ads.
     *
     *
     *
     * Corresponds to "Targeting type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TARGETING_TYPE = 385;</code>
     */
    public static final int TARGETING_TYPE_VALUE = 385;

    /**
     *
     *
     * <pre>
     * The localized name of the way in which advertisers targeted their ads.
     *
     *
     *
     * Corresponds to "Targeting type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TARGETING_TYPE_NAME = 386;</code>
     */
    public static final int TARGETING_TYPE_NAME_VALUE = 386;

    /**
     *
     *
     * <pre>
     * Whether a third-party cookie or device ID was present on a given ad
     *  request.
     *
     *
     *
     * Corresponds to "Third-party ID status value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>THIRD_PARTY_ID_STATUS = 402;</code>
     */
    public static final int THIRD_PARTY_ID_STATUS_VALUE = 402;

    /**
     *
     *
     * <pre>
     * The localized name of whether a third-party cookie or device ID was
     *  present on a given ad request.
     *
     *
     *
     * Corresponds to "Third-party ID status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>THIRD_PARTY_ID_STATUS_NAME = 403;</code>
     */
    public static final int THIRD_PARTY_ID_STATUS_NAME_VALUE = 403;

    /**
     *
     *
     * <pre>
     * Reports the status of Topics in the ad request.
     *
     *
     *
     * Corresponds to "Topics status value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TOPICS_STATUS = 504;</code>
     */
    public static final int TOPICS_STATUS_VALUE = 504;

    /**
     *
     *
     * <pre>
     * The localized name of the status of Topics in the ad request.
     *
     *
     *
     * Corresponds to "Topics status" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TOPICS_STATUS_NAME = 505;</code>
     */
    public static final int TOPICS_STATUS_NAME_VALUE = 505;

    /**
     *
     *
     * <pre>
     * Inventory top private domain dimension
     *
     *
     *
     * Corresponds to "Domain" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TOP_PRIVATE_DOMAIN = 444;</code>
     */
    public static final int TOP_PRIVATE_DOMAIN_VALUE = 444;

    /**
     *
     *
     * <pre>
     * Inventory Traffic source dimension
     *
     *
     *
     * Corresponds to "Traffic source value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>TRAFFIC_SOURCE = 388;</code>
     */
    public static final int TRAFFIC_SOURCE_VALUE = 388;

    /**
     *
     *
     * <pre>
     * Inventory Traffic source dimension name
     *
     *
     *
     * Corresponds to "Traffic source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>TRAFFIC_SOURCE_NAME = 389;</code>
     */
    public static final int TRAFFIC_SOURCE_NAME_VALUE = 389;

    /**
     *
     *
     * <pre>
     * Unified pricing rule ID dimension
     *
     *
     *
     * Corresponds to "Unified pricing rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>UNIFIED_PRICING_RULE_ID = 393;</code>
     */
    public static final int UNIFIED_PRICING_RULE_ID_VALUE = 393;

    /**
     *
     *
     * <pre>
     * Unified pricing rule name dimension
     *
     *
     *
     * Corresponds to "Unified pricing rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>UNIFIED_PRICING_RULE_NAME = 394;</code>
     */
    public static final int UNIFIED_PRICING_RULE_NAME_VALUE = 394;

    /**
     *
     *
     * <pre>
     * A URL defined under a publisher's inventory.
     *
     *
     *
     * Corresponds to "URL" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>URL = 506;</code>
     */
    public static final int URL_VALUE = 506;

    /**
     *
     *
     * <pre>
     * A URL defined under a publisher's inventory.
     *
     *
     *
     * Corresponds to "URL ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>URL_ID = 507;</code>
     */
    public static final int URL_ID_VALUE = 507;

    /**
     *
     *
     * <pre>
     * Enum value for the entitlement source.
     *
     *
     *
     * Corresponds to "Entitlement source value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>USER_MESSAGES_ENTITLEMENT_SOURCE = 635;</code>
     */
    public static final int USER_MESSAGES_ENTITLEMENT_SOURCE_VALUE = 635;

    /**
     *
     *
     * <pre>
     * The localized name of the entitlement source.
     *
     *
     *
     * Corresponds to "Entitlement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>USER_MESSAGES_ENTITLEMENT_SOURCE_NAME = 636;</code>
     */
    public static final int USER_MESSAGES_ENTITLEMENT_SOURCE_NAME_VALUE = 636;

    /**
     *
     *
     * <pre>
     * Targeting criteria ID for the operating system group. Used for User
     *  Messages reports.
     *
     *
     *
     * Corresponds to "Operating system group ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID = 637;</code>
     */
    public static final int USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID_VALUE = 637;

    /**
     *
     *
     * <pre>
     * The name of the operating system group. Used for User Messages reports.
     *
     *
     *
     * Corresponds to "Operating system group" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME = 638;</code>
     */
    public static final int USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME_VALUE = 638;

    /**
     *
     *
     * <pre>
     * The VAST version of the creative that is returned for an ad request.
     *
     *
     *
     * Corresponds to "Vast version value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VAST_VERSION = 554;</code>
     */
    public static final int VAST_VERSION_VALUE = 554;

    /**
     *
     *
     * <pre>
     * The localized name of the VAST version of the creative that is returned
     *  for an ad request.
     *
     *
     *
     * Corresponds to "Vast version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VAST_VERSION_NAME = 555;</code>
     */
    public static final int VAST_VERSION_NAME_VALUE = 555;

    /**
     *
     *
     * <pre>
     * The break type of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad break type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_BREAK_TYPE = 556;</code>
     */
    public static final int VIDEO_AD_BREAK_TYPE_VALUE = 556;

    /**
     *
     *
     * <pre>
     * The localized name of the break type of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad break type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_BREAK_TYPE_NAME = 557;</code>
     */
    public static final int VIDEO_AD_BREAK_TYPE_NAME_VALUE = 557;

    /**
     *
     *
     * <pre>
     * Video ad duration
     *
     *
     *
     * Corresponds to "Video ad duration" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_DURATION = 450;</code>
     */
    public static final int VIDEO_AD_DURATION_VALUE = 450;

    /**
     *
     *
     * <pre>
     * The name of the video ad formats rule used to control the ad formats
     *  eligible for your inventory.
     *
     *
     *
     * Corresponds to "Video ad formats rule" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_FORMATS_RULE = 561;</code>
     */
    public static final int VIDEO_AD_FORMATS_RULE_VALUE = 561;

    /**
     *
     *
     * <pre>
     * The ID of the video ad formats rule used to control the ad formats
     *  eligible for your inventory.
     *
     *
     *
     * Corresponds to "Video ad formats rule ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>VIDEO_AD_FORMATS_RULE_ID = 560;</code>
     */
    public static final int VIDEO_AD_FORMATS_RULE_ID_VALUE = 560;

    /**
     *
     *
     * <pre>
     * The duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION = 558;</code>
     */
    public static final int VIDEO_AD_REQUEST_DURATION_VALUE = 558;

    /**
     *
     *
     * <pre>
     * The localized name of the midpoint of the duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration midpoint" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME = 751;</code>
     */
    public static final int VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME_VALUE = 751;

    /**
     *
     *
     * <pre>
     * The localized name of the duration of a video ad request.
     *
     *
     *
     * Corresponds to "Video ad request duration" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_DURATION_NAME = 559;</code>
     */
    public static final int VIDEO_AD_REQUEST_DURATION_NAME_VALUE = 559;

    /**
     *
     *
     * <pre>
     * The video ad request source enum.
     *
     *
     *
     * Corresponds to "Ad request source value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_SOURCE = 438;</code>
     */
    public static final int VIDEO_AD_REQUEST_SOURCE_VALUE = 438;

    /**
     *
     *
     * <pre>
     * The localized name of the video ad request source.
     *
     *
     *
     * Corresponds to "Ad request source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_REQUEST_SOURCE_NAME = 439;</code>
     */
    public static final int VIDEO_AD_REQUEST_SOURCE_NAME_VALUE = 439;

    /**
     *
     *
     * <pre>
     * Video ad type
     *
     *
     *
     * Corresponds to "Video ad type value" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_AD_TYPE = 432;</code>
     */
    public static final int VIDEO_AD_TYPE_VALUE = 432;

    /**
     *
     *
     * <pre>
     * Video ad type localized name
     *
     *
     *
     * Corresponds to "Video ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_AD_TYPE_NAME = 433;</code>
     */
    public static final int VIDEO_AD_TYPE_NAME_VALUE = 433;

    /**
     *
     *
     * <pre>
     * The continuous play type of the video ad impression.
     *
     *
     *
     * Corresponds to "Video continuous play type value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_CONTINUOUS_PLAY_TYPE = 721;</code>
     */
    public static final int VIDEO_CONTINUOUS_PLAY_TYPE_VALUE = 721;

    /**
     *
     *
     * <pre>
     * Video continuous play type localized name.
     *
     *
     *
     * Corresponds to "Video continuous play type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_CONTINUOUS_PLAY_TYPE_NAME = 722;</code>
     */
    public static final int VIDEO_CONTINUOUS_PLAY_TYPE_NAME_VALUE = 722;

    /**
     *
     *
     * <pre>
     * Fallback position of the video ad.
     *
     *
     *
     * Corresponds to "Fallback position" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_FALLBACK_POSITION = 530;</code>
     */
    public static final int VIDEO_FALLBACK_POSITION_VALUE = 530;

    /**
     *
     *
     * <pre>
     * The performance of the video ad inventory broken out by source.
     *
     *
     *
     * Corresponds to "Video measurement source value" in the Ad Manager UI
     * (when showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_MEASUREMENT_SOURCE = 601;</code>
     */
    public static final int VIDEO_MEASUREMENT_SOURCE_VALUE = 601;

    /**
     *
     *
     * <pre>
     * Video measurement source localized name.
     *
     *
     *
     * Corresponds to "Video measurement source" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_MEASUREMENT_SOURCE_NAME = 602;</code>
     */
    public static final int VIDEO_MEASUREMENT_SOURCE_NAME_VALUE = 602;

    /**
     *
     *
     * <pre>
     * The video placement enum as defined by ADCOM 1.0-202303.
     *
     *
     *
     * Corresponds to "Video placement value (new)" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_PLCMT = 172;</code>
     */
    public static final int VIDEO_PLCMT_VALUE = 172;

    /**
     *
     *
     * <pre>
     * The localized name of the video placement as defined by ADCOM 1.0-202303.
     *
     *
     *
     * Corresponds to "Video placement (new)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_PLCMT_NAME = 173;</code>
     */
    public static final int VIDEO_PLCMT_NAME_VALUE = 173;

    /**
     *
     *
     * <pre>
     * The position in the video pod. For example 0, 1, 2, etc.
     *
     *
     *
     * Corresponds to "Position in pod" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_POSITION_IN_POD = 538;</code>
     */
    public static final int VIDEO_POSITION_IN_POD_VALUE = 538;

    /**
     *
     *
     * <pre>
     * The position of the pod in the video stream. For example pre-roll,
     *  mid-roll, post-roll.
     *
     *
     *
     * Corresponds to "Position of pod" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_POSITION_OF_POD = 539;</code>
     */
    public static final int VIDEO_POSITION_OF_POD_VALUE = 539;

    /**
     *
     *
     * <pre>
     * The video SDK version enum.
     *
     *
     *
     * Corresponds to "Video SDK version value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_SDK_VERSION = 440;</code>
     */
    public static final int VIDEO_SDK_VERSION_VALUE = 440;

    /**
     *
     *
     * <pre>
     * The localized name of the video SDK version.
     *
     *
     *
     * Corresponds to "Video SDK version" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_SDK_VERSION_NAME = 441;</code>
     */
    public static final int VIDEO_SDK_VERSION_NAME_VALUE = 441;

    /**
     *
     *
     * <pre>
     * Video stitcher type.
     *
     *
     *
     * Corresponds to "Video stitcher type value" in the Ad Manager UI (when
     * showing API fields).
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>VIDEO_STITCHER_TYPE = 752;</code>
     */
    public static final int VIDEO_STITCHER_TYPE_VALUE = 752;

    /**
     *
     *
     * <pre>
     * Localized name of the video stitcher type.
     *
     *
     *
     * Corresponds to "Video stitcher type" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>VIDEO_STITCHER_TYPE_NAME = 753;</code>
     */
    public static final int VIDEO_STITCHER_TYPE_NAME_VALUE = 753;

    /**
     *
     *
     * <pre>
     * Breaks down reporting data by week of the year.
     *
     *
     *
     * Corresponds to "Week" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`, `REACH`,
     * `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>WEEK = 5;</code>
     */
    public static final int WEEK_VALUE = 5;

    /**
     *
     *
     * <pre>
     * Name of the company within a yield group
     *
     *
     *
     * Corresponds to "Yield partner" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_BUYER_NAME = 184;</code>
     */
    public static final int YIELD_GROUP_BUYER_NAME_VALUE = 184;

    /**
     *
     *
     * <pre>
     * Tag of the company within a yield group.
     *
     *
     *
     * Corresponds to "Yield group buyer tag" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_BUYER_TAG_NAME = 627;</code>
     */
    public static final int YIELD_GROUP_BUYER_TAG_NAME_VALUE = 627;

    /**
     *
     *
     * <pre>
     * ID of the group of ad networks or exchanges used for Mediation and Open
     *  Bidding
     *
     *
     *
     * Corresponds to "Yield group ID" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `IDENTIFIER`
     * </pre>
     *
     * <code>YIELD_GROUP_ID = 182;</code>
     */
    public static final int YIELD_GROUP_ID_VALUE = 182;

    /**
     *
     *
     * <pre>
     * Name of the group of ad networks or exchanges used for Mediation and Open
     *  Bidding
     *
     *
     *
     * Corresponds to "Yield group" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YIELD_GROUP_NAME = 183;</code>
     */
    public static final int YIELD_GROUP_NAME_VALUE = 183;

    /**
     *
     *
     * <pre>
     * YouTube instream ad duration bucket.
     *
     *
     *
     * Corresponds to "Ad duration value" in the Ad Manager UI (when showing API
     * fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>YOUTUBE_AD_DURATION_BUCKET = 430;</code>
     */
    public static final int YOUTUBE_AD_DURATION_BUCKET_VALUE = 430;

    /**
     *
     *
     * <pre>
     * YouTube instream ad duration bucket name.
     *
     *
     *
     * Corresponds to "Ad duration" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YOUTUBE_AD_DURATION_BUCKET_NAME = 431;</code>
     */
    public static final int YOUTUBE_AD_DURATION_BUCKET_NAME_VALUE = 431;

    /**
     *
     *
     * <pre>
     * YouTube instream Ad Type.
     *
     *
     *
     * Corresponds to "YouTube ad type ID" in the Ad Manager UI (when showing
     * API fields).
     *
     * Compatible with the following report types:
     *
     * Data format: `ENUM`
     * </pre>
     *
     * <code>YOUTUBE_AD_TYPE = 399;</code>
     */
    public static final int YOUTUBE_AD_TYPE_VALUE = 399;

    /**
     *
     *
     * <pre>
     * YouTube instream Ad Type locallized name.
     *
     *
     *
     * Corresponds to "YouTube ad type" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `STRING`
     * </pre>
     *
     * <code>YOUTUBE_AD_TYPE_NAME = 400;</code>
     */
    public static final int YOUTUBE_AD_TYPE_NAME_VALUE = 400;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID = 10000;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID_VALUE = 10000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID = 10001;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID_VALUE = 10001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID = 10002;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID_VALUE = 10002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID = 10003;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID_VALUE = 10003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID = 10004;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID_VALUE = 10004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID = 10005;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID_VALUE = 10005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID = 10006;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID_VALUE = 10006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID = 10007;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID_VALUE = 10007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID = 10008;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID_VALUE = 10008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID = 10009;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID_VALUE = 10009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID = 10010;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID_VALUE = 10010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID = 10011;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID_VALUE = 10011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID = 10012;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID_VALUE = 10012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID = 10013;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID_VALUE = 10013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Line Item with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID = 10014;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID_VALUE = 10014;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_0_VALUE = 11000;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_0_VALUE_VALUE = 11000;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_1_VALUE = 11001;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_1_VALUE_VALUE = 11001;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_2_VALUE = 11002;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_2_VALUE_VALUE = 11002;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_3_VALUE = 11003;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_3_VALUE_VALUE = 11003;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_4_VALUE = 11004;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_4_VALUE_VALUE = 11004;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_5_VALUE = 11005;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_5_VALUE_VALUE = 11005;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_6_VALUE = 11006;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_6_VALUE_VALUE = 11006;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_7_VALUE = 11007;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_7_VALUE_VALUE = 11007;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_8_VALUE = 11008;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_8_VALUE_VALUE = 11008;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_9_VALUE = 11009;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_9_VALUE_VALUE = 11009;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_10_VALUE = 11010;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_10_VALUE_VALUE = 11010;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_11_VALUE = 11011;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_11_VALUE_VALUE = 11011;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_12_VALUE = 11012;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_12_VALUE_VALUE = 11012;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_13_VALUE = 11013;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_13_VALUE_VALUE = 11013;

    /**
     *
     *
     * <pre>
     * Custom field value for Line Item with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.line_item_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>LINE_ITEM_CUSTOM_FIELD_14_VALUE = 11014;</code>
     */
    public static final int LINE_ITEM_CUSTOM_FIELD_14_VALUE_VALUE = 11014;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_0_OPTION_ID = 12000;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_0_OPTION_ID_VALUE = 12000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_1_OPTION_ID = 12001;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_1_OPTION_ID_VALUE = 12001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_2_OPTION_ID = 12002;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_2_OPTION_ID_VALUE = 12002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_3_OPTION_ID = 12003;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_3_OPTION_ID_VALUE = 12003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_4_OPTION_ID = 12004;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_4_OPTION_ID_VALUE = 12004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_5_OPTION_ID = 12005;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_5_OPTION_ID_VALUE = 12005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_6_OPTION_ID = 12006;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_6_OPTION_ID_VALUE = 12006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_7_OPTION_ID = 12007;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_7_OPTION_ID_VALUE = 12007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_8_OPTION_ID = 12008;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_8_OPTION_ID_VALUE = 12008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_9_OPTION_ID = 12009;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_9_OPTION_ID_VALUE = 12009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_10_OPTION_ID = 12010;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_10_OPTION_ID_VALUE = 12010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_11_OPTION_ID = 12011;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_11_OPTION_ID_VALUE = 12011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_12_OPTION_ID = 12012;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_12_OPTION_ID_VALUE = 12012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_13_OPTION_ID = 12013;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_13_OPTION_ID_VALUE = 12013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Order with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_14_OPTION_ID = 12014;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_14_OPTION_ID_VALUE = 12014;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 0 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_0_VALUE = 13000;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_0_VALUE_VALUE = 13000;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 1 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_1_VALUE = 13001;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_1_VALUE_VALUE = 13001;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 2 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_2_VALUE = 13002;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_2_VALUE_VALUE = 13002;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 3 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_3_VALUE = 13003;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_3_VALUE_VALUE = 13003;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 4 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_4_VALUE = 13004;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_4_VALUE_VALUE = 13004;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 5 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_5_VALUE = 13005;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_5_VALUE_VALUE = 13005;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 6 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_6_VALUE = 13006;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_6_VALUE_VALUE = 13006;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 7 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_7_VALUE = 13007;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_7_VALUE_VALUE = 13007;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 8 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_8_VALUE = 13008;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_8_VALUE_VALUE = 13008;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the value
     * as a string. Can only be used if the custom field at index 9 is of type
     * STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_9_VALUE = 13009;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_9_VALUE_VALUE = 13009;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_10_VALUE = 13010;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_10_VALUE_VALUE = 13010;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_11_VALUE = 13011;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_11_VALUE_VALUE = 13011;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_12_VALUE = 13012;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_12_VALUE_VALUE = 13012;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_13_VALUE = 13013;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_13_VALUE_VALUE = 13013;

    /**
     *
     *
     * <pre>
     * Custom field value for Order with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type STRING.
     * </pre>
     *
     * <code>ORDER_CUSTOM_FIELD_14_VALUE = 13014;</code>
     */
    public static final int ORDER_CUSTOM_FIELD_14_VALUE_VALUE = 13014;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_0_OPTION_ID = 14000;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_0_OPTION_ID_VALUE = 14000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_1_OPTION_ID = 14001;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_1_OPTION_ID_VALUE = 14001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_2_OPTION_ID = 14002;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_2_OPTION_ID_VALUE = 14002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_3_OPTION_ID = 14003;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_3_OPTION_ID_VALUE = 14003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_4_OPTION_ID = 14004;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_4_OPTION_ID_VALUE = 14004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_5_OPTION_ID = 14005;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_5_OPTION_ID_VALUE = 14005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_6_OPTION_ID = 14006;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_6_OPTION_ID_VALUE = 14006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_7_OPTION_ID = 14007;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_7_OPTION_ID_VALUE = 14007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_8_OPTION_ID = 14008;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_8_OPTION_ID_VALUE = 14008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_9_OPTION_ID = 14009;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_9_OPTION_ID_VALUE = 14009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_10_OPTION_ID = 14010;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_10_OPTION_ID_VALUE = 14010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_11_OPTION_ID = 14011;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_11_OPTION_ID_VALUE = 14011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_12_OPTION_ID = 14012;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_12_OPTION_ID_VALUE = 14012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_13_OPTION_ID = 14013;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_13_OPTION_ID_VALUE = 14013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Creative with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_14_OPTION_ID = 14014;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_14_OPTION_ID_VALUE = 14014;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_0_VALUE = 15000;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_0_VALUE_VALUE = 15000;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_1_VALUE = 15001;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_1_VALUE_VALUE = 15001;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_2_VALUE = 15002;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_2_VALUE_VALUE = 15002;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_3_VALUE = 15003;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_3_VALUE_VALUE = 15003;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_4_VALUE = 15004;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_4_VALUE_VALUE = 15004;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_5_VALUE = 15005;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_5_VALUE_VALUE = 15005;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_6_VALUE = 15006;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_6_VALUE_VALUE = 15006;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_7_VALUE = 15007;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_7_VALUE_VALUE = 15007;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_8_VALUE = 15008;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_8_VALUE_VALUE = 15008;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_9_VALUE = 15009;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_9_VALUE_VALUE = 15009;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 10 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_10_VALUE = 15010;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_10_VALUE_VALUE = 15010;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 11 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_11_VALUE = 15011;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_11_VALUE_VALUE = 15011;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 12 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_12_VALUE = 15012;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_12_VALUE_VALUE = 15012;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 13 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_13_VALUE = 15013;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_13_VALUE_VALUE = 15013;

    /**
     *
     *
     * <pre>
     * Custom field value for Creative with custom field ID equal to the ID
     * in index 14 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type STRING.
     * </pre>
     *
     * <code>CREATIVE_CUSTOM_FIELD_14_VALUE = 15014;</code>
     */
    public static final int CREATIVE_CUSTOM_FIELD_14_VALUE_VALUE = 15014;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID = 16000;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID_VALUE = 16000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID = 16001;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID_VALUE = 16001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID = 16002;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID_VALUE = 16002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID = 16003;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID_VALUE = 16003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID = 16004;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID_VALUE = 16004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID = 16005;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID_VALUE = 16005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID = 16006;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID_VALUE = 16006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID = 16007;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID_VALUE = 16007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID = 16008;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID_VALUE = 16008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID = 16009;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID_VALUE = 16009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID = 16010;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID_VALUE = 16010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID = 16011;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID_VALUE = 16011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID = 16012;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID_VALUE = 16012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID = 16013;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID_VALUE = 16013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill line item with custom field ID equal
     * to the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID = 16014;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID_VALUE = 16014;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 0 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE = 17000;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE_VALUE = 17000;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 1 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE = 17001;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE_VALUE = 17001;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 2 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE = 17002;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE_VALUE = 17002;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 3 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE = 17003;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE_VALUE = 17003;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 4 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE = 17004;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE_VALUE = 17004;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 5 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE = 17005;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE_VALUE = 17005;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 6 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE = 17006;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE_VALUE = 17006;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 7 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE = 17007;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE_VALUE = 17007;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 8 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE = 17008;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE_VALUE = 17008;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 9 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE = 17009;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE_VALUE = 17009;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 10 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE = 17010;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE_VALUE = 17010;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 11 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE = 17011;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE_VALUE = 17011;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 12 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE = 17012;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE_VALUE = 17012;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 13 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE = 17013;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE_VALUE = 17013;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill line item with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 14 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE = 17014;</code>
     */
    public static final int BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE_VALUE = 17014;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 0 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID = 18000;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID_VALUE = 18000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID = 18001;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID_VALUE = 18001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID = 18002;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID_VALUE = 18002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID = 18003;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID_VALUE = 18003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID = 18004;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID_VALUE = 18004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID = 18005;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID_VALUE = 18005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID = 18006;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID_VALUE = 18006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID = 18007;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID_VALUE = 18007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID = 18008;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID_VALUE = 18008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID = 18009;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID_VALUE = 18009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID = 18010;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID_VALUE = 18010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID = 18011;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID_VALUE = 18011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID = 18012;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID_VALUE = 18012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID = 18013;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID_VALUE = 18013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill order with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.order_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID = 18014;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID_VALUE = 18014;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID
     * in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE = 19000;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE_VALUE = 19000;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 1 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE = 19001;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE_VALUE = 19001;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 2 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE = 19002;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE_VALUE = 19002;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 3 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE = 19003;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE_VALUE = 19003;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 4 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE = 19004;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE_VALUE = 19004;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 5 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE = 19005;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE_VALUE = 19005;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 6 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE = 19006;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE_VALUE = 19006;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 7 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE = 19007;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE_VALUE = 19007;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 8 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE = 19008;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE_VALUE = 19008;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 9 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE = 19009;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE_VALUE = 19009;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 10 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE = 19010;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE_VALUE = 19010;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 11 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE = 19011;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE_VALUE = 19011;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 12 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE = 19012;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE_VALUE = 19012;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 13 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE = 19013;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE_VALUE = 19013;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill order with custom field ID equal to the
     * ID in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 14 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE = 19014;</code>
     */
    public static final int BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE_VALUE = 19014;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID = 20000;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID_VALUE = 20000;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID = 20001;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID_VALUE = 20001;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID = 20002;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID_VALUE = 20002;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID = 20003;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID_VALUE = 20003;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID = 20004;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID_VALUE = 20004;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID = 20005;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID_VALUE = 20005;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID = 20006;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID_VALUE = 20006;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID = 20007;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID_VALUE = 20007;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID = 20008;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID_VALUE = 20008;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID = 20009;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID_VALUE = 20009;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID = 20010;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID_VALUE = 20010;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID = 20011;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID_VALUE = 20011;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID = 20012;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID_VALUE = 20012;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID = 20013;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID_VALUE = 20013;

    /**
     *
     *
     * <pre>
     * Custom field option ID for Backfill creative with custom field ID equal
     * to the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID = 20014;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID_VALUE = 20014;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID
     * in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
     * value as a string. Can only be used if the custom field at index 0 is of
     * type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE = 21000;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE_VALUE = 21000;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 1 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE = 21001;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE_VALUE = 21001;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 2 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE = 21002;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE_VALUE = 21002;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 3 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE = 21003;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE_VALUE = 21003;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 4 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE = 21004;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE_VALUE = 21004;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 5 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE = 21005;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE_VALUE = 21005;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 6 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE = 21006;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE_VALUE = 21006;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 7 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE = 21007;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE_VALUE = 21007;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 8 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE = 21008;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE_VALUE = 21008;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats
     * the value as a string. Can only be used if the custom field at index 9 is
     * of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE = 21009;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE_VALUE = 21009;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 10 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE = 21010;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE_VALUE = 21010;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 11 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE = 21011;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE_VALUE = 21011;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 12 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE = 21012;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE_VALUE = 21012;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 13 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE = 21013;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE_VALUE = 21013;

    /**
     *
     *
     * <pre>
     * Custom field value for Backfill creative with custom field ID equal to
     * the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
     * Treats the value as a string. Can only be used if the custom field at
     * index 14 is of type `STRING` or `DROPDOWN`.
     * </pre>
     *
     * <code>BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE = 21014;</code>
     */
    public static final int BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE_VALUE = 21014;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 0 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_0_VALUE_ID = 100000;</code>
     */
    public static final int CUSTOM_DIMENSION_0_VALUE_ID_VALUE = 100000;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 1 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_1_VALUE_ID = 100001;</code>
     */
    public static final int CUSTOM_DIMENSION_1_VALUE_ID_VALUE = 100001;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 2 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_2_VALUE_ID = 100002;</code>
     */
    public static final int CUSTOM_DIMENSION_2_VALUE_ID_VALUE = 100002;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 3 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_3_VALUE_ID = 100003;</code>
     */
    public static final int CUSTOM_DIMENSION_3_VALUE_ID_VALUE = 100003;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 4 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_4_VALUE_ID = 100004;</code>
     */
    public static final int CUSTOM_DIMENSION_4_VALUE_ID_VALUE = 100004;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 5 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_5_VALUE_ID = 100005;</code>
     */
    public static final int CUSTOM_DIMENSION_5_VALUE_ID_VALUE = 100005;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 6 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_6_VALUE_ID = 100006;</code>
     */
    public static final int CUSTOM_DIMENSION_6_VALUE_ID_VALUE = 100006;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_7_VALUE_ID = 100007;</code>
     */
    public static final int CUSTOM_DIMENSION_7_VALUE_ID_VALUE = 100007;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 8 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_8_VALUE_ID = 100008;</code>
     */
    public static final int CUSTOM_DIMENSION_8_VALUE_ID_VALUE = 100008;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value ID for Custom Dimension with key equal to the key
     * in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_9_VALUE_ID = 100009;</code>
     */
    public static final int CUSTOM_DIMENSION_9_VALUE_ID_VALUE = 100009;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 0 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_0_VALUE = 101000;</code>
     */
    public static final int CUSTOM_DIMENSION_0_VALUE_VALUE = 101000;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 1 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_1_VALUE = 101001;</code>
     */
    public static final int CUSTOM_DIMENSION_1_VALUE_VALUE = 101001;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 2 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_2_VALUE = 101002;</code>
     */
    public static final int CUSTOM_DIMENSION_2_VALUE_VALUE = 101002;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 3 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_3_VALUE = 101003;</code>
     */
    public static final int CUSTOM_DIMENSION_3_VALUE_VALUE = 101003;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 4 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_4_VALUE = 101004;</code>
     */
    public static final int CUSTOM_DIMENSION_4_VALUE_VALUE = 101004;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 5 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_5_VALUE = 101005;</code>
     */
    public static final int CUSTOM_DIMENSION_5_VALUE_VALUE = 101005;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 6 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_6_VALUE = 101006;</code>
     */
    public static final int CUSTOM_DIMENSION_6_VALUE_VALUE = 101006;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 7 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_7_VALUE = 101007;</code>
     */
    public static final int CUSTOM_DIMENSION_7_VALUE_VALUE = 101007;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 8 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_8_VALUE = 101008;</code>
     */
    public static final int CUSTOM_DIMENSION_8_VALUE_VALUE = 101008;

    /**
     *
     *
     * <pre>
     * Custom Dimension Value name for Custom Dimension with key equal to the
     * ID in index 9 of `ReportDefinition.custom_dimension_key_ids`.
     * </pre>
     *
     * <code>CUSTOM_DIMENSION_9_VALUE = 101009;</code>
     */
    public static final int CUSTOM_DIMENSION_9_VALUE_VALUE = 101009;

    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Dimension valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Dimension forNumber(int value) {
      switch (value) {
        case 0:
          return DIMENSION_UNSPECIFIED;
        case 575:
          return ACTIVE_VIEW_MEASUREMENT_SOURCE;
        case 576:
          return ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME;
        case 475:
          return ADVERTISER_CREDIT_STATUS;
        case 476:
          return ADVERTISER_CREDIT_STATUS_NAME;
        case 242:
          return ADVERTISER_DOMAIN_NAME;
        case 228:
          return ADVERTISER_EXTERNAL_ID;
        case 131:
          return ADVERTISER_ID;
        case 230:
          return ADVERTISER_LABELS;
        case 229:
          return ADVERTISER_LABEL_IDS;
        case 132:
          return ADVERTISER_NAME;
        case 227:
          return ADVERTISER_PRIMARY_CONTACT;
        case 471:
          return ADVERTISER_STATUS;
        case 472:
          return ADVERTISER_STATUS_NAME;
        case 473:
          return ADVERTISER_TYPE;
        case 474:
          return ADVERTISER_TYPE_NAME;
        case 580:
          return ADVERTISER_VERTICAL;
        case 499:
          return ADX_PRODUCT;
        case 500:
          return ADX_PRODUCT_NAME;
        case 641:
          return AD_EXPERIENCES_TYPE;
        case 642:
          return AD_EXPERIENCES_TYPE_NAME;
        case 390:
          return AD_LOCATION;
        case 391:
          return AD_LOCATION_NAME;
        case 620:
          return AD_TECHNOLOGY_PROVIDER_DOMAIN;
        case 621:
          return AD_TECHNOLOGY_PROVIDER_ID;
        case 622:
          return AD_TECHNOLOGY_PROVIDER_NAME;
        case 497:
          return AD_TYPE;
        case 498:
          return AD_TYPE_NAME;
        case 64:
          return AD_UNIT_CODE;
        case 65:
          return AD_UNIT_CODE_LEVEL_1;
        case 74:
          return AD_UNIT_CODE_LEVEL_10;
        case 75:
          return AD_UNIT_CODE_LEVEL_11;
        case 76:
          return AD_UNIT_CODE_LEVEL_12;
        case 77:
          return AD_UNIT_CODE_LEVEL_13;
        case 78:
          return AD_UNIT_CODE_LEVEL_14;
        case 79:
          return AD_UNIT_CODE_LEVEL_15;
        case 80:
          return AD_UNIT_CODE_LEVEL_16;
        case 66:
          return AD_UNIT_CODE_LEVEL_2;
        case 67:
          return AD_UNIT_CODE_LEVEL_3;
        case 68:
          return AD_UNIT_CODE_LEVEL_4;
        case 69:
          return AD_UNIT_CODE_LEVEL_5;
        case 70:
          return AD_UNIT_CODE_LEVEL_6;
        case 71:
          return AD_UNIT_CODE_LEVEL_7;
        case 72:
          return AD_UNIT_CODE_LEVEL_8;
        case 73:
          return AD_UNIT_CODE_LEVEL_9;
        case 25:
          return AD_UNIT_ID;
        case 27:
          return AD_UNIT_ID_ALL_LEVEL;
        case 30:
          return AD_UNIT_ID_LEVEL_1;
        case 48:
          return AD_UNIT_ID_LEVEL_10;
        case 50:
          return AD_UNIT_ID_LEVEL_11;
        case 52:
          return AD_UNIT_ID_LEVEL_12;
        case 54:
          return AD_UNIT_ID_LEVEL_13;
        case 56:
          return AD_UNIT_ID_LEVEL_14;
        case 58:
          return AD_UNIT_ID_LEVEL_15;
        case 60:
          return AD_UNIT_ID_LEVEL_16;
        case 32:
          return AD_UNIT_ID_LEVEL_2;
        case 34:
          return AD_UNIT_ID_LEVEL_3;
        case 36:
          return AD_UNIT_ID_LEVEL_4;
        case 38:
          return AD_UNIT_ID_LEVEL_5;
        case 40:
          return AD_UNIT_ID_LEVEL_6;
        case 42:
          return AD_UNIT_ID_LEVEL_7;
        case 44:
          return AD_UNIT_ID_LEVEL_8;
        case 46:
          return AD_UNIT_ID_LEVEL_9;
        case 142:
          return AD_UNIT_ID_TOP_LEVEL;
        case 26:
          return AD_UNIT_NAME;
        case 29:
          return AD_UNIT_NAME_ALL_LEVEL;
        case 31:
          return AD_UNIT_NAME_LEVEL_1;
        case 49:
          return AD_UNIT_NAME_LEVEL_10;
        case 51:
          return AD_UNIT_NAME_LEVEL_11;
        case 53:
          return AD_UNIT_NAME_LEVEL_12;
        case 55:
          return AD_UNIT_NAME_LEVEL_13;
        case 57:
          return AD_UNIT_NAME_LEVEL_14;
        case 59:
          return AD_UNIT_NAME_LEVEL_15;
        case 61:
          return AD_UNIT_NAME_LEVEL_16;
        case 33:
          return AD_UNIT_NAME_LEVEL_2;
        case 35:
          return AD_UNIT_NAME_LEVEL_3;
        case 37:
          return AD_UNIT_NAME_LEVEL_4;
        case 39:
          return AD_UNIT_NAME_LEVEL_5;
        case 41:
          return AD_UNIT_NAME_LEVEL_6;
        case 43:
          return AD_UNIT_NAME_LEVEL_7;
        case 45:
          return AD_UNIT_NAME_LEVEL_8;
        case 47:
          return AD_UNIT_NAME_LEVEL_9;
        case 143:
          return AD_UNIT_NAME_TOP_LEVEL;
        case 63:
          return AD_UNIT_REWARD_AMOUNT;
        case 62:
          return AD_UNIT_REWARD_TYPE;
        case 206:
          return AD_UNIT_STATUS;
        case 207:
          return AD_UNIT_STATUS_NAME;
        case 565:
          return AGENCY_LEVEL_1_ID;
        case 566:
          return AGENCY_LEVEL_1_NAME;
        case 567:
          return AGENCY_LEVEL_2_ID;
        case 568:
          return AGENCY_LEVEL_2_NAME;
        case 569:
          return AGENCY_LEVEL_3_ID;
        case 570:
          return AGENCY_LEVEL_3_NAME;
        case 508:
          return AGE_BRACKET;
        case 582:
          return AGE_BRACKET_NAME;
        case 442:
          return APP_TRACKING_TRANSPARENCY_CONSENT_STATUS;
        case 443:
          return APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME;
        case 392:
          return APP_VERSION;
        case 579:
          return AUCTION_PACKAGE_DEAL;
        case 571:
          return AUCTION_PACKAGE_DEAL_ID;
        case 584:
          return AUDIENCE_SEGMENT_ID_TARGETED;
        case 585:
          return AUDIENCE_SEGMENT_TARGETED;
        case 421:
          return AUTO_REFRESHED_TRAFFIC;
        case 422:
          return AUTO_REFRESHED_TRAFFIC_NAME;
        case 493:
          return BIDDER_ENCRYPTED_ID;
        case 494:
          return BIDDER_NAME;
        case 679:
          return BID_RANGE;
        case 599:
          return BID_REJECTION_REASON;
        case 600:
          return BID_REJECTION_REASON_NAME;
        case 383:
          return BRANDING_TYPE;
        case 384:
          return BRANDING_TYPE_NAME;
        case 119:
          return BROWSER_CATEGORY;
        case 120:
          return BROWSER_CATEGORY_NAME;
        case 235:
          return BROWSER_ID;
        case 236:
          return BROWSER_NAME;
        case 448:
          return BUYER_NETWORK_ID;
        case 449:
          return BUYER_NETWORK_NAME;
        case 588:
          return CALLOUT_STATUS_CATEGORY;
        case 589:
          return CALLOUT_STATUS_CATEGORY_NAME;
        case 369:
          return CARRIER_ID;
        case 368:
          return CARRIER_NAME;
        case 501:
          return CHANNEL;
        case 542:
          return CHILD_NETWORK_CODE;
        case 544:
          return CHILD_NETWORK_ID;
        case 543:
          return CHILD_PARTNER_NAME;
        case 459:
          return CITY_ID;
        case 452:
          return CITY_NAME;
        case 133:
          return CLASSIFIED_ADVERTISER_ID;
        case 134:
          return CLASSIFIED_ADVERTISER_NAME;
        case 243:
          return CLASSIFIED_BRAND_ID;
        case 244:
          return CLASSIFIED_BRAND_NAME;
        case 643:
          return CONTENT_CMS_NAME;
        case 644:
          return CONTENT_CMS_VIDEO_ID;
        case 246:
          return CONTENT_ID;
        case 731:
          return CONTENT_MAPPING_PRESENCE;
        case 732:
          return CONTENT_MAPPING_PRESENCE_NAME;
        case 247:
          return CONTENT_NAME;
        case 469:
          return CONTINENT;
        case 470:
          return CONTINENT_NAME;
        case 466:
          return COUNTRY_CODE;
        case 11:
          return COUNTRY_ID;
        case 12:
          return COUNTRY_NAME;
        case 366:
          return CREATIVE_BILLING_TYPE;
        case 367:
          return CREATIVE_BILLING_TYPE_NAME;
        case 174:
          return CREATIVE_CLICK_THROUGH_URL;
        case 138:
          return CREATIVE_ID;
        case 139:
          return CREATIVE_NAME;
        case 711:
          return CREATIVE_POLICIES_FILTERING;
        case 712:
          return CREATIVE_POLICIES_FILTERING_NAME;
        case 704:
          return CREATIVE_PROTECTIONS_FILTERING;
        case 705:
          return CREATIVE_PROTECTIONS_FILTERING_NAME;
        case 686:
          return CREATIVE_SET_ROLE_TYPE;
        case 687:
          return CREATIVE_SET_ROLE_TYPE_NAME;
        case 148:
          return CREATIVE_TECHNOLOGY;
        case 149:
          return CREATIVE_TECHNOLOGY_NAME;
        case 361:
          return CREATIVE_THIRD_PARTY_VENDOR;
        case 344:
          return CREATIVE_TYPE;
        case 345:
          return CREATIVE_TYPE_NAME;
        case 706:
          return CREATIVE_VENDOR_ID;
        case 707:
          return CREATIVE_VENDOR_NAME;
        case 562:
          return CREATIVE_VIDEO_REDIRECT_THIRD_PARTY;
        case 572:
          return CURATOR_ID;
        case 573:
          return CURATOR_NAME;
        case 737:
          return CUSTOM_EVENT_ID;
        case 735:
          return CUSTOM_EVENT_NAME;
        case 736:
          return CUSTOM_EVENT_TYPE;
        case 738:
          return CUSTOM_EVENT_TYPE_NAME;
        case 423:
          return CUSTOM_SPOT_ID;
        case 424:
          return CUSTOM_SPOT_NAME;
        case 3:
          return DATE;
        case 4:
          return DAY_OF_WEEK;
        case 240:
          return DEAL_BUYER_ID;
        case 241:
          return DEAL_BUYER_NAME;
        case 436:
          return DEAL_ID;
        case 437:
          return DEAL_NAME;
        case 309:
          return DELIVERED_SECURE_SIGNAL_ID;
        case 310:
          return DELIVERED_SECURE_SIGNAL_NAME;
        case 9:
          return DEMAND_CHANNEL;
        case 10:
          return DEMAND_CHANNEL_NAME;
        case 592:
          return DEMAND_SOURCE;
        case 593:
          return DEMAND_SOURCE_NAME;
        case 22:
          return DEMAND_SUBCHANNEL;
        case 23:
          return DEMAND_SUBCHANNEL_NAME;
        case 226:
          return DEVICE;
        case 15:
          return DEVICE_CATEGORY;
        case 16:
          return DEVICE_CATEGORY_NAME;
        case 525:
          return DEVICE_MANUFACTURER_ID;
        case 526:
          return DEVICE_MANUFACTURER_NAME;
        case 527:
          return DEVICE_MODEL_ID;
        case 528:
          return DEVICE_MODEL_NAME;
        case 225:
          return DEVICE_NAME;
        case 564:
          return DSP_SEAT_ID;
        case 502:
          return DYNAMIC_ALLOCATION_TYPE;
        case 503:
          return DYNAMIC_ALLOCATION_TYPE_NAME;
        case 623:
          return ESP_DELIVERY;
        case 624:
          return ESP_DELIVERY_NAME;
        case 625:
          return ESP_PRESENCE;
        case 626:
          return ESP_PRESENCE_NAME;
        case 715:
          return EXCHANGE_BIDDING_DEAL_ID;
        case 714:
          return EXCHANGE_BIDDING_DEAL_TYPE;
        case 723:
          return EXCHANGE_BIDDING_DEAL_TYPE_NAME;
        case 185:
          return EXCHANGE_THIRD_PARTY_COMPANY_ID;
        case 186:
          return EXCHANGE_THIRD_PARTY_COMPANY_NAME;
        case 248:
          return FIRST_LOOK_PRICING_RULE_ID;
        case 249:
          return FIRST_LOOK_PRICING_RULE_NAME;
        case 404:
          return FIRST_PARTY_ID_STATUS;
        case 405:
          return FIRST_PARTY_ID_STATUS_NAME;
        case 509:
          return GENDER;
        case 583:
          return GENDER_NAME;
        case 519:
          return GOOGLE_ANALYTICS_STREAM_ID;
        case 520:
          return GOOGLE_ANALYTICS_STREAM_NAME;
        case 659:
          return HBT_YIELD_PARTNER_ID;
        case 660:
          return HBT_YIELD_PARTNER_NAME;
        case 718:
          return HEADER_BIDDER_INTEGRATION_TYPE;
        case 719:
          return HEADER_BIDDER_INTEGRATION_TYPE_NAME;
        case 100:
          return HOUR;
        case 577:
          return IMPRESSION_COUNTING_METHOD;
        case 578:
          return IMPRESSION_COUNTING_METHOD_NAME;
        case 223:
          return INTERACTION_TYPE;
        case 224:
          return INTERACTION_TYPE_NAME;
        case 510:
          return INTEREST;
        case 17:
          return INVENTORY_FORMAT;
        case 18:
          return INVENTORY_FORMAT_NAME;
        case 648:
          return INVENTORY_SHARE_ASSIGNMENT_ID;
        case 649:
          return INVENTORY_SHARE_ASSIGNMENT_NAME;
        case 603:
          return INVENTORY_SHARE_OUTCOME;
        case 604:
          return INVENTORY_SHARE_OUTCOME_NAME;
        case 652:
          return INVENTORY_SHARE_PARTNER_AD_SERVER;
        case 653:
          return INVENTORY_SHARE_PARTNER_AD_SERVER_NAME;
        case 654:
          return INVENTORY_SHARE_TARGET_SHARE_PERCENT;
        case 650:
          return INVENTORY_SHARE_TYPE;
        case 651:
          return INVENTORY_SHARE_TYPE_NAME;
        case 19:
          return INVENTORY_TYPE;
        case 20:
          return INVENTORY_TYPE_NAME;
        case 382:
          return IS_ADX_DIRECT;
        case 574:
          return IS_CURATION_TARGETED;
        case 464:
          return IS_DROPPED;
        case 401:
          return IS_FIRST_LOOK_DEAL;
        case 214:
          return KEY_VALUES_ID;
        case 215:
          return KEY_VALUES_NAME;
        case 663:
          return LINE_ITEM_AGENCY;
        case 188:
          return LINE_ITEM_ARCHIVED;
        case 204:
          return LINE_ITEM_COMPANION_DELIVERY_OPTION;
        case 205:
          return LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME;
        case 250:
          return LINE_ITEM_COMPUTED_STATUS;
        case 251:
          return LINE_ITEM_COMPUTED_STATUS_NAME;
        case 92:
          return LINE_ITEM_CONTRACTED_QUANTITY;
        case 85:
          return LINE_ITEM_COST_PER_UNIT;
        case 212:
          return LINE_ITEM_COST_TYPE;
        case 213:
          return LINE_ITEM_COST_TYPE_NAME;
        case 176:
          return LINE_ITEM_CREATIVE_END_DATE;
        case 189:
          return LINE_ITEM_CREATIVE_ROTATION_TYPE;
        case 190:
          return LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME;
        case 175:
          return LINE_ITEM_CREATIVE_START_DATE;
        case 180:
          return LINE_ITEM_CURRENCY_CODE;
        case 87:
          return LINE_ITEM_DELIVERY_INDICATOR;
        case 191:
          return LINE_ITEM_DELIVERY_RATE_TYPE;
        case 192:
          return LINE_ITEM_DELIVERY_RATE_TYPE_NAME;
        case 195:
          return LINE_ITEM_DISCOUNT_ABSOLUTE;
        case 196:
          return LINE_ITEM_DISCOUNT_PERCENTAGE;
        case 81:
          return LINE_ITEM_END_DATE;
        case 83:
          return LINE_ITEM_END_DATE_TIME;
        case 201:
          return LINE_ITEM_ENVIRONMENT_TYPE;
        case 202:
          return LINE_ITEM_ENVIRONMENT_TYPE_NAME;
        case 97:
          return LINE_ITEM_EXTERNAL_DEAL_ID;
        case 86:
          return LINE_ITEM_EXTERNAL_ID;
        case 256:
          return LINE_ITEM_FREQUENCY_CAP;
        case 1:
          return LINE_ITEM_ID;
        case 667:
          return LINE_ITEM_LABELS;
        case 665:
          return LINE_ITEM_LABEL_IDS;
        case 181:
          return LINE_ITEM_LAST_MODIFIED_BY_APP;
        case 95:
          return LINE_ITEM_LIFETIME_CLICKS;
        case 94:
          return LINE_ITEM_LIFETIME_IMPRESSIONS;
        case 96:
          return LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS;
        case 89:
          return LINE_ITEM_MAKEGOOD;
        case 2:
          return LINE_ITEM_NAME;
        case 98:
          return LINE_ITEM_NON_CPD_BOOKED_REVENUE;
        case 90:
          return LINE_ITEM_OPTIMIZABLE;
        case 669:
          return LINE_ITEM_PO_NUMBER;
        case 210:
          return LINE_ITEM_PRIMARY_GOAL_TYPE;
        case 211:
          return LINE_ITEM_PRIMARY_GOAL_TYPE_NAME;
        case 93:
          return LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE;
        case 396:
          return LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE;
        case 208:
          return LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE;
        case 209:
          return LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME;
        case 24:
          return LINE_ITEM_PRIORITY;
        case 304:
          return LINE_ITEM_RESERVATION_STATUS;
        case 305:
          return LINE_ITEM_RESERVATION_STATUS_NAME;
        case 671:
          return LINE_ITEM_SALESPERSON;
        case 673:
          return LINE_ITEM_SECONDARY_SALESPEOPLE;
        case 675:
          return LINE_ITEM_SECONDARY_TRAFFICKERS;
        case 82:
          return LINE_ITEM_START_DATE;
        case 84:
          return LINE_ITEM_START_DATE_TIME;
        case 677:
          return LINE_ITEM_TRAFFICKER;
        case 193:
          return LINE_ITEM_TYPE;
        case 194:
          return LINE_ITEM_TYPE_NAME;
        case 187:
          return LINE_ITEM_UNLIMITED_END;
        case 88:
          return LINE_ITEM_VALUE_COST_PER_UNIT;
        case 179:
          return LINE_ITEM_WEB_PROPERTY_CODE;
        case 140:
          return MASTER_COMPANION_CREATIVE_ID;
        case 141:
          return MASTER_COMPANION_CREATIVE_NAME;
        case 701:
          return MEDIATION_TYPE;
        case 754:
          return MEDIATION_TYPE_NAME;
        case 661:
          return MEDIATION_YIELD_PARTNER_ID;
        case 662:
          return MEDIATION_YIELD_PARTNER_NAME;
        case 453:
          return METRO_ID;
        case 454:
          return METRO_NAME;
        case 128:
          return MOBILE_APP_FREE;
        case 129:
          return MOBILE_APP_ICON_URL;
        case 123:
          return MOBILE_APP_ID;
        case 127:
          return MOBILE_APP_NAME;
        case 311:
          return MOBILE_APP_OWNERSHIP_STATUS;
        case 312:
          return MOBILE_APP_OWNERSHIP_STATUS_NAME;
        case 125:
          return MOBILE_APP_STORE;
        case 245:
          return MOBILE_APP_STORE_NAME;
        case 99:
          return MOBILE_INVENTORY_TYPE;
        case 21:
          return MOBILE_INVENTORY_TYPE_NAME;
        case 646:
          return MOBILE_RENDERING_SDK;
        case 647:
          return MOBILE_RENDERING_SDK_NAME;
        case 692:
          return MOBILE_SDK_MAJOR_VERSION;
        case 693:
          return MOBILE_SDK_MINOR_VERSION;
        case 130:
          return MOBILE_SDK_VERSION_NAME;
        case 6:
          return MONTH_YEAR;
        case 255:
          return NATIVE_AD_FORMAT_ID;
        case 254:
          return NATIVE_AD_FORMAT_NAME;
        case 253:
          return NATIVE_STYLE_ID;
        case 252:
          return NATIVE_STYLE_NAME;
        case 586:
          return NO_FILL_REASON_CATEGORY;
        case 587:
          return NO_FILL_REASON_CATEGORY_NAME;
        case 117:
          return OPERATING_SYSTEM_CATEGORY;
        case 118:
          return OPERATING_SYSTEM_CATEGORY_NAME;
        case 238:
          return OPERATING_SYSTEM_VERSION_ID;
        case 237:
          return OPERATING_SYSTEM_VERSION_NAME;
        case 639:
          return OPTIMIZATION_TYPE;
        case 640:
          return OPTIMIZATION_TYPE_NAME;
        case 150:
          return ORDER_AGENCY;
        case 151:
          return ORDER_AGENCY_ID;
        case 152:
          return ORDER_BOOKED_CPC;
        case 153:
          return ORDER_BOOKED_CPM;
        case 231:
          return ORDER_DELIVERY_STATUS;
        case 239:
          return ORDER_DELIVERY_STATUS_NAME;
        case 154:
          return ORDER_END_DATE;
        case 155:
          return ORDER_END_DATE_TIME;
        case 156:
          return ORDER_EXTERNAL_ID;
        case 7:
          return ORDER_ID;
        case 170:
          return ORDER_LABELS;
        case 171:
          return ORDER_LABEL_IDS;
        case 158:
          return ORDER_LIFETIME_CLICKS;
        case 159:
          return ORDER_LIFETIME_IMPRESSIONS;
        case 8:
          return ORDER_NAME;
        case 160:
          return ORDER_PO_NUMBER;
        case 157:
          return ORDER_PROGRAMMATIC;
        case 161:
          return ORDER_SALESPERSON;
        case 629:
          return ORDER_SALESPERSON_ID;
        case 164:
          return ORDER_SECONDARY_SALESPEOPLE;
        case 165:
          return ORDER_SECONDARY_SALESPEOPLE_ID;
        case 166:
          return ORDER_SECONDARY_TRAFFICKERS;
        case 167:
          return ORDER_SECONDARY_TRAFFICKERS_ID;
        case 168:
          return ORDER_START_DATE;
        case 169:
          return ORDER_START_DATE_TIME;
        case 162:
          return ORDER_TRAFFICKER;
        case 163:
          return ORDER_TRAFFICKER_ID;
        case 203:
          return ORDER_UNLIMITED_END;
        case 511:
          return PAGE_PATH;
        case 512:
          return PAGE_TITLE_AND_SCREEN_CLASS;
        case 513:
          return PAGE_TITLE_AND_SCREEN_NAME;
        case 113:
          return PLACEMENT_ID;
        case 144:
          return PLACEMENT_ID_ALL;
        case 114:
          return PLACEMENT_NAME;
        case 145:
          return PLACEMENT_NAME_ALL;
        case 362:
          return PLACEMENT_STATUS;
        case 364:
          return PLACEMENT_STATUS_NAME;
        case 365:
          return PLACEMENT_STATUS_NAME_ALL;
        case 455:
          return POSTAL_CODE_ID;
        case 456:
          return POSTAL_CODE_NAME;
        case 406:
          return PPID_STATUS;
        case 407:
          return PPID_STATUS_NAME;
        case 633:
          return PREDICTED_VIEWABILITY_BUCKET;
        case 634:
          return PREDICTED_VIEWABILITY_BUCKET_NAME;
        case 495:
          return PRESENTED_SECURE_SIGNAL_ID;
        case 496:
          return PRESENTED_SECURE_SIGNAL_NAME;
        case 408:
          return PRIMARY_PERSONALIZATION_ID_TYPE;
        case 409:
          return PRIMARY_PERSONALIZATION_ID_TYPE_NAME;
        case 13:
          return PROGRAMMATIC_CHANNEL;
        case 14:
          return PROGRAMMATIC_CHANNEL_NAME;
        case 410:
          return PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE;
        case 546:
          return PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS;
        case 412:
          return PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME;
        case 413:
          return PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER;
        case 414:
          return PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE;
        case 425:
          return PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE;
        case 545:
          return PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS;
        case 427:
          return PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME;
        case 428:
          return PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER;
        case 429:
          return PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE;
        case 415:
          return PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE;
        case 416:
          return PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID;
        case 417:
          return PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME;
        case 418:
          return PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER;
        case 419:
          return PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE;
        case 136:
          return PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID;
        case 137:
          return PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME;
        case 457:
          return REGION_ID;
        case 458:
          return REGION_NAME;
        case 590:
          return REJECTION_CLASS_CATEGORY;
        case 591:
          return REJECTION_CLASS_CATEGORY_NAME;
        case 343:
          return RENDERED_CREATIVE_SIZE;
        case 352:
          return REQUESTED_AD_SIZES;
        case 146:
          return REQUEST_TYPE;
        case 147:
          return REQUEST_TYPE_NAME;
        case 597:
          return SERVER_SIDE_UNWRAPPING_ELIGIBLE;
        case 631:
          return SERVING_RESTRICTION;
        case 632:
          return SERVING_RESTRICTION_NAME;
        case 387:
          return SITE;
        case 232:
          return TARGETING_ID;
        case 233:
          return TARGETING_NAME;
        case 385:
          return TARGETING_TYPE;
        case 386:
          return TARGETING_TYPE_NAME;
        case 402:
          return THIRD_PARTY_ID_STATUS;
        case 403:
          return THIRD_PARTY_ID_STATUS_NAME;
        case 504:
          return TOPICS_STATUS;
        case 505:
          return TOPICS_STATUS_NAME;
        case 444:
          return TOP_PRIVATE_DOMAIN;
        case 388:
          return TRAFFIC_SOURCE;
        case 389:
          return TRAFFIC_SOURCE_NAME;
        case 393:
          return UNIFIED_PRICING_RULE_ID;
        case 394:
          return UNIFIED_PRICING_RULE_NAME;
        case 506:
          return URL;
        case 507:
          return URL_ID;
        case 635:
          return USER_MESSAGES_ENTITLEMENT_SOURCE;
        case 636:
          return USER_MESSAGES_ENTITLEMENT_SOURCE_NAME;
        case 637:
          return USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID;
        case 638:
          return USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME;
        case 554:
          return VAST_VERSION;
        case 555:
          return VAST_VERSION_NAME;
        case 556:
          return VIDEO_AD_BREAK_TYPE;
        case 557:
          return VIDEO_AD_BREAK_TYPE_NAME;
        case 450:
          return VIDEO_AD_DURATION;
        case 561:
          return VIDEO_AD_FORMATS_RULE;
        case 560:
          return VIDEO_AD_FORMATS_RULE_ID;
        case 558:
          return VIDEO_AD_REQUEST_DURATION;
        case 751:
          return VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME;
        case 559:
          return VIDEO_AD_REQUEST_DURATION_NAME;
        case 438:
          return VIDEO_AD_REQUEST_SOURCE;
        case 439:
          return VIDEO_AD_REQUEST_SOURCE_NAME;
        case 432:
          return VIDEO_AD_TYPE;
        case 433:
          return VIDEO_AD_TYPE_NAME;
        case 721:
          return VIDEO_CONTINUOUS_PLAY_TYPE;
        case 722:
          return VIDEO_CONTINUOUS_PLAY_TYPE_NAME;
        case 530:
          return VIDEO_FALLBACK_POSITION;
        case 601:
          return VIDEO_MEASUREMENT_SOURCE;
        case 602:
          return VIDEO_MEASUREMENT_SOURCE_NAME;
        case 172:
          return VIDEO_PLCMT;
        case 173:
          return VIDEO_PLCMT_NAME;
        case 538:
          return VIDEO_POSITION_IN_POD;
        case 539:
          return VIDEO_POSITION_OF_POD;
        case 440:
          return VIDEO_SDK_VERSION;
        case 441:
          return VIDEO_SDK_VERSION_NAME;
        case 752:
          return VIDEO_STITCHER_TYPE;
        case 753:
          return VIDEO_STITCHER_TYPE_NAME;
        case 5:
          return WEEK;
        case 184:
          return YIELD_GROUP_BUYER_NAME;
        case 627:
          return YIELD_GROUP_BUYER_TAG_NAME;
        case 182:
          return YIELD_GROUP_ID;
        case 183:
          return YIELD_GROUP_NAME;
        case 430:
          return YOUTUBE_AD_DURATION_BUCKET;
        case 431:
          return YOUTUBE_AD_DURATION_BUCKET_NAME;
        case 399:
          return YOUTUBE_AD_TYPE;
        case 400:
          return YOUTUBE_AD_TYPE_NAME;
        case 10000:
          return LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID;
        case 10001:
          return LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID;
        case 10002:
          return LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID;
        case 10003:
          return LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID;
        case 10004:
          return LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID;
        case 10005:
          return LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID;
        case 10006:
          return LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID;
        case 10007:
          return LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID;
        case 10008:
          return LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID;
        case 10009:
          return LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID;
        case 10010:
          return LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID;
        case 10011:
          return LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID;
        case 10012:
          return LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID;
        case 10013:
          return LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID;
        case 10014:
          return LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID;
        case 11000:
          return LINE_ITEM_CUSTOM_FIELD_0_VALUE;
        case 11001:
          return LINE_ITEM_CUSTOM_FIELD_1_VALUE;
        case 11002:
          return LINE_ITEM_CUSTOM_FIELD_2_VALUE;
        case 11003:
          return LINE_ITEM_CUSTOM_FIELD_3_VALUE;
        case 11004:
          return LINE_ITEM_CUSTOM_FIELD_4_VALUE;
        case 11005:
          return LINE_ITEM_CUSTOM_FIELD_5_VALUE;
        case 11006:
          return LINE_ITEM_CUSTOM_FIELD_6_VALUE;
        case 11007:
          return LINE_ITEM_CUSTOM_FIELD_7_VALUE;
        case 11008:
          return LINE_ITEM_CUSTOM_FIELD_8_VALUE;
        case 11009:
          return LINE_ITEM_CUSTOM_FIELD_9_VALUE;
        case 11010:
          return LINE_ITEM_CUSTOM_FIELD_10_VALUE;
        case 11011:
          return LINE_ITEM_CUSTOM_FIELD_11_VALUE;
        case 11012:
          return LINE_ITEM_CUSTOM_FIELD_12_VALUE;
        case 11013:
          return LINE_ITEM_CUSTOM_FIELD_13_VALUE;
        case 11014:
          return LINE_ITEM_CUSTOM_FIELD_14_VALUE;
        case 12000:
          return ORDER_CUSTOM_FIELD_0_OPTION_ID;
        case 12001:
          return ORDER_CUSTOM_FIELD_1_OPTION_ID;
        case 12002:
          return ORDER_CUSTOM_FIELD_2_OPTION_ID;
        case 12003:
          return ORDER_CUSTOM_FIELD_3_OPTION_ID;
        case 12004:
          return ORDER_CUSTOM_FIELD_4_OPTION_ID;
        case 12005:
          return ORDER_CUSTOM_FIELD_5_OPTION_ID;
        case 12006:
          return ORDER_CUSTOM_FIELD_6_OPTION_ID;
        case 12007:
          return ORDER_CUSTOM_FIELD_7_OPTION_ID;
        case 12008:
          return ORDER_CUSTOM_FIELD_8_OPTION_ID;
        case 12009:
          return ORDER_CUSTOM_FIELD_9_OPTION_ID;
        case 12010:
          return ORDER_CUSTOM_FIELD_10_OPTION_ID;
        case 12011:
          return ORDER_CUSTOM_FIELD_11_OPTION_ID;
        case 12012:
          return ORDER_CUSTOM_FIELD_12_OPTION_ID;
        case 12013:
          return ORDER_CUSTOM_FIELD_13_OPTION_ID;
        case 12014:
          return ORDER_CUSTOM_FIELD_14_OPTION_ID;
        case 13000:
          return ORDER_CUSTOM_FIELD_0_VALUE;
        case 13001:
          return ORDER_CUSTOM_FIELD_1_VALUE;
        case 13002:
          return ORDER_CUSTOM_FIELD_2_VALUE;
        case 13003:
          return ORDER_CUSTOM_FIELD_3_VALUE;
        case 13004:
          return ORDER_CUSTOM_FIELD_4_VALUE;
        case 13005:
          return ORDER_CUSTOM_FIELD_5_VALUE;
        case 13006:
          return ORDER_CUSTOM_FIELD_6_VALUE;
        case 13007:
          return ORDER_CUSTOM_FIELD_7_VALUE;
        case 13008:
          return ORDER_CUSTOM_FIELD_8_VALUE;
        case 13009:
          return ORDER_CUSTOM_FIELD_9_VALUE;
        case 13010:
          return ORDER_CUSTOM_FIELD_10_VALUE;
        case 13011:
          return ORDER_CUSTOM_FIELD_11_VALUE;
        case 13012:
          return ORDER_CUSTOM_FIELD_12_VALUE;
        case 13013:
          return ORDER_CUSTOM_FIELD_13_VALUE;
        case 13014:
          return ORDER_CUSTOM_FIELD_14_VALUE;
        case 14000:
          return CREATIVE_CUSTOM_FIELD_0_OPTION_ID;
        case 14001:
          return CREATIVE_CUSTOM_FIELD_1_OPTION_ID;
        case 14002:
          return CREATIVE_CUSTOM_FIELD_2_OPTION_ID;
        case 14003:
          return CREATIVE_CUSTOM_FIELD_3_OPTION_ID;
        case 14004:
          return CREATIVE_CUSTOM_FIELD_4_OPTION_ID;
        case 14005:
          return CREATIVE_CUSTOM_FIELD_5_OPTION_ID;
        case 14006:
          return CREATIVE_CUSTOM_FIELD_6_OPTION_ID;
        case 14007:
          return CREATIVE_CUSTOM_FIELD_7_OPTION_ID;
        case 14008:
          return CREATIVE_CUSTOM_FIELD_8_OPTION_ID;
        case 14009:
          return CREATIVE_CUSTOM_FIELD_9_OPTION_ID;
        case 14010:
          return CREATIVE_CUSTOM_FIELD_10_OPTION_ID;
        case 14011:
          return CREATIVE_CUSTOM_FIELD_11_OPTION_ID;
        case 14012:
          return CREATIVE_CUSTOM_FIELD_12_OPTION_ID;
        case 14013:
          return CREATIVE_CUSTOM_FIELD_13_OPTION_ID;
        case 14014:
          return CREATIVE_CUSTOM_FIELD_14_OPTION_ID;
        case 15000:
          return CREATIVE_CUSTOM_FIELD_0_VALUE;
        case 15001:
          return CREATIVE_CUSTOM_FIELD_1_VALUE;
        case 15002:
          return CREATIVE_CUSTOM_FIELD_2_VALUE;
        case 15003:
          return CREATIVE_CUSTOM_FIELD_3_VALUE;
        case 15004:
          return CREATIVE_CUSTOM_FIELD_4_VALUE;
        case 15005:
          return CREATIVE_CUSTOM_FIELD_5_VALUE;
        case 15006:
          return CREATIVE_CUSTOM_FIELD_6_VALUE;
        case 15007:
          return CREATIVE_CUSTOM_FIELD_7_VALUE;
        case 15008:
          return CREATIVE_CUSTOM_FIELD_8_VALUE;
        case 15009:
          return CREATIVE_CUSTOM_FIELD_9_VALUE;
        case 15010:
          return CREATIVE_CUSTOM_FIELD_10_VALUE;
        case 15011:
          return CREATIVE_CUSTOM_FIELD_11_VALUE;
        case 15012:
          return CREATIVE_CUSTOM_FIELD_12_VALUE;
        case 15013:
          return CREATIVE_CUSTOM_FIELD_13_VALUE;
        case 15014:
          return CREATIVE_CUSTOM_FIELD_14_VALUE;
        case 16000:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID;
        case 16001:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID;
        case 16002:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID;
        case 16003:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID;
        case 16004:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID;
        case 16005:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID;
        case 16006:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID;
        case 16007:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID;
        case 16008:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID;
        case 16009:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID;
        case 16010:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID;
        case 16011:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID;
        case 16012:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID;
        case 16013:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID;
        case 16014:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID;
        case 17000:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE;
        case 17001:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE;
        case 17002:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE;
        case 17003:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE;
        case 17004:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE;
        case 17005:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE;
        case 17006:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE;
        case 17007:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE;
        case 17008:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE;
        case 17009:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE;
        case 17010:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE;
        case 17011:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE;
        case 17012:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE;
        case 17013:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE;
        case 17014:
          return BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE;
        case 18000:
          return BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID;
        case 18001:
          return BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID;
        case 18002:
          return BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID;
        case 18003:
          return BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID;
        case 18004:
          return BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID;
        case 18005:
          return BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID;
        case 18006:
          return BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID;
        case 18007:
          return BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID;
        case 18008:
          return BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID;
        case 18009:
          return BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID;
        case 18010:
          return BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID;
        case 18011:
          return BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID;
        case 18012:
          return BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID;
        case 18013:
          return BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID;
        case 18014:
          return BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID;
        case 19000:
          return BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE;
        case 19001:
          return BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE;
        case 19002:
          return BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE;
        case 19003:
          return BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE;
        case 19004:
          return BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE;
        case 19005:
          return BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE;
        case 19006:
          return BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE;
        case 19007:
          return BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE;
        case 19008:
          return BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE;
        case 19009:
          return BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE;
        case 19010:
          return BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE;
        case 19011:
          return BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE;
        case 19012:
          return BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE;
        case 19013:
          return BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE;
        case 19014:
          return BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE;
        case 20000:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID;
        case 20001:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID;
        case 20002:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID;
        case 20003:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID;
        case 20004:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID;
        case 20005:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID;
        case 20006:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID;
        case 20007:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID;
        case 20008:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID;
        case 20009:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID;
        case 20010:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID;
        case 20011:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID;
        case 20012:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID;
        case 20013:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID;
        case 20014:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID;
        case 21000:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE;
        case 21001:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE;
        case 21002:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE;
        case 21003:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE;
        case 21004:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE;
        case 21005:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE;
        case 21006:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE;
        case 21007:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE;
        case 21008:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE;
        case 21009:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE;
        case 21010:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE;
        case 21011:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE;
        case 21012:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE;
        case 21013:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE;
        case 21014:
          return BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE;
        case 100000:
          return CUSTOM_DIMENSION_0_VALUE_ID;
        case 100001:
          return CUSTOM_DIMENSION_1_VALUE_ID;
        case 100002:
          return CUSTOM_DIMENSION_2_VALUE_ID;
        case 100003:
          return CUSTOM_DIMENSION_3_VALUE_ID;
        case 100004:
          return CUSTOM_DIMENSION_4_VALUE_ID;
        case 100005:
          return CUSTOM_DIMENSION_5_VALUE_ID;
        case 100006:
          return CUSTOM_DIMENSION_6_VALUE_ID;
        case 100007:
          return CUSTOM_DIMENSION_7_VALUE_ID;
        case 100008:
          return CUSTOM_DIMENSION_8_VALUE_ID;
        case 100009:
          return CUSTOM_DIMENSION_9_VALUE_ID;
        case 101000:
          return CUSTOM_DIMENSION_0_VALUE;
        case 101001:
          return CUSTOM_DIMENSION_1_VALUE;
        case 101002:
          return CUSTOM_DIMENSION_2_VALUE;
        case 101003:
          return CUSTOM_DIMENSION_3_VALUE;
        case 101004:
          return CUSTOM_DIMENSION_4_VALUE;
        case 101005:
          return CUSTOM_DIMENSION_5_VALUE;
        case 101006:
          return CUSTOM_DIMENSION_6_VALUE;
        case 101007:
          return CUSTOM_DIMENSION_7_VALUE;
        case 101008:
          return CUSTOM_DIMENSION_8_VALUE;
        case 101009:
          return CUSTOM_DIMENSION_9_VALUE;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Dimension> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<Dimension> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Dimension>() {
          public Dimension findValueByNumber(int number) {
            return Dimension.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (index == -1) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(index);
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(1);
    }

    private static final Dimension[] VALUES = getStaticValuesArray();

    private static Dimension[] getStaticValuesArray() {
      return new Dimension[] {
        DIMENSION_UNSPECIFIED,
        ACTIVE_VIEW_MEASUREMENT_SOURCE,
        ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME,
        ADVERTISER_CREDIT_STATUS,
        ADVERTISER_CREDIT_STATUS_NAME,
        ADVERTISER_DOMAIN_NAME,
        ADVERTISER_EXTERNAL_ID,
        ADVERTISER_ID,
        ADVERTISER_LABELS,
        ADVERTISER_LABEL_IDS,
        ADVERTISER_NAME,
        ADVERTISER_PRIMARY_CONTACT,
        ADVERTISER_STATUS,
        ADVERTISER_STATUS_NAME,
        ADVERTISER_TYPE,
        ADVERTISER_TYPE_NAME,
        ADVERTISER_VERTICAL,
        ADX_PRODUCT,
        ADX_PRODUCT_NAME,
        AD_EXPERIENCES_TYPE,
        AD_EXPERIENCES_TYPE_NAME,
        AD_LOCATION,
        AD_LOCATION_NAME,
        AD_TECHNOLOGY_PROVIDER_DOMAIN,
        AD_TECHNOLOGY_PROVIDER_ID,
        AD_TECHNOLOGY_PROVIDER_NAME,
        AD_TYPE,
        AD_TYPE_NAME,
        AD_UNIT_CODE,
        AD_UNIT_CODE_LEVEL_1,
        AD_UNIT_CODE_LEVEL_10,
        AD_UNIT_CODE_LEVEL_11,
        AD_UNIT_CODE_LEVEL_12,
        AD_UNIT_CODE_LEVEL_13,
        AD_UNIT_CODE_LEVEL_14,
        AD_UNIT_CODE_LEVEL_15,
        AD_UNIT_CODE_LEVEL_16,
        AD_UNIT_CODE_LEVEL_2,
        AD_UNIT_CODE_LEVEL_3,
        AD_UNIT_CODE_LEVEL_4,
        AD_UNIT_CODE_LEVEL_5,
        AD_UNIT_CODE_LEVEL_6,
        AD_UNIT_CODE_LEVEL_7,
        AD_UNIT_CODE_LEVEL_8,
        AD_UNIT_CODE_LEVEL_9,
        AD_UNIT_ID,
        AD_UNIT_ID_ALL_LEVEL,
        AD_UNIT_ID_LEVEL_1,
        AD_UNIT_ID_LEVEL_10,
        AD_UNIT_ID_LEVEL_11,
        AD_UNIT_ID_LEVEL_12,
        AD_UNIT_ID_LEVEL_13,
        AD_UNIT_ID_LEVEL_14,
        AD_UNIT_ID_LEVEL_15,
        AD_UNIT_ID_LEVEL_16,
        AD_UNIT_ID_LEVEL_2,
        AD_UNIT_ID_LEVEL_3,
        AD_UNIT_ID_LEVEL_4,
        AD_UNIT_ID_LEVEL_5,
        AD_UNIT_ID_LEVEL_6,
        AD_UNIT_ID_LEVEL_7,
        AD_UNIT_ID_LEVEL_8,
        AD_UNIT_ID_LEVEL_9,
        AD_UNIT_ID_TOP_LEVEL,
        AD_UNIT_NAME,
        AD_UNIT_NAME_ALL_LEVEL,
        AD_UNIT_NAME_LEVEL_1,
        AD_UNIT_NAME_LEVEL_10,
        AD_UNIT_NAME_LEVEL_11,
        AD_UNIT_NAME_LEVEL_12,
        AD_UNIT_NAME_LEVEL_13,
        AD_UNIT_NAME_LEVEL_14,
        AD_UNIT_NAME_LEVEL_15,
        AD_UNIT_NAME_LEVEL_16,
        AD_UNIT_NAME_LEVEL_2,
        AD_UNIT_NAME_LEVEL_3,
        AD_UNIT_NAME_LEVEL_4,
        AD_UNIT_NAME_LEVEL_5,
        AD_UNIT_NAME_LEVEL_6,
        AD_UNIT_NAME_LEVEL_7,
        AD_UNIT_NAME_LEVEL_8,
        AD_UNIT_NAME_LEVEL_9,
        AD_UNIT_NAME_TOP_LEVEL,
        AD_UNIT_REWARD_AMOUNT,
        AD_UNIT_REWARD_TYPE,
        AD_UNIT_STATUS,
        AD_UNIT_STATUS_NAME,
        AGENCY_LEVEL_1_ID,
        AGENCY_LEVEL_1_NAME,
        AGENCY_LEVEL_2_ID,
        AGENCY_LEVEL_2_NAME,
        AGENCY_LEVEL_3_ID,
        AGENCY_LEVEL_3_NAME,
        AGE_BRACKET,
        AGE_BRACKET_NAME,
        APP_TRACKING_TRANSPARENCY_CONSENT_STATUS,
        APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME,
        APP_VERSION,
        AUCTION_PACKAGE_DEAL,
        AUCTION_PACKAGE_DEAL_ID,
        AUDIENCE_SEGMENT_ID_TARGETED,
        AUDIENCE_SEGMENT_TARGETED,
        AUTO_REFRESHED_TRAFFIC,
        AUTO_REFRESHED_TRAFFIC_NAME,
        BIDDER_ENCRYPTED_ID,
        BIDDER_NAME,
        BID_RANGE,
        BID_REJECTION_REASON,
        BID_REJECTION_REASON_NAME,
        BRANDING_TYPE,
        BRANDING_TYPE_NAME,
        BROWSER_CATEGORY,
        BROWSER_CATEGORY_NAME,
        BROWSER_ID,
        BROWSER_NAME,
        BUYER_NETWORK_ID,
        BUYER_NETWORK_NAME,
        CALLOUT_STATUS_CATEGORY,
        CALLOUT_STATUS_CATEGORY_NAME,
        CARRIER_ID,
        CARRIER_NAME,
        CHANNEL,
        CHILD_NETWORK_CODE,
        CHILD_NETWORK_ID,
        CHILD_PARTNER_NAME,
        CITY_ID,
        CITY_NAME,
        CLASSIFIED_ADVERTISER_ID,
        CLASSIFIED_ADVERTISER_NAME,
        CLASSIFIED_BRAND_ID,
        CLASSIFIED_BRAND_NAME,
        CONTENT_CMS_NAME,
        CONTENT_CMS_VIDEO_ID,
        CONTENT_ID,
        CONTENT_MAPPING_PRESENCE,
        CONTENT_MAPPING_PRESENCE_NAME,
        CONTENT_NAME,
        CONTINENT,
        CONTINENT_NAME,
        COUNTRY_CODE,
        COUNTRY_ID,
        COUNTRY_NAME,
        CREATIVE_BILLING_TYPE,
        CREATIVE_BILLING_TYPE_NAME,
        CREATIVE_CLICK_THROUGH_URL,
        CREATIVE_ID,
        CREATIVE_NAME,
        CREATIVE_POLICIES_FILTERING,
        CREATIVE_POLICIES_FILTERING_NAME,
        CREATIVE_PROTECTIONS_FILTERING,
        CREATIVE_PROTECTIONS_FILTERING_NAME,
        CREATIVE_SET_ROLE_TYPE,
        CREATIVE_SET_ROLE_TYPE_NAME,
        CREATIVE_TECHNOLOGY,
        CREATIVE_TECHNOLOGY_NAME,
        CREATIVE_THIRD_PARTY_VENDOR,
        CREATIVE_TYPE,
        CREATIVE_TYPE_NAME,
        CREATIVE_VENDOR_ID,
        CREATIVE_VENDOR_NAME,
        CREATIVE_VIDEO_REDIRECT_THIRD_PARTY,
        CURATOR_ID,
        CURATOR_NAME,
        CUSTOM_EVENT_ID,
        CUSTOM_EVENT_NAME,
        CUSTOM_EVENT_TYPE,
        CUSTOM_EVENT_TYPE_NAME,
        CUSTOM_SPOT_ID,
        CUSTOM_SPOT_NAME,
        DATE,
        DAY_OF_WEEK,
        DEAL_BUYER_ID,
        DEAL_BUYER_NAME,
        DEAL_ID,
        DEAL_NAME,
        DELIVERED_SECURE_SIGNAL_ID,
        DELIVERED_SECURE_SIGNAL_NAME,
        DEMAND_CHANNEL,
        DEMAND_CHANNEL_NAME,
        DEMAND_SOURCE,
        DEMAND_SOURCE_NAME,
        DEMAND_SUBCHANNEL,
        DEMAND_SUBCHANNEL_NAME,
        DEVICE,
        DEVICE_CATEGORY,
        DEVICE_CATEGORY_NAME,
        DEVICE_MANUFACTURER_ID,
        DEVICE_MANUFACTURER_NAME,
        DEVICE_MODEL_ID,
        DEVICE_MODEL_NAME,
        DEVICE_NAME,
        DSP_SEAT_ID,
        DYNAMIC_ALLOCATION_TYPE,
        DYNAMIC_ALLOCATION_TYPE_NAME,
        ESP_DELIVERY,
        ESP_DELIVERY_NAME,
        ESP_PRESENCE,
        ESP_PRESENCE_NAME,
        EXCHANGE_BIDDING_DEAL_ID,
        EXCHANGE_BIDDING_DEAL_TYPE,
        EXCHANGE_BIDDING_DEAL_TYPE_NAME,
        EXCHANGE_THIRD_PARTY_COMPANY_ID,
        EXCHANGE_THIRD_PARTY_COMPANY_NAME,
        FIRST_LOOK_PRICING_RULE_ID,
        FIRST_LOOK_PRICING_RULE_NAME,
        FIRST_PARTY_ID_STATUS,
        FIRST_PARTY_ID_STATUS_NAME,
        GENDER,
        GENDER_NAME,
        GOOGLE_ANALYTICS_STREAM_ID,
        GOOGLE_ANALYTICS_STREAM_NAME,
        HBT_YIELD_PARTNER_ID,
        HBT_YIELD_PARTNER_NAME,
        HEADER_BIDDER_INTEGRATION_TYPE,
        HEADER_BIDDER_INTEGRATION_TYPE_NAME,
        HOUR,
        IMPRESSION_COUNTING_METHOD,
        IMPRESSION_COUNTING_METHOD_NAME,
        INTERACTION_TYPE,
        INTERACTION_TYPE_NAME,
        INTEREST,
        INVENTORY_FORMAT,
        INVENTORY_FORMAT_NAME,
        INVENTORY_SHARE_ASSIGNMENT_ID,
        INVENTORY_SHARE_ASSIGNMENT_NAME,
        INVENTORY_SHARE_OUTCOME,
        INVENTORY_SHARE_OUTCOME_NAME,
        INVENTORY_SHARE_PARTNER_AD_SERVER,
        INVENTORY_SHARE_PARTNER_AD_SERVER_NAME,
        INVENTORY_SHARE_TARGET_SHARE_PERCENT,
        INVENTORY_SHARE_TYPE,
        INVENTORY_SHARE_TYPE_NAME,
        INVENTORY_TYPE,
        INVENTORY_TYPE_NAME,
        IS_ADX_DIRECT,
        IS_CURATION_TARGETED,
        IS_DROPPED,
        IS_FIRST_LOOK_DEAL,
        KEY_VALUES_ID,
        KEY_VALUES_NAME,
        LINE_ITEM_AGENCY,
        LINE_ITEM_ARCHIVED,
        LINE_ITEM_COMPANION_DELIVERY_OPTION,
        LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME,
        LINE_ITEM_COMPUTED_STATUS,
        LINE_ITEM_COMPUTED_STATUS_NAME,
        LINE_ITEM_CONTRACTED_QUANTITY,
        LINE_ITEM_COST_PER_UNIT,
        LINE_ITEM_COST_TYPE,
        LINE_ITEM_COST_TYPE_NAME,
        LINE_ITEM_CREATIVE_END_DATE,
        LINE_ITEM_CREATIVE_ROTATION_TYPE,
        LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME,
        LINE_ITEM_CREATIVE_START_DATE,
        LINE_ITEM_CURRENCY_CODE,
        LINE_ITEM_DELIVERY_INDICATOR,
        LINE_ITEM_DELIVERY_RATE_TYPE,
        LINE_ITEM_DELIVERY_RATE_TYPE_NAME,
        LINE_ITEM_DISCOUNT_ABSOLUTE,
        LINE_ITEM_DISCOUNT_PERCENTAGE,
        LINE_ITEM_END_DATE,
        LINE_ITEM_END_DATE_TIME,
        LINE_ITEM_ENVIRONMENT_TYPE,
        LINE_ITEM_ENVIRONMENT_TYPE_NAME,
        LINE_ITEM_EXTERNAL_DEAL_ID,
        LINE_ITEM_EXTERNAL_ID,
        LINE_ITEM_FREQUENCY_CAP,
        LINE_ITEM_ID,
        LINE_ITEM_LABELS,
        LINE_ITEM_LABEL_IDS,
        LINE_ITEM_LAST_MODIFIED_BY_APP,
        LINE_ITEM_LIFETIME_CLICKS,
        LINE_ITEM_LIFETIME_IMPRESSIONS,
        LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS,
        LINE_ITEM_MAKEGOOD,
        LINE_ITEM_NAME,
        LINE_ITEM_NON_CPD_BOOKED_REVENUE,
        LINE_ITEM_OPTIMIZABLE,
        LINE_ITEM_PO_NUMBER,
        LINE_ITEM_PRIMARY_GOAL_TYPE,
        LINE_ITEM_PRIMARY_GOAL_TYPE_NAME,
        LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE,
        LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE,
        LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE,
        LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME,
        LINE_ITEM_PRIORITY,
        LINE_ITEM_RESERVATION_STATUS,
        LINE_ITEM_RESERVATION_STATUS_NAME,
        LINE_ITEM_SALESPERSON,
        LINE_ITEM_SECONDARY_SALESPEOPLE,
        LINE_ITEM_SECONDARY_TRAFFICKERS,
        LINE_ITEM_START_DATE,
        LINE_ITEM_START_DATE_TIME,
        LINE_ITEM_TRAFFICKER,
        LINE_ITEM_TYPE,
        LINE_ITEM_TYPE_NAME,
        LINE_ITEM_UNLIMITED_END,
        LINE_ITEM_VALUE_COST_PER_UNIT,
        LINE_ITEM_WEB_PROPERTY_CODE,
        MASTER_COMPANION_CREATIVE_ID,
        MASTER_COMPANION_CREATIVE_NAME,
        MEDIATION_TYPE,
        MEDIATION_TYPE_NAME,
        MEDIATION_YIELD_PARTNER_ID,
        MEDIATION_YIELD_PARTNER_NAME,
        METRO_ID,
        METRO_NAME,
        MOBILE_APP_FREE,
        MOBILE_APP_ICON_URL,
        MOBILE_APP_ID,
        MOBILE_APP_NAME,
        MOBILE_APP_OWNERSHIP_STATUS,
        MOBILE_APP_OWNERSHIP_STATUS_NAME,
        MOBILE_APP_STORE,
        MOBILE_APP_STORE_NAME,
        MOBILE_INVENTORY_TYPE,
        MOBILE_INVENTORY_TYPE_NAME,
        MOBILE_RENDERING_SDK,
        MOBILE_RENDERING_SDK_NAME,
        MOBILE_SDK_MAJOR_VERSION,
        MOBILE_SDK_MINOR_VERSION,
        MOBILE_SDK_VERSION_NAME,
        MONTH_YEAR,
        NATIVE_AD_FORMAT_ID,
        NATIVE_AD_FORMAT_NAME,
        NATIVE_STYLE_ID,
        NATIVE_STYLE_NAME,
        NO_FILL_REASON_CATEGORY,
        NO_FILL_REASON_CATEGORY_NAME,
        OPERATING_SYSTEM_CATEGORY,
        OPERATING_SYSTEM_CATEGORY_NAME,
        OPERATING_SYSTEM_VERSION_ID,
        OPERATING_SYSTEM_VERSION_NAME,
        OPTIMIZATION_TYPE,
        OPTIMIZATION_TYPE_NAME,
        ORDER_AGENCY,
        ORDER_AGENCY_ID,
        ORDER_BOOKED_CPC,
        ORDER_BOOKED_CPM,
        ORDER_DELIVERY_STATUS,
        ORDER_DELIVERY_STATUS_NAME,
        ORDER_END_DATE,
        ORDER_END_DATE_TIME,
        ORDER_EXTERNAL_ID,
        ORDER_ID,
        ORDER_LABELS,
        ORDER_LABEL_IDS,
        ORDER_LIFETIME_CLICKS,
        ORDER_LIFETIME_IMPRESSIONS,
        ORDER_NAME,
        ORDER_PO_NUMBER,
        ORDER_PROGRAMMATIC,
        ORDER_SALESPERSON,
        ORDER_SALESPERSON_ID,
        ORDER_SECONDARY_SALESPEOPLE,
        ORDER_SECONDARY_SALESPEOPLE_ID,
        ORDER_SECONDARY_TRAFFICKERS,
        ORDER_SECONDARY_TRAFFICKERS_ID,
        ORDER_START_DATE,
        ORDER_START_DATE_TIME,
        ORDER_TRAFFICKER,
        ORDER_TRAFFICKER_ID,
        ORDER_UNLIMITED_END,
        PAGE_PATH,
        PAGE_TITLE_AND_SCREEN_CLASS,
        PAGE_TITLE_AND_SCREEN_NAME,
        PLACEMENT_ID,
        PLACEMENT_ID_ALL,
        PLACEMENT_NAME,
        PLACEMENT_NAME_ALL,
        PLACEMENT_STATUS,
        PLACEMENT_STATUS_NAME,
        PLACEMENT_STATUS_NAME_ALL,
        POSTAL_CODE_ID,
        POSTAL_CODE_NAME,
        PPID_STATUS,
        PPID_STATUS_NAME,
        PREDICTED_VIEWABILITY_BUCKET,
        PREDICTED_VIEWABILITY_BUCKET_NAME,
        PRESENTED_SECURE_SIGNAL_ID,
        PRESENTED_SECURE_SIGNAL_NAME,
        PRIMARY_PERSONALIZATION_ID_TYPE,
        PRIMARY_PERSONALIZATION_ID_TYPE_NAME,
        PROGRAMMATIC_BUYER_ID,
        PROGRAMMATIC_BUYER_NAME,
        PROGRAMMATIC_CHANNEL,
        PROGRAMMATIC_CHANNEL_NAME,
        PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE,
        PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS,
        PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME,
        PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER,
        PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE,
        PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE,
        PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS,
        PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME,
        PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER,
        PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE,
        PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE,
        PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID,
        PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME,
        PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER,
        PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE,
        PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID,
        PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME,
        REGION_ID,
        REGION_NAME,
        REJECTION_CLASS_CATEGORY,
        REJECTION_CLASS_CATEGORY_NAME,
        RENDERED_CREATIVE_SIZE,
        REQUESTED_AD_SIZES,
        REQUEST_TYPE,
        REQUEST_TYPE_NAME,
        SERVER_SIDE_UNWRAPPING_ELIGIBLE,
        SERVING_RESTRICTION,
        SERVING_RESTRICTION_NAME,
        SITE,
        TARGETING_ID,
        TARGETING_NAME,
        TARGETING_TYPE,
        TARGETING_TYPE_NAME,
        THIRD_PARTY_ID_STATUS,
        THIRD_PARTY_ID_STATUS_NAME,
        TOPICS_STATUS,
        TOPICS_STATUS_NAME,
        TOP_PRIVATE_DOMAIN,
        TRAFFIC_SOURCE,
        TRAFFIC_SOURCE_NAME,
        UNIFIED_PRICING_RULE_ID,
        UNIFIED_PRICING_RULE_NAME,
        URL,
        URL_ID,
        USER_MESSAGES_ENTITLEMENT_SOURCE,
        USER_MESSAGES_ENTITLEMENT_SOURCE_NAME,
        USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID,
        USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME,
        VAST_VERSION,
        VAST_VERSION_NAME,
        VIDEO_AD_BREAK_TYPE,
        VIDEO_AD_BREAK_TYPE_NAME,
        VIDEO_AD_DURATION,
        VIDEO_AD_FORMATS_RULE,
        VIDEO_AD_FORMATS_RULE_ID,
        VIDEO_AD_REQUEST_DURATION,
        VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME,
        VIDEO_AD_REQUEST_DURATION_NAME,
        VIDEO_AD_REQUEST_SOURCE,
        VIDEO_AD_REQUEST_SOURCE_NAME,
        VIDEO_AD_TYPE,
        VIDEO_AD_TYPE_NAME,
        VIDEO_CONTINUOUS_PLAY_TYPE,
        VIDEO_CONTINUOUS_PLAY_TYPE_NAME,
        VIDEO_FALLBACK_POSITION,
        VIDEO_MEASUREMENT_SOURCE,
        VIDEO_MEASUREMENT_SOURCE_NAME,
        VIDEO_PLCMT,
        VIDEO_PLCMT_NAME,
        VIDEO_POSITION_IN_POD,
        VIDEO_POSITION_OF_POD,
        VIDEO_SDK_VERSION,
        VIDEO_SDK_VERSION_NAME,
        VIDEO_STITCHER_TYPE,
        VIDEO_STITCHER_TYPE_NAME,
        WEEK,
        YIELD_GROUP_BUYER_NAME,
        YIELD_GROUP_BUYER_TAG_NAME,
        YIELD_GROUP_ID,
        YIELD_GROUP_NAME,
        YOUTUBE_AD_DURATION_BUCKET,
        YOUTUBE_AD_DURATION_BUCKET_NAME,
        YOUTUBE_AD_TYPE,
        YOUTUBE_AD_TYPE_NAME,
        LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID,
        LINE_ITEM_CUSTOM_FIELD_0_VALUE,
        LINE_ITEM_CUSTOM_FIELD_1_VALUE,
        LINE_ITEM_CUSTOM_FIELD_2_VALUE,
        LINE_ITEM_CUSTOM_FIELD_3_VALUE,
        LINE_ITEM_CUSTOM_FIELD_4_VALUE,
        LINE_ITEM_CUSTOM_FIELD_5_VALUE,
        LINE_ITEM_CUSTOM_FIELD_6_VALUE,
        LINE_ITEM_CUSTOM_FIELD_7_VALUE,
        LINE_ITEM_CUSTOM_FIELD_8_VALUE,
        LINE_ITEM_CUSTOM_FIELD_9_VALUE,
        LINE_ITEM_CUSTOM_FIELD_10_VALUE,
        LINE_ITEM_CUSTOM_FIELD_11_VALUE,
        LINE_ITEM_CUSTOM_FIELD_12_VALUE,
        LINE_ITEM_CUSTOM_FIELD_13_VALUE,
        LINE_ITEM_CUSTOM_FIELD_14_VALUE,
        ORDER_CUSTOM_FIELD_0_OPTION_ID,
        ORDER_CUSTOM_FIELD_1_OPTION_ID,
        ORDER_CUSTOM_FIELD_2_OPTION_ID,
        ORDER_CUSTOM_FIELD_3_OPTION_ID,
        ORDER_CUSTOM_FIELD_4_OPTION_ID,
        ORDER_CUSTOM_FIELD_5_OPTION_ID,
        ORDER_CUSTOM_FIELD_6_OPTION_ID,
        ORDER_CUSTOM_FIELD_7_OPTION_ID,
        ORDER_CUSTOM_FIELD_8_OPTION_ID,
        ORDER_CUSTOM_FIELD_9_OPTION_ID,
        ORDER_CUSTOM_FIELD_10_OPTION_ID,
        ORDER_CUSTOM_FIELD_11_OPTION_ID,
        ORDER_CUSTOM_FIELD_12_OPTION_ID,
        ORDER_CUSTOM_FIELD_13_OPTION_ID,
        ORDER_CUSTOM_FIELD_14_OPTION_ID,
        ORDER_CUSTOM_FIELD_0_VALUE,
        ORDER_CUSTOM_FIELD_1_VALUE,
        ORDER_CUSTOM_FIELD_2_VALUE,
        ORDER_CUSTOM_FIELD_3_VALUE,
        ORDER_CUSTOM_FIELD_4_VALUE,
        ORDER_CUSTOM_FIELD_5_VALUE,
        ORDER_CUSTOM_FIELD_6_VALUE,
        ORDER_CUSTOM_FIELD_7_VALUE,
        ORDER_CUSTOM_FIELD_8_VALUE,
        ORDER_CUSTOM_FIELD_9_VALUE,
        ORDER_CUSTOM_FIELD_10_VALUE,
        ORDER_CUSTOM_FIELD_11_VALUE,
        ORDER_CUSTOM_FIELD_12_VALUE,
        ORDER_CUSTOM_FIELD_13_VALUE,
        ORDER_CUSTOM_FIELD_14_VALUE,
        CREATIVE_CUSTOM_FIELD_0_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_1_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_2_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_3_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_4_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_5_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_6_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_7_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_8_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_9_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_10_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_11_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_12_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_13_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_14_OPTION_ID,
        CREATIVE_CUSTOM_FIELD_0_VALUE,
        CREATIVE_CUSTOM_FIELD_1_VALUE,
        CREATIVE_CUSTOM_FIELD_2_VALUE,
        CREATIVE_CUSTOM_FIELD_3_VALUE,
        CREATIVE_CUSTOM_FIELD_4_VALUE,
        CREATIVE_CUSTOM_FIELD_5_VALUE,
        CREATIVE_CUSTOM_FIELD_6_VALUE,
        CREATIVE_CUSTOM_FIELD_7_VALUE,
        CREATIVE_CUSTOM_FIELD_8_VALUE,
        CREATIVE_CUSTOM_FIELD_9_VALUE,
        CREATIVE_CUSTOM_FIELD_10_VALUE,
        CREATIVE_CUSTOM_FIELD_11_VALUE,
        CREATIVE_CUSTOM_FIELD_12_VALUE,
        CREATIVE_CUSTOM_FIELD_13_VALUE,
        CREATIVE_CUSTOM_FIELD_14_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE,
        BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID,
        BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE,
        BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID,
        BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE,
        BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE,
        CUSTOM_DIMENSION_0_VALUE_ID,
        CUSTOM_DIMENSION_1_VALUE_ID,
        CUSTOM_DIMENSION_2_VALUE_ID,
        CUSTOM_DIMENSION_3_VALUE_ID,
        CUSTOM_DIMENSION_4_VALUE_ID,
        CUSTOM_DIMENSION_5_VALUE_ID,
        CUSTOM_DIMENSION_6_VALUE_ID,
        CUSTOM_DIMENSION_7_VALUE_ID,
        CUSTOM_DIMENSION_8_VALUE_ID,
        CUSTOM_DIMENSION_9_VALUE_ID,
        CUSTOM_DIMENSION_0_VALUE,
        CUSTOM_DIMENSION_1_VALUE,
        CUSTOM_DIMENSION_2_VALUE,
        CUSTOM_DIMENSION_3_VALUE,
        CUSTOM_DIMENSION_4_VALUE,
        CUSTOM_DIMENSION_5_VALUE,
        CUSTOM_DIMENSION_6_VALUE,
        CUSTOM_DIMENSION_7_VALUE,
        CUSTOM_DIMENSION_8_VALUE,
        CUSTOM_DIMENSION_9_VALUE,
      };
    }

    public static Dimension valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Dimension(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.Dimension)
  }

  /**
   *
   *
   * <pre>
   * Reporting metrics.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.Metric}
   */
  public enum Metric implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>METRIC_UNSPECIFIED = 0;</code>
     */
    METRIC_UNSPECIFIED(0, 0),
    /**
     *
     *
     * <pre>
     * The number of people who engaged with your site or app in the specified
     *  date range from Google Analytics.
     *
     *
     *
     * Corresponds to "Active users" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_USERS = 223;</code>
     */
    ACTIVE_USERS(1, 223),
    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback at start.
     *
     *
     *
     * Corresponds to "Active View % audible at start" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT = 445;</code>
     */
    ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT(2, 445),
    /**
     *
     *
     * <pre>
     * Total Active View audible impressions
     *
     *
     *
     * Corresponds to "Total Active View audible impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_IMPRESSIONS = 659;</code>
     */
    ACTIVE_VIEW_AUDIBLE_IMPRESSIONS(3, 659),
    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through the entire stream.
     *
     *
     *
     * Corresponds to "Active View % audible through completion" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT = 446;</code>
     */
    ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT(4, 446),
    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 25%.
     *
     *
     *
     * Corresponds to "Active View % audible through first quartile" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT = 447;</code>
     */
    ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT(5, 447),
    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 50%.
     *
     *
     *
     * Corresponds to "Active View % audible through midpoint" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT = 448;</code>
     */
    ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT(6, 448),
    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 75%.
     *
     *
     *
     * Corresponds to "Active View % audible through third quartile" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT = 449;</code>
     */
    ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT(7, 449),
    /**
     *
     *
     * <pre>
     * Total Active View audio enabled impressions
     *
     *
     *
     * Corresponds to "Total Active View audio eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS = 660;</code>
     */
    ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS(8, 660),
    /**
     *
     *
     * <pre>
     * Total Active View audio measurable impressions
     *
     *
     *
     * Corresponds to "Total Active View audio measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS = 661;</code>
     */
    ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS(9, 661),
    /**
     *
     *
     * <pre>
     * Active View total average time in seconds that specific impressions are
     *  reported as being viewable.
     *
     *
     *
     * Corresponds to "Total Active View average viewable time (seconds)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 61;</code>
     */
    ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME(10, 61),
    /**
     *
     *
     * <pre>
     * Total number of impressions that were eligible to measure viewability.
     *
     *
     *
     * Corresponds to "Total Active View eligible impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 58;</code>
     */
    ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS(11, 58),
    /**
     *
     *
     * <pre>
     * Number of impressions where the ad player is in the background at any
     *  point during playback with volume &gt; 0.
     *
     *
     *
     * Corresponds to "Active View % ever audible while backgrounded" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT = 450;</code>
     */
    ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT(12, 450),
    /**
     *
     *
     * <pre>
     * Number of impressions where volume &gt; 0 at any point.
     *
     *
     *
     * Corresponds to "Active View % ever audible" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_AUDIBLE_PERCENT = 451;</code>
     */
    ACTIVE_VIEW_EVER_AUDIBLE_PERCENT(13, 451),
    /**
     *
     *
     * <pre>
     * Number of impressions where the ad player is in the background at any
     *  point during playback.
     *
     *
     *
     * Corresponds to "Active View % ever backgrounded" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT = 452;</code>
     */
    ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT(14, 452),
    /**
     *
     *
     * <pre>
     * Number of impressions where volume = 0 at any point.
     *
     *
     *
     * Corresponds to "Active View % ever muted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_MUTED_PERCENT = 453;</code>
     */
    ACTIVE_VIEW_EVER_MUTED_PERCENT(15, 453),
    /**
     *
     *
     * <pre>
     * The number of measurable impressions that were played to video
     *  completion, and also audible and visible at the time of completion.
     *
     *
     *
     * Corresponds to "Total Active View impressions audible and visible at
     * completion" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION = 411;</code>
     */
    ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION(16, 411),
    /**
     *
     *
     * <pre>
     * The total number of impressions that were sampled and measured by active
     *  view.
     *
     *
     *
     * Corresponds to "Total Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 57;</code>
     */
    ACTIVE_VIEW_MEASURABLE_IMPRESSIONS(17, 57),
    /**
     *
     *
     * <pre>
     * The percentage of total impressions that were measurable by active view
     *  (out of all the total impressions sampled for active view).
     *
     *
     *
     * Corresponds to "Total Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 60;</code>
     */
    ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE(18, 60),
    /**
     *
     *
     * <pre>
     * Total Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "Total Active View non-measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 662;</code>
     */
    ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS(19, 662),
    /**
     *
     *
     * <pre>
     * Total Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "Total Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 663;</code>
     */
    ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS(20, 663),
    /**
     *
     *
     * <pre>
     * Total Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View non-viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 664;</code>
     */
    ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION(21, 664),
    /**
     *
     *
     * <pre>
     * Total Active View percent audible impressions
     *
     *
     *
     * Corresponds to "Total Active View % audible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS = 665;</code>
     */
    ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS(22, 665),
    /**
     *
     *
     * <pre>
     * Number of impressions where we were able to collect Active View+ signals.
     *
     *
     *
     * Corresponds to "Active View+ measurable impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_PLUS_MEASURABLE_COUNT = 454;</code>
     */
    ACTIVE_VIEW_PLUS_MEASURABLE_COUNT(23, 454),
    /**
     *
     *
     * <pre>
     * Revenue generated from Active View impressions.
     *
     *
     *
     * Corresponds to "Total Active View revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ACTIVE_VIEW_REVENUE = 414;</code>
     */
    ACTIVE_VIEW_REVENUE(24, 414),
    /**
     *
     *
     * <pre>
     * Total Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View undetermined impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 666;</code>
     */
    ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION(25, 666),
    /**
     *
     *
     * <pre>
     * The total number of impressions viewed on the user's screen.
     *
     *
     *
     * Corresponds to "Total Active View viewable impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 56;</code>
     */
    ACTIVE_VIEW_VIEWABLE_IMPRESSIONS(26, 56),
    /**
     *
     *
     * <pre>
     * Total Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View viewable impression distribution" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 667;</code>
     */
    ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION(27, 667),
    /**
     *
     *
     * <pre>
     * The percentage of total impressions viewed on the user's screen (out of
     *  the total impressions measurable by active view).
     *
     *
     *
     * Corresponds to "Total Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 59;</code>
     */
    ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE(28, 59),
    /**
     *
     *
     * <pre>
     * Active View AdSense average time in seconds that specific impressions are
     *  reported as being viewable.
     *
     *
     *
     * Corresponds to "AdSense Active View average viewable time (seconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 73;</code>
     */
    ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME(29, 73),
    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by AdSense that were eligible to
     *  measure viewability.
     *
     *
     *
     * Corresponds to "AdSense Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 70;</code>
     */
    ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS(30, 70),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by AdSense that were sampled, and
     *  measurable by active view.
     *
     *
     *
     * Corresponds to "AdSense Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 69;</code>
     */
    ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS(31, 69),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by AdSense that were measurable
     *  by active view (out of all AdSense impressions sampled for active view).
     *
     *
     *
     * Corresponds to "AdSense Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 72;</code>
     */
    ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE(32, 72),
    /**
     *
     *
     * <pre>
     * AdSense Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "AdSense Active View non-measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 642;</code>
     */
    ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS(33, 642),
    /**
     *
     *
     * <pre>
     * AdSense Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "AdSense Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 643;</code>
     */
    ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS(34, 643),
    /**
     *
     *
     * <pre>
     * AdSense Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View non-viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 644;</code>
     */
    ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION(35, 644),
    /**
     *
     *
     * <pre>
     * AdSense Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View undetermined impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 645;</code>
     */
    ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION(36, 645),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by AdSense viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "AdSense Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 68;</code>
     */
    ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS(37, 68),
    /**
     *
     *
     * <pre>
     * AdSense Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View viewable impression distribution" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 646;</code>
     */
    ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION(38, 646),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by AdSense viewed on the user's
     *  screen (out of AdSense impressions measurable by active view).
     *
     *
     *
     * Corresponds to "AdSense Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 71;</code>
     */
    ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE(39, 71),
    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by AdSense through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "AdSense average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ADSENSE_AVERAGE_ECPM = 26;</code>
     */
    ADSENSE_AVERAGE_ECPM(40, 26),
    /**
     *
     *
     * <pre>
     * Number of clicks delivered by AdSense demand channel.
     *
     *
     *
     * Corresponds to "AdSense clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_CLICKS = 23;</code>
     */
    ADSENSE_CLICKS(41, 23),
    /**
     *
     *
     * <pre>
     * The ratio of impressions served by AdSense that resulted in users
     *  clicking on an ad. The clickthrough rate (CTR) is updated nightly. The
     *  AdSense CTR is calculated as: (AdSense clicks / AdSense impressions).
     *
     *
     *
     * Corresponds to "AdSense CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_CTR = 24;</code>
     */
    ADSENSE_CTR(42, 24),
    /**
     *
     *
     * <pre>
     * Total impressions delivered by AdSense.
     *
     *
     *
     * Corresponds to "AdSense impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_IMPRESSIONS = 22;</code>
     */
    ADSENSE_IMPRESSIONS(43, 22),
    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by AdSense through line item dynamic allocation
     *  in relation to the total clicks delivered.
     *
     *
     *
     * Corresponds to "AdSense clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_CLICKS = 28;</code>
     */
    ADSENSE_PERCENT_CLICKS(44, 28),
    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by AdSense through line item dynamic
     *  allocation in relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "AdSense impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_IMPRESSIONS = 27;</code>
     */
    ADSENSE_PERCENT_IMPRESSIONS(45, 27),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by AdSense through line item dynamic
     *  allocation in relation to the total revenue.
     *
     *
     *
     * Corresponds to "AdSense revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_REVENUE = 29;</code>
     */
    ADSENSE_PERCENT_REVENUE(46, 29),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by AdSense through line item dynamic
     *  allocation in relation to the total revenue (excluding CPD).
     *
     *
     *
     * Corresponds to "AdSense revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_REVENUE_WITHOUT_CPD = 30;</code>
     */
    ADSENSE_PERCENT_REVENUE_WITHOUT_CPD(47, 30),
    /**
     *
     *
     * <pre>
     * The total number of times that an AdSense ad is delivered.
     *
     *
     *
     * Corresponds to "AdSense responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_RESPONSES_SERVED = 41;</code>
     */
    ADSENSE_RESPONSES_SERVED(48, 41),
    /**
     *
     *
     * <pre>
     * Revenue generated from AdSense through line item dynamic allocation,
     *  calculated in the network's currency and time zone.
     *
     *
     *
     * Corresponds to "AdSense revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ADSENSE_REVENUE = 25;</code>
     */
    ADSENSE_REVENUE(49, 25),
    /**
     *
     *
     * <pre>
     * Active View AdExchange average time in seconds that specific impressions
     *  are reported as being viewable.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View average viewable time (seconds)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 79;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME(50, 79),
    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by Ad Exchange that were eligible
     *  to measure viewability.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 76;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS(51, 76),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Exchange that were sampled, and
     *  measurable by active view.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 75;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS(52, 75),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by Ad Exchange that were
     *  measurable by active view (out of all Ad Exchange impressions sampled
     *  for active view).
     *
     *
     *
     * Corresponds to "Ad Exchange Active View % measurable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 78;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE(53, 78),
    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-measurable impressions" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 654;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS(54, 654),
    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-viewable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 655;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS(55, 655),
    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-viewable impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 656;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION(56, 656),
    /**
     *
     *
     * <pre>
     * Ad Exchange Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View undetermined impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 657;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION(57, 657),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Exchange viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 74;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS(58, 74),
    /**
     *
     *
     * <pre>
     * Ad Exchange Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 658;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION(59, 658),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by Ad Exchange viewed on the
     *  user's screen (out of Ad Exchange impressions measurable by active
     *  view).
     *
     *
     *
     * Corresponds to "Ad Exchange Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 77;</code>
     */
    AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE(60, 77),
    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_AVERAGE_ECPM = 18;</code>
     */
    AD_EXCHANGE_AVERAGE_ECPM(61, 18),
    /**
     *
     *
     * <pre>
     * Number of clicks delivered by the Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_CLICKS = 15;</code>
     */
    AD_EXCHANGE_CLICKS(62, 15),
    /**
     *
     *
     * <pre>
     * The average effective cost-per-click earned from the ads delivered by Ad
     *  Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange CPC" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_CPC = 244;</code>
     */
    AD_EXCHANGE_CPC(63, 244),
    /**
     *
     *
     * <pre>
     * The ratio of impressions served by the Ad Exchange that resulted in users
     *  clicking on an ad. The clickthrough rate (CTR) is updated nightly. Ad
     *  Exchange CTR is calculated as: (Ad Exchange clicks / Ad Exchange
     *  impressions).
     *
     *
     *
     * Corresponds to "Ad Exchange CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_CTR = 16;</code>
     */
    AD_EXCHANGE_CTR(64, 16),
    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by Ad Exchange through line item dynamic
     *  allocation to ad requests.
     *
     *
     *
     * Corresponds to "Ad Exchange delivery rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_DELIVERY_RATE = 245;</code>
     */
    AD_EXCHANGE_DELIVERY_RATE(65, 245),
    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS = 14;</code>
     */
    AD_EXCHANGE_IMPRESSIONS(66, 14),
    /**
     *
     *
     * <pre>
     * The total number of impressions based on the number of ad viewers.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions per ad viewer" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER = 427;</code>
     */
    AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER(67, 427),
    /**
     *
     *
     * <pre>
     * The total number of impressions based on the number of sessions.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions per session" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS_PER_SESSION = 428;</code>
     */
    AD_EXCHANGE_IMPRESSIONS_PER_SESSION(68, 428),
    /**
     *
     *
     * <pre>
     * The increase in revenue gained for won impressions over the applicable
     *  third party price (the minimum CPM or the best price specified during
     *  dynamic allocation),
     *
     *
     *
     * Corresponds to "Ad Exchange lift earnings" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_LIFT = 246;</code>
     */
    AD_EXCHANGE_LIFT(69, 246),
    /**
     *
     *
     * <pre>
     * The ratio of matched ad requests served by the Ad Exchange that
     *  resulted in users clicking on an ad. The clickthrough rate (CTR) is
     *  updated nightly. Ad Exchange Matched Request CTR is calculated as:
     *  (Ad Exchange clicks / Ad Exchange Macthed Ad Requests).
     *
     *
     *
     * Corresponds to "Ad Exchange matched request CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCHED_REQUEST_CTR = 247;</code>
     */
    AD_EXCHANGE_MATCHED_REQUEST_CTR(70, 247),
    /**
     *
     *
     * <pre>
     * The average effective cost per thousand matched ad requests earned from
     *  the ads delivered by Ad Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange matched request eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCHED_REQUEST_ECPM = 248;</code>
     */
    AD_EXCHANGE_MATCHED_REQUEST_ECPM(71, 248),
    /**
     *
     *
     * <pre>
     * The number of responses served divided by the number of queries eligible
     *  in ad exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCH_RATE = 249;</code>
     */
    AD_EXCHANGE_MATCH_RATE(72, 249),
    /**
     *
     *
     * <pre>
     * Total opportunities from video VAST error within the waterfall for
     *  backfill ads.
     *
     *
     *
     * Corresponds to "Ad Exchange opportunities from errors" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS = 250;</code>
     */
    AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS(73, 250),
    /**
     *
     *
     * <pre>
     * Number of opportunities from impressions within the waterfall for
     *  backfill ads.
     *
     *
     *
     * Corresponds to "Ad Exchange opportunities from impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS = 251;</code>
     */
    AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS(74, 251),
    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by Ad Exchange through line item dynamic
     *  allocation in relation to the total clicks delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_CLICKS = 20;</code>
     */
    AD_EXCHANGE_PERCENT_CLICKS(75, 20),
    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by Ad Exchange through line item dynamic
     *  allocation in relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_IMPRESSIONS = 19;</code>
     */
    AD_EXCHANGE_PERCENT_IMPRESSIONS(76, 19),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by Ad Exchange through line item dynamic
     *  allocation in relation to the total revenue.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_REVENUE = 21;</code>
     */
    AD_EXCHANGE_PERCENT_REVENUE(77, 21),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by Ad Exchange through line item dynamic
     *  allocation in relation to the total revenue (excluding CPD).
     *
     *
     *
     * Corresponds to "Ad Exchange revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD = 31;</code>
     */
    AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD(78, 31),
    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation and yield
     *  group partners.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM = 252;</code>
     */
    AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM(79, 252),
    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Exchange and third-party networks.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS = 253;</code>
     */
    AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS(80, 253),
    /**
     *
     *
     * <pre>
     * Revenue generated from the Ad Exchange and Yield Group, calculated in
     *   your network's currency and time zone.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group revenue" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE = 254;</code>
     */
    AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE(81, 254),
    /**
     *
     *
     * <pre>
     * The total number of times that an Ad Exchange ad is delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_RESPONSES_SERVED = 42;</code>
     */
    AD_EXCHANGE_RESPONSES_SERVED(82, 42),
    /**
     *
     *
     * <pre>
     * Revenue generated from the Ad Exchange through line item dynamic
     *  allocation, calculated in your network's currency and time zone.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE = 17;</code>
     */
    AD_EXCHANGE_REVENUE(83, 17),
    /**
     *
     *
     * <pre>
     * The Ad Exchange revenue accrued in the child network's own account but
     *  paid to their parent network through auto-payment. This metric is only
     *  relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 212;</code>
     */
    AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT(84, 212),
    /**
     *
     *
     * <pre>
     * The total amount of Ad Exchange revenue based on the
     *  number of ad viewers.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue per ad viewer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE_PER_AD_VIEWER = 429;</code>
     */
    AD_EXCHANGE_REVENUE_PER_AD_VIEWER(85, 429),
    /**
     *
     *
     * <pre>
     * The number of programmatic eligible queries in Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange total requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUESTS = 255;</code>
     */
    AD_EXCHANGE_TOTAL_REQUESTS(86, 255),
    /**
     *
     *
     * <pre>
     * The ratio of total ad requests served by the Ad Exchange that
     *  resulted in users clicking on an ad. The clickthrough rate (CTR) is
     *  updated nightly. Ad Exchange Total Request CTR is calculated as:
     *  (Ad Exchange clicks / Ad Exchange Total Ad Requests).
     *
     *
     *
     * Corresponds to "Ad Exchange total request CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUEST_CTR = 256;</code>
     */
    AD_EXCHANGE_TOTAL_REQUEST_CTR(87, 256),
    /**
     *
     *
     * <pre>
     * The average effective cost per thousand ad requests earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation and yield
     *   group partners.
     *
     *
     *
     * Corresponds to "Ad Exchange total request eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUEST_ECPM = 257;</code>
     */
    AD_EXCHANGE_TOTAL_REQUEST_ECPM(88, 257),
    /**
     *
     *
     * <pre>
     * Length of time in seconds that an ad is visible on the user's screen from
     *  Google Analytics.
     *
     *
     *
     * Corresponds to "Ad exposure (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXPOSURE_SECONDS = 241;</code>
     */
    AD_EXPOSURE_SECONDS(89, 241),
    /**
     *
     *
     * <pre>
     * The total number of times that an ad request is sent to the ad server
     *  including dynamic allocation.
     *
     *
     *
     * Corresponds to "Total ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_REQUESTS = 38;</code>
     */
    AD_REQUESTS(90, 38),
    /**
     *
     *
     * <pre>
     * Active View ad server average time in seconds that specific impressions
     *  are reported as being viewable.
     *
     *
     *
     * Corresponds to "Ad server Active View average viewable time (seconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 67;</code>
     */
    AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME(91, 67),
    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by the ad server that were eligible
     *  to measure viewability.
     *
     *
     *
     * Corresponds to "Ad server Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 64;</code>
     */
    AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS(92, 64),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server that were sampled,
     *  and measurable by active view.
     *
     *
     *
     * Corresponds to "Ad server Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 63;</code>
     */
    AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS(93, 63),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by the ad server that were
     *  measurable by active view (out of all the ad server impressions sampled
     *  for active view).
     *
     *
     *
     * Corresponds to "Ad server Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 66;</code>
     */
    AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE(94, 66),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Server that were not measured.
     *  For example, impressions where measurement was attempted but failed.
     *
     *
     *
     * Corresponds to "Ad server Active View non-measurable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 332;</code>
     */
    AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS(95, 332),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Server that were measured by
     *  active view, but deemed not viewable.
     *
     *
     *
     * Corresponds to "Ad server Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 331;</code>
     */
    AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS(96, 331),
    /**
     *
     *
     * <pre>
     * The fraction of non-viewable impressions among eligible impressions from
     *  Ad Server in Active View reporting."
     *
     *
     *
     * Corresponds to "Ad server Active View non-viewable impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 334;</code>
     */
    AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION(97, 334),
    /**
     *
     *
     * <pre>
     * The fraction of non-eligible impressions among eligible impressions from
     *  Ad Server in Active View reporting."
     *
     *
     *
     * Corresponds to "Ad server Active View undetermined impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 335;</code>
     */
    AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION(98, 335),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "Ad server Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 62;</code>
     */
    AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS(99, 62),
    /**
     *
     *
     * <pre>
     * The fraction of viewable impressions among eligible impressions from Ad
     *  Server in Active View reporting.
     *
     *
     *
     * Corresponds to "Ad server Active View viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 333;</code>
     */
    AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION(100, 333),
    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by the ad server viewed on the
     *  user's screen (out of the ad server impressions measurable by active
     *  view).
     *
     *
     *
     * Corresponds to "Ad server Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 65;</code>
     */
    AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE(101, 65),
    /**
     *
     *
     * <pre>
     * Average effective cost-per-thousand-impressions earned from the ads
     *  delivered by the Google Ad Manager server.
     *
     *
     *
     * Corresponds to "Ad server average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_AVERAGE_ECPM = 34;</code>
     */
    AD_SERVER_AVERAGE_ECPM(102, 34),
    /**
     *
     *
     * <pre>
     * Average effective cost-per-thousand-impressions earned from the ads
     *  delivered by the Google Ad Manager server, excluding CPD value.
     *
     *
     *
     * Corresponds to "Ad server average eCPM w/o CPD" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD = 10;</code>
     */
    AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD(103, 10),
    /**
     *
     *
     * <pre>
     * Total raw impressions counted when creative begins to render or the
     *  first frame of a video is shown.
     *
     *
     *
     * Corresponds to "Ad server begin to render impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS = 262;</code>
     */
    AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS(104, 262),
    /**
     *
     *
     * <pre>
     * Total clicks served by the Google Ad Manager server. It usually takes
     *  about 30 minutes for new clicks to be recorded and added to the total
     *  displayed in reporting.
     *
     *
     *
     * Corresponds to "Ad server clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_CLICKS = 7;</code>
     */
    AD_SERVER_CLICKS(105, 7),
    /**
     *
     *
     * <pre>
     * The number of completed views for ad server.
     *
     *
     *
     * Corresponds to "Ad server completed views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_COMPLETED_VIEWS = 431;</code>
     */
    AD_SERVER_COMPLETED_VIEWS(106, 431),
    /**
     *
     *
     * <pre>
     * Total coviewed impressions delivered by the Ad Server.
     *
     *
     *
     * Corresponds to "Ad server impressions (co-viewed)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_COVIEWED_IMPRESSIONS = 554;</code>
     */
    AD_SERVER_COVIEWED_IMPRESSIONS(107, 554),
    /**
     *
     *
     * <pre>
     * CPD revenue earned, calculated in your network's currency, for
     *  the ads delivered by the Google Ad Manager server. Sum of all booked
     *  revenue.
     *
     *
     *
     * Corresponds to "Ad server CPD revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_CPD_REVENUE = 32;</code>
     */
    AD_SERVER_CPD_REVENUE(108, 32),
    /**
     *
     *
     * <pre>
     * Ratio of impressions served by the Google Ad Manager server that resulted
     *  in users clicking on an ad. The clickthrough rate (CTR) is updated
     *  nightly. The ad server CTR is calculated as: (Ad server clicks / Ad
     *  server impressions).
     *
     *
     *
     * Corresponds to "Ad server CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_CTR = 8;</code>
     */
    AD_SERVER_CTR(109, 8),
    /**
     *
     *
     * <pre>
     * Gross revenue earned, calculated in your network's currency, for the ads
     *  delivered by the Google Ad Manager server.  This includes pre-rev-share
     *  revenue for Programmatic traffic. This metric is to help with the
     *  transition from gross to net revenue reporting.
     *
     *
     *
     * Corresponds to "Ad server total revenue (gross)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_GROSS_REVENUE = 483;</code>
     */
    AD_SERVER_GROSS_REVENUE(110, 483),
    /**
     *
     *
     * <pre>
     * Gross revenue earned, calculated in your network's currency, for the ads
     *  delivered by the Google Ad Manager server, excluding CPD revenue. This
     *  includes pre-rev-share revenue for Programmatic traffic. This metric is
     *  to help with the transition from gross to net revenue reporting.
     *
     *
     *
     * Corresponds to "Ad server CPM and CPC revenue (gross)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_GROSS_REVENUE_WITHOUT_CPD = 484;</code>
     */
    AD_SERVER_GROSS_REVENUE_WITHOUT_CPD(111, 484),
    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Server.
     *
     *
     *
     * Corresponds to "Ad server impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_IMPRESSIONS = 6;</code>
     */
    AD_SERVER_IMPRESSIONS(112, 6),
    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Server with companion impressions.
     *
     *
     *
     * Corresponds to "Ad server impressions with companion" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_IMPRESSIONS_WITH_COMPANION = 222;</code>
     */
    AD_SERVER_IMPRESSIONS_WITH_COMPANION(113, 222),
    /**
     *
     *
     * <pre>
     * Impressions (via begin to render methodology) delivered by the Google Ad
     *  Manager server considered inactive, as defined by served to a device
     *  receiving ad or bid requests continuously for a session of greater than
     *  16 hours without a "reset" event.
     *
     *
     *
     * Corresponds to "Ad server inactive begin to render impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS = 338;</code>
     */
    AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS(114, 338),
    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by the Google Ad Manager server in relation to
     *  the total clicks delivered.
     *
     *
     *
     * Corresponds to "Ad server clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_CLICKS = 12;</code>
     */
    AD_SERVER_PERCENT_CLICKS(115, 12),
    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by the Google Ad Manager server in
     *  relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "Ad server impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_IMPRESSIONS = 11;</code>
     */
    AD_SERVER_PERCENT_IMPRESSIONS(116, 11),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by the Google Ad Manager server in relation
     *  to the total revenue.
     *
     *
     *
     * Corresponds to "Ad server revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_REVENUE = 35;</code>
     */
    AD_SERVER_PERCENT_REVENUE(117, 35),
    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by the Google Ad Manager server (excluding
     *  CPD) in relation to the total revenue.
     *
     *
     *
     * Corresponds to "Ad server revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD = 13;</code>
     */
    AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD(118, 13),
    /**
     *
     *
     * <pre>
     * The total number of times that an ad is served by the ad server.
     *
     *
     *
     * Corresponds to "Ad server responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_RESPONSES_SERVED = 40;</code>
     */
    AD_SERVER_RESPONSES_SERVED(119, 40),
    /**
     *
     *
     * <pre>
     * All CPM, CPC, and CPD revenue earned, calculated in your network's
     *  currency, for the ads delivered by the Google Ad Manager server.
     *  Sum of all booked revenue.
     *
     *
     *
     * Corresponds to "Ad server total revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE = 33;</code>
     */
    AD_SERVER_REVENUE(120, 33),
    /**
     *
     *
     * <pre>
     * The Google Ad Manager server revenue accrued in the child network's own
     *  account but paid to their parent network through auto-payment. This
     *  metric is only relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Ad server revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 213;</code>
     */
    AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT(121, 213),
    /**
     *
     *
     * <pre>
     * Revenue (excluding CPD) earned, calculated in your network's currency,
     *  for the ads delivered by the Google Ad Manager server. Sum of all booked
     *  revenue.
     *
     *
     *
     * Corresponds to "Ad server CPM and CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE_WITHOUT_CPD = 9;</code>
     */
    AD_SERVER_REVENUE_WITHOUT_CPD(122, 9),
    /**
     *
     *
     * <pre>
     * The number of clicks delivered by the ad server by explicit custom
     *  criteria targeting.
     *
     *
     *
     * Corresponds to "Ad server targeted clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TARGETED_CLICKS = 274;</code>
     */
    AD_SERVER_TARGETED_CLICKS(123, 274),
    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server by explicit custom
     *  criteria targeting.
     *
     *
     *
     * Corresponds to "Ad server targeted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TARGETED_IMPRESSIONS = 275;</code>
     */
    AD_SERVER_TARGETED_IMPRESSIONS(124, 275),
    /**
     *
     *
     * <pre>
     * The number of tracked ads delivered by the ad server.
     *
     *
     *
     * Corresponds to "Ad server tracked ads" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TRACKED_ADS = 264;</code>
     */
    AD_SERVER_TRACKED_ADS(125, 264),
    /**
     *
     *
     * <pre>
     * Total raw impressions counted when creative begins to render or the
     *  first frame of a video is shown, before invalid traffic filtrations by
     *  Ad Server.
     *
     *
     *
     * Corresponds to "Ad server unfiltered begin to render impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS = 261;</code>
     */
    AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS(126, 261),
    /**
     *
     *
     * <pre>
     * Total clicks delivered by the Ad Server before spam filtering.
     *
     *
     *
     * Corresponds to "Ad server unfiltered clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_CLICKS = 259;</code>
     */
    AD_SERVER_UNFILTERED_CLICKS(127, 259),
    /**
     *
     *
     * <pre>
     * Total downloaded impressions delivered by the Ad Server before spam
     *  filtering.
     *
     *
     *
     * Corresponds to "Ad server unfiltered downloaded impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS = 260;</code>
     */
    AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS(128, 260),
    /**
     *
     *
     * <pre>
     * The number of tracked ads delivered by the ad server before invalid
     *  traffic filtrations.
     *
     *
     *
     * Corresponds to "Ad server unfiltered tracked ads" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_TRACKED_ADS = 263;</code>
     */
    AD_SERVER_UNFILTERED_TRACKED_ADS(130, 263),
    /**
     *
     *
     * <pre>
     * Length of time in seconds that an ad unit is visible on the user's screen
     *  from Google Analytics.
     *
     *
     *
     * Corresponds to "Ad unit exposure (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_UNIT_EXPOSURE_SECONDS = 242;</code>
     */
    AD_UNIT_EXPOSURE_SECONDS(131, 242),
    /**
     *
     *
     * <pre>
     * The number of users who viewed an ads on your site or app in the
     *  specified date range from Google Analytics.
     *
     *
     *
     * Corresponds to "Ad viewers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_VIEWERS = 425;</code>
     */
    AD_VIEWERS(132, 425),
    /**
     *
     *
     * <pre>
     * Number of ads that Ad Manager failed to render in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ads failed to render" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ADS_FAILED_TO_RENDER = 430;</code>
     */
    ATN_ADS_FAILED_TO_RENDER(133, 430),
    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Eligible line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ELIGIBLE_LINE_ITEMS = 342;</code>
     */
    ATN_ELIGIBLE_LINE_ITEMS(134, 342),
    /**
     *
     *
     * <pre>
     * Number of ad requests that contain eligible line items for the auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with eligible line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS = 343;</code>
     */
    ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS(135, 343),
    /**
     *
     *
     * <pre>
     * Number of ad requests that have header bidding trafficking demand in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing header bidding trafficking" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_ALLOWED_AD_REQUESTS = 344;</code>
     */
    ATN_HBT_ALLOWED_AD_REQUESTS(136, 344),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking bids that are able to match an ad
     *  request and enter the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing header bidding trafficking bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_BIDS_IN_AUCTION = 345;</code>
     */
    ATN_HBT_BIDS_IN_AUCTION(137, 345),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with bids in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing header bidding trafficking
     * bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS = 346;</code>
     */
    ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS(138, 346),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking candidate bids that match an ad
     *  request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_CANDIDATE_BIDS = 347;</code>
     */
    ATN_HBT_CANDIDATE_BIDS(139, 347),
    /**
     *
     *
     * <pre>
     * Number of invalid header bidding trafficking ad requests in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing header bidding trafficking"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_INVALID_AD_REQUESTS = 348;</code>
     */
    ATN_HBT_INVALID_AD_REQUESTS(140, 348),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with no bids in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking ad requests with no bids" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_NO_BIDS_AD_REQUESTS = 472;</code>
     */
    ATN_HBT_NO_BIDS_AD_REQUESTS(141, 472),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking bids that didn't match the ad
     *  request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected header bidding trafficking bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_REJECTED_BIDS = 349;</code>
     */
    ATN_HBT_REJECTED_BIDS(142, 349),
    /**
     *
     *
     * <pre>
     * Number of ad requests with the header bidding trafficking demand that are
     *  valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Valid header bidding trafficking ad requests" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_VALID_AD_REQUESTS = 350;</code>
     */
    ATN_HBT_VALID_AD_REQUESTS(143, 350),
    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with bids in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking ad requests with bids" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_WITH_BIDS_AD_REQUESTS = 473;</code>
     */
    ATN_HBT_WITH_BIDS_AD_REQUESTS(144, 473),
    /**
     *
     *
     * <pre>
     * Ad requests that are not valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_INVALID_AD_REQUESTS = 351;</code>
     */
    ATN_INVALID_AD_REQUESTS(145, 351),
    /**
     *
     *
     * <pre>
     * Number of line items with no creative retrieved in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Creative not retrieved" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED = 476;</code>
     */
    ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED(146, 476),
    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request and entered in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_IN_AUCTION = 352;</code>
     */
    ATN_LINE_ITEMS_IN_AUCTION(147, 352),
    /**
     *
     *
     * <pre>
     * Number of line items that were ranked but did not compete in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Non-competing line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_NOT_COMPETING = 515;</code>
     */
    ATN_LINE_ITEMS_NOT_COMPETING(148, 515),
    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request but were not selected to
     *  compete in the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Not selected to compete" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_NOT_SELECTED = 353;</code>
     */
    ATN_LINE_ITEMS_NOT_SELECTED(149, 353),
    /**
     *
     *
     * <pre>
     * Number of line item ad requests in auction in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Ad requests with competing line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS = 354;</code>
     */
    ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS(150, 354),
    /**
     *
     *
     * <pre>
     * Number of line item targeted ad requests in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Ad requests with targeted line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEM_TARGETED_AD_REQUESTS = 355;</code>
     */
    ATN_LINE_ITEM_TARGETED_AD_REQUESTS(151, 355),
    /**
     *
     *
     * <pre>
     * Number of ad requests with the mediation demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing mediation" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_ALLOWED_AD_REQUESTS = 356;</code>
     */
    ATN_MEDIATION_ALLOWED_AD_REQUESTS(152, 356),
    /**
     *
     *
     * <pre>
     * Number of invalid mediation ad requests in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing mediation" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_INVALID_AD_REQUESTS = 357;</code>
     */
    ATN_MEDIATION_INVALID_AD_REQUESTS(153, 357),
    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner's ad was loaded in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Loaded ads from chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_LOADED_ADS_FROM_CHAINS = 358;</code>
     */
    ATN_MEDIATION_LOADED_ADS_FROM_CHAINS(154, 358),
    /**
     *
     *
     * <pre>
     * Number of ad requests with mediation demand having no partners in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Mediation requests with no partners" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_NO_PARTNER_AD_REQUESTS = 474;</code>
     */
    ATN_MEDIATION_NO_PARTNER_AD_REQUESTS(155, 474),
    /**
     *
     *
     * <pre>
     * Number of mediation yield partners in auction in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Competing mediation partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_PARTNERS_IN_AUCTION = 359;</code>
     */
    ATN_MEDIATION_PARTNERS_IN_AUCTION(156, 359),
    /**
     *
     *
     * <pre>
     * Number of ad requests in auction that serve mediation chains in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing mediation partners" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS = 360;</code>
     */
    ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS(157, 360),
    /**
     *
     *
     * <pre>
     * Number of mediation partners that didn't match an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_REJECTED_PARTNERS = 361;</code>
     */
    ATN_MEDIATION_REJECTED_PARTNERS(158, 361),
    /**
     *
     *
     * <pre>
     * Number of mediation partners that have targeted an ad request and are
     *  able to match it in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Targeted mediation partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_TARGETED_PARTNERS = 362;</code>
     */
    ATN_MEDIATION_TARGETED_PARTNERS(159, 362),
    /**
     *
     *
     * <pre>
     * Number of partners on served mediation chains in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Total yield partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_TOTAL_YIELD_PARTNERS = 442;</code>
     */
    ATN_MEDIATION_TOTAL_YIELD_PARTNERS(160, 442),
    /**
     *
     *
     * <pre>
     * Number of ads from mediation chains that Ad Manager won't serve in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Unloaded ads from chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS = 363;</code>
     */
    ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS(161, 363),
    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner's mediation chain ad was not reached
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Unused bids or partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS = 364;</code>
     */
    ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS(162, 364),
    /**
     *
     *
     * <pre>
     * Number of ad requests that have mediation demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Valid mediation ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_VALID_AD_REQUESTS = 365;</code>
     */
    ATN_MEDIATION_VALID_AD_REQUESTS(163, 365),
    /**
     *
     *
     * <pre>
     * Number of ad requests with mediation demand having partners in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with targeted mediation partners" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS = 475;</code>
     */
    ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS(164, 475),
    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand that have received a bid
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS = 366;</code>
     */
    ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS(165, 366),
    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand that have sent a bid to at
     *  least one buyer in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with bid requests sent" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT = 367;</code>
     */
    ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT(166, 367),
    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing programmatic" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS = 368;</code>
     */
    ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS(167, 368),
    /**
     *
     *
     * <pre>
     * Number of ads with programmatic bids that entered the auction
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing programmatic bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BIDS_IN_AUCTION = 369;</code>
     */
    ATN_PROGRAMMATIC_BIDS_IN_AUCTION(168, 369),
    /**
     *
     *
     * <pre>
     * Number of ad requests that have received eligible programmatic bids to
     *  compete in the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing programmatic bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS = 370;</code>
     */
    ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS(169, 370),
    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests sent to buyers in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid requests sent" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUESTS_SENT = 371;</code>
     */
    ATN_PROGRAMMATIC_BID_REQUESTS_SENT(170, 371),
    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests that resulted with a response
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid requests with response" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE = 372;</code>
     */
    ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE(171, 372),
    /**
     *
     *
     * <pre>
     * All buyers that Ad Manager could potentially send a programmatic bid
     *  request to in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid request candidates" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES = 373;</code>
     */
    ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES(172, 373),
    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests with errors in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid request errors" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUEST_ERRORS = 374;</code>
     */
    ATN_PROGRAMMATIC_BID_REQUEST_ERRORS(173, 374),
    /**
     *
     *
     * <pre>
     * Number of ad requests that are ineligible for programmatic in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing programmatic" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS = 375;</code>
     */
    ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS(174, 375),
    /**
     *
     *
     * <pre>
     * Number of programmatic callout bids rejected in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Rejected bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_REJECTED_BIDS = 376;</code>
     */
    ATN_PROGRAMMATIC_REJECTED_BIDS(175, 376),
    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests Ad Manager won't send to
     *  buyers in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Skipped bid requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS = 377;</code>
     */
    ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS(176, 377),
    /**
     *
     *
     * <pre>
     * Number of programmatic bids that Ad Manager received from buyers in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total programmatic bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_TOTAL_BIDS = 378;</code>
     */
    ATN_PROGRAMMATIC_TOTAL_BIDS(177, 378),
    /**
     *
     *
     * <pre>
     * Number of ad requests that allow programmatic in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Valid ad requests allowing programmatic" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_VALID_AD_REQUESTS = 379;</code>
     */
    ATN_PROGRAMMATIC_VALID_AD_REQUESTS(178, 379),
    /**
     *
     *
     * <pre>
     * Number of line items targeted that didn't match an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_REJECTED_LINE_ITEMS = 380;</code>
     */
    ATN_REJECTED_LINE_ITEMS(179, 380),
    /**
     *
     *
     * <pre>
     * Number of mediation chains Ad Manager serves in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Served mediation chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_SERVED_MEDIATION_CHAINS = 381;</code>
     */
    ATN_SERVED_MEDIATION_CHAINS(180, 381),
    /**
     *
     *
     * <pre>
     * Number of single ads served in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Served single ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_SERVED_SINGLE_ADS = 382;</code>
     */
    ATN_SERVED_SINGLE_ADS(181, 382),
    /**
     *
     *
     * <pre>
     * Number of line items with targeting that matches an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Targeted line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TARGETED_LINE_ITEMS = 383;</code>
     */
    ATN_TARGETED_LINE_ITEMS(182, 383),
    /**
     *
     *
     * <pre>
     * Total number of ad requests which counts optimized pod request as a
     *  single request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total ad requests (ATN)" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_AD_REQUESTS = 384;</code>
     */
    ATN_TOTAL_AD_REQUESTS(183, 384),
    /**
     *
     *
     * <pre>
     * Number of competing ads in auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total competing ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_COMPETING_ADS_IN_AUCTION = 385;</code>
     */
    ATN_TOTAL_COMPETING_ADS_IN_AUCTION(184, 385),
    /**
     *
     *
     * <pre>
     * Total number of ads loaded in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total loaded ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_LOADED_ADS = 387;</code>
     */
    ATN_TOTAL_LOADED_ADS(185, 387),
    /**
     *
     *
     * <pre>
     * Ad requests that are valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Valid ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_VALID_AD_REQUESTS = 389;</code>
     */
    ATN_VALID_AD_REQUESTS(186, 389),
    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner passed-back on a Mediation chain ad in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_YIELD_GROUP_MEDIATION_PASSBACKS = 390;</code>
     */
    ATN_YIELD_GROUP_MEDIATION_PASSBACKS(187, 390),
    /**
     *
     *
     * <pre>
     * eCPM averaged across the Google Ad Manager server, AdSense,
     *  and Ad Exchange.
     *
     *
     *
     * Corresponds to "Total average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_ECPM = 37;</code>
     */
    AVERAGE_ECPM(188, 37),
    /**
     *
     *
     * <pre>
     * eCPM averaged across the Google Ad Manager server (excluding CPD),
     *  AdSense, and Ad Exchange.
     *
     *
     *
     * Corresponds to "Total average eCPM w/o CPD" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_ECPM_WITHOUT_CPD = 5;</code>
     */
    AVERAGE_ECPM_WITHOUT_CPD(189, 5),
    /**
     *
     *
     * <pre>
     * Average user engagement seconds per session in Google Analytics.
     *
     *
     *
     * Corresponds to "Average engagement time per session (seconds)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION = 224;</code>
     */
    AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION(190, 224),
    /**
     *
     *
     * <pre>
     * Average user engagement seconds per user in Google Analytics.
     *
     *
     *
     * Corresponds to "Average engagement time per user (seconds)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_ENGAGEMENT_SECONDS_PER_USER = 225;</code>
     */
    AVERAGE_ENGAGEMENT_SECONDS_PER_USER(191, 225),
    /**
     *
     *
     * <pre>
     * The average number of unique users reached per ad impression.
     *
     *
     *
     * Corresponds to "Average impressions/unique visitor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR = 418;</code>
     */
    AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR(192, 418),
    /**
     *
     *
     * <pre>
     * Average total purchase revenue per user in Google Analytics.
     *
     *
     *
     * Corresponds to "ARPPU" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER = 226;</code>
     */
    AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER(193, 226),
    /**
     *
     *
     * <pre>
     * Average revenue earned from each active user in Google Analytics.
     *
     *
     *
     * Corresponds to "ARPU" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_REVENUE_PER_USER = 227;</code>
     */
    AVERAGE_REVENUE_PER_USER(194, 227),
    /**
     *
     *
     * <pre>
     * Average length of a session in Google Analytics.
     *
     *
     *
     * Corresponds to "Average session duration (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_SESSION_SECONDS = 228;</code>
     */
    AVERAGE_SESSION_SECONDS(195, 228),
    /**
     *
     *
     * <pre>
     * The number of bids.
     *
     *
     *
     * Corresponds to "Bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>BIDS = 443;</code>
     */
    BIDS(196, 443),
    /**
     *
     *
     * <pre>
     * The average CPM of the bids submitted by bidders.
     *
     *
     *
     * Corresponds to "Average bid CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>BID_AVERAGE_CPM = 444;</code>
     */
    BID_AVERAGE_CPM(197, 444),
    /**
     *
     *
     * <pre>
     * The ratio of (sessions - engaged sessions) / sessions.
     *
     *
     *
     * Corresponds to "Bounce rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>BOUNCE_RATE = 433;</code>
     */
    BOUNCE_RATE(198, 433),
    /**
     *
     *
     * <pre>
     * The number of times a user clicked on an ad.
     *
     *
     *
     * Corresponds to "Total clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>CLICKS = 2;</code>
     */
    CLICKS(199, 2),
    /**
     *
     *
     * <pre>
     * The total number of times that the code for an ad is served by the ad
     *  server including dynamic allocation.
     *
     *
     *
     * Corresponds to "Total code served count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>CODE_SERVED_COUNT = 44;</code>
     */
    CODE_SERVED_COUNT(200, 44),
    /**
     *
     *
     * <pre>
     * Total amount of CPC revenue.
     *
     *
     *
     * Corresponds to "CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>CPC_REVENUE = 440;</code>
     */
    CPC_REVENUE(201, 440),
    /**
     *
     *
     * <pre>
     * Total amount of CPM revenue.
     *
     *
     *
     * Corresponds to "CPM revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>CPM_REVENUE = 441;</code>
     */
    CPM_REVENUE(202, 441),
    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [0, 500ms).
     *
     *
     *
     * Corresponds to "Creative load time 0 - 500ms (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_0_500_PERCENT = 324;</code>
     */
    CREATIVE_LOAD_TIME_0_500_PERCENT(203, 324),
    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [1000, 2000ms).
     *
     *
     *
     * Corresponds to "Creative load time 1s - 2s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_1000_2000_PERCENT = 326;</code>
     */
    CREATIVE_LOAD_TIME_1000_2000_PERCENT(204, 326),
    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [2000, 4000ms).
     *
     *
     *
     * Corresponds to "Creative load time 2s - 4s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_2000_4000_PERCENT = 327;</code>
     */
    CREATIVE_LOAD_TIME_2000_4000_PERCENT(205, 327),
    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [4000, 8000ms).
     *
     *
     *
     * Corresponds to "Creative load time 4s - 8s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_4000_8000_PERCENT = 328;</code>
     */
    CREATIVE_LOAD_TIME_4000_8000_PERCENT(206, 328),
    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [500, 1000ms).
     *
     *
     *
     * Corresponds to "Creative load time 500ms - 1s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_500_1000_PERCENT = 325;</code>
     */
    CREATIVE_LOAD_TIME_500_1000_PERCENT(207, 325),
    /**
     *
     *
     * <pre>
     * Percent of creatives load time is greater than 8000ms.
     *
     *
     *
     * Corresponds to "Creative load time &gt;8s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_GT_8000_PERCENT = 329;</code>
     */
    CREATIVE_LOAD_TIME_GT_8000_PERCENT(208, 329),
    /**
     *
     *
     * <pre>
     * For standard ads, your ad clickthrough rate (CTR) is the number of ad
     *  clicks divided by the number of individual ad impressions expressed as a
     *  fraction. Ad CTR = Clicks / Ad impressions.
     *
     *
     *
     * Corresponds to "Total CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CTR = 3;</code>
     */
    CTR(209, 3),
    /**
     *
     *
     * <pre>
     * Number of bids received for a deal.
     *
     *
     *
     * Corresponds to "Deals bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_BIDS = 542;</code>
     */
    DEALS_BIDS(210, 542),
    /**
     *
     *
     * <pre>
     * Bid rate for a deal.
     *
     *
     *
     * Corresponds to "Deals bid rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DEALS_BID_RATE = 543;</code>
     */
    DEALS_BID_RATE(211, 543),
    /**
     *
     *
     * <pre>
     * Number of bid requests sent for a deal.
     *
     *
     *
     * Corresponds to "Deals bid requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_BID_REQUESTS = 544;</code>
     */
    DEALS_BID_REQUESTS(212, 544),
    /**
     *
     *
     * <pre>
     * Number of winning bids for a deal.
     *
     *
     *
     * Corresponds to "Deals winning bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_WINNING_BIDS = 545;</code>
     */
    DEALS_WINNING_BIDS(213, 545),
    /**
     *
     *
     * <pre>
     * Bid win rate for a deal.
     *
     *
     *
     * Corresponds to "Deals win rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DEALS_WIN_RATE = 546;</code>
     */
    DEALS_WIN_RATE(214, 546),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 0 - 500ms (%)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT = 521;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT(215, 521),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 1s - 2s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT = 522;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT(216, 522),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 2s - 4s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT = 523;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT(217, 523),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 4s - 8s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT = 524;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT(218, 524),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 500ms - 1s (%)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT = 525;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT(219, 525),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time &gt;8s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT = 520;</code>
     */
    DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT(220, 520),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 0 - 500ms (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT = 526;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT(221, 526),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 1s - 2s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT = 527;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT(222, 527),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 2s - 4s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT = 528;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT(223, 528),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 4s - 8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT = 529;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT(224, 529),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 500ms - 1s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT = 531;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT(225, 531),
    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time &gt;8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT = 530;</code>
     */
    DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT(226, 530),
    /**
     *
     *
     * <pre>
     * Percentage of ad responses that didn't result in an impression.
     *
     *
     *
     * Corresponds to "Drop-off rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DROPOFF_RATE = 415;</code>
     */
    DROPOFF_RATE(227, 415),
    /**
     *
     *
     * <pre>
     * Engaged session count from Google Analytics.
     *
     *
     *
     * Corresponds to "Engaged sessions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ENGAGED_SESSIONS = 229;</code>
     */
    ENGAGED_SESSIONS(228, 229),
    /**
     *
     *
     * <pre>
     * Engaged sessions per user from Google Analytics.
     *
     *
     *
     * Corresponds to "Engaged sessions per user" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ENGAGED_SESSIONS_PER_USER = 230;</code>
     */
    ENGAGED_SESSIONS_PER_USER(229, 230),
    /**
     *
     *
     * <pre>
     * The ratio of engaged sessions to sessions.
     *
     *
     *
     * Corresponds to "Engagement rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ENGAGEMENT_RATE = 426;</code>
     */
    ENGAGEMENT_RATE(230, 426),
    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where the user consented to
     *  all of the purposes and vendors.
     *
     *
     *
     * Corresponds to "European regulations consent rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_CONSENT_RATE = 270;</code>
     */
    EUROPEAN_REGULATIONS_CONSENT_RATE(231, 270),
    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where users made a consent
     *  choice after selecting "Manage options".
     *
     *
     *
     * Corresponds to "European regulations custom consent rate" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE = 271;</code>
     */
    EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE(232, 271),
    /**
     *
     *
     * <pre>
     * Number of times a European regulations message was shown to users.
     *
     *
     *
     * Corresponds to "European regulations messages shown" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_MESSAGES_SHOWN = 272;</code>
     */
    EUROPEAN_REGULATIONS_MESSAGES_SHOWN(233, 272),
    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where the user rejected all
     *  purposes and vendors.
     *
     *
     *
     * Corresponds to "European regulations no consent rate" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_NO_CONSENT_RATE = 273;</code>
     */
    EUROPEAN_REGULATIONS_NO_CONSENT_RATE(234, 273),
    /**
     *
     *
     * <pre>
     * The rate at which an ad request is filled by the ad server including
     *  dynamic allocation.
     *
     *
     *
     * Corresponds to "Total fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>FILL_RATE = 258;</code>
     */
    FILL_RATE(235, 258),
    /**
     *
     *
     * <pre>
     * The number of clicks joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_CLICKS = 231;</code>
     */
    GOOGLE_ANALYTICS_CLICKS(236, 231),
    /**
     *
     *
     * <pre>
     * The click-through rate from Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_CTR = 232;</code>
     */
    GOOGLE_ANALYTICS_CTR(237, 232),
    /**
     *
     *
     * <pre>
     * The eCPM revenue data from Google Analytics.
     *
     *
     *
     * Corresponds to "Google Analytics eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_ECPM = 233;</code>
     */
    GOOGLE_ANALYTICS_ECPM(238, 233),
    /**
     *
     *
     * <pre>
     * The number of impressions joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_IMPRESSIONS = 234;</code>
     */
    GOOGLE_ANALYTICS_IMPRESSIONS(239, 234),
    /**
     *
     *
     * <pre>
     * The amount of revenue joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_REVENUE = 235;</code>
     */
    GOOGLE_ANALYTICS_REVENUE(240, 235),
    /**
     *
     *
     * <pre>
     * Number of views of a web site or mobile screen from Google Analytics.
     *
     *
     *
     * Corresponds to "Views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_VIEWS = 236;</code>
     */
    GOOGLE_ANALYTICS_VIEWS(241, 236),
    /**
     *
     *
     * <pre>
     * Number of views per user from Google Analytics.
     *
     *
     *
     * Corresponds to "Views per user" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_VIEWS_PER_USER = 237;</code>
     */
    GOOGLE_ANALYTICS_VIEWS_PER_USER(242, 237),
    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold auction impressions (co-viewed)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS = 129;</code>
     */
    GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS(243, 129),
    /**
     *
     *
     * <pre>
     * The number of auction impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold auction impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_AUCTION_IMPRESSIONS = 128;</code>
     */
    GOOGLE_SOLD_AUCTION_IMPRESSIONS(244, 128),
    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold impressions (co-viewed)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_COVIEWED_IMPRESSIONS = 131;</code>
     */
    GOOGLE_SOLD_COVIEWED_IMPRESSIONS(245, 131),
    /**
     *
     *
     * <pre>
     * The number of impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_IMPRESSIONS = 130;</code>
     */
    GOOGLE_SOLD_IMPRESSIONS(246, 130),
    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold reservation impressions (co-viewed)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS = 127;</code>
     */
    GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS(247, 127),
    /**
     *
     *
     * <pre>
     * The number of reservation impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold reservation impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_RESERVATION_IMPRESSIONS = 126;</code>
     */
    GOOGLE_SOLD_RESERVATION_IMPRESSIONS(248, 126),
    /**
     *
     *
     * <pre>
     * Total impressions from the Google Ad Manager server, AdSense,
     *  Ad Exchange, and yield group partners.
     *
     *
     *
     * Corresponds to "Total impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>IMPRESSIONS = 1;</code>
     */
    IMPRESSIONS(249, 1),
    /**
     *
     *
     * <pre>
     * The number of impressions (via begin to render methodology) considered
     *  inactive, as defined by served to a device receiving ad or bid requests
     *  continuously for a session of greater than 16 hours without a "reset"
     *  event. Only applied to CTV ads.
     *
     *
     *
     * Corresponds to "Inactive begin to render impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS = 407;</code>
     */
    INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS(250, 407),
    /**
     *
     *
     * <pre>
     * The total number of inventory shares
     *
     *
     *
     * Corresponds to "Inventory shares" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVENTORY_SHARES = 547;</code>
     */
    INVENTORY_SHARES(251, 547),
    /**
     *
     *
     * <pre>
     * The total number of partner unfilled opportunities from an inventory
     *  share
     *
     *
     *
     * Corresponds to "Inventory share partner unfilled opportunities" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES = 548;</code>
     */
    INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES(252, 548),
    /**
     *
     *
     * <pre>
     * The number of invoiced impressions.
     *
     *
     *
     * Corresponds to "Invoiced impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVOICED_IMPRESSIONS = 404;</code>
     */
    INVOICED_IMPRESSIONS(253, 404),
    /**
     *
     *
     * <pre>
     * The number of invoiced unfilled impressions.
     *
     *
     *
     * Corresponds to "Invoiced unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVOICED_UNFILLED_IMPRESSIONS = 405;</code>
     */
    INVOICED_UNFILLED_IMPRESSIONS(254, 405),
    /**
     *
     *
     * <pre>
     * The number of mediation chains that were filled.
     *
     *
     *
     * Corresponds to "Mediation chains filled" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MEDIATION_CHAINS_FILLED = 584;</code>
     */
    MEDIATION_CHAINS_FILLED(255, 584),
    /**
     *
     *
     * <pre>
     * The number of impressions where the user chose to mute the ad.
     *
     *
     *
     * Corresponds to "Total muted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MUTED_IMPRESSIONS = 412;</code>
     */
    MUTED_IMPRESSIONS(256, 412),
    /**
     *
     *
     * <pre>
     * The number of impressions that had the "Mute This Ad" overlay applied.
     *
     *
     *
     * Corresponds to "Total mute eligible impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MUTE_ELIGIBLE_IMPRESSIONS = 409;</code>
     */
    MUTE_ELIGIBLE_IMPRESSIONS(257, 409),
    /**
     *
     *
     * <pre>
     * The total number of opportunities from impressions and errors.
     *
     *
     *
     * Corresponds to "Total opportunities" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>OPPORTUNITIES = 463;</code>
     */
    OPPORTUNITIES(258, 463),
    /**
     *
     *
     * <pre>
     * The number of impressions that were overdelivered.
     *
     *
     *
     * Corresponds to "Total overdelivered impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>OVERDELIVERED_IMPRESSIONS = 432;</code>
     */
    OVERDELIVERED_IMPRESSIONS(259, 432),
    /**
     *
     *
     * <pre>
     * The number of filled pod requests (filled by partner or Google) in
     *  partner sales.
     *
     *
     *
     * Corresponds to "Filled pod requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_FILLED_POD_REQUESTS = 135;</code>
     */
    PARTNER_SALES_FILLED_POD_REQUESTS(260, 135),
    /**
     *
     *
     * <pre>
     * The percent of filled requests to total ad requests in
     *  partner sales.
     *
     *
     *
     * Corresponds to "Fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PARTNER_SALES_FILL_RATE = 136;</code>
     */
    PARTNER_SALES_FILL_RATE(261, 136),
    /**
     *
     *
     * <pre>
     * The percent of partner filled requests to total ad requests
     *  in partner sales.
     *
     *
     *
     * Corresponds to "Partner match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PARTNER_SALES_PARTNER_MATCH_RATE = 137;</code>
     */
    PARTNER_SALES_PARTNER_MATCH_RATE(262, 137),
    /**
     *
     *
     * <pre>
     * The number of queries eligible for partner sales.
     *
     *
     *
     * Corresponds to "Total partner sales ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_QUERIES = 132;</code>
     */
    PARTNER_SALES_QUERIES(263, 132),
    /**
     *
     *
     * <pre>
     * The number of partner unfilled impressions in partner sales.
     *  If a pod request is not filled by partner but filled by Google, this
     *  metric will still count 1.
     *
     *
     *
     * Corresponds to "Partner unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_UNFILLED_IMPRESSIONS = 133;</code>
     */
    PARTNER_SALES_UNFILLED_IMPRESSIONS(264, 133),
    /**
     *
     *
     * <pre>
     * The number of partner unmatched queries in partner sales.
     *  If an ad request is not filled by partner but filled by Google, this
     *  metric will still count 1.
     *
     *
     *
     * Corresponds to "Partner unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_UNMATCHED_QUERIES = 134;</code>
     */
    PARTNER_SALES_UNMATCHED_QUERIES(265, 134),
    /**
     *
     *
     * <pre>
     * The number of code served sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold code served count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_CODE_SERVED = 125;</code>
     */
    PARTNER_SOLD_CODE_SERVED(266, 125),
    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold impressions (co-viewed)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_COVIEWED_IMPRESSIONS = 124;</code>
     */
    PARTNER_SOLD_COVIEWED_IMPRESSIONS(267, 124),
    /**
     *
     *
     * <pre>
     * The number of impressions sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_IMPRESSIONS = 123;</code>
     */
    PARTNER_SOLD_IMPRESSIONS(268, 123),
    /**
     *
     *
     * <pre>
     * The total number of ad requests eligible for programmatic inventory,
     *  including Programmatic Guaranteed, Preferred Deals, backfill, and open
     *  auction.
     *
     *
     *
     * Corresponds to "Programmatic eligible ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PROGRAMMATIC_ELIGIBLE_AD_REQUESTS = 177;</code>
     */
    PROGRAMMATIC_ELIGIBLE_AD_REQUESTS(269, 177),
    /**
     *
     *
     * <pre>
     * The number of programmatic responses served divided by the number of
     *  programmatic eligible ad requests. Includes Ad Exchange, Open Bidding,
     *  and Preferred Deals.
     *
     *
     *
     * Corresponds to "Programmatic match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PROGRAMMATIC_MATCH_RATE = 178;</code>
     */
    PROGRAMMATIC_MATCH_RATE(270, 178),
    /**
     *
     *
     * <pre>
     * Total number of ad responses served from programmatic demand sources.
     *  Includes Ad Exchange, Open Bidding, and Preferred Deals.
     *
     *  Differs from AD_EXCHANGE_RESPONSES_SERVED, which doesn't include Open
     *  Bidding ad requests.
     *
     *
     *
     * Corresponds to "Programmatic responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PROGRAMMATIC_RESPONSES_SERVED = 176;</code>
     */
    PROGRAMMATIC_RESPONSES_SERVED(271, 176),
    /**
     *
     *
     * <pre>
     * Number of impressions for reach reports.
     *
     *
     *
     * Corresponds to "Total reach impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>REACH_IMPRESSIONS = 416;</code>
     */
    REACH_IMPRESSIONS(272, 416),
    /**
     *
     *
     * <pre>
     * The total number of times that an ad is served by the ad server including
     *  dynamic allocation.
     *
     *
     *
     * Corresponds to "Total responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RESPONSES_SERVED = 39;</code>
     */
    RESPONSES_SERVED(273, 39),
    /**
     *
     *
     * <pre>
     * Retention of users in Google Analytics
     *
     *
     *
     * Corresponds to "Retention" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RETENTION = 238;</code>
     */
    RETENTION(274, 238),
    /**
     *
     *
     * <pre>
     * Total amount of CPM, CPC, and CPD revenue based on the number of units
     *  served by the Google Ad Manager server, AdSense, Ad Exchange, and
     *  third-party Mediation networks.
     *
     *
     *
     * Corresponds to "Total revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE = 36;</code>
     */
    REVENUE(275, 36),
    /**
     *
     *
     * <pre>
     * The total revenue accrued in the child network's own account but paid to
     *  their parent network through auto-payment. This metric is only relevant
     *  for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Total revenue paid through MCM auto-payment" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 214;</code>
     */
    REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT(276, 214),
    /**
     *
     *
     * <pre>
     * Total amount of revenue (excluding CPD) based on the number of units
     *  served by the Google Ad Manager server, AdSense, Ad Exchange, and
     *  third-party Mediation networks.
     *
     *
     *
     * Corresponds to "Total CPM and CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE_WITHOUT_CPD = 4;</code>
     */
    REVENUE_WITHOUT_CPD(277, 4),
    /**
     *
     *
     * <pre>
     * The number of rewards granted to users from watching ads.
     *
     *
     *
     * Corresponds to "Total rewards granted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>REWARDS_GRANTED = 413;</code>
     */
    REWARDS_GRANTED(278, 413),
    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that each rich media ad is
     *  displayed to users.
     *
     *
     *
     * Corresponds to "Average display time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_AVERAGE_DISPLAY_TIME = 587;</code>
     */
    RICH_MEDIA_AVERAGE_DISPLAY_TIME(279, 587),
    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that a user interacts with a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Average interaction time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_AVERAGE_INTERACTION_TIME = 588;</code>
     */
    RICH_MEDIA_AVERAGE_INTERACTION_TIME(280, 588),
    /**
     *
     *
     * <pre>
     * The total number of times a backup image is served in place of a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Backup image impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_BACKUP_IMAGES = 589;</code>
     */
    RICH_MEDIA_BACKUP_IMAGES(281, 589),
    /**
     *
     *
     * <pre>
     * The number of times a user interacts with a specific part of a rich media
     *  ad.
     *
     *
     *
     * Corresponds to "Custom event - count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_CUSTOM_EVENT_COUNT = 599;</code>
     */
    RICH_MEDIA_CUSTOM_EVENT_COUNT(282, 599),
    /**
     *
     *
     * <pre>
     * The amount of time (in seconds) that a user interacts with a specific
     *  part of a rich media ad.
     *
     *
     *
     * Corresponds to "Custom event - time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_CUSTOM_EVENT_TIME = 600;</code>
     */
    RICH_MEDIA_CUSTOM_EVENT_TIME(283, 600),
    /**
     *
     *
     * <pre>
     * The amount of time (in seconds) that each rich media ad is displayed to
     *  users.
     *
     *
     *
     * Corresponds to "Total display time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_DISPLAY_TIME = 590;</code>
     */
    RICH_MEDIA_DISPLAY_TIME(284, 590),
    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that an expanding ad is viewed in
     *  an expanded state.
     *
     *
     *
     * Corresponds to "Average expanding time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_EXPANDING_TIME = 591;</code>
     */
    RICH_MEDIA_EXPANDING_TIME(285, 591),
    /**
     *
     *
     * <pre>
     * The number of times an expanding ad was expanded.
     *
     *
     *
     * Corresponds to "Total expansions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_EXPANSIONS = 592;</code>
     */
    RICH_MEDIA_EXPANSIONS(286, 592),
    /**
     *
     *
     * <pre>
     * The number of times a user opens a rich media ad in full screen mode.
     *
     *
     *
     * Corresponds to "Full-screen impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_FULL_SCREEN_IMPRESSIONS = 593;</code>
     */
    RICH_MEDIA_FULL_SCREEN_IMPRESSIONS(287, 593),
    /**
     *
     *
     * <pre>
     * The number of times that a user interacts with a rich media ad.
     *
     *
     *
     * Corresponds to "Total interactions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_COUNT = 594;</code>
     */
    RICH_MEDIA_INTERACTION_COUNT(288, 594),
    /**
     *
     *
     * <pre>
     * The ratio of rich media ad interactions to the number of times the ad
     *  was displayed.
     *
     *
     *
     * Corresponds to "Interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_RATE = 595;</code>
     */
    RICH_MEDIA_INTERACTION_RATE(289, 595),
    /**
     *
     *
     * <pre>
     * The total amount of time (in seconds) that a user interacts with a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Interaction time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_TIME = 596;</code>
     */
    RICH_MEDIA_INTERACTION_TIME(290, 596),
    /**
     *
     *
     * <pre>
     * The number of impressions where a user interacted with a rich media ad.
     *
     *
     *
     * Corresponds to "Interactive impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTIVE_IMPRESSIONS = 597;</code>
     */
    RICH_MEDIA_INTERACTIVE_IMPRESSIONS(291, 597),
    /**
     *
     *
     * <pre>
     * The number of times that a user manually closes a rich media ad.
     *
     *
     *
     * Corresponds to "Manual closes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_MANUAL_CLOSES = 598;</code>
     */
    RICH_MEDIA_MANUAL_CLOSES(292, 598),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was fully played.
     *
     *
     *
     * Corresponds to "Rich media video completes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_COMPLETES = 503;</code>
     */
    RICH_MEDIA_VIDEO_COMPLETES(293, 503),
    /**
     *
     *
     * <pre>
     * The number of times a user clicked on the graphical controls of a video
     *  player.
     *
     *
     *
     * Corresponds to "Rich media total video interactions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_INTERACTIONS = 505;</code>
     */
    RICH_MEDIA_VIDEO_INTERACTIONS(294, 505),
    /**
     *
     *
     * <pre>
     * The ratio of video interactions to video plays. Represented as a
     *  percentage.
     *
     *
     *
     * Corresponds to "Rich media video interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_INTERACTION_RATE = 504;</code>
     */
    RICH_MEDIA_VIDEO_INTERACTION_RATE(295, 504),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was played up to midpoint.
     *
     *
     *
     * Corresponds to "Rich media video midpoints" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_MIDPOINTS = 506;</code>
     */
    RICH_MEDIA_VIDEO_MIDPOINTS(296, 506),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was muted.
     *
     *
     *
     * Corresponds to "Rich media video mutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_MUTES = 507;</code>
     */
    RICH_MEDIA_VIDEO_MUTES(297, 507),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was paused.
     *
     *
     *
     * Corresponds to "Rich media video pauses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_PAUSES = 508;</code>
     */
    RICH_MEDIA_VIDEO_PAUSES(298, 508),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was played.
     *
     *
     *
     * Corresponds to "Rich media video plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_PLAYS = 509;</code>
     */
    RICH_MEDIA_VIDEO_PLAYS(299, 509),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was restarted.
     *
     *
     *
     * Corresponds to "Rich media video replays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_REPLAYS = 510;</code>
     */
    RICH_MEDIA_VIDEO_REPLAYS(300, 510),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was stopped.
     *
     *
     *
     * Corresponds to "Rich media video stops" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_STOPS = 511;</code>
     */
    RICH_MEDIA_VIDEO_STOPS(301, 511),
    /**
     *
     *
     * <pre>
     * The number of times a rich media video was unmuted.
     *
     *
     *
     * Corresponds to "Rich media video unmutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_UNMUTES = 512;</code>
     */
    RICH_MEDIA_VIDEO_UNMUTES(302, 512),
    /**
     *
     *
     * <pre>
     * The percentage of a video watched by a user.
     *
     *
     *
     * Corresponds to "Rich media video view rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_VIEW_RATE = 513;</code>
     */
    RICH_MEDIA_VIDEO_VIEW_RATE(303, 513),
    /**
     *
     *
     * <pre>
     * The average amount of time(seconds) that a rich media video was viewed
     *  per view.
     *
     *
     *
     * Corresponds to "Rich media video average view time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_VIEW_TIME = 514;</code>
     */
    RICH_MEDIA_VIDEO_VIEW_TIME(304, 514),
    /**
     *
     *
     * <pre>
     * The number of forecasted impressions not reserved by any line item.
     *
     *
     *
     * Corresponds to "Available impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_AVAILABLE_IMPRESSIONS = 477;</code>
     */
    SELL_THROUGH_AVAILABLE_IMPRESSIONS(305, 477),
    /**
     *
     *
     * <pre>
     * The total number of forecasted impressions.
     *
     *
     *
     * Corresponds to "Forecasted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_FORECASTED_IMPRESSIONS = 478;</code>
     */
    SELL_THROUGH_FORECASTED_IMPRESSIONS(306, 478),
    /**
     *
     *
     * <pre>
     * The number of forecasted impressions reserved by line items.
     *
     *
     *
     * Corresponds to "Reserved impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_RESERVED_IMPRESSIONS = 479;</code>
     */
    SELL_THROUGH_RESERVED_IMPRESSIONS(307, 479),
    /**
     *
     *
     * <pre>
     * The fraction of forecasted impressions reserved by line items.
     *
     *
     *
     * Corresponds to "Sell-through rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>SELL_THROUGH_SELL_THROUGH_RATE = 480;</code>
     */
    SELL_THROUGH_SELL_THROUGH_RATE(308, 480),
    /**
     *
     *
     * <pre>
     * The average latency in milliseconds across all server-side unwrapping
     *  callout requests. There is no special handling for error or timeout
     *  responses. This reflects the entire chain of a parent callout request,
     *  which may result in multiple child callouts. This metric is not sliced
     *  by child callout dimensions.
     *
     *
     *
     * Corresponds to "Server-side unwrapping average latency (milliseconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS = 434;</code>
     */
    SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS(309, 434),
    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callout requests.
     *
     *
     *
     * Corresponds to "Server-side unwrapping callouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_CALLOUTS = 435;</code>
     */
    SERVER_SIDE_UNWRAPPING_CALLOUTS(310, 435),
    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that returned an
     *  empty response. Timeouts are not considered empty responses.
     *
     *
     *
     * Corresponds to "Server-side unwrapping empty responses" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES = 436;</code>
     */
    SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES(311, 436),
    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that returned an
     *  error response. Timeouts and empty responses are not considered errors.
     *
     *
     *
     * Corresponds to "Server-side unwrapping error responses" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES = 437;</code>
     */
    SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES(312, 437),
    /**
     *
     *
     * <pre>
     * The total number of successfully unwrapped, non-empty server-side
     *  wrapping callouts. Successful unwrapping does not indicate that the
     *  resulting creative was served.
     *
     *
     *
     * Corresponds to "Server-side unwrapping successful responses" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES = 438;</code>
     */
    SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES(313, 438),
    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that timed out before
     *  returning a response.
     *
     *
     *
     * Corresponds to "Server-side unwrapping timeouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_TIMEOUTS = 439;</code>
     */
    SERVER_SIDE_UNWRAPPING_TIMEOUTS(314, 439),
    /**
     *
     *
     * <pre>
     * Count of sessions from Google Analytics.
     *
     *
     *
     * Corresponds to "Sessions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SESSIONS = 239;</code>
     */
    SESSIONS(315, 239),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 0 - 500ms (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT = 455;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT(316, 455),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 1s - 2s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT = 457;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT(317, 457),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 2s - 4s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT = 458;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT(318, 458),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 4s - 8s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT = 459;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT(319, 459),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 500ms - 1s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT = 456;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT(320, 456),
    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time &gt;8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT = 460;</code>
     */
    TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT(321, 460),
    /**
     *
     *
     * <pre>
     * The total number of clicks delivered including line item-level dynamic
     *  allocation by explicit custom criteria targeting.
     *
     *
     *
     * Corresponds to "Total targeted clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>TARGETED_CLICKS = 276;</code>
     */
    TARGETED_CLICKS(322, 276),
    /**
     *
     *
     * <pre>
     * The total number of impressions delivered including line item-level
     *  dynamic allocation by explicit custom criteria targeting.
     *
     *
     *
     * Corresponds to "Total targeted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>TARGETED_IMPRESSIONS = 277;</code>
     */
    TARGETED_IMPRESSIONS(323, 277),
    /**
     *
     *
     * <pre>
     * The total number of missed impressions due to the ad servers' inability
     *  to find ads to serve including dynamic allocation.
     *
     *
     *
     * Corresponds to "Unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNFILLED_IMPRESSIONS = 45;</code>
     */
    UNFILLED_IMPRESSIONS(324, 45),
    /**
     *
     *
     * <pre>
     * The total number of unique users who viewed the ad.
     *
     *
     *
     * Corresponds to "Total unique visitors" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNIQUE_VISITORS = 417;</code>
     */
    UNIQUE_VISITORS(325, 417),
    /**
     *
     *
     * <pre>
     * The number of impressions impacted by Chrome Ads Intervention due to CPU
     *  usage.
     *
     *
     *
     * Corresponds to "Total unloaded impressions due to CPU" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNLOADED_IMPRESSIONS_DUE_TO_CPU = 408;</code>
     */
    UNLOADED_IMPRESSIONS_DUE_TO_CPU(326, 408),
    /**
     *
     *
     * <pre>
     * The number of impressions impacted by Chrome Ads Intervention due to
     *  network usage.
     *
     *
     *
     * Corresponds to "Total unloaded impressions due to Network" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNLOADED_IMPRESSIONS_DUE_TO_NETWORK = 406;</code>
     */
    UNLOADED_IMPRESSIONS_DUE_TO_NETWORK(327, 406),
    /**
     *
     *
     * <pre>
     * The total number of times that an ad is not returned by the ad server.
     *
     *
     *
     * Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNMATCHED_AD_REQUESTS = 43;</code>
     */
    UNMATCHED_AD_REQUESTS(328, 43),
    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to other reasons.
     *
     *
     *
     * Corresponds to "Other non-viewable impression reasons (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_OTHER_PERCENT = 550;</code>
     */
    UNVIEWED_REASON_OTHER_PERCENT(329, 550),
    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to slot never entered
     *  viewport.
     *
     *
     *
     * Corresponds to "Slot never entered viewport (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT = 553;</code>
     */
    UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT(330, 553),
    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to scrolled past before ad
     *  filled.
     *
     *
     *
     * Corresponds to "User scrolled before ad filled (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT = 551;</code>
     */
    UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT(331, 551),
    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to scrolled past before ad
     *  loaded.
     *
     *
     *
     * Corresponds to "User scrolled/navigated before ad loaded (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT = 552;</code>
     */
    UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT(332, 552),
    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to insufficient time on
     *  screen.
     *
     *
     *
     * Corresponds to "User scrolled/navigated before 1 second (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT = 549;</code>
     */
    UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT(333, 549),
    /**
     *
     *
     * <pre>
     * Time of users interacting with web site or mobile app from Google
     *  Analytics in seconds.
     *
     *
     *
     * Corresponds to "User engagement duration (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_ENGAGEMENT_DURATION_IN_SECONDS = 240;</code>
     */
    USER_ENGAGEMENT_DURATION_IN_SECONDS(334, 240),
    /**
     *
     *
     * <pre>
     * Fraction of page views where users had ad blocker extensions installed.
     *  Includes only Desktop page views.
     *
     *
     *
     * Corresponds to "Ad blocking extension rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE = 486;</code>
     */
    USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE(335, 486),
    /**
     *
     *
     * <pre>
     * Number of ad-blocking messages shown in the selected date range that
     *  resulted in users adding the site to their allowlist to view ads
     *
     *
     *
     * Corresponds to "Ad blocking recovery message conversions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT = 487;</code>
     */
    USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT(336, 487),
    /**
     *
     *
     * <pre>
     * Number of times an ad blocking recovery message was shown to users.
     *
     *
     *
     * Corresponds to "Ad blocking recovery messages shown" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN = 488;</code>
     */
    USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN(337, 488),
    /**
     *
     *
     * <pre>
     * The number of page views generated by users with an ad blocking extension
     *  installed who were shown the ad blocking recovery message and later
     *  allowed ads.
     *
     *
     *
     * Corresponds to "Allow-ads page views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_ALLOW_ADS_PAGEVIEWS = 489;</code>
     */
    USER_MESSAGES_ALLOW_ADS_PAGEVIEWS(338, 489),
    /**
     *
     *
     * <pre>
     * Number of times a US state regulations message was shown to users.
     *
     *
     *
     * Corresponds to "US states messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_CCPA_MESSAGES_SHOWN = 490;</code>
     */
    USER_MESSAGES_CCPA_MESSAGES_SHOWN(339, 490),
    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts that were triggered by an IDFA message (IDFA
     *  messages can be IDFA explainers or GDPR messages).
     *
     *
     *
     * Corresponds to "IDFA ATT alerts shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN = 491;</code>
     */
    USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN(340, 491),
    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to allow tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT consent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_CONSENT = 492;</code>
     */
    USER_MESSAGES_IDFA_ATT_CONSENT(341, 492),
    /**
     *
     *
     * <pre>
     * Percentage of iOS ATT alerts triggered by the IDFA message where the
     *  outcome was to allow tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT consent rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_CONSENT_RATE = 493;</code>
     */
    USER_MESSAGES_IDFA_ATT_CONSENT_RATE(342, 493),
    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to deny tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT decline consent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT = 494;</code>
     */
    USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT(343, 494),
    /**
     *
     *
     * <pre>
     * Percentage of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to deny tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT decline rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_DECLINE_RATE = 495;</code>
     */
    USER_MESSAGES_IDFA_ATT_DECLINE_RATE(344, 495),
    /**
     *
     *
     * <pre>
     * Number of times an IDFA explainer message was shown to users.
     *
     *
     *
     * Corresponds to "IDFA explainers shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_EXPLAINERS_SHOWN = 496;</code>
     */
    USER_MESSAGES_IDFA_EXPLAINERS_SHOWN(345, 496),
    /**
     *
     *
     * <pre>
     * Number of times a European regulations message was shown immediately
     *  before the iOS ATT alert.
     *
     *
     *
     * Corresponds to "IDFA IAB messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN = 497;</code>
     */
    USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN(346, 497),
    /**
     *
     *
     * <pre>
     * Number of IDFA explainer messages where the user didn't choose anything.
     *
     *
     *
     * Corresponds to "IDFA no decision" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_NO_DECISION = 498;</code>
     */
    USER_MESSAGES_IDFA_NO_DECISION(347, 498),
    /**
     *
     *
     * <pre>
     * Number of times an Offerwall message was shown to users.
     *
     *
     *
     * Corresponds to "Offerwall messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN = 121;</code>
     */
    USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN(348, 121),
    /**
     *
     *
     * <pre>
     * The number of messages where the user gained an entitlement.
     *
     *
     *
     * Corresponds to "Monetized Offerwall engagements" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS = 122;</code>
     */
    USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS(349, 122),
    /**
     *
     *
     * <pre>
     * The number of pages viewed by users after gaining an entitlement. Only
     *  counts pages included for Offerwall.
     *
     *
     *
     * Corresponds to "Post-offerwall page views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS = 499;</code>
     */
    USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS(350, 499),
    /**
     *
     *
     * <pre>
     * Revenue earned through Offerwall, including Rewarded ad revenue and
     *  third-party integrations.
     *
     *
     *
     * Corresponds to "Estimated Offerwall revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>USER_MESSAGES_TOTAL_ESTIMATED_REVENUE = 500;</code>
     */
    USER_MESSAGES_TOTAL_ESTIMATED_REVENUE(351, 500),
    /**
     *
     *
     * <pre>
     * Number of times an ads personalization controls message was shown to
     *  users.
     *
     *
     *
     * Corresponds to "Ads personalization messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_UPTC_MESSAGES_SHOWN = 501;</code>
     */
    USER_MESSAGES_UPTC_MESSAGES_SHOWN(352, 501),
    /**
     *
     *
     * <pre>
     * Percentage of ads personalization controls messages where users chose the
     *  opt-out option.
     *
     *
     *
     * Corresponds to "Personalization opt-out ratio" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO = 502;</code>
     */
    USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO(353, 502),
    /**
     *
     *
     * <pre>
     * The number of errors of type 100 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 100 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_100_COUNT = 180;</code>
     */
    VIDEO_ERROR_100_COUNT(354, 180),
    /**
     *
     *
     * <pre>
     * The number of errors of type 101 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 101 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_101_COUNT = 181;</code>
     */
    VIDEO_ERROR_101_COUNT(355, 181),
    /**
     *
     *
     * <pre>
     * The number of errors of type 102 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 102 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_102_COUNT = 182;</code>
     */
    VIDEO_ERROR_102_COUNT(356, 182),
    /**
     *
     *
     * <pre>
     * The number of errors of type 200 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 200 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_200_COUNT = 183;</code>
     */
    VIDEO_ERROR_200_COUNT(357, 183),
    /**
     *
     *
     * <pre>
     * The number of errors of type 201 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 201 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_201_COUNT = 184;</code>
     */
    VIDEO_ERROR_201_COUNT(358, 184),
    /**
     *
     *
     * <pre>
     * The number of errors of type 202 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 202 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_202_COUNT = 185;</code>
     */
    VIDEO_ERROR_202_COUNT(359, 185),
    /**
     *
     *
     * <pre>
     * The number of errors of type 203 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 203 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_203_COUNT = 186;</code>
     */
    VIDEO_ERROR_203_COUNT(360, 186),
    /**
     *
     *
     * <pre>
     * The number of errors of type 300 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 300 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_300_COUNT = 187;</code>
     */
    VIDEO_ERROR_300_COUNT(361, 187),
    /**
     *
     *
     * <pre>
     * The number of errors of type 301 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 301 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_301_COUNT = 188;</code>
     */
    VIDEO_ERROR_301_COUNT(362, 188),
    /**
     *
     *
     * <pre>
     * The number of errors of type 302 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 302 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_302_COUNT = 189;</code>
     */
    VIDEO_ERROR_302_COUNT(363, 189),
    /**
     *
     *
     * <pre>
     * The number of errors of type 303 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 303 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_303_COUNT = 190;</code>
     */
    VIDEO_ERROR_303_COUNT(364, 190),
    /**
     *
     *
     * <pre>
     * The number of errors of type 400 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 400 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_400_COUNT = 191;</code>
     */
    VIDEO_ERROR_400_COUNT(365, 191),
    /**
     *
     *
     * <pre>
     * The number of errors of type 401 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 401 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_401_COUNT = 192;</code>
     */
    VIDEO_ERROR_401_COUNT(366, 192),
    /**
     *
     *
     * <pre>
     * The number of errors of type 402 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 402 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_402_COUNT = 193;</code>
     */
    VIDEO_ERROR_402_COUNT(367, 193),
    /**
     *
     *
     * <pre>
     * The number of errors of type 403 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 403 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_403_COUNT = 194;</code>
     */
    VIDEO_ERROR_403_COUNT(368, 194),
    /**
     *
     *
     * <pre>
     * The number of errors of type 405 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 405 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_405_COUNT = 195;</code>
     */
    VIDEO_ERROR_405_COUNT(369, 195),
    /**
     *
     *
     * <pre>
     * The number of errors of type 406 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 406 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_406_COUNT = 196;</code>
     */
    VIDEO_ERROR_406_COUNT(370, 196),
    /**
     *
     *
     * <pre>
     * The number of errors of type 407 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 407 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_407_COUNT = 197;</code>
     */
    VIDEO_ERROR_407_COUNT(371, 197),
    /**
     *
     *
     * <pre>
     * The number of errors of type 408 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 408 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_408_COUNT = 198;</code>
     */
    VIDEO_ERROR_408_COUNT(372, 198),
    /**
     *
     *
     * <pre>
     * The number of errors of type 409 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 409 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_409_COUNT = 199;</code>
     */
    VIDEO_ERROR_409_COUNT(373, 199),
    /**
     *
     *
     * <pre>
     * The number of errors of type 410 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 410 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_410_COUNT = 200;</code>
     */
    VIDEO_ERROR_410_COUNT(374, 200),
    /**
     *
     *
     * <pre>
     * The number of errors of type 500 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 500 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_500_COUNT = 201;</code>
     */
    VIDEO_ERROR_500_COUNT(375, 201),
    /**
     *
     *
     * <pre>
     * The number of errors of type 501 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 501 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_501_COUNT = 202;</code>
     */
    VIDEO_ERROR_501_COUNT(376, 202),
    /**
     *
     *
     * <pre>
     * The number of errors of type 502 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 502 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_502_COUNT = 203;</code>
     */
    VIDEO_ERROR_502_COUNT(377, 203),
    /**
     *
     *
     * <pre>
     * The number of errors of type 503 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 503 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_503_COUNT = 204;</code>
     */
    VIDEO_ERROR_503_COUNT(378, 204),
    /**
     *
     *
     * <pre>
     * The number of errors of type 600 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 600 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_600_COUNT = 205;</code>
     */
    VIDEO_ERROR_600_COUNT(379, 205),
    /**
     *
     *
     * <pre>
     * The number of errors of type 601 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 601 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_601_COUNT = 206;</code>
     */
    VIDEO_ERROR_601_COUNT(380, 206),
    /**
     *
     *
     * <pre>
     * The number of errors of type 602 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 602 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_602_COUNT = 207;</code>
     */
    VIDEO_ERROR_602_COUNT(381, 207),
    /**
     *
     *
     * <pre>
     * The number of errors of type 603 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 603 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_603_COUNT = 208;</code>
     */
    VIDEO_ERROR_603_COUNT(382, 208),
    /**
     *
     *
     * <pre>
     * The number of errors of type 604 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 604 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_604_COUNT = 209;</code>
     */
    VIDEO_ERROR_604_COUNT(383, 209),
    /**
     *
     *
     * <pre>
     * The number of errors of type 900 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 900 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_900_COUNT = 210;</code>
     */
    VIDEO_ERROR_900_COUNT(384, 210),
    /**
     *
     *
     * <pre>
     * The number of errors of type 901 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 901 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_901_COUNT = 211;</code>
     */
    VIDEO_ERROR_901_COUNT(385, 211),
    /**
     *
     *
     * <pre>
     * The number of user interactions with a video, on average, such as pause,
     *  full screen, mute, etc.
     *
     *
     *
     * Corresponds to "Average interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE = 92;</code>
     */
    VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE(386, 92),
    /**
     *
     *
     * <pre>
     * The number of times a user collapses a video, either to its original size
     *  or to a different size.
     *
     *
     *
     * Corresponds to "Collapses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_COLLAPSES = 93;</code>
     */
    VIDEO_INTERACTION_COLLAPSES(387, 93),
    /**
     *
     *
     * <pre>
     * The number of times a user expands a video.
     *
     *
     *
     * Corresponds to "Expands" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_EXPANDS = 95;</code>
     */
    VIDEO_INTERACTION_EXPANDS(388, 95),
    /**
     *
     *
     * <pre>
     * The number of times ad clip played in full screen mode.
     *
     *
     *
     * Corresponds to "Full screens" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_FULL_SCREENS = 96;</code>
     */
    VIDEO_INTERACTION_FULL_SCREENS(389, 96),
    /**
     *
     *
     * <pre>
     * The number of times video player was in mute state during play of ad
     *  clip.
     *
     *
     *
     * Corresponds to "Mutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_MUTES = 97;</code>
     */
    VIDEO_INTERACTION_MUTES(390, 97),
    /**
     *
     *
     * <pre>
     * The number of times user paused ad clip.
     *
     *
     *
     * Corresponds to "Pauses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_PAUSES = 98;</code>
     */
    VIDEO_INTERACTION_PAUSES(391, 98),
    /**
     *
     *
     * <pre>
     * The number of times the user unpaused the video.
     *
     *
     *
     * Corresponds to "Resumes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_RESUMES = 99;</code>
     */
    VIDEO_INTERACTION_RESUMES(392, 99),
    /**
     *
     *
     * <pre>
     * The number of times a user rewinds the video.
     *
     *
     *
     * Corresponds to "Rewinds" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_REWINDS = 100;</code>
     */
    VIDEO_INTERACTION_REWINDS(393, 100),
    /**
     *
     *
     * <pre>
     * The number of times a user unmutes the video.
     *
     *
     *
     * Corresponds to "Unmutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_UNMUTES = 101;</code>
     */
    VIDEO_INTERACTION_UNMUTES(394, 101),
    /**
     *
     *
     * <pre>
     * The number of times a skippable video is skipped.
     *
     *
     *
     * Corresponds to "Skips" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_VIDEO_SKIPS = 102;</code>
     */
    VIDEO_INTERACTION_VIDEO_SKIPS(395, 102),
    /**
     *
     *
     * <pre>
     * The number of views for monetizable video content.
     *
     *
     *
     * Corresponds to "Monetizable content views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_MONETIZABLE_CONTENT_VIEWS = 601;</code>
     */
    VIDEO_MONETIZABLE_CONTENT_VIEWS(396, 601),
    /**
     *
     *
     * <pre>
     * The number of total creative serves in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total creative serves" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_CREATIVE_SERVES = 139;</code>
     */
    VIDEO_REAL_TIME_CREATIVE_SERVES(397, 139),
    /**
     *
     *
     * <pre>
     * The number of errors of type 100 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 100 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_100_COUNT = 143;</code>
     */
    VIDEO_REAL_TIME_ERROR_100_COUNT(398, 143),
    /**
     *
     *
     * <pre>
     * The number of errors of type 101 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 101 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_101_COUNT = 144;</code>
     */
    VIDEO_REAL_TIME_ERROR_101_COUNT(399, 144),
    /**
     *
     *
     * <pre>
     * The number of errors of type 102 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 102 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_102_COUNT = 145;</code>
     */
    VIDEO_REAL_TIME_ERROR_102_COUNT(400, 145),
    /**
     *
     *
     * <pre>
     * The number of errors of type 200 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 200 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_200_COUNT = 146;</code>
     */
    VIDEO_REAL_TIME_ERROR_200_COUNT(401, 146),
    /**
     *
     *
     * <pre>
     * The number of errors of type 201 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 201 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_201_COUNT = 147;</code>
     */
    VIDEO_REAL_TIME_ERROR_201_COUNT(402, 147),
    /**
     *
     *
     * <pre>
     * The number of errors of type 202 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 202 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_202_COUNT = 148;</code>
     */
    VIDEO_REAL_TIME_ERROR_202_COUNT(403, 148),
    /**
     *
     *
     * <pre>
     * The number of errors of type 203 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 203 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_203_COUNT = 149;</code>
     */
    VIDEO_REAL_TIME_ERROR_203_COUNT(404, 149),
    /**
     *
     *
     * <pre>
     * The number of errors of type 300 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 300 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_300_COUNT = 150;</code>
     */
    VIDEO_REAL_TIME_ERROR_300_COUNT(405, 150),
    /**
     *
     *
     * <pre>
     * The number of errors of type 301 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 301 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_301_COUNT = 151;</code>
     */
    VIDEO_REAL_TIME_ERROR_301_COUNT(406, 151),
    /**
     *
     *
     * <pre>
     * The number of errors of type 302 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 302 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_302_COUNT = 152;</code>
     */
    VIDEO_REAL_TIME_ERROR_302_COUNT(407, 152),
    /**
     *
     *
     * <pre>
     * The number of errors of type 303 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 303 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_303_COUNT = 153;</code>
     */
    VIDEO_REAL_TIME_ERROR_303_COUNT(408, 153),
    /**
     *
     *
     * <pre>
     * The number of errors of type 400 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 400 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_400_COUNT = 154;</code>
     */
    VIDEO_REAL_TIME_ERROR_400_COUNT(409, 154),
    /**
     *
     *
     * <pre>
     * The number of errors of type 401 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 401 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_401_COUNT = 155;</code>
     */
    VIDEO_REAL_TIME_ERROR_401_COUNT(410, 155),
    /**
     *
     *
     * <pre>
     * The number of errors of type 402 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 402 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_402_COUNT = 156;</code>
     */
    VIDEO_REAL_TIME_ERROR_402_COUNT(411, 156),
    /**
     *
     *
     * <pre>
     * The number of errors of type 403 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 403 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_403_COUNT = 157;</code>
     */
    VIDEO_REAL_TIME_ERROR_403_COUNT(412, 157),
    /**
     *
     *
     * <pre>
     * The number of errors of type 405 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 405 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_405_COUNT = 158;</code>
     */
    VIDEO_REAL_TIME_ERROR_405_COUNT(413, 158),
    /**
     *
     *
     * <pre>
     * The number of errors of type 406 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 406 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_406_COUNT = 159;</code>
     */
    VIDEO_REAL_TIME_ERROR_406_COUNT(414, 159),
    /**
     *
     *
     * <pre>
     * The number of errors of type 407 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 407 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_407_COUNT = 160;</code>
     */
    VIDEO_REAL_TIME_ERROR_407_COUNT(415, 160),
    /**
     *
     *
     * <pre>
     * The number of errors of type 408 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 408 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_408_COUNT = 161;</code>
     */
    VIDEO_REAL_TIME_ERROR_408_COUNT(416, 161),
    /**
     *
     *
     * <pre>
     * The number of errors of type 409 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 409 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_409_COUNT = 162;</code>
     */
    VIDEO_REAL_TIME_ERROR_409_COUNT(417, 162),
    /**
     *
     *
     * <pre>
     * The number of errors of type 410 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 410 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_410_COUNT = 163;</code>
     */
    VIDEO_REAL_TIME_ERROR_410_COUNT(418, 163),
    /**
     *
     *
     * <pre>
     * The number of errors of type 500 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 500 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_500_COUNT = 164;</code>
     */
    VIDEO_REAL_TIME_ERROR_500_COUNT(419, 164),
    /**
     *
     *
     * <pre>
     * The number of errors of type 501 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 501 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_501_COUNT = 165;</code>
     */
    VIDEO_REAL_TIME_ERROR_501_COUNT(420, 165),
    /**
     *
     *
     * <pre>
     * The number of errors of type 502 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 502 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_502_COUNT = 166;</code>
     */
    VIDEO_REAL_TIME_ERROR_502_COUNT(421, 166),
    /**
     *
     *
     * <pre>
     * The number of errors of type 503 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 503 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_503_COUNT = 167;</code>
     */
    VIDEO_REAL_TIME_ERROR_503_COUNT(422, 167),
    /**
     *
     *
     * <pre>
     * The number of errors of type 600 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 600 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_600_COUNT = 168;</code>
     */
    VIDEO_REAL_TIME_ERROR_600_COUNT(423, 168),
    /**
     *
     *
     * <pre>
     * The number of errors of type 601 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 601 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_601_COUNT = 169;</code>
     */
    VIDEO_REAL_TIME_ERROR_601_COUNT(424, 169),
    /**
     *
     *
     * <pre>
     * The number of errors of type 602 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 602 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_602_COUNT = 170;</code>
     */
    VIDEO_REAL_TIME_ERROR_602_COUNT(425, 170),
    /**
     *
     *
     * <pre>
     * The number of errors of type 603 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 603 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_603_COUNT = 171;</code>
     */
    VIDEO_REAL_TIME_ERROR_603_COUNT(426, 171),
    /**
     *
     *
     * <pre>
     * The number of errors of type 604 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 604 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_604_COUNT = 172;</code>
     */
    VIDEO_REAL_TIME_ERROR_604_COUNT(427, 172),
    /**
     *
     *
     * <pre>
     * The number of errors of type 900 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 900 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_900_COUNT = 173;</code>
     */
    VIDEO_REAL_TIME_ERROR_900_COUNT(428, 173),
    /**
     *
     *
     * <pre>
     * The number of errors of type 901 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 901 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_901_COUNT = 174;</code>
     */
    VIDEO_REAL_TIME_ERROR_901_COUNT(429, 174),
    /**
     *
     *
     * <pre>
     * The number of total impressions in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_IMPRESSIONS = 138;</code>
     */
    VIDEO_REAL_TIME_IMPRESSIONS(430, 138),
    /**
     *
     *
     * <pre>
     * The number of matched queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_MATCHED_QUERIES = 140;</code>
     */
    VIDEO_REAL_TIME_MATCHED_QUERIES(431, 140),
    /**
     *
     *
     * <pre>
     * The number of all errors in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total error count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_TOTAL_ERROR_COUNT = 175;</code>
     */
    VIDEO_REAL_TIME_TOTAL_ERROR_COUNT(432, 175),
    /**
     *
     *
     * <pre>
     * The number of total queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_TOTAL_QUERIES = 142;</code>
     */
    VIDEO_REAL_TIME_TOTAL_QUERIES(433, 142),
    /**
     *
     *
     * <pre>
     * The number of unmatched queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_UNMATCHED_QUERIES = 141;</code>
     */
    VIDEO_REAL_TIME_UNMATCHED_QUERIES(434, 141),
    /**
     *
     *
     * <pre>
     * Number of times that the publisher specified a video ad played
     *  automatically.
     *
     *
     *
     * Corresponds to "Auto-plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AUTO_PLAYS = 103;</code>
     */
    VIDEO_VIEWERSHIP_AUTO_PLAYS(435, 103),
    /**
     *
     *
     * <pre>
     * Average percentage of the video watched by users.
     *
     *
     *
     * Corresponds to "Average view rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE = 104;</code>
     */
    VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE(436, 104),
    /**
     *
     *
     * <pre>
     * Average time(seconds) users watched the video.
     *
     *
     *
     * Corresponds to "Average view time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME = 105;</code>
     */
    VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME(437, 105),
    /**
     *
     *
     * <pre>
     * Number of times that the publisher specified a video ad was clicked to
     *  play.
     *
     *
     *
     * Corresponds to "Click-to-plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_CLICK_TO_PLAYS = 106;</code>
     */
    VIDEO_VIEWERSHIP_CLICK_TO_PLAYS(438, 106),
    /**
     *
     *
     * <pre>
     * The number of times the video played to completion.
     *
     *
     *
     * Corresponds to "Completes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_COMPLETES = 107;</code>
     */
    VIDEO_VIEWERSHIP_COMPLETES(439, 107),
    /**
     *
     *
     * <pre>
     * Percentage of times the video played to the end.
     *
     *
     *
     * Corresponds to "Completion rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_COMPLETION_RATE = 108;</code>
     */
    VIDEO_VIEWERSHIP_COMPLETION_RATE(440, 108),
    /**
     *
     *
     * <pre>
     * The number of engaged views: ad is viewed to completion or for 30s,
     *  whichever comes first.
     *
     *
     *
     * Corresponds to "Engaged views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_ENGAGED_VIEWS = 109;</code>
     */
    VIDEO_VIEWERSHIP_ENGAGED_VIEWS(441, 109),
    /**
     *
     *
     * <pre>
     * The number of times the video played to 25% of its length.
     *
     *
     *
     * Corresponds to "First quartiles" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_FIRST_QUARTILES = 110;</code>
     */
    VIDEO_VIEWERSHIP_FIRST_QUARTILES(442, 110),
    /**
     *
     *
     * <pre>
     * The number of times the video reached its midpoint during play.
     *
     *
     *
     * Corresponds to "Midpoints" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_MIDPOINTS = 111;</code>
     */
    VIDEO_VIEWERSHIP_MIDPOINTS(443, 111),
    /**
     *
     *
     * <pre>
     * The number of times a skip button is shown in video.
     *
     *
     *
     * Corresponds to "Skip buttons shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN = 112;</code>
     */
    VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN(444, 112),
    /**
     *
     *
     * <pre>
     * The number of impressions where the video was played.
     *
     *
     *
     * Corresponds to "Starts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_STARTS = 113;</code>
     */
    VIDEO_VIEWERSHIP_STARTS(445, 113),
    /**
     *
     *
     * <pre>
     * The number of times the video played to 75% of its length.
     *
     *
     *
     * Corresponds to "Third quartiles" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_THIRD_QUARTILES = 114;</code>
     */
    VIDEO_VIEWERSHIP_THIRD_QUARTILES(446, 114),
    /**
     *
     *
     * <pre>
     * The number of times an error occurred, such as a VAST redirect error, a
     *  video playback error, or an invalid response error.
     *
     *
     *
     * Corresponds to "Total error count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT = 115;</code>
     */
    VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT(447, 115),
    /**
     *
     *
     * <pre>
     * The percentage of video error count.
     *
     *
     *
     * Corresponds to "Total error rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE = 94;</code>
     */
    VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE(448, 94),
    /**
     *
     *
     * <pre>
     * Duration of the video creative.
     *
     *
     *
     * Corresponds to "Video length" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_VIDEO_LENGTH = 116;</code>
     */
    VIDEO_VIEWERSHIP_VIDEO_LENGTH(449, 116),
    /**
     *
     *
     * <pre>
     * View-through rate represented as a percentage.
     *
     *
     *
     * Corresponds to "Video view through rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE = 117;</code>
     */
    VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE(450, 117),
    /**
     *
     *
     * <pre>
     * Number of winning bids received from Open Bidding buyers, even when the
     *  winning bid is placed at the end of a mediation for mobile apps chain.
     *
     *
     *
     * Corresponds to "Yield group auctions won" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_AUCTIONS_WON = 80;</code>
     */
    YIELD_GROUP_AUCTIONS_WON(451, 80),
    /**
     *
     *
     * <pre>
     * Number of bids received from Open Bidding buyers, regardless of whether
     *  the returned bid competes in an auction.
     *
     *
     *
     * Corresponds to "Yield group bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_BIDS = 81;</code>
     */
    YIELD_GROUP_BIDS(452, 81),
    /**
     *
     *
     * <pre>
     * Number of bids received from Open Bidding buyers that competed in
     *  the auction.
     *
     *
     *
     * Corresponds to "Yield group bids in auction" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_BIDS_IN_AUCTION = 82;</code>
     */
    YIELD_GROUP_BIDS_IN_AUCTION(453, 82),
    /**
     *
     *
     * <pre>
     * Number of times a yield partner is asked to return bid to fill
     *  a yield group request.
     *
     *
     *
     * Corresponds to "Yield group callouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_CALLOUTS = 83;</code>
     */
    YIELD_GROUP_CALLOUTS(454, 83),
    /**
     *
     *
     * <pre>
     * The estimated net rate for yield groups or individual
     *  yield group partners.
     *
     *
     *
     * Corresponds to "Yield group estimated CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_ESTIMATED_CPM = 88;</code>
     */
    YIELD_GROUP_ESTIMATED_CPM(455, 88),
    /**
     *
     *
     * <pre>
     * Total net revenue earned by a yield group, based upon the yield group
     *  estimated CPM and yield group impressions recorded.
     *
     *
     *
     * Corresponds to "Yield group estimated revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_ESTIMATED_REVENUE = 87;</code>
     */
    YIELD_GROUP_ESTIMATED_REVENUE(456, 87),
    /**
     *
     *
     * <pre>
     * Number of matched yield group requests where a yield partner delivered
     *  their ad to publisher inventory.
     *
     *
     *
     * Corresponds to "Yield group impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_IMPRESSIONS = 85;</code>
     */
    YIELD_GROUP_IMPRESSIONS(457, 85),
    /**
     *
     *
     * <pre>
     * Yield group Mediation fill rate indicating how often a network
     *  fills an ad request.
     *
     *
     *
     * Corresponds to "Yield group mediation fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_FILL_RATE = 89;</code>
     */
    YIELD_GROUP_MEDIATION_FILL_RATE(458, 89),
    /**
     *
     *
     * <pre>
     * Total requests where a Mediation chain was served.
     *
     *
     *
     * Corresponds to "Yield group mediation matched queries" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_MATCHED_QUERIES = 86;</code>
     */
    YIELD_GROUP_MEDIATION_MATCHED_QUERIES(459, 86),
    /**
     *
     *
     * <pre>
     * The number of mediation chain passback across all channels.
     *
     *
     *
     * Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_PASSBACKS = 118;</code>
     */
    YIELD_GROUP_MEDIATION_PASSBACKS(460, 118),
    /**
     *
     *
     * <pre>
     * Revenue per thousand impressions based on data collected by Ad Manager
     *  from third-party ad network reports.
     *
     *
     *
     * Corresponds to "Yield group mediation third party ECPM" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM = 90;</code>
     */
    YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM(461, 90),
    /**
     *
     *
     * <pre>
     * The yield group revenue accrued in the child network's own account but
     *  paid to their parent network through auto-payment. This metric is only
     *  relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Yield group revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 215;</code>
     */
    YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT(462, 215),
    /**
     *
     *
     * <pre>
     * Number of times a yield group buyer successfully returned a bid in
     *  response to a yield group callout.
     *
     *
     *
     * Corresponds to "Yield group successful responses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_SUCCESSFUL_RESPONSES = 84;</code>
     */
    YIELD_GROUP_SUCCESSFUL_RESPONSES(463, 84),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     *
     *
     * <pre>
     * Deprecated. This metric has been renamed to
     * `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
     * The server will normalize any requests using this value to
     * `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
     * This value will be removed on or after October 1, 2025.
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_IMPRESSIONS = 260 [deprecated = true];</code>
     */
    public static final Metric AD_SERVER_UNFILTERED_IMPRESSIONS =
        AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS;

    /**
     *
     *
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>METRIC_UNSPECIFIED = 0;</code>
     */
    public static final int METRIC_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     * The number of people who engaged with your site or app in the specified
     *  date range from Google Analytics.
     *
     *
     *
     * Corresponds to "Active users" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_USERS = 223;</code>
     */
    public static final int ACTIVE_USERS_VALUE = 223;

    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback at start.
     *
     *
     *
     * Corresponds to "Active View % audible at start" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT = 445;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT_VALUE = 445;

    /**
     *
     *
     * <pre>
     * Total Active View audible impressions
     *
     *
     *
     * Corresponds to "Total Active View audible impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_IMPRESSIONS = 659;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_IMPRESSIONS_VALUE = 659;

    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through the entire stream.
     *
     *
     *
     * Corresponds to "Active View % audible through completion" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT = 446;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT_VALUE = 446;

    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 25%.
     *
     *
     *
     * Corresponds to "Active View % audible through first quartile" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT = 447;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT_VALUE = 447;

    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 50%.
     *
     *
     *
     * Corresponds to "Active View % audible through midpoint" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT = 448;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT_VALUE = 448;

    /**
     *
     *
     * <pre>
     * Number of impressions with unmuted playback through at least 75%.
     *
     *
     *
     * Corresponds to "Active View % audible through third quartile" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT = 449;</code>
     */
    public static final int ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT_VALUE = 449;

    /**
     *
     *
     * <pre>
     * Total Active View audio enabled impressions
     *
     *
     *
     * Corresponds to "Total Active View audio eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS = 660;</code>
     */
    public static final int ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS_VALUE = 660;

    /**
     *
     *
     * <pre>
     * Total Active View audio measurable impressions
     *
     *
     *
     * Corresponds to "Total Active View audio measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS = 661;</code>
     */
    public static final int ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS_VALUE = 661;

    /**
     *
     *
     * <pre>
     * Active View total average time in seconds that specific impressions are
     *  reported as being viewable.
     *
     *
     *
     * Corresponds to "Total Active View average viewable time (seconds)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 61;</code>
     */
    public static final int ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME_VALUE = 61;

    /**
     *
     *
     * <pre>
     * Total number of impressions that were eligible to measure viewability.
     *
     *
     *
     * Corresponds to "Total Active View eligible impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 58;</code>
     */
    public static final int ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS_VALUE = 58;

    /**
     *
     *
     * <pre>
     * Number of impressions where the ad player is in the background at any
     *  point during playback with volume &gt; 0.
     *
     *
     *
     * Corresponds to "Active View % ever audible while backgrounded" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT = 450;</code>
     */
    public static final int ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT_VALUE = 450;

    /**
     *
     *
     * <pre>
     * Number of impressions where volume &gt; 0 at any point.
     *
     *
     *
     * Corresponds to "Active View % ever audible" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_AUDIBLE_PERCENT = 451;</code>
     */
    public static final int ACTIVE_VIEW_EVER_AUDIBLE_PERCENT_VALUE = 451;

    /**
     *
     *
     * <pre>
     * Number of impressions where the ad player is in the background at any
     *  point during playback.
     *
     *
     *
     * Corresponds to "Active View % ever backgrounded" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT = 452;</code>
     */
    public static final int ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT_VALUE = 452;

    /**
     *
     *
     * <pre>
     * Number of impressions where volume = 0 at any point.
     *
     *
     *
     * Corresponds to "Active View % ever muted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_EVER_MUTED_PERCENT = 453;</code>
     */
    public static final int ACTIVE_VIEW_EVER_MUTED_PERCENT_VALUE = 453;

    /**
     *
     *
     * <pre>
     * The number of measurable impressions that were played to video
     *  completion, and also audible and visible at the time of completion.
     *
     *
     *
     * Corresponds to "Total Active View impressions audible and visible at
     * completion" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION = 411;</code>
     */
    public static final int ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION_VALUE = 411;

    /**
     *
     *
     * <pre>
     * The total number of impressions that were sampled and measured by active
     *  view.
     *
     *
     *
     * Corresponds to "Total Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 57;</code>
     */
    public static final int ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_VALUE = 57;

    /**
     *
     *
     * <pre>
     * The percentage of total impressions that were measurable by active view
     *  (out of all the total impressions sampled for active view).
     *
     *
     *
     * Corresponds to "Total Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 60;</code>
     */
    public static final int ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE_VALUE = 60;

    /**
     *
     *
     * <pre>
     * Total Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "Total Active View non-measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 662;</code>
     */
    public static final int ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS_VALUE = 662;

    /**
     *
     *
     * <pre>
     * Total Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "Total Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 663;</code>
     */
    public static final int ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_VALUE = 663;

    /**
     *
     *
     * <pre>
     * Total Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View non-viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 664;</code>
     */
    public static final int ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 664;

    /**
     *
     *
     * <pre>
     * Total Active View percent audible impressions
     *
     *
     *
     * Corresponds to "Total Active View % audible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS = 665;</code>
     */
    public static final int ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS_VALUE = 665;

    /**
     *
     *
     * <pre>
     * Number of impressions where we were able to collect Active View+ signals.
     *
     *
     *
     * Corresponds to "Active View+ measurable impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_PLUS_MEASURABLE_COUNT = 454;</code>
     */
    public static final int ACTIVE_VIEW_PLUS_MEASURABLE_COUNT_VALUE = 454;

    /**
     *
     *
     * <pre>
     * Revenue generated from Active View impressions.
     *
     *
     *
     * Corresponds to "Total Active View revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ACTIVE_VIEW_REVENUE = 414;</code>
     */
    public static final int ACTIVE_VIEW_REVENUE_VALUE = 414;

    /**
     *
     *
     * <pre>
     * Total Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View undetermined impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 666;</code>
     */
    public static final int ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION_VALUE = 666;

    /**
     *
     *
     * <pre>
     * The total number of impressions viewed on the user's screen.
     *
     *
     *
     * Corresponds to "Total Active View viewable impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 56;</code>
     */
    public static final int ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_VALUE = 56;

    /**
     *
     *
     * <pre>
     * Total Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "Total Active View viewable impression distribution" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 667;</code>
     */
    public static final int ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 667;

    /**
     *
     *
     * <pre>
     * The percentage of total impressions viewed on the user's screen (out of
     *  the total impressions measurable by active view).
     *
     *
     *
     * Corresponds to "Total Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 59;</code>
     */
    public static final int ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE_VALUE = 59;

    /**
     *
     *
     * <pre>
     * Active View AdSense average time in seconds that specific impressions are
     *  reported as being viewable.
     *
     *
     *
     * Corresponds to "AdSense Active View average viewable time (seconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 73;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME_VALUE = 73;

    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by AdSense that were eligible to
     *  measure viewability.
     *
     *
     *
     * Corresponds to "AdSense Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 70;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS_VALUE = 70;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by AdSense that were sampled, and
     *  measurable by active view.
     *
     *
     *
     * Corresponds to "AdSense Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 69;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_VALUE = 69;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by AdSense that were measurable
     *  by active view (out of all AdSense impressions sampled for active view).
     *
     *
     *
     * Corresponds to "AdSense Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 72;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE_VALUE = 72;

    /**
     *
     *
     * <pre>
     * AdSense Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "AdSense Active View non-measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 642;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS_VALUE = 642;

    /**
     *
     *
     * <pre>
     * AdSense Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "AdSense Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 643;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_VALUE = 643;

    /**
     *
     *
     * <pre>
     * AdSense Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View non-viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 644;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 644;

    /**
     *
     *
     * <pre>
     * AdSense Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View undetermined impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 645;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION_VALUE = 645;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by AdSense viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "AdSense Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 68;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_VALUE = 68;

    /**
     *
     *
     * <pre>
     * AdSense Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "AdSense Active View viewable impression distribution" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 646;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 646;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by AdSense viewed on the user's
     *  screen (out of AdSense impressions measurable by active view).
     *
     *
     *
     * Corresponds to "AdSense Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 71;</code>
     */
    public static final int ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE_VALUE = 71;

    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by AdSense through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "AdSense average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ADSENSE_AVERAGE_ECPM = 26;</code>
     */
    public static final int ADSENSE_AVERAGE_ECPM_VALUE = 26;

    /**
     *
     *
     * <pre>
     * Number of clicks delivered by AdSense demand channel.
     *
     *
     *
     * Corresponds to "AdSense clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_CLICKS = 23;</code>
     */
    public static final int ADSENSE_CLICKS_VALUE = 23;

    /**
     *
     *
     * <pre>
     * The ratio of impressions served by AdSense that resulted in users
     *  clicking on an ad. The clickthrough rate (CTR) is updated nightly. The
     *  AdSense CTR is calculated as: (AdSense clicks / AdSense impressions).
     *
     *
     *
     * Corresponds to "AdSense CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_CTR = 24;</code>
     */
    public static final int ADSENSE_CTR_VALUE = 24;

    /**
     *
     *
     * <pre>
     * Total impressions delivered by AdSense.
     *
     *
     *
     * Corresponds to "AdSense impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_IMPRESSIONS = 22;</code>
     */
    public static final int ADSENSE_IMPRESSIONS_VALUE = 22;

    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by AdSense through line item dynamic allocation
     *  in relation to the total clicks delivered.
     *
     *
     *
     * Corresponds to "AdSense clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_CLICKS = 28;</code>
     */
    public static final int ADSENSE_PERCENT_CLICKS_VALUE = 28;

    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by AdSense through line item dynamic
     *  allocation in relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "AdSense impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_IMPRESSIONS = 27;</code>
     */
    public static final int ADSENSE_PERCENT_IMPRESSIONS_VALUE = 27;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by AdSense through line item dynamic
     *  allocation in relation to the total revenue.
     *
     *
     *
     * Corresponds to "AdSense revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_REVENUE = 29;</code>
     */
    public static final int ADSENSE_PERCENT_REVENUE_VALUE = 29;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by AdSense through line item dynamic
     *  allocation in relation to the total revenue (excluding CPD).
     *
     *
     *
     * Corresponds to "AdSense revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ADSENSE_PERCENT_REVENUE_WITHOUT_CPD = 30;</code>
     */
    public static final int ADSENSE_PERCENT_REVENUE_WITHOUT_CPD_VALUE = 30;

    /**
     *
     *
     * <pre>
     * The total number of times that an AdSense ad is delivered.
     *
     *
     *
     * Corresponds to "AdSense responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ADSENSE_RESPONSES_SERVED = 41;</code>
     */
    public static final int ADSENSE_RESPONSES_SERVED_VALUE = 41;

    /**
     *
     *
     * <pre>
     * Revenue generated from AdSense through line item dynamic allocation,
     *  calculated in the network's currency and time zone.
     *
     *
     *
     * Corresponds to "AdSense revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>ADSENSE_REVENUE = 25;</code>
     */
    public static final int ADSENSE_REVENUE_VALUE = 25;

    /**
     *
     *
     * <pre>
     * Active View AdExchange average time in seconds that specific impressions
     *  are reported as being viewable.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View average viewable time (seconds)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 79;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME_VALUE = 79;

    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by Ad Exchange that were eligible
     *  to measure viewability.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 76;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS_VALUE = 76;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Exchange that were sampled, and
     *  measurable by active view.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 75;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_VALUE = 75;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by Ad Exchange that were
     *  measurable by active view (out of all Ad Exchange impressions sampled
     *  for active view).
     *
     *
     *
     * Corresponds to "Ad Exchange Active View % measurable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 78;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE_VALUE = 78;

    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-measurable impressions
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-measurable impressions" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 654;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS_VALUE = 654;

    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-viewable impressions
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-viewable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 655;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_VALUE = 655;

    /**
     *
     *
     * <pre>
     * Ad Exchange Active View non-viewable impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View non-viewable impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 656;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE =
        656;

    /**
     *
     *
     * <pre>
     * Ad Exchange Active View undetermined impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View undetermined impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 657;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION_VALUE =
        657;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Exchange viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "Ad Exchange Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 74;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_VALUE = 74;

    /**
     *
     *
     * <pre>
     * Ad Exchange Active View viewable impressions distribution
     *
     *
     *
     * Corresponds to "Ad Exchange Active View viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 658;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 658;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by Ad Exchange viewed on the
     *  user's screen (out of Ad Exchange impressions measurable by active
     *  view).
     *
     *
     *
     * Corresponds to "Ad Exchange Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 77;</code>
     */
    public static final int AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE_VALUE = 77;

    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_AVERAGE_ECPM = 18;</code>
     */
    public static final int AD_EXCHANGE_AVERAGE_ECPM_VALUE = 18;

    /**
     *
     *
     * <pre>
     * Number of clicks delivered by the Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_CLICKS = 15;</code>
     */
    public static final int AD_EXCHANGE_CLICKS_VALUE = 15;

    /**
     *
     *
     * <pre>
     * The average effective cost-per-click earned from the ads delivered by Ad
     *  Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange CPC" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_CPC = 244;</code>
     */
    public static final int AD_EXCHANGE_CPC_VALUE = 244;

    /**
     *
     *
     * <pre>
     * The ratio of impressions served by the Ad Exchange that resulted in users
     *  clicking on an ad. The clickthrough rate (CTR) is updated nightly. Ad
     *  Exchange CTR is calculated as: (Ad Exchange clicks / Ad Exchange
     *  impressions).
     *
     *
     *
     * Corresponds to "Ad Exchange CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_CTR = 16;</code>
     */
    public static final int AD_EXCHANGE_CTR_VALUE = 16;

    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by Ad Exchange through line item dynamic
     *  allocation to ad requests.
     *
     *
     *
     * Corresponds to "Ad Exchange delivery rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_DELIVERY_RATE = 245;</code>
     */
    public static final int AD_EXCHANGE_DELIVERY_RATE_VALUE = 245;

    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS = 14;</code>
     */
    public static final int AD_EXCHANGE_IMPRESSIONS_VALUE = 14;

    /**
     *
     *
     * <pre>
     * The total number of impressions based on the number of ad viewers.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions per ad viewer" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER = 427;</code>
     */
    public static final int AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER_VALUE = 427;

    /**
     *
     *
     * <pre>
     * The total number of impressions based on the number of sessions.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions per session" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXCHANGE_IMPRESSIONS_PER_SESSION = 428;</code>
     */
    public static final int AD_EXCHANGE_IMPRESSIONS_PER_SESSION_VALUE = 428;

    /**
     *
     *
     * <pre>
     * The increase in revenue gained for won impressions over the applicable
     *  third party price (the minimum CPM or the best price specified during
     *  dynamic allocation),
     *
     *
     *
     * Corresponds to "Ad Exchange lift earnings" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_LIFT = 246;</code>
     */
    public static final int AD_EXCHANGE_LIFT_VALUE = 246;

    /**
     *
     *
     * <pre>
     * The ratio of matched ad requests served by the Ad Exchange that
     *  resulted in users clicking on an ad. The clickthrough rate (CTR) is
     *  updated nightly. Ad Exchange Matched Request CTR is calculated as:
     *  (Ad Exchange clicks / Ad Exchange Macthed Ad Requests).
     *
     *
     *
     * Corresponds to "Ad Exchange matched request CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCHED_REQUEST_CTR = 247;</code>
     */
    public static final int AD_EXCHANGE_MATCHED_REQUEST_CTR_VALUE = 247;

    /**
     *
     *
     * <pre>
     * The average effective cost per thousand matched ad requests earned from
     *  the ads delivered by Ad Exchange through line item dynamic allocation.
     *
     *
     *
     * Corresponds to "Ad Exchange matched request eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCHED_REQUEST_ECPM = 248;</code>
     */
    public static final int AD_EXCHANGE_MATCHED_REQUEST_ECPM_VALUE = 248;

    /**
     *
     *
     * <pre>
     * The number of responses served divided by the number of queries eligible
     *  in ad exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_MATCH_RATE = 249;</code>
     */
    public static final int AD_EXCHANGE_MATCH_RATE_VALUE = 249;

    /**
     *
     *
     * <pre>
     * Total opportunities from video VAST error within the waterfall for
     *  backfill ads.
     *
     *
     *
     * Corresponds to "Ad Exchange opportunities from errors" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS = 250;</code>
     */
    public static final int AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS_VALUE = 250;

    /**
     *
     *
     * <pre>
     * Number of opportunities from impressions within the waterfall for
     *  backfill ads.
     *
     *
     *
     * Corresponds to "Ad Exchange opportunities from impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS = 251;</code>
     */
    public static final int AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS_VALUE = 251;

    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by Ad Exchange through line item dynamic
     *  allocation in relation to the total clicks delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_CLICKS = 20;</code>
     */
    public static final int AD_EXCHANGE_PERCENT_CLICKS_VALUE = 20;

    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by Ad Exchange through line item dynamic
     *  allocation in relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_IMPRESSIONS = 19;</code>
     */
    public static final int AD_EXCHANGE_PERCENT_IMPRESSIONS_VALUE = 19;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by Ad Exchange through line item dynamic
     *  allocation in relation to the total revenue.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_REVENUE = 21;</code>
     */
    public static final int AD_EXCHANGE_PERCENT_REVENUE_VALUE = 21;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by Ad Exchange through line item dynamic
     *  allocation in relation to the total revenue (excluding CPD).
     *
     *
     *
     * Corresponds to "Ad Exchange revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD = 31;</code>
     */
    public static final int AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD_VALUE = 31;

    /**
     *
     *
     * <pre>
     * The average effective cost-per-thousand-impressions earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation and yield
     *  group partners.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM = 252;</code>
     */
    public static final int AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM_VALUE = 252;

    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Exchange and third-party networks.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS = 253;</code>
     */
    public static final int AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS_VALUE = 253;

    /**
     *
     *
     * <pre>
     * Revenue generated from the Ad Exchange and Yield Group, calculated in
     *   your network's currency and time zone.
     *
     *
     *
     * Corresponds to "Ad Exchange plus yield group revenue" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE = 254;</code>
     */
    public static final int AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE_VALUE = 254;

    /**
     *
     *
     * <pre>
     * The total number of times that an Ad Exchange ad is delivered.
     *
     *
     *
     * Corresponds to "Ad Exchange responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_RESPONSES_SERVED = 42;</code>
     */
    public static final int AD_EXCHANGE_RESPONSES_SERVED_VALUE = 42;

    /**
     *
     *
     * <pre>
     * Revenue generated from the Ad Exchange through line item dynamic
     *  allocation, calculated in your network's currency and time zone.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE = 17;</code>
     */
    public static final int AD_EXCHANGE_REVENUE_VALUE = 17;

    /**
     *
     *
     * <pre>
     * The Ad Exchange revenue accrued in the child network's own account but
     *  paid to their parent network through auto-payment. This metric is only
     *  relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 212;</code>
     */
    public static final int AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT_VALUE = 212;

    /**
     *
     *
     * <pre>
     * The total amount of Ad Exchange revenue based on the
     *  number of ad viewers.
     *
     *
     *
     * Corresponds to "Ad Exchange revenue per ad viewer" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_REVENUE_PER_AD_VIEWER = 429;</code>
     */
    public static final int AD_EXCHANGE_REVENUE_PER_AD_VIEWER_VALUE = 429;

    /**
     *
     *
     * <pre>
     * The number of programmatic eligible queries in Ad Exchange.
     *
     *
     *
     * Corresponds to "Ad Exchange total requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUESTS = 255;</code>
     */
    public static final int AD_EXCHANGE_TOTAL_REQUESTS_VALUE = 255;

    /**
     *
     *
     * <pre>
     * The ratio of total ad requests served by the Ad Exchange that
     *  resulted in users clicking on an ad. The clickthrough rate (CTR) is
     *  updated nightly. Ad Exchange Total Request CTR is calculated as:
     *  (Ad Exchange clicks / Ad Exchange Total Ad Requests).
     *
     *
     *
     * Corresponds to "Ad Exchange total request CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUEST_CTR = 256;</code>
     */
    public static final int AD_EXCHANGE_TOTAL_REQUEST_CTR_VALUE = 256;

    /**
     *
     *
     * <pre>
     * The average effective cost per thousand ad requests earned from the ads
     *  delivered by Ad Exchange through line item dynamic allocation and yield
     *   group partners.
     *
     *
     *
     * Corresponds to "Ad Exchange total request eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_EXCHANGE_TOTAL_REQUEST_ECPM = 257;</code>
     */
    public static final int AD_EXCHANGE_TOTAL_REQUEST_ECPM_VALUE = 257;

    /**
     *
     *
     * <pre>
     * Length of time in seconds that an ad is visible on the user's screen from
     *  Google Analytics.
     *
     *
     *
     * Corresponds to "Ad exposure (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_EXPOSURE_SECONDS = 241;</code>
     */
    public static final int AD_EXPOSURE_SECONDS_VALUE = 241;

    /**
     *
     *
     * <pre>
     * The total number of times that an ad request is sent to the ad server
     *  including dynamic allocation.
     *
     *
     *
     * Corresponds to "Total ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_REQUESTS = 38;</code>
     */
    public static final int AD_REQUESTS_VALUE = 38;

    /**
     *
     *
     * <pre>
     * Active View ad server average time in seconds that specific impressions
     *  are reported as being viewable.
     *
     *
     *
     * Corresponds to "Ad server Active View average viewable time (seconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME = 67;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME_VALUE = 67;

    /**
     *
     *
     * <pre>
     * Total number of impressions delivered by the ad server that were eligible
     *  to measure viewability.
     *
     *
     *
     * Corresponds to "Ad server Active View eligible impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS = 64;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS_VALUE = 64;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server that were sampled,
     *  and measurable by active view.
     *
     *
     *
     * Corresponds to "Ad server Active View measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS = 63;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_VALUE = 63;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by the ad server that were
     *  measurable by active view (out of all the ad server impressions sampled
     *  for active view).
     *
     *
     *
     * Corresponds to "Ad server Active View % measurable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE = 66;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE_VALUE = 66;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Server that were not measured.
     *  For example, impressions where measurement was attempted but failed.
     *
     *
     *
     * Corresponds to "Ad server Active View non-measurable impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS = 332;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS_VALUE = 332;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by Ad Server that were measured by
     *  active view, but deemed not viewable.
     *
     *
     *
     * Corresponds to "Ad server Active View non-viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS = 331;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_VALUE = 331;

    /**
     *
     *
     * <pre>
     * The fraction of non-viewable impressions among eligible impressions from
     *  Ad Server in Active View reporting."
     *
     *
     *
     * Corresponds to "Ad server Active View non-viewable impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 334;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 334;

    /**
     *
     *
     * <pre>
     * The fraction of non-eligible impressions among eligible impressions from
     *  Ad Server in Active View reporting."
     *
     *
     *
     * Corresponds to "Ad server Active View undetermined impression
     * distribution" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION = 335;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION_VALUE = 335;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server viewed on the user's
     *  screen.
     *
     *
     *
     * Corresponds to "Ad server Active View viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS = 62;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_VALUE = 62;

    /**
     *
     *
     * <pre>
     * The fraction of viewable impressions among eligible impressions from Ad
     *  Server in Active View reporting.
     *
     *
     *
     * Corresponds to "Ad server Active View viewable impression distribution"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION = 333;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION_VALUE = 333;

    /**
     *
     *
     * <pre>
     * The percentage of impressions delivered by the ad server viewed on the
     *  user's screen (out of the ad server impressions measurable by active
     *  view).
     *
     *
     *
     * Corresponds to "Ad server Active View % viewable impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE = 65;</code>
     */
    public static final int AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE_VALUE = 65;

    /**
     *
     *
     * <pre>
     * Average effective cost-per-thousand-impressions earned from the ads
     *  delivered by the Google Ad Manager server.
     *
     *
     *
     * Corresponds to "Ad server average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_AVERAGE_ECPM = 34;</code>
     */
    public static final int AD_SERVER_AVERAGE_ECPM_VALUE = 34;

    /**
     *
     *
     * <pre>
     * Average effective cost-per-thousand-impressions earned from the ads
     *  delivered by the Google Ad Manager server, excluding CPD value.
     *
     *
     *
     * Corresponds to "Ad server average eCPM w/o CPD" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD = 10;</code>
     */
    public static final int AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD_VALUE = 10;

    /**
     *
     *
     * <pre>
     * Total raw impressions counted when creative begins to render or the
     *  first frame of a video is shown.
     *
     *
     *
     * Corresponds to "Ad server begin to render impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS = 262;</code>
     */
    public static final int AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS_VALUE = 262;

    /**
     *
     *
     * <pre>
     * Total clicks served by the Google Ad Manager server. It usually takes
     *  about 30 minutes for new clicks to be recorded and added to the total
     *  displayed in reporting.
     *
     *
     *
     * Corresponds to "Ad server clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_CLICKS = 7;</code>
     */
    public static final int AD_SERVER_CLICKS_VALUE = 7;

    /**
     *
     *
     * <pre>
     * The number of completed views for ad server.
     *
     *
     *
     * Corresponds to "Ad server completed views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_COMPLETED_VIEWS = 431;</code>
     */
    public static final int AD_SERVER_COMPLETED_VIEWS_VALUE = 431;

    /**
     *
     *
     * <pre>
     * Total coviewed impressions delivered by the Ad Server.
     *
     *
     *
     * Corresponds to "Ad server impressions (co-viewed)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_COVIEWED_IMPRESSIONS = 554;</code>
     */
    public static final int AD_SERVER_COVIEWED_IMPRESSIONS_VALUE = 554;

    /**
     *
     *
     * <pre>
     * CPD revenue earned, calculated in your network's currency, for
     *  the ads delivered by the Google Ad Manager server. Sum of all booked
     *  revenue.
     *
     *
     *
     * Corresponds to "Ad server CPD revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_CPD_REVENUE = 32;</code>
     */
    public static final int AD_SERVER_CPD_REVENUE_VALUE = 32;

    /**
     *
     *
     * <pre>
     * Ratio of impressions served by the Google Ad Manager server that resulted
     *  in users clicking on an ad. The clickthrough rate (CTR) is updated
     *  nightly. The ad server CTR is calculated as: (Ad server clicks / Ad
     *  server impressions).
     *
     *
     *
     * Corresponds to "Ad server CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_CTR = 8;</code>
     */
    public static final int AD_SERVER_CTR_VALUE = 8;

    /**
     *
     *
     * <pre>
     * Gross revenue earned, calculated in your network's currency, for the ads
     *  delivered by the Google Ad Manager server.  This includes pre-rev-share
     *  revenue for Programmatic traffic. This metric is to help with the
     *  transition from gross to net revenue reporting.
     *
     *
     *
     * Corresponds to "Ad server total revenue (gross)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_GROSS_REVENUE = 483;</code>
     */
    public static final int AD_SERVER_GROSS_REVENUE_VALUE = 483;

    /**
     *
     *
     * <pre>
     * Gross revenue earned, calculated in your network's currency, for the ads
     *  delivered by the Google Ad Manager server, excluding CPD revenue. This
     *  includes pre-rev-share revenue for Programmatic traffic. This metric is
     *  to help with the transition from gross to net revenue reporting.
     *
     *
     *
     * Corresponds to "Ad server CPM and CPC revenue (gross)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_GROSS_REVENUE_WITHOUT_CPD = 484;</code>
     */
    public static final int AD_SERVER_GROSS_REVENUE_WITHOUT_CPD_VALUE = 484;

    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Server.
     *
     *
     *
     * Corresponds to "Ad server impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_IMPRESSIONS = 6;</code>
     */
    public static final int AD_SERVER_IMPRESSIONS_VALUE = 6;

    /**
     *
     *
     * <pre>
     * Total impressions delivered by the Ad Server with companion impressions.
     *
     *
     *
     * Corresponds to "Ad server impressions with companion" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_IMPRESSIONS_WITH_COMPANION = 222;</code>
     */
    public static final int AD_SERVER_IMPRESSIONS_WITH_COMPANION_VALUE = 222;

    /**
     *
     *
     * <pre>
     * Impressions (via begin to render methodology) delivered by the Google Ad
     *  Manager server considered inactive, as defined by served to a device
     *  receiving ad or bid requests continuously for a session of greater than
     *  16 hours without a "reset" event.
     *
     *
     *
     * Corresponds to "Ad server inactive begin to render impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS = 338;</code>
     */
    public static final int AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS_VALUE = 338;

    /**
     *
     *
     * <pre>
     * Ratio of clicks delivered by the Google Ad Manager server in relation to
     *  the total clicks delivered.
     *
     *
     *
     * Corresponds to "Ad server clicks (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_CLICKS = 12;</code>
     */
    public static final int AD_SERVER_PERCENT_CLICKS_VALUE = 12;

    /**
     *
     *
     * <pre>
     * Ratio of impressions delivered by the Google Ad Manager server in
     *  relation to the total impressions delivered.
     *
     *
     *
     * Corresponds to "Ad server impressions (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_IMPRESSIONS = 11;</code>
     */
    public static final int AD_SERVER_PERCENT_IMPRESSIONS_VALUE = 11;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by the Google Ad Manager server in relation
     *  to the total revenue.
     *
     *
     *
     * Corresponds to "Ad server revenue (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_REVENUE = 35;</code>
     */
    public static final int AD_SERVER_PERCENT_REVENUE_VALUE = 35;

    /**
     *
     *
     * <pre>
     * Ratio of revenue generated by the Google Ad Manager server (excluding
     *  CPD) in relation to the total revenue.
     *
     *
     *
     * Corresponds to "Ad server revenue w/o CPD (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD = 13;</code>
     */
    public static final int AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD_VALUE = 13;

    /**
     *
     *
     * <pre>
     * The total number of times that an ad is served by the ad server.
     *
     *
     *
     * Corresponds to "Ad server responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_RESPONSES_SERVED = 40;</code>
     */
    public static final int AD_SERVER_RESPONSES_SERVED_VALUE = 40;

    /**
     *
     *
     * <pre>
     * All CPM, CPC, and CPD revenue earned, calculated in your network's
     *  currency, for the ads delivered by the Google Ad Manager server.
     *  Sum of all booked revenue.
     *
     *
     *
     * Corresponds to "Ad server total revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE = 33;</code>
     */
    public static final int AD_SERVER_REVENUE_VALUE = 33;

    /**
     *
     *
     * <pre>
     * The Google Ad Manager server revenue accrued in the child network's own
     *  account but paid to their parent network through auto-payment. This
     *  metric is only relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Ad server revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 213;</code>
     */
    public static final int AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT_VALUE = 213;

    /**
     *
     *
     * <pre>
     * Revenue (excluding CPD) earned, calculated in your network's currency,
     *  for the ads delivered by the Google Ad Manager server. Sum of all booked
     *  revenue.
     *
     *
     *
     * Corresponds to "Ad server CPM and CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AD_SERVER_REVENUE_WITHOUT_CPD = 9;</code>
     */
    public static final int AD_SERVER_REVENUE_WITHOUT_CPD_VALUE = 9;

    /**
     *
     *
     * <pre>
     * The number of clicks delivered by the ad server by explicit custom
     *  criteria targeting.
     *
     *
     *
     * Corresponds to "Ad server targeted clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TARGETED_CLICKS = 274;</code>
     */
    public static final int AD_SERVER_TARGETED_CLICKS_VALUE = 274;

    /**
     *
     *
     * <pre>
     * The number of impressions delivered by the ad server by explicit custom
     *  criteria targeting.
     *
     *
     *
     * Corresponds to "Ad server targeted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TARGETED_IMPRESSIONS = 275;</code>
     */
    public static final int AD_SERVER_TARGETED_IMPRESSIONS_VALUE = 275;

    /**
     *
     *
     * <pre>
     * The number of tracked ads delivered by the ad server.
     *
     *
     *
     * Corresponds to "Ad server tracked ads" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_TRACKED_ADS = 264;</code>
     */
    public static final int AD_SERVER_TRACKED_ADS_VALUE = 264;

    /**
     *
     *
     * <pre>
     * Total raw impressions counted when creative begins to render or the
     *  first frame of a video is shown, before invalid traffic filtrations by
     *  Ad Server.
     *
     *
     *
     * Corresponds to "Ad server unfiltered begin to render impressions" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS = 261;</code>
     */
    public static final int AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS_VALUE = 261;

    /**
     *
     *
     * <pre>
     * Total clicks delivered by the Ad Server before spam filtering.
     *
     *
     *
     * Corresponds to "Ad server unfiltered clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_CLICKS = 259;</code>
     */
    public static final int AD_SERVER_UNFILTERED_CLICKS_VALUE = 259;

    /**
     *
     *
     * <pre>
     * Total downloaded impressions delivered by the Ad Server before spam
     *  filtering.
     *
     *
     *
     * Corresponds to "Ad server unfiltered downloaded impressions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS = 260;</code>
     */
    public static final int AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS_VALUE = 260;

    /**
     *
     *
     * <pre>
     * Deprecated. This metric has been renamed to
     * `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
     * The server will normalize any requests using this value to
     * `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
     * This value will be removed on or after October 1, 2025.
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_IMPRESSIONS = 260 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int AD_SERVER_UNFILTERED_IMPRESSIONS_VALUE = 260;

    /**
     *
     *
     * <pre>
     * The number of tracked ads delivered by the ad server before invalid
     *  traffic filtrations.
     *
     *
     *
     * Corresponds to "Ad server unfiltered tracked ads" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_SERVER_UNFILTERED_TRACKED_ADS = 263;</code>
     */
    public static final int AD_SERVER_UNFILTERED_TRACKED_ADS_VALUE = 263;

    /**
     *
     *
     * <pre>
     * Length of time in seconds that an ad unit is visible on the user's screen
     *  from Google Analytics.
     *
     *
     *
     * Corresponds to "Ad unit exposure (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AD_UNIT_EXPOSURE_SECONDS = 242;</code>
     */
    public static final int AD_UNIT_EXPOSURE_SECONDS_VALUE = 242;

    /**
     *
     *
     * <pre>
     * The number of users who viewed an ads on your site or app in the
     *  specified date range from Google Analytics.
     *
     *
     *
     * Corresponds to "Ad viewers" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>AD_VIEWERS = 425;</code>
     */
    public static final int AD_VIEWERS_VALUE = 425;

    /**
     *
     *
     * <pre>
     * Number of ads that Ad Manager failed to render in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ads failed to render" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ADS_FAILED_TO_RENDER = 430;</code>
     */
    public static final int ATN_ADS_FAILED_TO_RENDER_VALUE = 430;

    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Eligible line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ELIGIBLE_LINE_ITEMS = 342;</code>
     */
    public static final int ATN_ELIGIBLE_LINE_ITEMS_VALUE = 342;

    /**
     *
     *
     * <pre>
     * Number of ad requests that contain eligible line items for the auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with eligible line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS = 343;</code>
     */
    public static final int ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS_VALUE = 343;

    /**
     *
     *
     * <pre>
     * Number of ad requests that have header bidding trafficking demand in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing header bidding trafficking" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_ALLOWED_AD_REQUESTS = 344;</code>
     */
    public static final int ATN_HBT_ALLOWED_AD_REQUESTS_VALUE = 344;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking bids that are able to match an ad
     *  request and enter the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing header bidding trafficking bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_BIDS_IN_AUCTION = 345;</code>
     */
    public static final int ATN_HBT_BIDS_IN_AUCTION_VALUE = 345;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with bids in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing header bidding trafficking
     * bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS = 346;</code>
     */
    public static final int ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS_VALUE = 346;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking candidate bids that match an ad
     *  request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_CANDIDATE_BIDS = 347;</code>
     */
    public static final int ATN_HBT_CANDIDATE_BIDS_VALUE = 347;

    /**
     *
     *
     * <pre>
     * Number of invalid header bidding trafficking ad requests in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing header bidding trafficking"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_INVALID_AD_REQUESTS = 348;</code>
     */
    public static final int ATN_HBT_INVALID_AD_REQUESTS_VALUE = 348;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with no bids in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking ad requests with no bids" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_NO_BIDS_AD_REQUESTS = 472;</code>
     */
    public static final int ATN_HBT_NO_BIDS_AD_REQUESTS_VALUE = 472;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking bids that didn't match the ad
     *  request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected header bidding trafficking bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_REJECTED_BIDS = 349;</code>
     */
    public static final int ATN_HBT_REJECTED_BIDS_VALUE = 349;

    /**
     *
     *
     * <pre>
     * Number of ad requests with the header bidding trafficking demand that are
     *  valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Valid header bidding trafficking ad requests" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_VALID_AD_REQUESTS = 350;</code>
     */
    public static final int ATN_HBT_VALID_AD_REQUESTS_VALUE = 350;

    /**
     *
     *
     * <pre>
     * Number of header bidding trafficking ad requests with bids in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Header bidding trafficking ad requests with bids" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_HBT_WITH_BIDS_AD_REQUESTS = 473;</code>
     */
    public static final int ATN_HBT_WITH_BIDS_AD_REQUESTS_VALUE = 473;

    /**
     *
     *
     * <pre>
     * Ad requests that are not valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_INVALID_AD_REQUESTS = 351;</code>
     */
    public static final int ATN_INVALID_AD_REQUESTS_VALUE = 351;

    /**
     *
     *
     * <pre>
     * Number of line items with no creative retrieved in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Creative not retrieved" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED = 476;</code>
     */
    public static final int ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED_VALUE = 476;

    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request and entered in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_IN_AUCTION = 352;</code>
     */
    public static final int ATN_LINE_ITEMS_IN_AUCTION_VALUE = 352;

    /**
     *
     *
     * <pre>
     * Number of line items that were ranked but did not compete in auction in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Non-competing line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_NOT_COMPETING = 515;</code>
     */
    public static final int ATN_LINE_ITEMS_NOT_COMPETING_VALUE = 515;

    /**
     *
     *
     * <pre>
     * Number of line items that matched an ad request but were not selected to
     *  compete in the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Not selected to compete" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEMS_NOT_SELECTED = 353;</code>
     */
    public static final int ATN_LINE_ITEMS_NOT_SELECTED_VALUE = 353;

    /**
     *
     *
     * <pre>
     * Number of line item ad requests in auction in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Ad requests with competing line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS = 354;</code>
     */
    public static final int ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS_VALUE = 354;

    /**
     *
     *
     * <pre>
     * Number of line item targeted ad requests in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Ad requests with targeted line items" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_LINE_ITEM_TARGETED_AD_REQUESTS = 355;</code>
     */
    public static final int ATN_LINE_ITEM_TARGETED_AD_REQUESTS_VALUE = 355;

    /**
     *
     *
     * <pre>
     * Number of ad requests with the mediation demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing mediation" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_ALLOWED_AD_REQUESTS = 356;</code>
     */
    public static final int ATN_MEDIATION_ALLOWED_AD_REQUESTS_VALUE = 356;

    /**
     *
     *
     * <pre>
     * Number of invalid mediation ad requests in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing mediation" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_INVALID_AD_REQUESTS = 357;</code>
     */
    public static final int ATN_MEDIATION_INVALID_AD_REQUESTS_VALUE = 357;

    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner's ad was loaded in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Loaded ads from chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_LOADED_ADS_FROM_CHAINS = 358;</code>
     */
    public static final int ATN_MEDIATION_LOADED_ADS_FROM_CHAINS_VALUE = 358;

    /**
     *
     *
     * <pre>
     * Number of ad requests with mediation demand having no partners in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Mediation requests with no partners" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_NO_PARTNER_AD_REQUESTS = 474;</code>
     */
    public static final int ATN_MEDIATION_NO_PARTNER_AD_REQUESTS_VALUE = 474;

    /**
     *
     *
     * <pre>
     * Number of mediation yield partners in auction in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Competing mediation partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_PARTNERS_IN_AUCTION = 359;</code>
     */
    public static final int ATN_MEDIATION_PARTNERS_IN_AUCTION_VALUE = 359;

    /**
     *
     *
     * <pre>
     * Number of ad requests in auction that serve mediation chains in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing mediation partners" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS = 360;</code>
     */
    public static final int ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS_VALUE = 360;

    /**
     *
     *
     * <pre>
     * Number of mediation partners that didn't match an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_REJECTED_PARTNERS = 361;</code>
     */
    public static final int ATN_MEDIATION_REJECTED_PARTNERS_VALUE = 361;

    /**
     *
     *
     * <pre>
     * Number of mediation partners that have targeted an ad request and are
     *  able to match it in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Targeted mediation partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_TARGETED_PARTNERS = 362;</code>
     */
    public static final int ATN_MEDIATION_TARGETED_PARTNERS_VALUE = 362;

    /**
     *
     *
     * <pre>
     * Number of partners on served mediation chains in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Total yield partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_TOTAL_YIELD_PARTNERS = 442;</code>
     */
    public static final int ATN_MEDIATION_TOTAL_YIELD_PARTNERS_VALUE = 442;

    /**
     *
     *
     * <pre>
     * Number of ads from mediation chains that Ad Manager won't serve in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Unloaded ads from chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS = 363;</code>
     */
    public static final int ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS_VALUE = 363;

    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner's mediation chain ad was not reached
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Unused bids or partners" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS = 364;</code>
     */
    public static final int ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS_VALUE = 364;

    /**
     *
     *
     * <pre>
     * Number of ad requests that have mediation demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Valid mediation ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_VALID_AD_REQUESTS = 365;</code>
     */
    public static final int ATN_MEDIATION_VALID_AD_REQUESTS_VALUE = 365;

    /**
     *
     *
     * <pre>
     * Number of ad requests with mediation demand having partners in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with targeted mediation partners" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS = 475;</code>
     */
    public static final int ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS_VALUE = 475;

    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand that have received a bid
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS = 366;</code>
     */
    public static final int ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS_VALUE = 366;

    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand that have sent a bid to at
     *  least one buyer in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with bid requests sent" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT = 367;</code>
     */
    public static final int ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT_VALUE = 367;

    /**
     *
     *
     * <pre>
     * Number of ad requests with programmatic demand in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Ad requests allowing programmatic" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS = 368;</code>
     */
    public static final int ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS_VALUE = 368;

    /**
     *
     *
     * <pre>
     * Number of ads with programmatic bids that entered the auction
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Competing programmatic bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BIDS_IN_AUCTION = 369;</code>
     */
    public static final int ATN_PROGRAMMATIC_BIDS_IN_AUCTION_VALUE = 369;

    /**
     *
     *
     * <pre>
     * Number of ad requests that have received eligible programmatic bids to
     *  compete in the auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Ad requests with competing programmatic bids" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS = 370;</code>
     */
    public static final int ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS_VALUE = 370;

    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests sent to buyers in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid requests sent" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUESTS_SENT = 371;</code>
     */
    public static final int ATN_PROGRAMMATIC_BID_REQUESTS_SENT_VALUE = 371;

    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests that resulted with a response
     *  in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid requests with response" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE = 372;</code>
     */
    public static final int ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE_VALUE = 372;

    /**
     *
     *
     * <pre>
     * All buyers that Ad Manager could potentially send a programmatic bid
     *  request to in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid request candidates" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES = 373;</code>
     */
    public static final int ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES_VALUE = 373;

    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests with errors in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Bid request errors" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_BID_REQUEST_ERRORS = 374;</code>
     */
    public static final int ATN_PROGRAMMATIC_BID_REQUEST_ERRORS_VALUE = 374;

    /**
     *
     *
     * <pre>
     * Number of ad requests that are ineligible for programmatic in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Invalid ad requests allowing programmatic" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS = 375;</code>
     */
    public static final int ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS_VALUE = 375;

    /**
     *
     *
     * <pre>
     * Number of programmatic callout bids rejected in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Rejected bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_REJECTED_BIDS = 376;</code>
     */
    public static final int ATN_PROGRAMMATIC_REJECTED_BIDS_VALUE = 376;

    /**
     *
     *
     * <pre>
     * Number of programmatic callout bid requests Ad Manager won't send to
     *  buyers in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Skipped bid requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS = 377;</code>
     */
    public static final int ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS_VALUE = 377;

    /**
     *
     *
     * <pre>
     * Number of programmatic bids that Ad Manager received from buyers in the
     *  Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total programmatic bids" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_TOTAL_BIDS = 378;</code>
     */
    public static final int ATN_PROGRAMMATIC_TOTAL_BIDS_VALUE = 378;

    /**
     *
     *
     * <pre>
     * Number of ad requests that allow programmatic in the Ads traffic
     *  navigator report.
     *
     *
     *
     * Corresponds to "Valid ad requests allowing programmatic" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_PROGRAMMATIC_VALID_AD_REQUESTS = 379;</code>
     */
    public static final int ATN_PROGRAMMATIC_VALID_AD_REQUESTS_VALUE = 379;

    /**
     *
     *
     * <pre>
     * Number of line items targeted that didn't match an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Rejected line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_REJECTED_LINE_ITEMS = 380;</code>
     */
    public static final int ATN_REJECTED_LINE_ITEMS_VALUE = 380;

    /**
     *
     *
     * <pre>
     * Number of mediation chains Ad Manager serves in the Ads traffic navigator
     *  report.
     *
     *
     *
     * Corresponds to "Served mediation chains" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_SERVED_MEDIATION_CHAINS = 381;</code>
     */
    public static final int ATN_SERVED_MEDIATION_CHAINS_VALUE = 381;

    /**
     *
     *
     * <pre>
     * Number of single ads served in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Served single ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_SERVED_SINGLE_ADS = 382;</code>
     */
    public static final int ATN_SERVED_SINGLE_ADS_VALUE = 382;

    /**
     *
     *
     * <pre>
     * Number of line items with targeting that matches an ad request in the Ads
     *  traffic navigator report.
     *
     *
     *
     * Corresponds to "Targeted line items" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TARGETED_LINE_ITEMS = 383;</code>
     */
    public static final int ATN_TARGETED_LINE_ITEMS_VALUE = 383;

    /**
     *
     *
     * <pre>
     * Total number of ad requests which counts optimized pod request as a
     *  single request in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total ad requests (ATN)" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_AD_REQUESTS = 384;</code>
     */
    public static final int ATN_TOTAL_AD_REQUESTS_VALUE = 384;

    /**
     *
     *
     * <pre>
     * Number of competing ads in auction in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total competing ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_COMPETING_ADS_IN_AUCTION = 385;</code>
     */
    public static final int ATN_TOTAL_COMPETING_ADS_IN_AUCTION_VALUE = 385;

    /**
     *
     *
     * <pre>
     * Total number of ads loaded in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Total loaded ads" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_TOTAL_LOADED_ADS = 387;</code>
     */
    public static final int ATN_TOTAL_LOADED_ADS_VALUE = 387;

    /**
     *
     *
     * <pre>
     * Ad requests that are valid in the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Valid ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_VALID_AD_REQUESTS = 389;</code>
     */
    public static final int ATN_VALID_AD_REQUESTS_VALUE = 389;

    /**
     *
     *
     * <pre>
     * Number of times the Yield Partner passed-back on a Mediation chain ad in
     *  the Ads traffic navigator report.
     *
     *
     *
     * Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ATN_YIELD_GROUP_MEDIATION_PASSBACKS = 390;</code>
     */
    public static final int ATN_YIELD_GROUP_MEDIATION_PASSBACKS_VALUE = 390;

    /**
     *
     *
     * <pre>
     * eCPM averaged across the Google Ad Manager server, AdSense,
     *  and Ad Exchange.
     *
     *
     *
     * Corresponds to "Total average eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_ECPM = 37;</code>
     */
    public static final int AVERAGE_ECPM_VALUE = 37;

    /**
     *
     *
     * <pre>
     * eCPM averaged across the Google Ad Manager server (excluding CPD),
     *  AdSense, and Ad Exchange.
     *
     *
     *
     * Corresponds to "Total average eCPM w/o CPD" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_ECPM_WITHOUT_CPD = 5;</code>
     */
    public static final int AVERAGE_ECPM_WITHOUT_CPD_VALUE = 5;

    /**
     *
     *
     * <pre>
     * Average user engagement seconds per session in Google Analytics.
     *
     *
     *
     * Corresponds to "Average engagement time per session (seconds)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION = 224;</code>
     */
    public static final int AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION_VALUE = 224;

    /**
     *
     *
     * <pre>
     * Average user engagement seconds per user in Google Analytics.
     *
     *
     *
     * Corresponds to "Average engagement time per user (seconds)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_ENGAGEMENT_SECONDS_PER_USER = 225;</code>
     */
    public static final int AVERAGE_ENGAGEMENT_SECONDS_PER_USER_VALUE = 225;

    /**
     *
     *
     * <pre>
     * The average number of unique users reached per ad impression.
     *
     *
     *
     * Corresponds to "Average impressions/unique visitor" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR = 418;</code>
     */
    public static final int AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR_VALUE = 418;

    /**
     *
     *
     * <pre>
     * Average total purchase revenue per user in Google Analytics.
     *
     *
     *
     * Corresponds to "ARPPU" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER = 226;</code>
     */
    public static final int AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER_VALUE = 226;

    /**
     *
     *
     * <pre>
     * Average revenue earned from each active user in Google Analytics.
     *
     *
     *
     * Corresponds to "ARPU" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>AVERAGE_REVENUE_PER_USER = 227;</code>
     */
    public static final int AVERAGE_REVENUE_PER_USER_VALUE = 227;

    /**
     *
     *
     * <pre>
     * Average length of a session in Google Analytics.
     *
     *
     *
     * Corresponds to "Average session duration (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>AVERAGE_SESSION_SECONDS = 228;</code>
     */
    public static final int AVERAGE_SESSION_SECONDS_VALUE = 228;

    /**
     *
     *
     * <pre>
     * The number of bids.
     *
     *
     *
     * Corresponds to "Bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>BIDS = 443;</code>
     */
    public static final int BIDS_VALUE = 443;

    /**
     *
     *
     * <pre>
     * The average CPM of the bids submitted by bidders.
     *
     *
     *
     * Corresponds to "Average bid CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>BID_AVERAGE_CPM = 444;</code>
     */
    public static final int BID_AVERAGE_CPM_VALUE = 444;

    /**
     *
     *
     * <pre>
     * The ratio of (sessions - engaged sessions) / sessions.
     *
     *
     *
     * Corresponds to "Bounce rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>BOUNCE_RATE = 433;</code>
     */
    public static final int BOUNCE_RATE_VALUE = 433;

    /**
     *
     *
     * <pre>
     * The number of times a user clicked on an ad.
     *
     *
     *
     * Corresponds to "Total clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>CLICKS = 2;</code>
     */
    public static final int CLICKS_VALUE = 2;

    /**
     *
     *
     * <pre>
     * The total number of times that the code for an ad is served by the ad
     *  server including dynamic allocation.
     *
     *
     *
     * Corresponds to "Total code served count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>CODE_SERVED_COUNT = 44;</code>
     */
    public static final int CODE_SERVED_COUNT_VALUE = 44;

    /**
     *
     *
     * <pre>
     * Total amount of CPC revenue.
     *
     *
     *
     * Corresponds to "CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>CPC_REVENUE = 440;</code>
     */
    public static final int CPC_REVENUE_VALUE = 440;

    /**
     *
     *
     * <pre>
     * Total amount of CPM revenue.
     *
     *
     *
     * Corresponds to "CPM revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>CPM_REVENUE = 441;</code>
     */
    public static final int CPM_REVENUE_VALUE = 441;

    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [0, 500ms).
     *
     *
     *
     * Corresponds to "Creative load time 0 - 500ms (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_0_500_PERCENT = 324;</code>
     */
    public static final int CREATIVE_LOAD_TIME_0_500_PERCENT_VALUE = 324;

    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [1000, 2000ms).
     *
     *
     *
     * Corresponds to "Creative load time 1s - 2s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_1000_2000_PERCENT = 326;</code>
     */
    public static final int CREATIVE_LOAD_TIME_1000_2000_PERCENT_VALUE = 326;

    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [2000, 4000ms).
     *
     *
     *
     * Corresponds to "Creative load time 2s - 4s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_2000_4000_PERCENT = 327;</code>
     */
    public static final int CREATIVE_LOAD_TIME_2000_4000_PERCENT_VALUE = 327;

    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [4000, 8000ms).
     *
     *
     *
     * Corresponds to "Creative load time 4s - 8s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_4000_8000_PERCENT = 328;</code>
     */
    public static final int CREATIVE_LOAD_TIME_4000_8000_PERCENT_VALUE = 328;

    /**
     *
     *
     * <pre>
     * Percent of creatives whose load time is between [500, 1000ms).
     *
     *
     *
     * Corresponds to "Creative load time 500ms - 1s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_500_1000_PERCENT = 325;</code>
     */
    public static final int CREATIVE_LOAD_TIME_500_1000_PERCENT_VALUE = 325;

    /**
     *
     *
     * <pre>
     * Percent of creatives load time is greater than 8000ms.
     *
     *
     *
     * Corresponds to "Creative load time &gt;8s (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CREATIVE_LOAD_TIME_GT_8000_PERCENT = 329;</code>
     */
    public static final int CREATIVE_LOAD_TIME_GT_8000_PERCENT_VALUE = 329;

    /**
     *
     *
     * <pre>
     * For standard ads, your ad clickthrough rate (CTR) is the number of ad
     *  clicks divided by the number of individual ad impressions expressed as a
     *  fraction. Ad CTR = Clicks / Ad impressions.
     *
     *
     *
     * Corresponds to "Total CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>CTR = 3;</code>
     */
    public static final int CTR_VALUE = 3;

    /**
     *
     *
     * <pre>
     * Number of bids received for a deal.
     *
     *
     *
     * Corresponds to "Deals bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_BIDS = 542;</code>
     */
    public static final int DEALS_BIDS_VALUE = 542;

    /**
     *
     *
     * <pre>
     * Bid rate for a deal.
     *
     *
     *
     * Corresponds to "Deals bid rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DEALS_BID_RATE = 543;</code>
     */
    public static final int DEALS_BID_RATE_VALUE = 543;

    /**
     *
     *
     * <pre>
     * Number of bid requests sent for a deal.
     *
     *
     *
     * Corresponds to "Deals bid requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_BID_REQUESTS = 544;</code>
     */
    public static final int DEALS_BID_REQUESTS_VALUE = 544;

    /**
     *
     *
     * <pre>
     * Number of winning bids for a deal.
     *
     *
     *
     * Corresponds to "Deals winning bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>DEALS_WINNING_BIDS = 545;</code>
     */
    public static final int DEALS_WINNING_BIDS_VALUE = 545;

    /**
     *
     *
     * <pre>
     * Bid win rate for a deal.
     *
     *
     *
     * Corresponds to "Deals win rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DEALS_WIN_RATE = 546;</code>
     */
    public static final int DEALS_WIN_RATE_VALUE = 546;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 0 - 500ms (%)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT = 521;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT_VALUE = 521;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 1s - 2s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT = 522;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT_VALUE = 522;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 2s - 4s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT = 523;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT_VALUE = 523;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 4s - 8s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT = 524;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT_VALUE = 524;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time 500ms - 1s (%)"
     * in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT = 525;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT_VALUE = 525;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to 1st ad request in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Page navigation to first ad request time &gt;8s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT = 520;</code>
     */
    public static final int DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT_VALUE = 520;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 0 - 500ms (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT = 526;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT_VALUE = 526;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 1s - 2s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT = 527;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT_VALUE = 527;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 2s - 4s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT = 528;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT_VALUE = 528;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 4s - 8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT = 529;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT_VALUE = 529;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time 500ms - 1s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT = 531;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT_VALUE = 531;

    /**
     *
     *
     * <pre>
     * Percent of dom load time to tag load time in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Page navigation to tag loaded time &gt;8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT = 530;</code>
     */
    public static final int DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT_VALUE = 530;

    /**
     *
     *
     * <pre>
     * Percentage of ad responses that didn't result in an impression.
     *
     *
     *
     * Corresponds to "Drop-off rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>DROPOFF_RATE = 415;</code>
     */
    public static final int DROPOFF_RATE_VALUE = 415;

    /**
     *
     *
     * <pre>
     * Engaged session count from Google Analytics.
     *
     *
     *
     * Corresponds to "Engaged sessions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>ENGAGED_SESSIONS = 229;</code>
     */
    public static final int ENGAGED_SESSIONS_VALUE = 229;

    /**
     *
     *
     * <pre>
     * Engaged sessions per user from Google Analytics.
     *
     *
     *
     * Corresponds to "Engaged sessions per user" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>ENGAGED_SESSIONS_PER_USER = 230;</code>
     */
    public static final int ENGAGED_SESSIONS_PER_USER_VALUE = 230;

    /**
     *
     *
     * <pre>
     * The ratio of engaged sessions to sessions.
     *
     *
     *
     * Corresponds to "Engagement rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>ENGAGEMENT_RATE = 426;</code>
     */
    public static final int ENGAGEMENT_RATE_VALUE = 426;

    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where the user consented to
     *  all of the purposes and vendors.
     *
     *
     *
     * Corresponds to "European regulations consent rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_CONSENT_RATE = 270;</code>
     */
    public static final int EUROPEAN_REGULATIONS_CONSENT_RATE_VALUE = 270;

    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where users made a consent
     *  choice after selecting "Manage options".
     *
     *
     *
     * Corresponds to "European regulations custom consent rate" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE = 271;</code>
     */
    public static final int EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE_VALUE = 271;

    /**
     *
     *
     * <pre>
     * Number of times a European regulations message was shown to users.
     *
     *
     *
     * Corresponds to "European regulations messages shown" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_MESSAGES_SHOWN = 272;</code>
     */
    public static final int EUROPEAN_REGULATIONS_MESSAGES_SHOWN_VALUE = 272;

    /**
     *
     *
     * <pre>
     * Percentage of European regulations messages where the user rejected all
     *  purposes and vendors.
     *
     *
     *
     * Corresponds to "European regulations no consent rate" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>EUROPEAN_REGULATIONS_NO_CONSENT_RATE = 273;</code>
     */
    public static final int EUROPEAN_REGULATIONS_NO_CONSENT_RATE_VALUE = 273;

    /**
     *
     *
     * <pre>
     * The rate at which an ad request is filled by the ad server including
     *  dynamic allocation.
     *
     *
     *
     * Corresponds to "Total fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>FILL_RATE = 258;</code>
     */
    public static final int FILL_RATE_VALUE = 258;

    /**
     *
     *
     * <pre>
     * The number of clicks joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_CLICKS = 231;</code>
     */
    public static final int GOOGLE_ANALYTICS_CLICKS_VALUE = 231;

    /**
     *
     *
     * <pre>
     * The click-through rate from Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics CTR" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_CTR = 232;</code>
     */
    public static final int GOOGLE_ANALYTICS_CTR_VALUE = 232;

    /**
     *
     *
     * <pre>
     * The eCPM revenue data from Google Analytics.
     *
     *
     *
     * Corresponds to "Google Analytics eCPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_ECPM = 233;</code>
     */
    public static final int GOOGLE_ANALYTICS_ECPM_VALUE = 233;

    /**
     *
     *
     * <pre>
     * The number of impressions joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_IMPRESSIONS = 234;</code>
     */
    public static final int GOOGLE_ANALYTICS_IMPRESSIONS_VALUE = 234;

    /**
     *
     *
     * <pre>
     * The amount of revenue joined with Google Analytics data.
     *
     *
     *
     * Corresponds to "Google Analytics revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_REVENUE = 235;</code>
     */
    public static final int GOOGLE_ANALYTICS_REVENUE_VALUE = 235;

    /**
     *
     *
     * <pre>
     * Number of views of a web site or mobile screen from Google Analytics.
     *
     *
     *
     * Corresponds to "Views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_VIEWS = 236;</code>
     */
    public static final int GOOGLE_ANALYTICS_VIEWS_VALUE = 236;

    /**
     *
     *
     * <pre>
     * Number of views per user from Google Analytics.
     *
     *
     *
     * Corresponds to "Views per user" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>GOOGLE_ANALYTICS_VIEWS_PER_USER = 237;</code>
     */
    public static final int GOOGLE_ANALYTICS_VIEWS_PER_USER_VALUE = 237;

    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold auction impressions (co-viewed)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS = 129;</code>
     */
    public static final int GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS_VALUE = 129;

    /**
     *
     *
     * <pre>
     * The number of auction impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold auction impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_AUCTION_IMPRESSIONS = 128;</code>
     */
    public static final int GOOGLE_SOLD_AUCTION_IMPRESSIONS_VALUE = 128;

    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold impressions (co-viewed)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_COVIEWED_IMPRESSIONS = 131;</code>
     */
    public static final int GOOGLE_SOLD_COVIEWED_IMPRESSIONS_VALUE = 131;

    /**
     *
     *
     * <pre>
     * The number of impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_IMPRESSIONS = 130;</code>
     */
    public static final int GOOGLE_SOLD_IMPRESSIONS_VALUE = 130;

    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold reservation impressions (co-viewed)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS = 127;</code>
     */
    public static final int GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS_VALUE = 127;

    /**
     *
     *
     * <pre>
     * The number of reservation impressions sold by Google in partner sales.
     *
     *
     *
     * Corresponds to "Google-sold reservation impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>GOOGLE_SOLD_RESERVATION_IMPRESSIONS = 126;</code>
     */
    public static final int GOOGLE_SOLD_RESERVATION_IMPRESSIONS_VALUE = 126;

    /**
     *
     *
     * <pre>
     * Total impressions from the Google Ad Manager server, AdSense,
     *  Ad Exchange, and yield group partners.
     *
     *
     *
     * Corresponds to "Total impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>IMPRESSIONS = 1;</code>
     */
    public static final int IMPRESSIONS_VALUE = 1;

    /**
     *
     *
     * <pre>
     * The number of impressions (via begin to render methodology) considered
     *  inactive, as defined by served to a device receiving ad or bid requests
     *  continuously for a session of greater than 16 hours without a "reset"
     *  event. Only applied to CTV ads.
     *
     *
     *
     * Corresponds to "Inactive begin to render impressions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS = 407;</code>
     */
    public static final int INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS_VALUE = 407;

    /**
     *
     *
     * <pre>
     * The total number of inventory shares
     *
     *
     *
     * Corresponds to "Inventory shares" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVENTORY_SHARES = 547;</code>
     */
    public static final int INVENTORY_SHARES_VALUE = 547;

    /**
     *
     *
     * <pre>
     * The total number of partner unfilled opportunities from an inventory
     *  share
     *
     *
     *
     * Corresponds to "Inventory share partner unfilled opportunities" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES = 548;</code>
     */
    public static final int INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES_VALUE = 548;

    /**
     *
     *
     * <pre>
     * The number of invoiced impressions.
     *
     *
     *
     * Corresponds to "Invoiced impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVOICED_IMPRESSIONS = 404;</code>
     */
    public static final int INVOICED_IMPRESSIONS_VALUE = 404;

    /**
     *
     *
     * <pre>
     * The number of invoiced unfilled impressions.
     *
     *
     *
     * Corresponds to "Invoiced unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>INVOICED_UNFILLED_IMPRESSIONS = 405;</code>
     */
    public static final int INVOICED_UNFILLED_IMPRESSIONS_VALUE = 405;

    /**
     *
     *
     * <pre>
     * The number of mediation chains that were filled.
     *
     *
     *
     * Corresponds to "Mediation chains filled" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MEDIATION_CHAINS_FILLED = 584;</code>
     */
    public static final int MEDIATION_CHAINS_FILLED_VALUE = 584;

    /**
     *
     *
     * <pre>
     * The number of impressions where the user chose to mute the ad.
     *
     *
     *
     * Corresponds to "Total muted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MUTED_IMPRESSIONS = 412;</code>
     */
    public static final int MUTED_IMPRESSIONS_VALUE = 412;

    /**
     *
     *
     * <pre>
     * The number of impressions that had the "Mute This Ad" overlay applied.
     *
     *
     *
     * Corresponds to "Total mute eligible impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>MUTE_ELIGIBLE_IMPRESSIONS = 409;</code>
     */
    public static final int MUTE_ELIGIBLE_IMPRESSIONS_VALUE = 409;

    /**
     *
     *
     * <pre>
     * The total number of opportunities from impressions and errors.
     *
     *
     *
     * Corresponds to "Total opportunities" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>OPPORTUNITIES = 463;</code>
     */
    public static final int OPPORTUNITIES_VALUE = 463;

    /**
     *
     *
     * <pre>
     * The number of impressions that were overdelivered.
     *
     *
     *
     * Corresponds to "Total overdelivered impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>OVERDELIVERED_IMPRESSIONS = 432;</code>
     */
    public static final int OVERDELIVERED_IMPRESSIONS_VALUE = 432;

    /**
     *
     *
     * <pre>
     * The number of filled pod requests (filled by partner or Google) in
     *  partner sales.
     *
     *
     *
     * Corresponds to "Filled pod requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_FILLED_POD_REQUESTS = 135;</code>
     */
    public static final int PARTNER_SALES_FILLED_POD_REQUESTS_VALUE = 135;

    /**
     *
     *
     * <pre>
     * The percent of filled requests to total ad requests in
     *  partner sales.
     *
     *
     *
     * Corresponds to "Fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PARTNER_SALES_FILL_RATE = 136;</code>
     */
    public static final int PARTNER_SALES_FILL_RATE_VALUE = 136;

    /**
     *
     *
     * <pre>
     * The percent of partner filled requests to total ad requests
     *  in partner sales.
     *
     *
     *
     * Corresponds to "Partner match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PARTNER_SALES_PARTNER_MATCH_RATE = 137;</code>
     */
    public static final int PARTNER_SALES_PARTNER_MATCH_RATE_VALUE = 137;

    /**
     *
     *
     * <pre>
     * The number of queries eligible for partner sales.
     *
     *
     *
     * Corresponds to "Total partner sales ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_QUERIES = 132;</code>
     */
    public static final int PARTNER_SALES_QUERIES_VALUE = 132;

    /**
     *
     *
     * <pre>
     * The number of partner unfilled impressions in partner sales.
     *  If a pod request is not filled by partner but filled by Google, this
     *  metric will still count 1.
     *
     *
     *
     * Corresponds to "Partner unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_UNFILLED_IMPRESSIONS = 133;</code>
     */
    public static final int PARTNER_SALES_UNFILLED_IMPRESSIONS_VALUE = 133;

    /**
     *
     *
     * <pre>
     * The number of partner unmatched queries in partner sales.
     *  If an ad request is not filled by partner but filled by Google, this
     *  metric will still count 1.
     *
     *
     *
     * Corresponds to "Partner unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SALES_UNMATCHED_QUERIES = 134;</code>
     */
    public static final int PARTNER_SALES_UNMATCHED_QUERIES_VALUE = 134;

    /**
     *
     *
     * <pre>
     * The number of code served sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold code served count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_CODE_SERVED = 125;</code>
     */
    public static final int PARTNER_SOLD_CODE_SERVED_VALUE = 125;

    /**
     *
     *
     * <pre>
     * The number of coviewed impressions sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold impressions (co-viewed)" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_COVIEWED_IMPRESSIONS = 124;</code>
     */
    public static final int PARTNER_SOLD_COVIEWED_IMPRESSIONS_VALUE = 124;

    /**
     *
     *
     * <pre>
     * The number of impressions sold by partner in partner sales.
     *
     *
     *
     * Corresponds to "Partner-sold impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PARTNER_SOLD_IMPRESSIONS = 123;</code>
     */
    public static final int PARTNER_SOLD_IMPRESSIONS_VALUE = 123;

    /**
     *
     *
     * <pre>
     * The total number of ad requests eligible for programmatic inventory,
     *  including Programmatic Guaranteed, Preferred Deals, backfill, and open
     *  auction.
     *
     *
     *
     * Corresponds to "Programmatic eligible ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PROGRAMMATIC_ELIGIBLE_AD_REQUESTS = 177;</code>
     */
    public static final int PROGRAMMATIC_ELIGIBLE_AD_REQUESTS_VALUE = 177;

    /**
     *
     *
     * <pre>
     * The number of programmatic responses served divided by the number of
     *  programmatic eligible ad requests. Includes Ad Exchange, Open Bidding,
     *  and Preferred Deals.
     *
     *
     *
     * Corresponds to "Programmatic match rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>PROGRAMMATIC_MATCH_RATE = 178;</code>
     */
    public static final int PROGRAMMATIC_MATCH_RATE_VALUE = 178;

    /**
     *
     *
     * <pre>
     * Total number of ad responses served from programmatic demand sources.
     *  Includes Ad Exchange, Open Bidding, and Preferred Deals.
     *
     *  Differs from AD_EXCHANGE_RESPONSES_SERVED, which doesn't include Open
     *  Bidding ad requests.
     *
     *
     *
     * Corresponds to "Programmatic responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>PROGRAMMATIC_RESPONSES_SERVED = 176;</code>
     */
    public static final int PROGRAMMATIC_RESPONSES_SERVED_VALUE = 176;

    /**
     *
     *
     * <pre>
     * Number of impressions for reach reports.
     *
     *
     *
     * Corresponds to "Total reach impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>REACH_IMPRESSIONS = 416;</code>
     */
    public static final int REACH_IMPRESSIONS_VALUE = 416;

    /**
     *
     *
     * <pre>
     * The total number of times that an ad is served by the ad server including
     *  dynamic allocation.
     *
     *
     *
     * Corresponds to "Total responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RESPONSES_SERVED = 39;</code>
     */
    public static final int RESPONSES_SERVED_VALUE = 39;

    /**
     *
     *
     * <pre>
     * Retention of users in Google Analytics
     *
     *
     *
     * Corresponds to "Retention" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RETENTION = 238;</code>
     */
    public static final int RETENTION_VALUE = 238;

    /**
     *
     *
     * <pre>
     * Total amount of CPM, CPC, and CPD revenue based on the number of units
     *  served by the Google Ad Manager server, AdSense, Ad Exchange, and
     *  third-party Mediation networks.
     *
     *
     *
     * Corresponds to "Total revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE = 36;</code>
     */
    public static final int REVENUE_VALUE = 36;

    /**
     *
     *
     * <pre>
     * The total revenue accrued in the child network's own account but paid to
     *  their parent network through auto-payment. This metric is only relevant
     *  for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Total revenue paid through MCM auto-payment" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 214;</code>
     */
    public static final int REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT_VALUE = 214;

    /**
     *
     *
     * <pre>
     * Total amount of revenue (excluding CPD) based on the number of units
     *  served by the Google Ad Manager server, AdSense, Ad Exchange, and
     *  third-party Mediation networks.
     *
     *
     *
     * Corresponds to "Total CPM and CPC revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>REVENUE_WITHOUT_CPD = 4;</code>
     */
    public static final int REVENUE_WITHOUT_CPD_VALUE = 4;

    /**
     *
     *
     * <pre>
     * The number of rewards granted to users from watching ads.
     *
     *
     *
     * Corresponds to "Total rewards granted" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>REWARDS_GRANTED = 413;</code>
     */
    public static final int REWARDS_GRANTED_VALUE = 413;

    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that each rich media ad is
     *  displayed to users.
     *
     *
     *
     * Corresponds to "Average display time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_AVERAGE_DISPLAY_TIME = 587;</code>
     */
    public static final int RICH_MEDIA_AVERAGE_DISPLAY_TIME_VALUE = 587;

    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that a user interacts with a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Average interaction time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_AVERAGE_INTERACTION_TIME = 588;</code>
     */
    public static final int RICH_MEDIA_AVERAGE_INTERACTION_TIME_VALUE = 588;

    /**
     *
     *
     * <pre>
     * The total number of times a backup image is served in place of a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Backup image impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_BACKUP_IMAGES = 589;</code>
     */
    public static final int RICH_MEDIA_BACKUP_IMAGES_VALUE = 589;

    /**
     *
     *
     * <pre>
     * The number of times a user interacts with a specific part of a rich media
     *  ad.
     *
     *
     *
     * Corresponds to "Custom event - count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_CUSTOM_EVENT_COUNT = 599;</code>
     */
    public static final int RICH_MEDIA_CUSTOM_EVENT_COUNT_VALUE = 599;

    /**
     *
     *
     * <pre>
     * The amount of time (in seconds) that a user interacts with a specific
     *  part of a rich media ad.
     *
     *
     *
     * Corresponds to "Custom event - time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_CUSTOM_EVENT_TIME = 600;</code>
     */
    public static final int RICH_MEDIA_CUSTOM_EVENT_TIME_VALUE = 600;

    /**
     *
     *
     * <pre>
     * The amount of time (in seconds) that each rich media ad is displayed to
     *  users.
     *
     *
     *
     * Corresponds to "Total display time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_DISPLAY_TIME = 590;</code>
     */
    public static final int RICH_MEDIA_DISPLAY_TIME_VALUE = 590;

    /**
     *
     *
     * <pre>
     * The average amount of time (in seconds) that an expanding ad is viewed in
     *  an expanded state.
     *
     *
     *
     * Corresponds to "Average expanding time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_EXPANDING_TIME = 591;</code>
     */
    public static final int RICH_MEDIA_EXPANDING_TIME_VALUE = 591;

    /**
     *
     *
     * <pre>
     * The number of times an expanding ad was expanded.
     *
     *
     *
     * Corresponds to "Total expansions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_EXPANSIONS = 592;</code>
     */
    public static final int RICH_MEDIA_EXPANSIONS_VALUE = 592;

    /**
     *
     *
     * <pre>
     * The number of times a user opens a rich media ad in full screen mode.
     *
     *
     *
     * Corresponds to "Full-screen impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_FULL_SCREEN_IMPRESSIONS = 593;</code>
     */
    public static final int RICH_MEDIA_FULL_SCREEN_IMPRESSIONS_VALUE = 593;

    /**
     *
     *
     * <pre>
     * The number of times that a user interacts with a rich media ad.
     *
     *
     *
     * Corresponds to "Total interactions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_COUNT = 594;</code>
     */
    public static final int RICH_MEDIA_INTERACTION_COUNT_VALUE = 594;

    /**
     *
     *
     * <pre>
     * The ratio of rich media ad interactions to the number of times the ad
     *  was displayed.
     *
     *
     *
     * Corresponds to "Interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_RATE = 595;</code>
     */
    public static final int RICH_MEDIA_INTERACTION_RATE_VALUE = 595;

    /**
     *
     *
     * <pre>
     * The total amount of time (in seconds) that a user interacts with a rich
     *  media ad.
     *
     *
     *
     * Corresponds to "Interaction time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTION_TIME = 596;</code>
     */
    public static final int RICH_MEDIA_INTERACTION_TIME_VALUE = 596;

    /**
     *
     *
     * <pre>
     * The number of impressions where a user interacted with a rich media ad.
     *
     *
     *
     * Corresponds to "Interactive impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_INTERACTIVE_IMPRESSIONS = 597;</code>
     */
    public static final int RICH_MEDIA_INTERACTIVE_IMPRESSIONS_VALUE = 597;

    /**
     *
     *
     * <pre>
     * The number of times that a user manually closes a rich media ad.
     *
     *
     *
     * Corresponds to "Manual closes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_MANUAL_CLOSES = 598;</code>
     */
    public static final int RICH_MEDIA_MANUAL_CLOSES_VALUE = 598;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was fully played.
     *
     *
     *
     * Corresponds to "Rich media video completes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_COMPLETES = 503;</code>
     */
    public static final int RICH_MEDIA_VIDEO_COMPLETES_VALUE = 503;

    /**
     *
     *
     * <pre>
     * The number of times a user clicked on the graphical controls of a video
     *  player.
     *
     *
     *
     * Corresponds to "Rich media total video interactions" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_INTERACTIONS = 505;</code>
     */
    public static final int RICH_MEDIA_VIDEO_INTERACTIONS_VALUE = 505;

    /**
     *
     *
     * <pre>
     * The ratio of video interactions to video plays. Represented as a
     *  percentage.
     *
     *
     *
     * Corresponds to "Rich media video interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_INTERACTION_RATE = 504;</code>
     */
    public static final int RICH_MEDIA_VIDEO_INTERACTION_RATE_VALUE = 504;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was played up to midpoint.
     *
     *
     *
     * Corresponds to "Rich media video midpoints" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_MIDPOINTS = 506;</code>
     */
    public static final int RICH_MEDIA_VIDEO_MIDPOINTS_VALUE = 506;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was muted.
     *
     *
     *
     * Corresponds to "Rich media video mutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_MUTES = 507;</code>
     */
    public static final int RICH_MEDIA_VIDEO_MUTES_VALUE = 507;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was paused.
     *
     *
     *
     * Corresponds to "Rich media video pauses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_PAUSES = 508;</code>
     */
    public static final int RICH_MEDIA_VIDEO_PAUSES_VALUE = 508;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was played.
     *
     *
     *
     * Corresponds to "Rich media video plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_PLAYS = 509;</code>
     */
    public static final int RICH_MEDIA_VIDEO_PLAYS_VALUE = 509;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was restarted.
     *
     *
     *
     * Corresponds to "Rich media video replays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_REPLAYS = 510;</code>
     */
    public static final int RICH_MEDIA_VIDEO_REPLAYS_VALUE = 510;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was stopped.
     *
     *
     *
     * Corresponds to "Rich media video stops" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_STOPS = 511;</code>
     */
    public static final int RICH_MEDIA_VIDEO_STOPS_VALUE = 511;

    /**
     *
     *
     * <pre>
     * The number of times a rich media video was unmuted.
     *
     *
     *
     * Corresponds to "Rich media video unmutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_UNMUTES = 512;</code>
     */
    public static final int RICH_MEDIA_VIDEO_UNMUTES_VALUE = 512;

    /**
     *
     *
     * <pre>
     * The percentage of a video watched by a user.
     *
     *
     *
     * Corresponds to "Rich media video view rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_VIEW_RATE = 513;</code>
     */
    public static final int RICH_MEDIA_VIDEO_VIEW_RATE_VALUE = 513;

    /**
     *
     *
     * <pre>
     * The average amount of time(seconds) that a rich media video was viewed
     *  per view.
     *
     *
     *
     * Corresponds to "Rich media video average view time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>RICH_MEDIA_VIDEO_VIEW_TIME = 514;</code>
     */
    public static final int RICH_MEDIA_VIDEO_VIEW_TIME_VALUE = 514;

    /**
     *
     *
     * <pre>
     * The number of forecasted impressions not reserved by any line item.
     *
     *
     *
     * Corresponds to "Available impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_AVAILABLE_IMPRESSIONS = 477;</code>
     */
    public static final int SELL_THROUGH_AVAILABLE_IMPRESSIONS_VALUE = 477;

    /**
     *
     *
     * <pre>
     * The total number of forecasted impressions.
     *
     *
     *
     * Corresponds to "Forecasted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_FORECASTED_IMPRESSIONS = 478;</code>
     */
    public static final int SELL_THROUGH_FORECASTED_IMPRESSIONS_VALUE = 478;

    /**
     *
     *
     * <pre>
     * The number of forecasted impressions reserved by line items.
     *
     *
     *
     * Corresponds to "Reserved impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SELL_THROUGH_RESERVED_IMPRESSIONS = 479;</code>
     */
    public static final int SELL_THROUGH_RESERVED_IMPRESSIONS_VALUE = 479;

    /**
     *
     *
     * <pre>
     * The fraction of forecasted impressions reserved by line items.
     *
     *
     *
     * Corresponds to "Sell-through rate" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>SELL_THROUGH_SELL_THROUGH_RATE = 480;</code>
     */
    public static final int SELL_THROUGH_SELL_THROUGH_RATE_VALUE = 480;

    /**
     *
     *
     * <pre>
     * The average latency in milliseconds across all server-side unwrapping
     *  callout requests. There is no special handling for error or timeout
     *  responses. This reflects the entire chain of a parent callout request,
     *  which may result in multiple child callouts. This metric is not sliced
     *  by child callout dimensions.
     *
     *
     *
     * Corresponds to "Server-side unwrapping average latency (milliseconds)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS = 434;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS_VALUE = 434;

    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callout requests.
     *
     *
     *
     * Corresponds to "Server-side unwrapping callouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_CALLOUTS = 435;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_CALLOUTS_VALUE = 435;

    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that returned an
     *  empty response. Timeouts are not considered empty responses.
     *
     *
     *
     * Corresponds to "Server-side unwrapping empty responses" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES = 436;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES_VALUE = 436;

    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that returned an
     *  error response. Timeouts and empty responses are not considered errors.
     *
     *
     *
     * Corresponds to "Server-side unwrapping error responses" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES = 437;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES_VALUE = 437;

    /**
     *
     *
     * <pre>
     * The total number of successfully unwrapped, non-empty server-side
     *  wrapping callouts. Successful unwrapping does not indicate that the
     *  resulting creative was served.
     *
     *
     *
     * Corresponds to "Server-side unwrapping successful responses" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES = 438;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES_VALUE = 438;

    /**
     *
     *
     * <pre>
     * The total number of server-side unwrapping callouts that timed out before
     *  returning a response.
     *
     *
     *
     * Corresponds to "Server-side unwrapping timeouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SERVER_SIDE_UNWRAPPING_TIMEOUTS = 439;</code>
     */
    public static final int SERVER_SIDE_UNWRAPPING_TIMEOUTS_VALUE = 439;

    /**
     *
     *
     * <pre>
     * Count of sessions from Google Analytics.
     *
     *
     *
     * Corresponds to "Sessions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>SESSIONS = 239;</code>
     */
    public static final int SESSIONS_VALUE = 239;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [0, 500ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 0 - 500ms (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT = 455;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT_VALUE = 455;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [1000ms, 2000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 1s - 2s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT = 457;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT_VALUE = 457;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [2000ms, 4000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 2s - 4s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT = 458;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT_VALUE = 458;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [4000ms, 8000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 4s - 8s (%)" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT = 459;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT_VALUE = 459;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [500ms, 1000ms) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time 500ms - 1s (%)" in
     * the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT = 456;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT_VALUE = 456;

    /**
     *
     *
     * <pre>
     * Percent of tag load time to 1st ad request in [8000ms, +inf) range.
     *
     *
     *
     * Corresponds to "Tag loaded to first ad request time &gt;8s (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT = 460;</code>
     */
    public static final int TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT_VALUE = 460;

    /**
     *
     *
     * <pre>
     * The total number of clicks delivered including line item-level dynamic
     *  allocation by explicit custom criteria targeting.
     *
     *
     *
     * Corresponds to "Total targeted clicks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>TARGETED_CLICKS = 276;</code>
     */
    public static final int TARGETED_CLICKS_VALUE = 276;

    /**
     *
     *
     * <pre>
     * The total number of impressions delivered including line item-level
     *  dynamic allocation by explicit custom criteria targeting.
     *
     *
     *
     * Corresponds to "Total targeted impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>TARGETED_IMPRESSIONS = 277;</code>
     */
    public static final int TARGETED_IMPRESSIONS_VALUE = 277;

    /**
     *
     *
     * <pre>
     * The total number of missed impressions due to the ad servers' inability
     *  to find ads to serve including dynamic allocation.
     *
     *
     *
     * Corresponds to "Unfilled impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNFILLED_IMPRESSIONS = 45;</code>
     */
    public static final int UNFILLED_IMPRESSIONS_VALUE = 45;

    /**
     *
     *
     * <pre>
     * The total number of unique users who viewed the ad.
     *
     *
     *
     * Corresponds to "Total unique visitors" in the Ad Manager UI.
     *
     * Compatible with the following report types: `REACH`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNIQUE_VISITORS = 417;</code>
     */
    public static final int UNIQUE_VISITORS_VALUE = 417;

    /**
     *
     *
     * <pre>
     * The number of impressions impacted by Chrome Ads Intervention due to CPU
     *  usage.
     *
     *
     *
     * Corresponds to "Total unloaded impressions due to CPU" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNLOADED_IMPRESSIONS_DUE_TO_CPU = 408;</code>
     */
    public static final int UNLOADED_IMPRESSIONS_DUE_TO_CPU_VALUE = 408;

    /**
     *
     *
     * <pre>
     * The number of impressions impacted by Chrome Ads Intervention due to
     *  network usage.
     *
     *
     *
     * Corresponds to "Total unloaded impressions due to Network" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNLOADED_IMPRESSIONS_DUE_TO_NETWORK = 406;</code>
     */
    public static final int UNLOADED_IMPRESSIONS_DUE_TO_NETWORK_VALUE = 406;

    /**
     *
     *
     * <pre>
     * The total number of times that an ad is not returned by the ad server.
     *
     *
     *
     * Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>UNMATCHED_AD_REQUESTS = 43;</code>
     */
    public static final int UNMATCHED_AD_REQUESTS_VALUE = 43;

    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to other reasons.
     *
     *
     *
     * Corresponds to "Other non-viewable impression reasons (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_OTHER_PERCENT = 550;</code>
     */
    public static final int UNVIEWED_REASON_OTHER_PERCENT_VALUE = 550;

    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to slot never entered
     *  viewport.
     *
     *
     *
     * Corresponds to "Slot never entered viewport (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT = 553;</code>
     */
    public static final int UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT_VALUE = 553;

    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to scrolled past before ad
     *  filled.
     *
     *
     *
     * Corresponds to "User scrolled before ad filled (%)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT = 551;</code>
     */
    public static final int UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT_VALUE = 551;

    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to scrolled past before ad
     *  loaded.
     *
     *
     *
     * Corresponds to "User scrolled/navigated before ad loaded (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT = 552;</code>
     */
    public static final int UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT_VALUE = 552;

    /**
     *
     *
     * <pre>
     * The percentage of unviewed impressions due to insufficient time on
     *  screen.
     *
     *
     *
     * Corresponds to "User scrolled/navigated before 1 second (%)" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `AD_SPEED`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT = 549;</code>
     */
    public static final int UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT_VALUE = 549;

    /**
     *
     *
     * <pre>
     * Time of users interacting with web site or mobile app from Google
     *  Analytics in seconds.
     *
     *
     *
     * Corresponds to "User engagement duration (seconds)" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_ENGAGEMENT_DURATION_IN_SECONDS = 240;</code>
     */
    public static final int USER_ENGAGEMENT_DURATION_IN_SECONDS_VALUE = 240;

    /**
     *
     *
     * <pre>
     * Fraction of page views where users had ad blocker extensions installed.
     *  Includes only Desktop page views.
     *
     *
     *
     * Corresponds to "Ad blocking extension rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE = 486;</code>
     */
    public static final int USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE_VALUE = 486;

    /**
     *
     *
     * <pre>
     * Number of ad-blocking messages shown in the selected date range that
     *  resulted in users adding the site to their allowlist to view ads
     *
     *
     *
     * Corresponds to "Ad blocking recovery message conversions" in the Ad
     * Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT = 487;</code>
     */
    public static final int USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT_VALUE = 487;

    /**
     *
     *
     * <pre>
     * Number of times an ad blocking recovery message was shown to users.
     *
     *
     *
     * Corresponds to "Ad blocking recovery messages shown" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN = 488;</code>
     */
    public static final int USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN_VALUE = 488;

    /**
     *
     *
     * <pre>
     * The number of page views generated by users with an ad blocking extension
     *  installed who were shown the ad blocking recovery message and later
     *  allowed ads.
     *
     *
     *
     * Corresponds to "Allow-ads page views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_ALLOW_ADS_PAGEVIEWS = 489;</code>
     */
    public static final int USER_MESSAGES_ALLOW_ADS_PAGEVIEWS_VALUE = 489;

    /**
     *
     *
     * <pre>
     * Number of times a US state regulations message was shown to users.
     *
     *
     *
     * Corresponds to "US states messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_CCPA_MESSAGES_SHOWN = 490;</code>
     */
    public static final int USER_MESSAGES_CCPA_MESSAGES_SHOWN_VALUE = 490;

    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts that were triggered by an IDFA message (IDFA
     *  messages can be IDFA explainers or GDPR messages).
     *
     *
     *
     * Corresponds to "IDFA ATT alerts shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN = 491;</code>
     */
    public static final int USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN_VALUE = 491;

    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to allow tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT consent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_CONSENT = 492;</code>
     */
    public static final int USER_MESSAGES_IDFA_ATT_CONSENT_VALUE = 492;

    /**
     *
     *
     * <pre>
     * Percentage of iOS ATT alerts triggered by the IDFA message where the
     *  outcome was to allow tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT consent rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_CONSENT_RATE = 493;</code>
     */
    public static final int USER_MESSAGES_IDFA_ATT_CONSENT_RATE_VALUE = 493;

    /**
     *
     *
     * <pre>
     * Number of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to deny tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT decline consent" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT = 494;</code>
     */
    public static final int USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT_VALUE = 494;

    /**
     *
     *
     * <pre>
     * Percentage of iOS ATT alerts triggered by the IDFA message where the user
     *  chose to deny tracking.
     *
     *
     *
     * Corresponds to "IDFA ATT decline rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_ATT_DECLINE_RATE = 495;</code>
     */
    public static final int USER_MESSAGES_IDFA_ATT_DECLINE_RATE_VALUE = 495;

    /**
     *
     *
     * <pre>
     * Number of times an IDFA explainer message was shown to users.
     *
     *
     *
     * Corresponds to "IDFA explainers shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_EXPLAINERS_SHOWN = 496;</code>
     */
    public static final int USER_MESSAGES_IDFA_EXPLAINERS_SHOWN_VALUE = 496;

    /**
     *
     *
     * <pre>
     * Number of times a European regulations message was shown immediately
     *  before the iOS ATT alert.
     *
     *
     *
     * Corresponds to "IDFA IAB messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN = 497;</code>
     */
    public static final int USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN_VALUE = 497;

    /**
     *
     *
     * <pre>
     * Number of IDFA explainer messages where the user didn't choose anything.
     *
     *
     *
     * Corresponds to "IDFA no decision" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_IDFA_NO_DECISION = 498;</code>
     */
    public static final int USER_MESSAGES_IDFA_NO_DECISION_VALUE = 498;

    /**
     *
     *
     * <pre>
     * Number of times an Offerwall message was shown to users.
     *
     *
     *
     * Corresponds to "Offerwall messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN = 121;</code>
     */
    public static final int USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN_VALUE = 121;

    /**
     *
     *
     * <pre>
     * The number of messages where the user gained an entitlement.
     *
     *
     *
     * Corresponds to "Monetized Offerwall engagements" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS = 122;</code>
     */
    public static final int USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS_VALUE = 122;

    /**
     *
     *
     * <pre>
     * The number of pages viewed by users after gaining an entitlement. Only
     *  counts pages included for Offerwall.
     *
     *
     *
     * Corresponds to "Post-offerwall page views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS = 499;</code>
     */
    public static final int USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS_VALUE = 499;

    /**
     *
     *
     * <pre>
     * Revenue earned through Offerwall, including Rewarded ad revenue and
     *  third-party integrations.
     *
     *
     *
     * Corresponds to "Estimated Offerwall revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>USER_MESSAGES_TOTAL_ESTIMATED_REVENUE = 500;</code>
     */
    public static final int USER_MESSAGES_TOTAL_ESTIMATED_REVENUE_VALUE = 500;

    /**
     *
     *
     * <pre>
     * Number of times an ads personalization controls message was shown to
     *  users.
     *
     *
     *
     * Corresponds to "Ads personalization messages shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>USER_MESSAGES_UPTC_MESSAGES_SHOWN = 501;</code>
     */
    public static final int USER_MESSAGES_UPTC_MESSAGES_SHOWN_VALUE = 501;

    /**
     *
     *
     * <pre>
     * Percentage of ads personalization controls messages where users chose the
     *  opt-out option.
     *
     *
     *
     * Corresponds to "Personalization opt-out ratio" in the Ad Manager UI.
     *
     * Compatible with the following report types: `PRIVACY_AND_MESSAGING`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO = 502;</code>
     */
    public static final int USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO_VALUE = 502;

    /**
     *
     *
     * <pre>
     * The number of errors of type 100 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 100 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_100_COUNT = 180;</code>
     */
    public static final int VIDEO_ERROR_100_COUNT_VALUE = 180;

    /**
     *
     *
     * <pre>
     * The number of errors of type 101 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 101 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_101_COUNT = 181;</code>
     */
    public static final int VIDEO_ERROR_101_COUNT_VALUE = 181;

    /**
     *
     *
     * <pre>
     * The number of errors of type 102 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 102 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_102_COUNT = 182;</code>
     */
    public static final int VIDEO_ERROR_102_COUNT_VALUE = 182;

    /**
     *
     *
     * <pre>
     * The number of errors of type 200 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 200 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_200_COUNT = 183;</code>
     */
    public static final int VIDEO_ERROR_200_COUNT_VALUE = 183;

    /**
     *
     *
     * <pre>
     * The number of errors of type 201 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 201 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_201_COUNT = 184;</code>
     */
    public static final int VIDEO_ERROR_201_COUNT_VALUE = 184;

    /**
     *
     *
     * <pre>
     * The number of errors of type 202 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 202 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_202_COUNT = 185;</code>
     */
    public static final int VIDEO_ERROR_202_COUNT_VALUE = 185;

    /**
     *
     *
     * <pre>
     * The number of errors of type 203 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 203 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_203_COUNT = 186;</code>
     */
    public static final int VIDEO_ERROR_203_COUNT_VALUE = 186;

    /**
     *
     *
     * <pre>
     * The number of errors of type 300 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 300 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_300_COUNT = 187;</code>
     */
    public static final int VIDEO_ERROR_300_COUNT_VALUE = 187;

    /**
     *
     *
     * <pre>
     * The number of errors of type 301 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 301 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_301_COUNT = 188;</code>
     */
    public static final int VIDEO_ERROR_301_COUNT_VALUE = 188;

    /**
     *
     *
     * <pre>
     * The number of errors of type 302 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 302 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_302_COUNT = 189;</code>
     */
    public static final int VIDEO_ERROR_302_COUNT_VALUE = 189;

    /**
     *
     *
     * <pre>
     * The number of errors of type 303 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 303 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_303_COUNT = 190;</code>
     */
    public static final int VIDEO_ERROR_303_COUNT_VALUE = 190;

    /**
     *
     *
     * <pre>
     * The number of errors of type 400 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 400 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_400_COUNT = 191;</code>
     */
    public static final int VIDEO_ERROR_400_COUNT_VALUE = 191;

    /**
     *
     *
     * <pre>
     * The number of errors of type 401 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 401 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_401_COUNT = 192;</code>
     */
    public static final int VIDEO_ERROR_401_COUNT_VALUE = 192;

    /**
     *
     *
     * <pre>
     * The number of errors of type 402 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 402 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_402_COUNT = 193;</code>
     */
    public static final int VIDEO_ERROR_402_COUNT_VALUE = 193;

    /**
     *
     *
     * <pre>
     * The number of errors of type 403 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 403 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_403_COUNT = 194;</code>
     */
    public static final int VIDEO_ERROR_403_COUNT_VALUE = 194;

    /**
     *
     *
     * <pre>
     * The number of errors of type 405 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 405 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_405_COUNT = 195;</code>
     */
    public static final int VIDEO_ERROR_405_COUNT_VALUE = 195;

    /**
     *
     *
     * <pre>
     * The number of errors of type 406 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 406 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_406_COUNT = 196;</code>
     */
    public static final int VIDEO_ERROR_406_COUNT_VALUE = 196;

    /**
     *
     *
     * <pre>
     * The number of errors of type 407 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 407 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_407_COUNT = 197;</code>
     */
    public static final int VIDEO_ERROR_407_COUNT_VALUE = 197;

    /**
     *
     *
     * <pre>
     * The number of errors of type 408 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 408 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_408_COUNT = 198;</code>
     */
    public static final int VIDEO_ERROR_408_COUNT_VALUE = 198;

    /**
     *
     *
     * <pre>
     * The number of errors of type 409 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 409 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_409_COUNT = 199;</code>
     */
    public static final int VIDEO_ERROR_409_COUNT_VALUE = 199;

    /**
     *
     *
     * <pre>
     * The number of errors of type 410 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 410 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_410_COUNT = 200;</code>
     */
    public static final int VIDEO_ERROR_410_COUNT_VALUE = 200;

    /**
     *
     *
     * <pre>
     * The number of errors of type 500 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 500 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_500_COUNT = 201;</code>
     */
    public static final int VIDEO_ERROR_500_COUNT_VALUE = 201;

    /**
     *
     *
     * <pre>
     * The number of errors of type 501 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 501 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_501_COUNT = 202;</code>
     */
    public static final int VIDEO_ERROR_501_COUNT_VALUE = 202;

    /**
     *
     *
     * <pre>
     * The number of errors of type 502 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 502 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_502_COUNT = 203;</code>
     */
    public static final int VIDEO_ERROR_502_COUNT_VALUE = 203;

    /**
     *
     *
     * <pre>
     * The number of errors of type 503 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 503 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_503_COUNT = 204;</code>
     */
    public static final int VIDEO_ERROR_503_COUNT_VALUE = 204;

    /**
     *
     *
     * <pre>
     * The number of errors of type 600 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 600 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_600_COUNT = 205;</code>
     */
    public static final int VIDEO_ERROR_600_COUNT_VALUE = 205;

    /**
     *
     *
     * <pre>
     * The number of errors of type 601 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 601 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_601_COUNT = 206;</code>
     */
    public static final int VIDEO_ERROR_601_COUNT_VALUE = 206;

    /**
     *
     *
     * <pre>
     * The number of errors of type 602 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 602 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_602_COUNT = 207;</code>
     */
    public static final int VIDEO_ERROR_602_COUNT_VALUE = 207;

    /**
     *
     *
     * <pre>
     * The number of errors of type 603 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 603 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_603_COUNT = 208;</code>
     */
    public static final int VIDEO_ERROR_603_COUNT_VALUE = 208;

    /**
     *
     *
     * <pre>
     * The number of errors of type 604 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 604 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_604_COUNT = 209;</code>
     */
    public static final int VIDEO_ERROR_604_COUNT_VALUE = 209;

    /**
     *
     *
     * <pre>
     * The number of errors of type 900 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 900 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_900_COUNT = 210;</code>
     */
    public static final int VIDEO_ERROR_900_COUNT_VALUE = 210;

    /**
     *
     *
     * <pre>
     * The number of errors of type 901 in reporting.
     *
     *
     *
     * Corresponds to "VAST error 901 count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_ERROR_901_COUNT = 211;</code>
     */
    public static final int VIDEO_ERROR_901_COUNT_VALUE = 211;

    /**
     *
     *
     * <pre>
     * The number of user interactions with a video, on average, such as pause,
     *  full screen, mute, etc.
     *
     *
     *
     * Corresponds to "Average interaction rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE = 92;</code>
     */
    public static final int VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE_VALUE = 92;

    /**
     *
     *
     * <pre>
     * The number of times a user collapses a video, either to its original size
     *  or to a different size.
     *
     *
     *
     * Corresponds to "Collapses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_COLLAPSES = 93;</code>
     */
    public static final int VIDEO_INTERACTION_COLLAPSES_VALUE = 93;

    /**
     *
     *
     * <pre>
     * The number of times a user expands a video.
     *
     *
     *
     * Corresponds to "Expands" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_EXPANDS = 95;</code>
     */
    public static final int VIDEO_INTERACTION_EXPANDS_VALUE = 95;

    /**
     *
     *
     * <pre>
     * The number of times ad clip played in full screen mode.
     *
     *
     *
     * Corresponds to "Full screens" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_FULL_SCREENS = 96;</code>
     */
    public static final int VIDEO_INTERACTION_FULL_SCREENS_VALUE = 96;

    /**
     *
     *
     * <pre>
     * The number of times video player was in mute state during play of ad
     *  clip.
     *
     *
     *
     * Corresponds to "Mutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_MUTES = 97;</code>
     */
    public static final int VIDEO_INTERACTION_MUTES_VALUE = 97;

    /**
     *
     *
     * <pre>
     * The number of times user paused ad clip.
     *
     *
     *
     * Corresponds to "Pauses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_PAUSES = 98;</code>
     */
    public static final int VIDEO_INTERACTION_PAUSES_VALUE = 98;

    /**
     *
     *
     * <pre>
     * The number of times the user unpaused the video.
     *
     *
     *
     * Corresponds to "Resumes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_RESUMES = 99;</code>
     */
    public static final int VIDEO_INTERACTION_RESUMES_VALUE = 99;

    /**
     *
     *
     * <pre>
     * The number of times a user rewinds the video.
     *
     *
     *
     * Corresponds to "Rewinds" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_REWINDS = 100;</code>
     */
    public static final int VIDEO_INTERACTION_REWINDS_VALUE = 100;

    /**
     *
     *
     * <pre>
     * The number of times a user unmutes the video.
     *
     *
     *
     * Corresponds to "Unmutes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_UNMUTES = 101;</code>
     */
    public static final int VIDEO_INTERACTION_UNMUTES_VALUE = 101;

    /**
     *
     *
     * <pre>
     * The number of times a skippable video is skipped.
     *
     *
     *
     * Corresponds to "Skips" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_INTERACTION_VIDEO_SKIPS = 102;</code>
     */
    public static final int VIDEO_INTERACTION_VIDEO_SKIPS_VALUE = 102;

    /**
     *
     *
     * <pre>
     * The number of views for monetizable video content.
     *
     *
     *
     * Corresponds to "Monetizable content views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_MONETIZABLE_CONTENT_VIEWS = 601;</code>
     */
    public static final int VIDEO_MONETIZABLE_CONTENT_VIEWS_VALUE = 601;

    /**
     *
     *
     * <pre>
     * The number of total creative serves in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total creative serves" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_CREATIVE_SERVES = 139;</code>
     */
    public static final int VIDEO_REAL_TIME_CREATIVE_SERVES_VALUE = 139;

    /**
     *
     *
     * <pre>
     * The number of errors of type 100 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 100 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_100_COUNT = 143;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_100_COUNT_VALUE = 143;

    /**
     *
     *
     * <pre>
     * The number of errors of type 101 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 101 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_101_COUNT = 144;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_101_COUNT_VALUE = 144;

    /**
     *
     *
     * <pre>
     * The number of errors of type 102 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 102 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_102_COUNT = 145;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_102_COUNT_VALUE = 145;

    /**
     *
     *
     * <pre>
     * The number of errors of type 200 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 200 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_200_COUNT = 146;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_200_COUNT_VALUE = 146;

    /**
     *
     *
     * <pre>
     * The number of errors of type 201 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 201 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_201_COUNT = 147;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_201_COUNT_VALUE = 147;

    /**
     *
     *
     * <pre>
     * The number of errors of type 202 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 202 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_202_COUNT = 148;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_202_COUNT_VALUE = 148;

    /**
     *
     *
     * <pre>
     * The number of errors of type 203 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 203 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_203_COUNT = 149;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_203_COUNT_VALUE = 149;

    /**
     *
     *
     * <pre>
     * The number of errors of type 300 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 300 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_300_COUNT = 150;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_300_COUNT_VALUE = 150;

    /**
     *
     *
     * <pre>
     * The number of errors of type 301 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 301 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_301_COUNT = 151;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_301_COUNT_VALUE = 151;

    /**
     *
     *
     * <pre>
     * The number of errors of type 302 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 302 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_302_COUNT = 152;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_302_COUNT_VALUE = 152;

    /**
     *
     *
     * <pre>
     * The number of errors of type 303 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 303 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_303_COUNT = 153;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_303_COUNT_VALUE = 153;

    /**
     *
     *
     * <pre>
     * The number of errors of type 400 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 400 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_400_COUNT = 154;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_400_COUNT_VALUE = 154;

    /**
     *
     *
     * <pre>
     * The number of errors of type 401 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 401 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_401_COUNT = 155;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_401_COUNT_VALUE = 155;

    /**
     *
     *
     * <pre>
     * The number of errors of type 402 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 402 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_402_COUNT = 156;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_402_COUNT_VALUE = 156;

    /**
     *
     *
     * <pre>
     * The number of errors of type 403 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 403 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_403_COUNT = 157;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_403_COUNT_VALUE = 157;

    /**
     *
     *
     * <pre>
     * The number of errors of type 405 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 405 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_405_COUNT = 158;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_405_COUNT_VALUE = 158;

    /**
     *
     *
     * <pre>
     * The number of errors of type 406 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 406 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_406_COUNT = 159;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_406_COUNT_VALUE = 159;

    /**
     *
     *
     * <pre>
     * The number of errors of type 407 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 407 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_407_COUNT = 160;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_407_COUNT_VALUE = 160;

    /**
     *
     *
     * <pre>
     * The number of errors of type 408 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 408 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_408_COUNT = 161;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_408_COUNT_VALUE = 161;

    /**
     *
     *
     * <pre>
     * The number of errors of type 409 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 409 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_409_COUNT = 162;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_409_COUNT_VALUE = 162;

    /**
     *
     *
     * <pre>
     * The number of errors of type 410 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 410 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_410_COUNT = 163;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_410_COUNT_VALUE = 163;

    /**
     *
     *
     * <pre>
     * The number of errors of type 500 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 500 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_500_COUNT = 164;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_500_COUNT_VALUE = 164;

    /**
     *
     *
     * <pre>
     * The number of errors of type 501 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 501 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_501_COUNT = 165;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_501_COUNT_VALUE = 165;

    /**
     *
     *
     * <pre>
     * The number of errors of type 502 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 502 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_502_COUNT = 166;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_502_COUNT_VALUE = 166;

    /**
     *
     *
     * <pre>
     * The number of errors of type 503 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 503 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_503_COUNT = 167;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_503_COUNT_VALUE = 167;

    /**
     *
     *
     * <pre>
     * The number of errors of type 600 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 600 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_600_COUNT = 168;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_600_COUNT_VALUE = 168;

    /**
     *
     *
     * <pre>
     * The number of errors of type 601 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 601 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_601_COUNT = 169;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_601_COUNT_VALUE = 169;

    /**
     *
     *
     * <pre>
     * The number of errors of type 602 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 602 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_602_COUNT = 170;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_602_COUNT_VALUE = 170;

    /**
     *
     *
     * <pre>
     * The number of errors of type 603 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 603 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_603_COUNT = 171;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_603_COUNT_VALUE = 171;

    /**
     *
     *
     * <pre>
     * The number of errors of type 604 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 604 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_604_COUNT = 172;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_604_COUNT_VALUE = 172;

    /**
     *
     *
     * <pre>
     * The number of errors of type 900 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 900 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_900_COUNT = 173;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_900_COUNT_VALUE = 173;

    /**
     *
     *
     * <pre>
     * The number of errors of type 901 in video realtime reporting.
     *
     *
     *
     * Corresponds to "VAST error 901 count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_ERROR_901_COUNT = 174;</code>
     */
    public static final int VIDEO_REAL_TIME_ERROR_901_COUNT_VALUE = 174;

    /**
     *
     *
     * <pre>
     * The number of total impressions in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_IMPRESSIONS = 138;</code>
     */
    public static final int VIDEO_REAL_TIME_IMPRESSIONS_VALUE = 138;

    /**
     *
     *
     * <pre>
     * The number of matched queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total responses served" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_MATCHED_QUERIES = 140;</code>
     */
    public static final int VIDEO_REAL_TIME_MATCHED_QUERIES_VALUE = 140;

    /**
     *
     *
     * <pre>
     * The number of all errors in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total error count" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_TOTAL_ERROR_COUNT = 175;</code>
     */
    public static final int VIDEO_REAL_TIME_TOTAL_ERROR_COUNT_VALUE = 175;

    /**
     *
     *
     * <pre>
     * The number of total queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_TOTAL_QUERIES = 142;</code>
     */
    public static final int VIDEO_REAL_TIME_TOTAL_QUERIES_VALUE = 142;

    /**
     *
     *
     * <pre>
     * The number of unmatched queries in video realtime reporting.
     *
     *
     *
     * Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
     *
     * Compatible with the following report types:
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_REAL_TIME_UNMATCHED_QUERIES = 141;</code>
     */
    public static final int VIDEO_REAL_TIME_UNMATCHED_QUERIES_VALUE = 141;

    /**
     *
     *
     * <pre>
     * Number of times that the publisher specified a video ad played
     *  automatically.
     *
     *
     *
     * Corresponds to "Auto-plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AUTO_PLAYS = 103;</code>
     */
    public static final int VIDEO_VIEWERSHIP_AUTO_PLAYS_VALUE = 103;

    /**
     *
     *
     * <pre>
     * Average percentage of the video watched by users.
     *
     *
     *
     * Corresponds to "Average view rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE = 104;</code>
     */
    public static final int VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE_VALUE = 104;

    /**
     *
     *
     * <pre>
     * Average time(seconds) users watched the video.
     *
     *
     *
     * Corresponds to "Average view time" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME = 105;</code>
     */
    public static final int VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME_VALUE = 105;

    /**
     *
     *
     * <pre>
     * Number of times that the publisher specified a video ad was clicked to
     *  play.
     *
     *
     *
     * Corresponds to "Click-to-plays" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_CLICK_TO_PLAYS = 106;</code>
     */
    public static final int VIDEO_VIEWERSHIP_CLICK_TO_PLAYS_VALUE = 106;

    /**
     *
     *
     * <pre>
     * The number of times the video played to completion.
     *
     *
     *
     * Corresponds to "Completes" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_COMPLETES = 107;</code>
     */
    public static final int VIDEO_VIEWERSHIP_COMPLETES_VALUE = 107;

    /**
     *
     *
     * <pre>
     * Percentage of times the video played to the end.
     *
     *
     *
     * Corresponds to "Completion rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_COMPLETION_RATE = 108;</code>
     */
    public static final int VIDEO_VIEWERSHIP_COMPLETION_RATE_VALUE = 108;

    /**
     *
     *
     * <pre>
     * The number of engaged views: ad is viewed to completion or for 30s,
     *  whichever comes first.
     *
     *
     *
     * Corresponds to "Engaged views" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_ENGAGED_VIEWS = 109;</code>
     */
    public static final int VIDEO_VIEWERSHIP_ENGAGED_VIEWS_VALUE = 109;

    /**
     *
     *
     * <pre>
     * The number of times the video played to 25% of its length.
     *
     *
     *
     * Corresponds to "First quartiles" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_FIRST_QUARTILES = 110;</code>
     */
    public static final int VIDEO_VIEWERSHIP_FIRST_QUARTILES_VALUE = 110;

    /**
     *
     *
     * <pre>
     * The number of times the video reached its midpoint during play.
     *
     *
     *
     * Corresponds to "Midpoints" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_MIDPOINTS = 111;</code>
     */
    public static final int VIDEO_VIEWERSHIP_MIDPOINTS_VALUE = 111;

    /**
     *
     *
     * <pre>
     * The number of times a skip button is shown in video.
     *
     *
     *
     * Corresponds to "Skip buttons shown" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN = 112;</code>
     */
    public static final int VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN_VALUE = 112;

    /**
     *
     *
     * <pre>
     * The number of impressions where the video was played.
     *
     *
     *
     * Corresponds to "Starts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_STARTS = 113;</code>
     */
    public static final int VIDEO_VIEWERSHIP_STARTS_VALUE = 113;

    /**
     *
     *
     * <pre>
     * The number of times the video played to 75% of its length.
     *
     *
     *
     * Corresponds to "Third quartiles" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_THIRD_QUARTILES = 114;</code>
     */
    public static final int VIDEO_VIEWERSHIP_THIRD_QUARTILES_VALUE = 114;

    /**
     *
     *
     * <pre>
     * The number of times an error occurred, such as a VAST redirect error, a
     *  video playback error, or an invalid response error.
     *
     *
     *
     * Corresponds to "Total error count" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT = 115;</code>
     */
    public static final int VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT_VALUE = 115;

    /**
     *
     *
     * <pre>
     * The percentage of video error count.
     *
     *
     *
     * Corresponds to "Total error rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE = 94;</code>
     */
    public static final int VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE_VALUE = 94;

    /**
     *
     *
     * <pre>
     * Duration of the video creative.
     *
     *
     *
     * Corresponds to "Video length" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_VIDEO_LENGTH = 116;</code>
     */
    public static final int VIDEO_VIEWERSHIP_VIDEO_LENGTH_VALUE = 116;

    /**
     *
     *
     * <pre>
     * View-through rate represented as a percentage.
     *
     *
     *
     * Corresponds to "Video view through rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `PERCENT`
     * </pre>
     *
     * <code>VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE = 117;</code>
     */
    public static final int VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE_VALUE = 117;

    /**
     *
     *
     * <pre>
     * Number of winning bids received from Open Bidding buyers, even when the
     *  winning bid is placed at the end of a mediation for mobile apps chain.
     *
     *
     *
     * Corresponds to "Yield group auctions won" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_AUCTIONS_WON = 80;</code>
     */
    public static final int YIELD_GROUP_AUCTIONS_WON_VALUE = 80;

    /**
     *
     *
     * <pre>
     * Number of bids received from Open Bidding buyers, regardless of whether
     *  the returned bid competes in an auction.
     *
     *
     *
     * Corresponds to "Yield group bids" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_BIDS = 81;</code>
     */
    public static final int YIELD_GROUP_BIDS_VALUE = 81;

    /**
     *
     *
     * <pre>
     * Number of bids received from Open Bidding buyers that competed in
     *  the auction.
     *
     *
     *
     * Corresponds to "Yield group bids in auction" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_BIDS_IN_AUCTION = 82;</code>
     */
    public static final int YIELD_GROUP_BIDS_IN_AUCTION_VALUE = 82;

    /**
     *
     *
     * <pre>
     * Number of times a yield partner is asked to return bid to fill
     *  a yield group request.
     *
     *
     *
     * Corresponds to "Yield group callouts" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_CALLOUTS = 83;</code>
     */
    public static final int YIELD_GROUP_CALLOUTS_VALUE = 83;

    /**
     *
     *
     * <pre>
     * The estimated net rate for yield groups or individual
     *  yield group partners.
     *
     *
     *
     * Corresponds to "Yield group estimated CPM" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_ESTIMATED_CPM = 88;</code>
     */
    public static final int YIELD_GROUP_ESTIMATED_CPM_VALUE = 88;

    /**
     *
     *
     * <pre>
     * Total net revenue earned by a yield group, based upon the yield group
     *  estimated CPM and yield group impressions recorded.
     *
     *
     *
     * Corresponds to "Yield group estimated revenue" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_ESTIMATED_REVENUE = 87;</code>
     */
    public static final int YIELD_GROUP_ESTIMATED_REVENUE_VALUE = 87;

    /**
     *
     *
     * <pre>
     * Number of matched yield group requests where a yield partner delivered
     *  their ad to publisher inventory.
     *
     *
     *
     * Corresponds to "Yield group impressions" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_IMPRESSIONS = 85;</code>
     */
    public static final int YIELD_GROUP_IMPRESSIONS_VALUE = 85;

    /**
     *
     *
     * <pre>
     * Yield group Mediation fill rate indicating how often a network
     *  fills an ad request.
     *
     *
     *
     * Corresponds to "Yield group mediation fill rate" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_FILL_RATE = 89;</code>
     */
    public static final int YIELD_GROUP_MEDIATION_FILL_RATE_VALUE = 89;

    /**
     *
     *
     * <pre>
     * Total requests where a Mediation chain was served.
     *
     *
     *
     * Corresponds to "Yield group mediation matched queries" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_MATCHED_QUERIES = 86;</code>
     */
    public static final int YIELD_GROUP_MEDIATION_MATCHED_QUERIES_VALUE = 86;

    /**
     *
     *
     * <pre>
     * The number of mediation chain passback across all channels.
     *
     *
     *
     * Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_PASSBACKS = 118;</code>
     */
    public static final int YIELD_GROUP_MEDIATION_PASSBACKS_VALUE = 118;

    /**
     *
     *
     * <pre>
     * Revenue per thousand impressions based on data collected by Ad Manager
     *  from third-party ad network reports.
     *
     *
     *
     * Corresponds to "Yield group mediation third party ECPM" in the Ad Manager
     * UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `DOUBLE`
     * </pre>
     *
     * <code>YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM = 90;</code>
     */
    public static final int YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM_VALUE = 90;

    /**
     *
     *
     * <pre>
     * The yield group revenue accrued in the child network's own account but
     *  paid to their parent network through auto-payment. This metric is only
     *  relevant for a "Manage Account" child network.
     *
     *
     *
     * Corresponds to "Yield group revenue paid through MCM auto-payment" in the
     * Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `MONEY`
     * </pre>
     *
     * <code>YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT = 215;</code>
     */
    public static final int YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT_VALUE = 215;

    /**
     *
     *
     * <pre>
     * Number of times a yield group buyer successfully returned a bid in
     *  response to a yield group callout.
     *
     *
     *
     * Corresponds to "Yield group successful responses" in the Ad Manager UI.
     *
     * Compatible with the following report types: `HISTORICAL`
     *
     * Data format: `INTEGER`
     * </pre>
     *
     * <code>YIELD_GROUP_SUCCESSFUL_RESPONSES = 84;</code>
     */
    public static final int YIELD_GROUP_SUCCESSFUL_RESPONSES_VALUE = 84;

    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Metric valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Metric forNumber(int value) {
      switch (value) {
        case 0:
          return METRIC_UNSPECIFIED;
        case 223:
          return ACTIVE_USERS;
        case 445:
          return ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT;
        case 659:
          return ACTIVE_VIEW_AUDIBLE_IMPRESSIONS;
        case 446:
          return ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT;
        case 447:
          return ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT;
        case 448:
          return ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT;
        case 449:
          return ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT;
        case 660:
          return ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS;
        case 661:
          return ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS;
        case 61:
          return ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME;
        case 58:
          return ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS;
        case 450:
          return ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT;
        case 451:
          return ACTIVE_VIEW_EVER_AUDIBLE_PERCENT;
        case 452:
          return ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT;
        case 453:
          return ACTIVE_VIEW_EVER_MUTED_PERCENT;
        case 411:
          return ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION;
        case 57:
          return ACTIVE_VIEW_MEASURABLE_IMPRESSIONS;
        case 60:
          return ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE;
        case 662:
          return ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS;
        case 663:
          return ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS;
        case 664:
          return ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 665:
          return ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS;
        case 454:
          return ACTIVE_VIEW_PLUS_MEASURABLE_COUNT;
        case 414:
          return ACTIVE_VIEW_REVENUE;
        case 666:
          return ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION;
        case 56:
          return ACTIVE_VIEW_VIEWABLE_IMPRESSIONS;
        case 667:
          return ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 59:
          return ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE;
        case 73:
          return ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME;
        case 70:
          return ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS;
        case 69:
          return ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS;
        case 72:
          return ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE;
        case 642:
          return ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS;
        case 643:
          return ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS;
        case 644:
          return ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 645:
          return ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION;
        case 68:
          return ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS;
        case 646:
          return ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 71:
          return ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE;
        case 26:
          return ADSENSE_AVERAGE_ECPM;
        case 23:
          return ADSENSE_CLICKS;
        case 24:
          return ADSENSE_CTR;
        case 22:
          return ADSENSE_IMPRESSIONS;
        case 28:
          return ADSENSE_PERCENT_CLICKS;
        case 27:
          return ADSENSE_PERCENT_IMPRESSIONS;
        case 29:
          return ADSENSE_PERCENT_REVENUE;
        case 30:
          return ADSENSE_PERCENT_REVENUE_WITHOUT_CPD;
        case 41:
          return ADSENSE_RESPONSES_SERVED;
        case 25:
          return ADSENSE_REVENUE;
        case 79:
          return AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME;
        case 76:
          return AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS;
        case 75:
          return AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS;
        case 78:
          return AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE;
        case 654:
          return AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS;
        case 655:
          return AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS;
        case 656:
          return AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 657:
          return AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION;
        case 74:
          return AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS;
        case 658:
          return AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 77:
          return AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE;
        case 18:
          return AD_EXCHANGE_AVERAGE_ECPM;
        case 15:
          return AD_EXCHANGE_CLICKS;
        case 244:
          return AD_EXCHANGE_CPC;
        case 16:
          return AD_EXCHANGE_CTR;
        case 245:
          return AD_EXCHANGE_DELIVERY_RATE;
        case 14:
          return AD_EXCHANGE_IMPRESSIONS;
        case 427:
          return AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER;
        case 428:
          return AD_EXCHANGE_IMPRESSIONS_PER_SESSION;
        case 246:
          return AD_EXCHANGE_LIFT;
        case 247:
          return AD_EXCHANGE_MATCHED_REQUEST_CTR;
        case 248:
          return AD_EXCHANGE_MATCHED_REQUEST_ECPM;
        case 249:
          return AD_EXCHANGE_MATCH_RATE;
        case 250:
          return AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS;
        case 251:
          return AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS;
        case 20:
          return AD_EXCHANGE_PERCENT_CLICKS;
        case 19:
          return AD_EXCHANGE_PERCENT_IMPRESSIONS;
        case 21:
          return AD_EXCHANGE_PERCENT_REVENUE;
        case 31:
          return AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD;
        case 252:
          return AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM;
        case 253:
          return AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS;
        case 254:
          return AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE;
        case 42:
          return AD_EXCHANGE_RESPONSES_SERVED;
        case 17:
          return AD_EXCHANGE_REVENUE;
        case 212:
          return AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT;
        case 429:
          return AD_EXCHANGE_REVENUE_PER_AD_VIEWER;
        case 255:
          return AD_EXCHANGE_TOTAL_REQUESTS;
        case 256:
          return AD_EXCHANGE_TOTAL_REQUEST_CTR;
        case 257:
          return AD_EXCHANGE_TOTAL_REQUEST_ECPM;
        case 241:
          return AD_EXPOSURE_SECONDS;
        case 38:
          return AD_REQUESTS;
        case 67:
          return AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME;
        case 64:
          return AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS;
        case 63:
          return AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS;
        case 66:
          return AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE;
        case 332:
          return AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS;
        case 331:
          return AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS;
        case 334:
          return AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 335:
          return AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION;
        case 62:
          return AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS;
        case 333:
          return AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION;
        case 65:
          return AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE;
        case 34:
          return AD_SERVER_AVERAGE_ECPM;
        case 10:
          return AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD;
        case 262:
          return AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS;
        case 7:
          return AD_SERVER_CLICKS;
        case 431:
          return AD_SERVER_COMPLETED_VIEWS;
        case 554:
          return AD_SERVER_COVIEWED_IMPRESSIONS;
        case 32:
          return AD_SERVER_CPD_REVENUE;
        case 8:
          return AD_SERVER_CTR;
        case 483:
          return AD_SERVER_GROSS_REVENUE;
        case 484:
          return AD_SERVER_GROSS_REVENUE_WITHOUT_CPD;
        case 6:
          return AD_SERVER_IMPRESSIONS;
        case 222:
          return AD_SERVER_IMPRESSIONS_WITH_COMPANION;
        case 338:
          return AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS;
        case 12:
          return AD_SERVER_PERCENT_CLICKS;
        case 11:
          return AD_SERVER_PERCENT_IMPRESSIONS;
        case 35:
          return AD_SERVER_PERCENT_REVENUE;
        case 13:
          return AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD;
        case 40:
          return AD_SERVER_RESPONSES_SERVED;
        case 33:
          return AD_SERVER_REVENUE;
        case 213:
          return AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT;
        case 9:
          return AD_SERVER_REVENUE_WITHOUT_CPD;
        case 274:
          return AD_SERVER_TARGETED_CLICKS;
        case 275:
          return AD_SERVER_TARGETED_IMPRESSIONS;
        case 264:
          return AD_SERVER_TRACKED_ADS;
        case 261:
          return AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS;
        case 259:
          return AD_SERVER_UNFILTERED_CLICKS;
        case 260:
          return AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS;
        case 263:
          return AD_SERVER_UNFILTERED_TRACKED_ADS;
        case 242:
          return AD_UNIT_EXPOSURE_SECONDS;
        case 425:
          return AD_VIEWERS;
        case 430:
          return ATN_ADS_FAILED_TO_RENDER;
        case 342:
          return ATN_ELIGIBLE_LINE_ITEMS;
        case 343:
          return ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS;
        case 344:
          return ATN_HBT_ALLOWED_AD_REQUESTS;
        case 345:
          return ATN_HBT_BIDS_IN_AUCTION;
        case 346:
          return ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS;
        case 347:
          return ATN_HBT_CANDIDATE_BIDS;
        case 348:
          return ATN_HBT_INVALID_AD_REQUESTS;
        case 472:
          return ATN_HBT_NO_BIDS_AD_REQUESTS;
        case 349:
          return ATN_HBT_REJECTED_BIDS;
        case 350:
          return ATN_HBT_VALID_AD_REQUESTS;
        case 473:
          return ATN_HBT_WITH_BIDS_AD_REQUESTS;
        case 351:
          return ATN_INVALID_AD_REQUESTS;
        case 476:
          return ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED;
        case 352:
          return ATN_LINE_ITEMS_IN_AUCTION;
        case 515:
          return ATN_LINE_ITEMS_NOT_COMPETING;
        case 353:
          return ATN_LINE_ITEMS_NOT_SELECTED;
        case 354:
          return ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS;
        case 355:
          return ATN_LINE_ITEM_TARGETED_AD_REQUESTS;
        case 356:
          return ATN_MEDIATION_ALLOWED_AD_REQUESTS;
        case 357:
          return ATN_MEDIATION_INVALID_AD_REQUESTS;
        case 358:
          return ATN_MEDIATION_LOADED_ADS_FROM_CHAINS;
        case 474:
          return ATN_MEDIATION_NO_PARTNER_AD_REQUESTS;
        case 359:
          return ATN_MEDIATION_PARTNERS_IN_AUCTION;
        case 360:
          return ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS;
        case 361:
          return ATN_MEDIATION_REJECTED_PARTNERS;
        case 362:
          return ATN_MEDIATION_TARGETED_PARTNERS;
        case 442:
          return ATN_MEDIATION_TOTAL_YIELD_PARTNERS;
        case 363:
          return ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS;
        case 364:
          return ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS;
        case 365:
          return ATN_MEDIATION_VALID_AD_REQUESTS;
        case 475:
          return ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS;
        case 366:
          return ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS;
        case 367:
          return ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT;
        case 368:
          return ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS;
        case 369:
          return ATN_PROGRAMMATIC_BIDS_IN_AUCTION;
        case 370:
          return ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS;
        case 371:
          return ATN_PROGRAMMATIC_BID_REQUESTS_SENT;
        case 372:
          return ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE;
        case 373:
          return ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES;
        case 374:
          return ATN_PROGRAMMATIC_BID_REQUEST_ERRORS;
        case 375:
          return ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS;
        case 376:
          return ATN_PROGRAMMATIC_REJECTED_BIDS;
        case 377:
          return ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS;
        case 378:
          return ATN_PROGRAMMATIC_TOTAL_BIDS;
        case 379:
          return ATN_PROGRAMMATIC_VALID_AD_REQUESTS;
        case 380:
          return ATN_REJECTED_LINE_ITEMS;
        case 381:
          return ATN_SERVED_MEDIATION_CHAINS;
        case 382:
          return ATN_SERVED_SINGLE_ADS;
        case 383:
          return ATN_TARGETED_LINE_ITEMS;
        case 384:
          return ATN_TOTAL_AD_REQUESTS;
        case 385:
          return ATN_TOTAL_COMPETING_ADS_IN_AUCTION;
        case 387:
          return ATN_TOTAL_LOADED_ADS;
        case 389:
          return ATN_VALID_AD_REQUESTS;
        case 390:
          return ATN_YIELD_GROUP_MEDIATION_PASSBACKS;
        case 37:
          return AVERAGE_ECPM;
        case 5:
          return AVERAGE_ECPM_WITHOUT_CPD;
        case 224:
          return AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION;
        case 225:
          return AVERAGE_ENGAGEMENT_SECONDS_PER_USER;
        case 418:
          return AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR;
        case 226:
          return AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER;
        case 227:
          return AVERAGE_REVENUE_PER_USER;
        case 228:
          return AVERAGE_SESSION_SECONDS;
        case 443:
          return BIDS;
        case 444:
          return BID_AVERAGE_CPM;
        case 433:
          return BOUNCE_RATE;
        case 2:
          return CLICKS;
        case 44:
          return CODE_SERVED_COUNT;
        case 440:
          return CPC_REVENUE;
        case 441:
          return CPM_REVENUE;
        case 324:
          return CREATIVE_LOAD_TIME_0_500_PERCENT;
        case 326:
          return CREATIVE_LOAD_TIME_1000_2000_PERCENT;
        case 327:
          return CREATIVE_LOAD_TIME_2000_4000_PERCENT;
        case 328:
          return CREATIVE_LOAD_TIME_4000_8000_PERCENT;
        case 325:
          return CREATIVE_LOAD_TIME_500_1000_PERCENT;
        case 329:
          return CREATIVE_LOAD_TIME_GT_8000_PERCENT;
        case 3:
          return CTR;
        case 542:
          return DEALS_BIDS;
        case 543:
          return DEALS_BID_RATE;
        case 544:
          return DEALS_BID_REQUESTS;
        case 545:
          return DEALS_WINNING_BIDS;
        case 546:
          return DEALS_WIN_RATE;
        case 521:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT;
        case 522:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT;
        case 523:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT;
        case 524:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT;
        case 525:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT;
        case 520:
          return DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT;
        case 526:
          return DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT;
        case 527:
          return DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT;
        case 528:
          return DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT;
        case 529:
          return DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT;
        case 531:
          return DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT;
        case 530:
          return DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT;
        case 415:
          return DROPOFF_RATE;
        case 229:
          return ENGAGED_SESSIONS;
        case 230:
          return ENGAGED_SESSIONS_PER_USER;
        case 426:
          return ENGAGEMENT_RATE;
        case 270:
          return EUROPEAN_REGULATIONS_CONSENT_RATE;
        case 271:
          return EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE;
        case 272:
          return EUROPEAN_REGULATIONS_MESSAGES_SHOWN;
        case 273:
          return EUROPEAN_REGULATIONS_NO_CONSENT_RATE;
        case 258:
          return FILL_RATE;
        case 231:
          return GOOGLE_ANALYTICS_CLICKS;
        case 232:
          return GOOGLE_ANALYTICS_CTR;
        case 233:
          return GOOGLE_ANALYTICS_ECPM;
        case 234:
          return GOOGLE_ANALYTICS_IMPRESSIONS;
        case 235:
          return GOOGLE_ANALYTICS_REVENUE;
        case 236:
          return GOOGLE_ANALYTICS_VIEWS;
        case 237:
          return GOOGLE_ANALYTICS_VIEWS_PER_USER;
        case 129:
          return GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS;
        case 128:
          return GOOGLE_SOLD_AUCTION_IMPRESSIONS;
        case 131:
          return GOOGLE_SOLD_COVIEWED_IMPRESSIONS;
        case 130:
          return GOOGLE_SOLD_IMPRESSIONS;
        case 127:
          return GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS;
        case 126:
          return GOOGLE_SOLD_RESERVATION_IMPRESSIONS;
        case 1:
          return IMPRESSIONS;
        case 407:
          return INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS;
        case 547:
          return INVENTORY_SHARES;
        case 548:
          return INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES;
        case 404:
          return INVOICED_IMPRESSIONS;
        case 405:
          return INVOICED_UNFILLED_IMPRESSIONS;
        case 584:
          return MEDIATION_CHAINS_FILLED;
        case 412:
          return MUTED_IMPRESSIONS;
        case 409:
          return MUTE_ELIGIBLE_IMPRESSIONS;
        case 463:
          return OPPORTUNITIES;
        case 432:
          return OVERDELIVERED_IMPRESSIONS;
        case 135:
          return PARTNER_SALES_FILLED_POD_REQUESTS;
        case 136:
          return PARTNER_SALES_FILL_RATE;
        case 137:
          return PARTNER_SALES_PARTNER_MATCH_RATE;
        case 132:
          return PARTNER_SALES_QUERIES;
        case 133:
          return PARTNER_SALES_UNFILLED_IMPRESSIONS;
        case 134:
          return PARTNER_SALES_UNMATCHED_QUERIES;
        case 125:
          return PARTNER_SOLD_CODE_SERVED;
        case 124:
          return PARTNER_SOLD_COVIEWED_IMPRESSIONS;
        case 123:
          return PARTNER_SOLD_IMPRESSIONS;
        case 177:
          return PROGRAMMATIC_ELIGIBLE_AD_REQUESTS;
        case 178:
          return PROGRAMMATIC_MATCH_RATE;
        case 176:
          return PROGRAMMATIC_RESPONSES_SERVED;
        case 416:
          return REACH_IMPRESSIONS;
        case 39:
          return RESPONSES_SERVED;
        case 238:
          return RETENTION;
        case 36:
          return REVENUE;
        case 214:
          return REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT;
        case 4:
          return REVENUE_WITHOUT_CPD;
        case 413:
          return REWARDS_GRANTED;
        case 587:
          return RICH_MEDIA_AVERAGE_DISPLAY_TIME;
        case 588:
          return RICH_MEDIA_AVERAGE_INTERACTION_TIME;
        case 589:
          return RICH_MEDIA_BACKUP_IMAGES;
        case 599:
          return RICH_MEDIA_CUSTOM_EVENT_COUNT;
        case 600:
          return RICH_MEDIA_CUSTOM_EVENT_TIME;
        case 590:
          return RICH_MEDIA_DISPLAY_TIME;
        case 591:
          return RICH_MEDIA_EXPANDING_TIME;
        case 592:
          return RICH_MEDIA_EXPANSIONS;
        case 593:
          return RICH_MEDIA_FULL_SCREEN_IMPRESSIONS;
        case 594:
          return RICH_MEDIA_INTERACTION_COUNT;
        case 595:
          return RICH_MEDIA_INTERACTION_RATE;
        case 596:
          return RICH_MEDIA_INTERACTION_TIME;
        case 597:
          return RICH_MEDIA_INTERACTIVE_IMPRESSIONS;
        case 598:
          return RICH_MEDIA_MANUAL_CLOSES;
        case 503:
          return RICH_MEDIA_VIDEO_COMPLETES;
        case 505:
          return RICH_MEDIA_VIDEO_INTERACTIONS;
        case 504:
          return RICH_MEDIA_VIDEO_INTERACTION_RATE;
        case 506:
          return RICH_MEDIA_VIDEO_MIDPOINTS;
        case 507:
          return RICH_MEDIA_VIDEO_MUTES;
        case 508:
          return RICH_MEDIA_VIDEO_PAUSES;
        case 509:
          return RICH_MEDIA_VIDEO_PLAYS;
        case 510:
          return RICH_MEDIA_VIDEO_REPLAYS;
        case 511:
          return RICH_MEDIA_VIDEO_STOPS;
        case 512:
          return RICH_MEDIA_VIDEO_UNMUTES;
        case 513:
          return RICH_MEDIA_VIDEO_VIEW_RATE;
        case 514:
          return RICH_MEDIA_VIDEO_VIEW_TIME;
        case 477:
          return SELL_THROUGH_AVAILABLE_IMPRESSIONS;
        case 478:
          return SELL_THROUGH_FORECASTED_IMPRESSIONS;
        case 479:
          return SELL_THROUGH_RESERVED_IMPRESSIONS;
        case 480:
          return SELL_THROUGH_SELL_THROUGH_RATE;
        case 434:
          return SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS;
        case 435:
          return SERVER_SIDE_UNWRAPPING_CALLOUTS;
        case 436:
          return SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES;
        case 437:
          return SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES;
        case 438:
          return SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES;
        case 439:
          return SERVER_SIDE_UNWRAPPING_TIMEOUTS;
        case 239:
          return SESSIONS;
        case 455:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT;
        case 457:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT;
        case 458:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT;
        case 459:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT;
        case 456:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT;
        case 460:
          return TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT;
        case 276:
          return TARGETED_CLICKS;
        case 277:
          return TARGETED_IMPRESSIONS;
        case 45:
          return UNFILLED_IMPRESSIONS;
        case 417:
          return UNIQUE_VISITORS;
        case 408:
          return UNLOADED_IMPRESSIONS_DUE_TO_CPU;
        case 406:
          return UNLOADED_IMPRESSIONS_DUE_TO_NETWORK;
        case 43:
          return UNMATCHED_AD_REQUESTS;
        case 550:
          return UNVIEWED_REASON_OTHER_PERCENT;
        case 553:
          return UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT;
        case 551:
          return UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT;
        case 552:
          return UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT;
        case 549:
          return UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT;
        case 240:
          return USER_ENGAGEMENT_DURATION_IN_SECONDS;
        case 486:
          return USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE;
        case 487:
          return USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT;
        case 488:
          return USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN;
        case 489:
          return USER_MESSAGES_ALLOW_ADS_PAGEVIEWS;
        case 490:
          return USER_MESSAGES_CCPA_MESSAGES_SHOWN;
        case 491:
          return USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN;
        case 492:
          return USER_MESSAGES_IDFA_ATT_CONSENT;
        case 493:
          return USER_MESSAGES_IDFA_ATT_CONSENT_RATE;
        case 494:
          return USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT;
        case 495:
          return USER_MESSAGES_IDFA_ATT_DECLINE_RATE;
        case 496:
          return USER_MESSAGES_IDFA_EXPLAINERS_SHOWN;
        case 497:
          return USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN;
        case 498:
          return USER_MESSAGES_IDFA_NO_DECISION;
        case 121:
          return USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN;
        case 122:
          return USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS;
        case 499:
          return USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS;
        case 500:
          return USER_MESSAGES_TOTAL_ESTIMATED_REVENUE;
        case 501:
          return USER_MESSAGES_UPTC_MESSAGES_SHOWN;
        case 502:
          return USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO;
        case 180:
          return VIDEO_ERROR_100_COUNT;
        case 181:
          return VIDEO_ERROR_101_COUNT;
        case 182:
          return VIDEO_ERROR_102_COUNT;
        case 183:
          return VIDEO_ERROR_200_COUNT;
        case 184:
          return VIDEO_ERROR_201_COUNT;
        case 185:
          return VIDEO_ERROR_202_COUNT;
        case 186:
          return VIDEO_ERROR_203_COUNT;
        case 187:
          return VIDEO_ERROR_300_COUNT;
        case 188:
          return VIDEO_ERROR_301_COUNT;
        case 189:
          return VIDEO_ERROR_302_COUNT;
        case 190:
          return VIDEO_ERROR_303_COUNT;
        case 191:
          return VIDEO_ERROR_400_COUNT;
        case 192:
          return VIDEO_ERROR_401_COUNT;
        case 193:
          return VIDEO_ERROR_402_COUNT;
        case 194:
          return VIDEO_ERROR_403_COUNT;
        case 195:
          return VIDEO_ERROR_405_COUNT;
        case 196:
          return VIDEO_ERROR_406_COUNT;
        case 197:
          return VIDEO_ERROR_407_COUNT;
        case 198:
          return VIDEO_ERROR_408_COUNT;
        case 199:
          return VIDEO_ERROR_409_COUNT;
        case 200:
          return VIDEO_ERROR_410_COUNT;
        case 201:
          return VIDEO_ERROR_500_COUNT;
        case 202:
          return VIDEO_ERROR_501_COUNT;
        case 203:
          return VIDEO_ERROR_502_COUNT;
        case 204:
          return VIDEO_ERROR_503_COUNT;
        case 205:
          return VIDEO_ERROR_600_COUNT;
        case 206:
          return VIDEO_ERROR_601_COUNT;
        case 207:
          return VIDEO_ERROR_602_COUNT;
        case 208:
          return VIDEO_ERROR_603_COUNT;
        case 209:
          return VIDEO_ERROR_604_COUNT;
        case 210:
          return VIDEO_ERROR_900_COUNT;
        case 211:
          return VIDEO_ERROR_901_COUNT;
        case 92:
          return VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE;
        case 93:
          return VIDEO_INTERACTION_COLLAPSES;
        case 95:
          return VIDEO_INTERACTION_EXPANDS;
        case 96:
          return VIDEO_INTERACTION_FULL_SCREENS;
        case 97:
          return VIDEO_INTERACTION_MUTES;
        case 98:
          return VIDEO_INTERACTION_PAUSES;
        case 99:
          return VIDEO_INTERACTION_RESUMES;
        case 100:
          return VIDEO_INTERACTION_REWINDS;
        case 101:
          return VIDEO_INTERACTION_UNMUTES;
        case 102:
          return VIDEO_INTERACTION_VIDEO_SKIPS;
        case 601:
          return VIDEO_MONETIZABLE_CONTENT_VIEWS;
        case 139:
          return VIDEO_REAL_TIME_CREATIVE_SERVES;
        case 143:
          return VIDEO_REAL_TIME_ERROR_100_COUNT;
        case 144:
          return VIDEO_REAL_TIME_ERROR_101_COUNT;
        case 145:
          return VIDEO_REAL_TIME_ERROR_102_COUNT;
        case 146:
          return VIDEO_REAL_TIME_ERROR_200_COUNT;
        case 147:
          return VIDEO_REAL_TIME_ERROR_201_COUNT;
        case 148:
          return VIDEO_REAL_TIME_ERROR_202_COUNT;
        case 149:
          return VIDEO_REAL_TIME_ERROR_203_COUNT;
        case 150:
          return VIDEO_REAL_TIME_ERROR_300_COUNT;
        case 151:
          return VIDEO_REAL_TIME_ERROR_301_COUNT;
        case 152:
          return VIDEO_REAL_TIME_ERROR_302_COUNT;
        case 153:
          return VIDEO_REAL_TIME_ERROR_303_COUNT;
        case 154:
          return VIDEO_REAL_TIME_ERROR_400_COUNT;
        case 155:
          return VIDEO_REAL_TIME_ERROR_401_COUNT;
        case 156:
          return VIDEO_REAL_TIME_ERROR_402_COUNT;
        case 157:
          return VIDEO_REAL_TIME_ERROR_403_COUNT;
        case 158:
          return VIDEO_REAL_TIME_ERROR_405_COUNT;
        case 159:
          return VIDEO_REAL_TIME_ERROR_406_COUNT;
        case 160:
          return VIDEO_REAL_TIME_ERROR_407_COUNT;
        case 161:
          return VIDEO_REAL_TIME_ERROR_408_COUNT;
        case 162:
          return VIDEO_REAL_TIME_ERROR_409_COUNT;
        case 163:
          return VIDEO_REAL_TIME_ERROR_410_COUNT;
        case 164:
          return VIDEO_REAL_TIME_ERROR_500_COUNT;
        case 165:
          return VIDEO_REAL_TIME_ERROR_501_COUNT;
        case 166:
          return VIDEO_REAL_TIME_ERROR_502_COUNT;
        case 167:
          return VIDEO_REAL_TIME_ERROR_503_COUNT;
        case 168:
          return VIDEO_REAL_TIME_ERROR_600_COUNT;
        case 169:
          return VIDEO_REAL_TIME_ERROR_601_COUNT;
        case 170:
          return VIDEO_REAL_TIME_ERROR_602_COUNT;
        case 171:
          return VIDEO_REAL_TIME_ERROR_603_COUNT;
        case 172:
          return VIDEO_REAL_TIME_ERROR_604_COUNT;
        case 173:
          return VIDEO_REAL_TIME_ERROR_900_COUNT;
        case 174:
          return VIDEO_REAL_TIME_ERROR_901_COUNT;
        case 138:
          return VIDEO_REAL_TIME_IMPRESSIONS;
        case 140:
          return VIDEO_REAL_TIME_MATCHED_QUERIES;
        case 175:
          return VIDEO_REAL_TIME_TOTAL_ERROR_COUNT;
        case 142:
          return VIDEO_REAL_TIME_TOTAL_QUERIES;
        case 141:
          return VIDEO_REAL_TIME_UNMATCHED_QUERIES;
        case 103:
          return VIDEO_VIEWERSHIP_AUTO_PLAYS;
        case 104:
          return VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE;
        case 105:
          return VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME;
        case 106:
          return VIDEO_VIEWERSHIP_CLICK_TO_PLAYS;
        case 107:
          return VIDEO_VIEWERSHIP_COMPLETES;
        case 108:
          return VIDEO_VIEWERSHIP_COMPLETION_RATE;
        case 109:
          return VIDEO_VIEWERSHIP_ENGAGED_VIEWS;
        case 110:
          return VIDEO_VIEWERSHIP_FIRST_QUARTILES;
        case 111:
          return VIDEO_VIEWERSHIP_MIDPOINTS;
        case 112:
          return VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN;
        case 113:
          return VIDEO_VIEWERSHIP_STARTS;
        case 114:
          return VIDEO_VIEWERSHIP_THIRD_QUARTILES;
        case 115:
          return VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT;
        case 94:
          return VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE;
        case 116:
          return VIDEO_VIEWERSHIP_VIDEO_LENGTH;
        case 117:
          return VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE;
        case 80:
          return YIELD_GROUP_AUCTIONS_WON;
        case 81:
          return YIELD_GROUP_BIDS;
        case 82:
          return YIELD_GROUP_BIDS_IN_AUCTION;
        case 83:
          return YIELD_GROUP_CALLOUTS;
        case 88:
          return YIELD_GROUP_ESTIMATED_CPM;
        case 87:
          return YIELD_GROUP_ESTIMATED_REVENUE;
        case 85:
          return YIELD_GROUP_IMPRESSIONS;
        case 89:
          return YIELD_GROUP_MEDIATION_FILL_RATE;
        case 86:
          return YIELD_GROUP_MEDIATION_MATCHED_QUERIES;
        case 118:
          return YIELD_GROUP_MEDIATION_PASSBACKS;
        case 90:
          return YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM;
        case 215:
          return YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT;
        case 84:
          return YIELD_GROUP_SUCCESSFUL_RESPONSES;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Metric> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<Metric> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Metric>() {
          public Metric findValueByNumber(int number) {
            return Metric.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (index == -1) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(index);
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(2);
    }

    private static final Metric[] VALUES = getStaticValuesArray();

    private static Metric[] getStaticValuesArray() {
      return new Metric[] {
        METRIC_UNSPECIFIED,
        ACTIVE_USERS,
        ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT,
        ACTIVE_VIEW_AUDIBLE_IMPRESSIONS,
        ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT,
        ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT,
        ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT,
        ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT,
        ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS,
        ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS,
        ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME,
        ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS,
        ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT,
        ACTIVE_VIEW_EVER_AUDIBLE_PERCENT,
        ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT,
        ACTIVE_VIEW_EVER_MUTED_PERCENT,
        ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION,
        ACTIVE_VIEW_MEASURABLE_IMPRESSIONS,
        ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE,
        ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS,
        ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS,
        ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS,
        ACTIVE_VIEW_PLUS_MEASURABLE_COUNT,
        ACTIVE_VIEW_REVENUE,
        ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION,
        ACTIVE_VIEW_VIEWABLE_IMPRESSIONS,
        ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE,
        ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME,
        ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS,
        ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS,
        ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE,
        ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS,
        ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS,
        ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION,
        ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS,
        ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE,
        ADSENSE_AVERAGE_ECPM,
        ADSENSE_CLICKS,
        ADSENSE_CTR,
        ADSENSE_IMPRESSIONS,
        ADSENSE_PERCENT_CLICKS,
        ADSENSE_PERCENT_IMPRESSIONS,
        ADSENSE_PERCENT_REVENUE,
        ADSENSE_PERCENT_REVENUE_WITHOUT_CPD,
        ADSENSE_RESPONSES_SERVED,
        ADSENSE_REVENUE,
        AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME,
        AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS,
        AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS,
        AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE,
        AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS,
        AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS,
        AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION,
        AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS,
        AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE,
        AD_EXCHANGE_AVERAGE_ECPM,
        AD_EXCHANGE_CLICKS,
        AD_EXCHANGE_CPC,
        AD_EXCHANGE_CTR,
        AD_EXCHANGE_DELIVERY_RATE,
        AD_EXCHANGE_IMPRESSIONS,
        AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER,
        AD_EXCHANGE_IMPRESSIONS_PER_SESSION,
        AD_EXCHANGE_LIFT,
        AD_EXCHANGE_MATCHED_REQUEST_CTR,
        AD_EXCHANGE_MATCHED_REQUEST_ECPM,
        AD_EXCHANGE_MATCH_RATE,
        AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS,
        AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS,
        AD_EXCHANGE_PERCENT_CLICKS,
        AD_EXCHANGE_PERCENT_IMPRESSIONS,
        AD_EXCHANGE_PERCENT_REVENUE,
        AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD,
        AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM,
        AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS,
        AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE,
        AD_EXCHANGE_RESPONSES_SERVED,
        AD_EXCHANGE_REVENUE,
        AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT,
        AD_EXCHANGE_REVENUE_PER_AD_VIEWER,
        AD_EXCHANGE_TOTAL_REQUESTS,
        AD_EXCHANGE_TOTAL_REQUEST_CTR,
        AD_EXCHANGE_TOTAL_REQUEST_ECPM,
        AD_EXPOSURE_SECONDS,
        AD_REQUESTS,
        AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME,
        AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS,
        AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS,
        AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE,
        AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS,
        AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS,
        AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION,
        AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS,
        AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION,
        AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE,
        AD_SERVER_AVERAGE_ECPM,
        AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD,
        AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS,
        AD_SERVER_CLICKS,
        AD_SERVER_COMPLETED_VIEWS,
        AD_SERVER_COVIEWED_IMPRESSIONS,
        AD_SERVER_CPD_REVENUE,
        AD_SERVER_CTR,
        AD_SERVER_GROSS_REVENUE,
        AD_SERVER_GROSS_REVENUE_WITHOUT_CPD,
        AD_SERVER_IMPRESSIONS,
        AD_SERVER_IMPRESSIONS_WITH_COMPANION,
        AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS,
        AD_SERVER_PERCENT_CLICKS,
        AD_SERVER_PERCENT_IMPRESSIONS,
        AD_SERVER_PERCENT_REVENUE,
        AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD,
        AD_SERVER_RESPONSES_SERVED,
        AD_SERVER_REVENUE,
        AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT,
        AD_SERVER_REVENUE_WITHOUT_CPD,
        AD_SERVER_TARGETED_CLICKS,
        AD_SERVER_TARGETED_IMPRESSIONS,
        AD_SERVER_TRACKED_ADS,
        AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS,
        AD_SERVER_UNFILTERED_CLICKS,
        AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS,
        AD_SERVER_UNFILTERED_IMPRESSIONS,
        AD_SERVER_UNFILTERED_TRACKED_ADS,
        AD_UNIT_EXPOSURE_SECONDS,
        AD_VIEWERS,
        ATN_ADS_FAILED_TO_RENDER,
        ATN_ELIGIBLE_LINE_ITEMS,
        ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS,
        ATN_HBT_ALLOWED_AD_REQUESTS,
        ATN_HBT_BIDS_IN_AUCTION,
        ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS,
        ATN_HBT_CANDIDATE_BIDS,
        ATN_HBT_INVALID_AD_REQUESTS,
        ATN_HBT_NO_BIDS_AD_REQUESTS,
        ATN_HBT_REJECTED_BIDS,
        ATN_HBT_VALID_AD_REQUESTS,
        ATN_HBT_WITH_BIDS_AD_REQUESTS,
        ATN_INVALID_AD_REQUESTS,
        ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED,
        ATN_LINE_ITEMS_IN_AUCTION,
        ATN_LINE_ITEMS_NOT_COMPETING,
        ATN_LINE_ITEMS_NOT_SELECTED,
        ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS,
        ATN_LINE_ITEM_TARGETED_AD_REQUESTS,
        ATN_MEDIATION_ALLOWED_AD_REQUESTS,
        ATN_MEDIATION_INVALID_AD_REQUESTS,
        ATN_MEDIATION_LOADED_ADS_FROM_CHAINS,
        ATN_MEDIATION_NO_PARTNER_AD_REQUESTS,
        ATN_MEDIATION_PARTNERS_IN_AUCTION,
        ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS,
        ATN_MEDIATION_REJECTED_PARTNERS,
        ATN_MEDIATION_TARGETED_PARTNERS,
        ATN_MEDIATION_TOTAL_YIELD_PARTNERS,
        ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS,
        ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS,
        ATN_MEDIATION_VALID_AD_REQUESTS,
        ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS,
        ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS,
        ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT,
        ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS,
        ATN_PROGRAMMATIC_BIDS_IN_AUCTION,
        ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS,
        ATN_PROGRAMMATIC_BID_REQUESTS_SENT,
        ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE,
        ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES,
        ATN_PROGRAMMATIC_BID_REQUEST_ERRORS,
        ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS,
        ATN_PROGRAMMATIC_REJECTED_BIDS,
        ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS,
        ATN_PROGRAMMATIC_TOTAL_BIDS,
        ATN_PROGRAMMATIC_VALID_AD_REQUESTS,
        ATN_REJECTED_LINE_ITEMS,
        ATN_SERVED_MEDIATION_CHAINS,
        ATN_SERVED_SINGLE_ADS,
        ATN_TARGETED_LINE_ITEMS,
        ATN_TOTAL_AD_REQUESTS,
        ATN_TOTAL_COMPETING_ADS_IN_AUCTION,
        ATN_TOTAL_LOADED_ADS,
        ATN_VALID_AD_REQUESTS,
        ATN_YIELD_GROUP_MEDIATION_PASSBACKS,
        AVERAGE_ECPM,
        AVERAGE_ECPM_WITHOUT_CPD,
        AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION,
        AVERAGE_ENGAGEMENT_SECONDS_PER_USER,
        AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR,
        AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER,
        AVERAGE_REVENUE_PER_USER,
        AVERAGE_SESSION_SECONDS,
        BIDS,
        BID_AVERAGE_CPM,
        BOUNCE_RATE,
        CLICKS,
        CODE_SERVED_COUNT,
        CPC_REVENUE,
        CPM_REVENUE,
        CREATIVE_LOAD_TIME_0_500_PERCENT,
        CREATIVE_LOAD_TIME_1000_2000_PERCENT,
        CREATIVE_LOAD_TIME_2000_4000_PERCENT,
        CREATIVE_LOAD_TIME_4000_8000_PERCENT,
        CREATIVE_LOAD_TIME_500_1000_PERCENT,
        CREATIVE_LOAD_TIME_GT_8000_PERCENT,
        CTR,
        DEALS_BIDS,
        DEALS_BID_RATE,
        DEALS_BID_REQUESTS,
        DEALS_WINNING_BIDS,
        DEALS_WIN_RATE,
        DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT,
        DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT,
        DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT,
        DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT,
        DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT,
        DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT,
        DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT,
        DROPOFF_RATE,
        ENGAGED_SESSIONS,
        ENGAGED_SESSIONS_PER_USER,
        ENGAGEMENT_RATE,
        EUROPEAN_REGULATIONS_CONSENT_RATE,
        EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE,
        EUROPEAN_REGULATIONS_MESSAGES_SHOWN,
        EUROPEAN_REGULATIONS_NO_CONSENT_RATE,
        FILL_RATE,
        GOOGLE_ANALYTICS_CLICKS,
        GOOGLE_ANALYTICS_CTR,
        GOOGLE_ANALYTICS_ECPM,
        GOOGLE_ANALYTICS_IMPRESSIONS,
        GOOGLE_ANALYTICS_REVENUE,
        GOOGLE_ANALYTICS_VIEWS,
        GOOGLE_ANALYTICS_VIEWS_PER_USER,
        GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS,
        GOOGLE_SOLD_AUCTION_IMPRESSIONS,
        GOOGLE_SOLD_COVIEWED_IMPRESSIONS,
        GOOGLE_SOLD_IMPRESSIONS,
        GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS,
        GOOGLE_SOLD_RESERVATION_IMPRESSIONS,
        IMPRESSIONS,
        INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS,
        INVENTORY_SHARES,
        INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES,
        INVOICED_IMPRESSIONS,
        INVOICED_UNFILLED_IMPRESSIONS,
        MEDIATION_CHAINS_FILLED,
        MUTED_IMPRESSIONS,
        MUTE_ELIGIBLE_IMPRESSIONS,
        OPPORTUNITIES,
        OVERDELIVERED_IMPRESSIONS,
        PARTNER_SALES_FILLED_POD_REQUESTS,
        PARTNER_SALES_FILL_RATE,
        PARTNER_SALES_PARTNER_MATCH_RATE,
        PARTNER_SALES_QUERIES,
        PARTNER_SALES_UNFILLED_IMPRESSIONS,
        PARTNER_SALES_UNMATCHED_QUERIES,
        PARTNER_SOLD_CODE_SERVED,
        PARTNER_SOLD_COVIEWED_IMPRESSIONS,
        PARTNER_SOLD_IMPRESSIONS,
        PROGRAMMATIC_ELIGIBLE_AD_REQUESTS,
        PROGRAMMATIC_MATCH_RATE,
        PROGRAMMATIC_RESPONSES_SERVED,
        REACH_IMPRESSIONS,
        RESPONSES_SERVED,
        RETENTION,
        REVENUE,
        REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT,
        REVENUE_WITHOUT_CPD,
        REWARDS_GRANTED,
        RICH_MEDIA_AVERAGE_DISPLAY_TIME,
        RICH_MEDIA_AVERAGE_INTERACTION_TIME,
        RICH_MEDIA_BACKUP_IMAGES,
        RICH_MEDIA_CUSTOM_EVENT_COUNT,
        RICH_MEDIA_CUSTOM_EVENT_TIME,
        RICH_MEDIA_DISPLAY_TIME,
        RICH_MEDIA_EXPANDING_TIME,
        RICH_MEDIA_EXPANSIONS,
        RICH_MEDIA_FULL_SCREEN_IMPRESSIONS,
        RICH_MEDIA_INTERACTION_COUNT,
        RICH_MEDIA_INTERACTION_RATE,
        RICH_MEDIA_INTERACTION_TIME,
        RICH_MEDIA_INTERACTIVE_IMPRESSIONS,
        RICH_MEDIA_MANUAL_CLOSES,
        RICH_MEDIA_VIDEO_COMPLETES,
        RICH_MEDIA_VIDEO_INTERACTIONS,
        RICH_MEDIA_VIDEO_INTERACTION_RATE,
        RICH_MEDIA_VIDEO_MIDPOINTS,
        RICH_MEDIA_VIDEO_MUTES,
        RICH_MEDIA_VIDEO_PAUSES,
        RICH_MEDIA_VIDEO_PLAYS,
        RICH_MEDIA_VIDEO_REPLAYS,
        RICH_MEDIA_VIDEO_STOPS,
        RICH_MEDIA_VIDEO_UNMUTES,
        RICH_MEDIA_VIDEO_VIEW_RATE,
        RICH_MEDIA_VIDEO_VIEW_TIME,
        SELL_THROUGH_AVAILABLE_IMPRESSIONS,
        SELL_THROUGH_FORECASTED_IMPRESSIONS,
        SELL_THROUGH_RESERVED_IMPRESSIONS,
        SELL_THROUGH_SELL_THROUGH_RATE,
        SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS,
        SERVER_SIDE_UNWRAPPING_CALLOUTS,
        SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES,
        SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES,
        SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES,
        SERVER_SIDE_UNWRAPPING_TIMEOUTS,
        SESSIONS,
        TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT,
        TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT,
        TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT,
        TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT,
        TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT,
        TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT,
        TARGETED_CLICKS,
        TARGETED_IMPRESSIONS,
        UNFILLED_IMPRESSIONS,
        UNIQUE_VISITORS,
        UNLOADED_IMPRESSIONS_DUE_TO_CPU,
        UNLOADED_IMPRESSIONS_DUE_TO_NETWORK,
        UNMATCHED_AD_REQUESTS,
        UNVIEWED_REASON_OTHER_PERCENT,
        UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT,
        UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT,
        UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT,
        UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT,
        USER_ENGAGEMENT_DURATION_IN_SECONDS,
        USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE,
        USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT,
        USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN,
        USER_MESSAGES_ALLOW_ADS_PAGEVIEWS,
        USER_MESSAGES_CCPA_MESSAGES_SHOWN,
        USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN,
        USER_MESSAGES_IDFA_ATT_CONSENT,
        USER_MESSAGES_IDFA_ATT_CONSENT_RATE,
        USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT,
        USER_MESSAGES_IDFA_ATT_DECLINE_RATE,
        USER_MESSAGES_IDFA_EXPLAINERS_SHOWN,
        USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN,
        USER_MESSAGES_IDFA_NO_DECISION,
        USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN,
        USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS,
        USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS,
        USER_MESSAGES_TOTAL_ESTIMATED_REVENUE,
        USER_MESSAGES_UPTC_MESSAGES_SHOWN,
        USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO,
        VIDEO_ERROR_100_COUNT,
        VIDEO_ERROR_101_COUNT,
        VIDEO_ERROR_102_COUNT,
        VIDEO_ERROR_200_COUNT,
        VIDEO_ERROR_201_COUNT,
        VIDEO_ERROR_202_COUNT,
        VIDEO_ERROR_203_COUNT,
        VIDEO_ERROR_300_COUNT,
        VIDEO_ERROR_301_COUNT,
        VIDEO_ERROR_302_COUNT,
        VIDEO_ERROR_303_COUNT,
        VIDEO_ERROR_400_COUNT,
        VIDEO_ERROR_401_COUNT,
        VIDEO_ERROR_402_COUNT,
        VIDEO_ERROR_403_COUNT,
        VIDEO_ERROR_405_COUNT,
        VIDEO_ERROR_406_COUNT,
        VIDEO_ERROR_407_COUNT,
        VIDEO_ERROR_408_COUNT,
        VIDEO_ERROR_409_COUNT,
        VIDEO_ERROR_410_COUNT,
        VIDEO_ERROR_500_COUNT,
        VIDEO_ERROR_501_COUNT,
        VIDEO_ERROR_502_COUNT,
        VIDEO_ERROR_503_COUNT,
        VIDEO_ERROR_600_COUNT,
        VIDEO_ERROR_601_COUNT,
        VIDEO_ERROR_602_COUNT,
        VIDEO_ERROR_603_COUNT,
        VIDEO_ERROR_604_COUNT,
        VIDEO_ERROR_900_COUNT,
        VIDEO_ERROR_901_COUNT,
        VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE,
        VIDEO_INTERACTION_COLLAPSES,
        VIDEO_INTERACTION_EXPANDS,
        VIDEO_INTERACTION_FULL_SCREENS,
        VIDEO_INTERACTION_MUTES,
        VIDEO_INTERACTION_PAUSES,
        VIDEO_INTERACTION_RESUMES,
        VIDEO_INTERACTION_REWINDS,
        VIDEO_INTERACTION_UNMUTES,
        VIDEO_INTERACTION_VIDEO_SKIPS,
        VIDEO_MONETIZABLE_CONTENT_VIEWS,
        VIDEO_REAL_TIME_CREATIVE_SERVES,
        VIDEO_REAL_TIME_ERROR_100_COUNT,
        VIDEO_REAL_TIME_ERROR_101_COUNT,
        VIDEO_REAL_TIME_ERROR_102_COUNT,
        VIDEO_REAL_TIME_ERROR_200_COUNT,
        VIDEO_REAL_TIME_ERROR_201_COUNT,
        VIDEO_REAL_TIME_ERROR_202_COUNT,
        VIDEO_REAL_TIME_ERROR_203_COUNT,
        VIDEO_REAL_TIME_ERROR_300_COUNT,
        VIDEO_REAL_TIME_ERROR_301_COUNT,
        VIDEO_REAL_TIME_ERROR_302_COUNT,
        VIDEO_REAL_TIME_ERROR_303_COUNT,
        VIDEO_REAL_TIME_ERROR_400_COUNT,
        VIDEO_REAL_TIME_ERROR_401_COUNT,
        VIDEO_REAL_TIME_ERROR_402_COUNT,
        VIDEO_REAL_TIME_ERROR_403_COUNT,
        VIDEO_REAL_TIME_ERROR_405_COUNT,
        VIDEO_REAL_TIME_ERROR_406_COUNT,
        VIDEO_REAL_TIME_ERROR_407_COUNT,
        VIDEO_REAL_TIME_ERROR_408_COUNT,
        VIDEO_REAL_TIME_ERROR_409_COUNT,
        VIDEO_REAL_TIME_ERROR_410_COUNT,
        VIDEO_REAL_TIME_ERROR_500_COUNT,
        VIDEO_REAL_TIME_ERROR_501_COUNT,
        VIDEO_REAL_TIME_ERROR_502_COUNT,
        VIDEO_REAL_TIME_ERROR_503_COUNT,
        VIDEO_REAL_TIME_ERROR_600_COUNT,
        VIDEO_REAL_TIME_ERROR_601_COUNT,
        VIDEO_REAL_TIME_ERROR_602_COUNT,
        VIDEO_REAL_TIME_ERROR_603_COUNT,
        VIDEO_REAL_TIME_ERROR_604_COUNT,
        VIDEO_REAL_TIME_ERROR_900_COUNT,
        VIDEO_REAL_TIME_ERROR_901_COUNT,
        VIDEO_REAL_TIME_IMPRESSIONS,
        VIDEO_REAL_TIME_MATCHED_QUERIES,
        VIDEO_REAL_TIME_TOTAL_ERROR_COUNT,
        VIDEO_REAL_TIME_TOTAL_QUERIES,
        VIDEO_REAL_TIME_UNMATCHED_QUERIES,
        VIDEO_VIEWERSHIP_AUTO_PLAYS,
        VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE,
        VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME,
        VIDEO_VIEWERSHIP_CLICK_TO_PLAYS,
        VIDEO_VIEWERSHIP_COMPLETES,
        VIDEO_VIEWERSHIP_COMPLETION_RATE,
        VIDEO_VIEWERSHIP_ENGAGED_VIEWS,
        VIDEO_VIEWERSHIP_FIRST_QUARTILES,
        VIDEO_VIEWERSHIP_MIDPOINTS,
        VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN,
        VIDEO_VIEWERSHIP_STARTS,
        VIDEO_VIEWERSHIP_THIRD_QUARTILES,
        VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT,
        VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE,
        VIDEO_VIEWERSHIP_VIDEO_LENGTH,
        VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE,
        YIELD_GROUP_AUCTIONS_WON,
        YIELD_GROUP_BIDS,
        YIELD_GROUP_BIDS_IN_AUCTION,
        YIELD_GROUP_CALLOUTS,
        YIELD_GROUP_ESTIMATED_CPM,
        YIELD_GROUP_ESTIMATED_REVENUE,
        YIELD_GROUP_IMPRESSIONS,
        YIELD_GROUP_MEDIATION_FILL_RATE,
        YIELD_GROUP_MEDIATION_MATCHED_QUERIES,
        YIELD_GROUP_MEDIATION_PASSBACKS,
        YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM,
        YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT,
        YIELD_GROUP_SUCCESSFUL_RESPONSES,
      };
    }

    public static Metric valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Metric(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.Metric)
  }

  /**
   *
   *
   * <pre>
   * Valid time period columns.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.TimePeriodColumn}
   */
  public enum TimePeriodColumn implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Default value. Report will have no time period column.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_UNSPECIFIED = 0;</code>
     */
    TIME_PERIOD_COLUMN_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * A column for each date in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_DATE = 1;</code>
     */
    TIME_PERIOD_COLUMN_DATE(1),
    /**
     *
     *
     * <pre>
     * A column for each week in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_WEEK = 2;</code>
     */
    TIME_PERIOD_COLUMN_WEEK(2),
    /**
     *
     *
     * <pre>
     * A column for each month in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_MONTH = 3;</code>
     */
    TIME_PERIOD_COLUMN_MONTH(3),
    /**
     *
     *
     * <pre>
     * A column for each quarter in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_QUARTER = 4;</code>
     */
    TIME_PERIOD_COLUMN_QUARTER(4),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Default value. Report will have no time period column.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_UNSPECIFIED = 0;</code>
     */
    public static final int TIME_PERIOD_COLUMN_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     * A column for each date in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_DATE = 1;</code>
     */
    public static final int TIME_PERIOD_COLUMN_DATE_VALUE = 1;

    /**
     *
     *
     * <pre>
     * A column for each week in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_WEEK = 2;</code>
     */
    public static final int TIME_PERIOD_COLUMN_WEEK_VALUE = 2;

    /**
     *
     *
     * <pre>
     * A column for each month in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_MONTH = 3;</code>
     */
    public static final int TIME_PERIOD_COLUMN_MONTH_VALUE = 3;

    /**
     *
     *
     * <pre>
     * A column for each quarter in the report.
     * </pre>
     *
     * <code>TIME_PERIOD_COLUMN_QUARTER = 4;</code>
     */
    public static final int TIME_PERIOD_COLUMN_QUARTER_VALUE = 4;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimePeriodColumn valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TimePeriodColumn forNumber(int value) {
      switch (value) {
        case 0:
          return TIME_PERIOD_COLUMN_UNSPECIFIED;
        case 1:
          return TIME_PERIOD_COLUMN_DATE;
        case 2:
          return TIME_PERIOD_COLUMN_WEEK;
        case 3:
          return TIME_PERIOD_COLUMN_MONTH;
        case 4:
          return TIME_PERIOD_COLUMN_QUARTER;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimePeriodColumn> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<TimePeriodColumn>
        internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TimePeriodColumn>() {
              public TimePeriodColumn findValueByNumber(int number) {
                return TimePeriodColumn.forNumber(number);
              }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(3);
    }

    private static final TimePeriodColumn[] VALUES = values();

    public static TimePeriodColumn valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimePeriodColumn(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.TimePeriodColumn)
  }

  /**
   *
   *
   * <pre>
   * Possible metric value types to add.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.MetricValueType}
   */
  public enum MetricValueType implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * The values for the primary date_range.
     * </pre>
     *
     * <code>PRIMARY = 0;</code>
     */
    PRIMARY(0),
    /**
     *
     *
     * <pre>
     * Each metrics' percent of the total for the primary date_range.
     * </pre>
     *
     * <code>PRIMARY_PERCENT_OF_TOTAL = 1;</code>
     */
    PRIMARY_PERCENT_OF_TOTAL(1),
    /**
     *
     *
     * <pre>
     * The values for the comparison_date_range.
     * </pre>
     *
     * <code>COMPARISON = 2;</code>
     */
    COMPARISON(2),
    /**
     *
     *
     * <pre>
     * Each metrics' percent of the total for the comparison_date_range.
     * </pre>
     *
     * <code>COMPARISON_PERCENT_OF_TOTAL = 3;</code>
     */
    COMPARISON_PERCENT_OF_TOTAL(3),
    /**
     *
     *
     * <pre>
     * The absolute change between the primary and comparison date ranges.
     * </pre>
     *
     * <code>ABSOLUTE_CHANGE = 4;</code>
     */
    ABSOLUTE_CHANGE(4),
    /**
     *
     *
     * <pre>
     * The relative change between the primary and comparison date ranges.
     * </pre>
     *
     * <code>RELATIVE_CHANGE = 5;</code>
     */
    RELATIVE_CHANGE(5),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * The values for the primary date_range.
     * </pre>
     *
     * <code>PRIMARY = 0;</code>
     */
    public static final int PRIMARY_VALUE = 0;

    /**
     *
     *
     * <pre>
     * Each metrics' percent of the total for the primary date_range.
     * </pre>
     *
     * <code>PRIMARY_PERCENT_OF_TOTAL = 1;</code>
     */
    public static final int PRIMARY_PERCENT_OF_TOTAL_VALUE = 1;

    /**
     *
     *
     * <pre>
     * The values for the comparison_date_range.
     * </pre>
     *
     * <code>COMPARISON = 2;</code>
     */
    public static final int COMPARISON_VALUE = 2;

    /**
     *
     *
     * <pre>
     * Each metrics' percent of the total for the comparison_date_range.
     * </pre>
     *
     * <code>COMPARISON_PERCENT_OF_TOTAL = 3;</code>
     */
    public static final int COMPARISON_PERCENT_OF_TOTAL_VALUE = 3;

    /**
     *
     *
     * <pre>
     * The absolute change between the primary and comparison date ranges.
     * </pre>
     *
     * <code>ABSOLUTE_CHANGE = 4;</code>
     */
    public static final int ABSOLUTE_CHANGE_VALUE = 4;

    /**
     *
     *
     * <pre>
     * The relative change between the primary and comparison date ranges.
     * </pre>
     *
     * <code>RELATIVE_CHANGE = 5;</code>
     */
    public static final int RELATIVE_CHANGE_VALUE = 5;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MetricValueType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MetricValueType forNumber(int value) {
      switch (value) {
        case 0:
          return PRIMARY;
        case 1:
          return PRIMARY_PERCENT_OF_TOTAL;
        case 2:
          return COMPARISON;
        case 3:
          return COMPARISON_PERCENT_OF_TOTAL;
        case 4:
          return ABSOLUTE_CHANGE;
        case 5:
          return RELATIVE_CHANGE;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MetricValueType> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<MetricValueType>
        internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MetricValueType>() {
              public MetricValueType findValueByNumber(int number) {
                return MetricValueType.forNumber(number);
              }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(4);
    }

    private static final MetricValueType[] VALUES = values();

    public static MetricValueType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MetricValueType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.MetricValueType)
  }

  /**
   *
   *
   * <pre>
   * The source to determine the time zone for the report.
   * </pre>
   *
   * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.TimeZoneSource}
   */
  public enum TimeZoneSource implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Unspecified default value.
     * </pre>
     *
     * <code>TIME_ZONE_SOURCE_UNSPECIFIED = 0;</code>
     */
    TIME_ZONE_SOURCE_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * Use the publisher's time zone in network settings.
     * </pre>
     *
     * <code>PUBLISHER = 1;</code>
     */
    PUBLISHER(1),
    /**
     *
     *
     * <pre>
     * Use the time zone of the ad exchange.
     * Only compatible with Ad Exchange dimensions and metrics.
     * </pre>
     *
     * <code>AD_EXCHANGE = 2;</code>
     */
    AD_EXCHANGE(2),
    /**
     *
     *
     * <pre>
     * Use UTC time zone.
     * Only compatible with Revenue Verification reports.
     * </pre>
     *
     * <code>UTC = 3;</code>
     */
    UTC(3),
    /**
     *
     *
     * <pre>
     * Use the time zone provided in the ReportDefinition.time_zone field.
     * Has limited dimension and metric compatibility compared with PUBLISHER,
     * and reports may take longer to run since the dates are dynamically
     * calculated at request time.
     * </pre>
     *
     * <code>PROVIDED = 4;</code>
     */
    PROVIDED(4),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Unspecified default value.
     * </pre>
     *
     * <code>TIME_ZONE_SOURCE_UNSPECIFIED = 0;</code>
     */
    public static final int TIME_ZONE_SOURCE_UNSPECIFIED_VALUE = 0;

    /**
     *
     *
     * <pre>
     * Use the publisher's time zone in network settings.
     * </pre>
     *
     * <code>PUBLISHER = 1;</code>
     */
    public static final int PUBLISHER_VALUE = 1;

    /**
     *
     *
     * <pre>
     * Use the time zone of the ad exchange.
     * Only compatible with Ad Exchange dimensions and metrics.
     * </pre>
     *
     * <code>AD_EXCHANGE = 2;</code>
     */
    public static final int AD_EXCHANGE_VALUE = 2;

    /**
     *
     *
     * <pre>
     * Use UTC time zone.
     * Only compatible with Revenue Verification reports.
     * </pre>
     *
     * <code>UTC = 3;</code>
     */
    public static final int UTC_VALUE = 3;

    /**
     *
     *
     * <pre>
     * Use the time zone provided in the ReportDefinition.time_zone field.
     * Has limited dimension and metric compatibility compared with PUBLISHER,
     * and reports may take longer to run since the dates are dynamically
     * calculated at request time.
     * </pre>
     *
     * <code>PROVIDED = 4;</code>
     */
    public static final int PROVIDED_VALUE = 4;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeZoneSource valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TimeZoneSource forNumber(int value) {
      switch (value) {
        case 0:
          return TIME_ZONE_SOURCE_UNSPECIFIED;
        case 1:
          return PUBLISHER;
        case 2:
          return AD_EXCHANGE;
        case 3:
          return UTC;
        case 4:
          return PROVIDED;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeZoneSource> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<TimeZoneSource> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TimeZoneSource>() {
          public TimeZoneSource findValueByNumber(int number) {
            return TimeZoneSource.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinition.getDescriptor().getEnumTypes().get(5);
    }

    private static final TimeZoneSource[] VALUES = values();

    public static TimeZoneSource valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeZoneSource(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.TimeZoneSource)
  }

  public interface FieldOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Field)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return Whether the dimension field is set.
     */
    boolean hasDimension();

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return The enum numeric value on the wire for dimension.
     */
    int getDimensionValue();

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return The dimension.
     */
    com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension();

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return Whether the metric field is set.
     */
    boolean hasMetric();

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return The enum numeric value on the wire for metric.
     */
    int getMetricValue();

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return The metric.
     */
    com.google.ads.admanager.v1.ReportDefinition.Metric getMetric();

    com.google.ads.admanager.v1.ReportDefinition.Field.FieldCase getFieldCase();
  }

  /**
   *
   *
   * <pre>
   * A dimension or a metric in a report.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Field}
   */
  public static final class Field extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Field)
      FieldOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Field.newBuilder() to construct.
    private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Field() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Field();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Field_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Field_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.Field.class,
              com.google.ads.admanager.v1.ReportDefinition.Field.Builder.class);
    }

    private int fieldCase_ = 0;

    @SuppressWarnings("serial")
    private java.lang.Object field_;

    public enum FieldCase
        implements
            com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      DIMENSION(1),
      METRIC(2),
      FIELD_NOT_SET(0);
      private final int value;

      private FieldCase(int value) {
        this.value = value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FieldCase valueOf(int value) {
        return forNumber(value);
      }

      public static FieldCase forNumber(int value) {
        switch (value) {
          case 1:
            return DIMENSION;
          case 2:
            return METRIC;
          case 0:
            return FIELD_NOT_SET;
          default:
            return null;
        }
      }

      public int getNumber() {
        return this.value;
      }
    };

    public FieldCase getFieldCase() {
      return FieldCase.forNumber(fieldCase_);
    }

    public static final int DIMENSION_FIELD_NUMBER = 1;

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return Whether the dimension field is set.
     */
    public boolean hasDimension() {
      return fieldCase_ == 1;
    }

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return The enum numeric value on the wire for dimension.
     */
    public int getDimensionValue() {
      if (fieldCase_ == 1) {
        return (java.lang.Integer) field_;
      }
      return 0;
    }

    /**
     *
     *
     * <pre>
     * The dimension this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
     *
     * @return The dimension.
     */
    public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension() {
      if (fieldCase_ == 1) {
        com.google.ads.admanager.v1.ReportDefinition.Dimension result =
            com.google.ads.admanager.v1.ReportDefinition.Dimension.forNumber(
                (java.lang.Integer) field_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.Dimension.UNRECOGNIZED
            : result;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Dimension.DIMENSION_UNSPECIFIED;
    }

    public static final int METRIC_FIELD_NUMBER = 2;

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return Whether the metric field is set.
     */
    public boolean hasMetric() {
      return fieldCase_ == 2;
    }

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return The enum numeric value on the wire for metric.
     */
    public int getMetricValue() {
      if (fieldCase_ == 2) {
        return (java.lang.Integer) field_;
      }
      return 0;
    }

    /**
     *
     *
     * <pre>
     * The metric this field represents.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
     *
     * @return The metric.
     */
    public com.google.ads.admanager.v1.ReportDefinition.Metric getMetric() {
      if (fieldCase_ == 2) {
        com.google.ads.admanager.v1.ReportDefinition.Metric result =
            com.google.ads.admanager.v1.ReportDefinition.Metric.forNumber(
                (java.lang.Integer) field_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.Metric.UNRECOGNIZED
            : result;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Metric.METRIC_UNSPECIFIED;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (fieldCase_ == 1) {
        output.writeEnum(1, ((java.lang.Integer) field_));
      }
      if (fieldCase_ == 2) {
        output.writeEnum(2, ((java.lang.Integer) field_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (fieldCase_ == 1) {
        size +=
            com.google.protobuf.CodedOutputStream.computeEnumSize(1, ((java.lang.Integer) field_));
      }
      if (fieldCase_ == 2) {
        size +=
            com.google.protobuf.CodedOutputStream.computeEnumSize(2, ((java.lang.Integer) field_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Field)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.Field other =
          (com.google.ads.admanager.v1.ReportDefinition.Field) obj;

      if (!getFieldCase().equals(other.getFieldCase())) return false;
      switch (fieldCase_) {
        case 1:
          if (getDimensionValue() != other.getDimensionValue()) return false;
          break;
        case 2:
          if (getMetricValue() != other.getMetricValue()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (fieldCase_) {
        case 1:
          hash = (37 * hash) + DIMENSION_FIELD_NUMBER;
          hash = (53 * hash) + getDimensionValue();
          break;
        case 2:
          hash = (37 * hash) + METRIC_FIELD_NUMBER;
          hash = (53 * hash) + getMetricValue();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.google.ads.admanager.v1.ReportDefinition.Field prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * A dimension or a metric in a report.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Field}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Field)
        com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Field_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Field_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Field.class,
                com.google.ads.admanager.v1.ReportDefinition.Field.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.Field.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        fieldCase_ = 0;
        field_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Field_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Field getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Field build() {
        com.google.ads.admanager.v1.ReportDefinition.Field result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Field buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.Field result =
            new com.google.ads.admanager.v1.ReportDefinition.Field(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.Field result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.google.ads.admanager.v1.ReportDefinition.Field result) {
        result.fieldCase_ = fieldCase_;
        result.field_ = this.field_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Field) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.Field) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.Field other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance())
          return this;
        switch (other.getFieldCase()) {
          case DIMENSION:
            {
              setDimensionValue(other.getDimensionValue());
              break;
            }
          case METRIC:
            {
              setMetricValue(other.getMetricValue());
              break;
            }
          case FIELD_NOT_SET:
            {
              break;
            }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  int rawValue = input.readEnum();
                  fieldCase_ = 1;
                  field_ = rawValue;
                  break;
                } // case 8
              case 16:
                {
                  int rawValue = input.readEnum();
                  fieldCase_ = 2;
                  field_ = rawValue;
                  break;
                } // case 16
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int fieldCase_ = 0;
      private java.lang.Object field_;

      public FieldCase getFieldCase() {
        return FieldCase.forNumber(fieldCase_);
      }

      public Builder clearField() {
        fieldCase_ = 0;
        field_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @return Whether the dimension field is set.
       */
      @java.lang.Override
      public boolean hasDimension() {
        return fieldCase_ == 1;
      }

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @return The enum numeric value on the wire for dimension.
       */
      @java.lang.Override
      public int getDimensionValue() {
        if (fieldCase_ == 1) {
          return ((java.lang.Integer) field_).intValue();
        }
        return 0;
      }

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @param value The enum numeric value on the wire for dimension to set.
       * @return This builder for chaining.
       */
      public Builder setDimensionValue(int value) {
        fieldCase_ = 1;
        field_ = value;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @return The dimension.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension() {
        if (fieldCase_ == 1) {
          com.google.ads.admanager.v1.ReportDefinition.Dimension result =
              com.google.ads.admanager.v1.ReportDefinition.Dimension.forNumber(
                  (java.lang.Integer) field_);
          return result == null
              ? com.google.ads.admanager.v1.ReportDefinition.Dimension.UNRECOGNIZED
              : result;
        }
        return com.google.ads.admanager.v1.ReportDefinition.Dimension.DIMENSION_UNSPECIFIED;
      }

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @param value The dimension to set.
       * @return This builder for chaining.
       */
      public Builder setDimension(com.google.ads.admanager.v1.ReportDefinition.Dimension value) {
        if (value == null) {
          throw new NullPointerException();
        }
        fieldCase_ = 1;
        field_ = value.getNumber();
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The dimension this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearDimension() {
        if (fieldCase_ == 1) {
          fieldCase_ = 0;
          field_ = null;
          onChanged();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @return Whether the metric field is set.
       */
      @java.lang.Override
      public boolean hasMetric() {
        return fieldCase_ == 2;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @return The enum numeric value on the wire for metric.
       */
      @java.lang.Override
      public int getMetricValue() {
        if (fieldCase_ == 2) {
          return ((java.lang.Integer) field_).intValue();
        }
        return 0;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @param value The enum numeric value on the wire for metric to set.
       * @return This builder for chaining.
       */
      public Builder setMetricValue(int value) {
        fieldCase_ = 2;
        field_ = value;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @return The metric.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Metric getMetric() {
        if (fieldCase_ == 2) {
          com.google.ads.admanager.v1.ReportDefinition.Metric result =
              com.google.ads.admanager.v1.ReportDefinition.Metric.forNumber(
                  (java.lang.Integer) field_);
          return result == null
              ? com.google.ads.admanager.v1.ReportDefinition.Metric.UNRECOGNIZED
              : result;
        }
        return com.google.ads.admanager.v1.ReportDefinition.Metric.METRIC_UNSPECIFIED;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @param value The metric to set.
       * @return This builder for chaining.
       */
      public Builder setMetric(com.google.ads.admanager.v1.ReportDefinition.Metric value) {
        if (value == null) {
          throw new NullPointerException();
        }
        fieldCase_ = 2;
        field_ = value.getNumber();
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * The metric this field represents.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Metric metric = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearMetric() {
        if (fieldCase_ == 2) {
          fieldCase_ = 0;
          field_ = null;
          onChanged();
        }
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Field)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Field)
    private static final com.google.ads.admanager.v1.ReportDefinition.Field DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Field();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Field getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Field> PARSER =
        new com.google.protobuf.AbstractParser<Field>() {
          @java.lang.Override
          public Field parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Field> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Field> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Field getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface DateRangeOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.DateRange)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     *
     * @return Whether the fixed field is set.
     */
    boolean hasFixed();

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     *
     * @return The fixed.
     */
    com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange getFixed();

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     */
    com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder
        getFixedOrBuilder();

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return Whether the relative field is set.
     */
    boolean hasRelative();

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return The enum numeric value on the wire for relative.
     */
    int getRelativeValue();

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return The relative.
     */
    com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange getRelative();

    com.google.ads.admanager.v1.ReportDefinition.DateRange.DateRangeTypeCase getDateRangeTypeCase();
  }

  /**
   *
   *
   * <pre>
   * A date range for a report.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.DateRange}
   */
  public static final class DateRange extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.DateRange)
      DateRangeOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use DateRange.newBuilder() to construct.
    private DateRange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private DateRange() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new DateRange();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.DateRange.class,
              com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder.class);
    }

    /**
     *
     *
     * <pre>
     * Options for relative date ranges.
     * </pre>
     *
     * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange}
     */
    public enum RelativeDateRange implements com.google.protobuf.ProtocolMessageEnum {
      /**
       *
       *
       * <pre>
       * Default value. This value is unused.
       * </pre>
       *
       * <code>RELATIVE_DATE_RANGE_UNSPECIFIED = 0;</code>
       */
      RELATIVE_DATE_RANGE_UNSPECIFIED(0),
      /**
       *
       *
       * <pre>
       * The date the report is run.
       * </pre>
       *
       * <code>TODAY = 1;</code>
       */
      TODAY(1),
      /**
       *
       *
       * <pre>
       * The date a day before the date that the report is run.
       * </pre>
       *
       * <code>YESTERDAY = 2;</code>
       */
      YESTERDAY(2),
      /**
       *
       *
       * <pre>
       * The full week in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_WEEK = 3;</code>
       */
      THIS_WEEK(3),
      /**
       *
       *
       * <pre>
       * From the beginning of the calendar week (Monday to Sunday) in which the
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_WEEK_TO_DATE = 29;</code>
       */
      THIS_WEEK_TO_DATE(29),
      /**
       *
       *
       * <pre>
       * The full month in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_MONTH = 4;</code>
       */
      THIS_MONTH(4),
      /**
       *
       *
       * <pre>
       * From the beginning of the calendar month in which the report is run, to
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_MONTH_TO_DATE = 26;</code>
       */
      THIS_MONTH_TO_DATE(26),
      /**
       *
       *
       * <pre>
       * The full quarter in which this report is run. Could include dates
       * in the future.
       * </pre>
       *
       * <code>THIS_QUARTER = 5;</code>
       */
      THIS_QUARTER(5),
      /**
       *
       *
       * <pre>
       * From the beginning of the calendar quarter in which the report is run,
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_QUARTER_TO_DATE = 27;</code>
       */
      THIS_QUARTER_TO_DATE(27),
      /**
       *
       *
       * <pre>
       * The full year in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_YEAR = 6;</code>
       */
      THIS_YEAR(6),
      /**
       *
       *
       * <pre>
       * From the beginning of the calendar year in which the report is run, to
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_YEAR_TO_DATE = 28;</code>
       */
      THIS_YEAR_TO_DATE(28),
      /**
       *
       *
       * <pre>
       * The entire previous calendar week, Monday to Sunday (inclusive),
       * preceding the calendar week the report is run.
       * </pre>
       *
       * <code>LAST_WEEK = 7;</code>
       */
      LAST_WEEK(7),
      /**
       *
       *
       * <pre>
       * The entire previous calendar month preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_MONTH = 8;</code>
       */
      LAST_MONTH(8),
      /**
       *
       *
       * <pre>
       * The entire previous calendar quarter preceding the calendar quarter the
       * report is run.
       * </pre>
       *
       * <code>LAST_QUARTER = 9;</code>
       */
      LAST_QUARTER(9),
      /**
       *
       *
       * <pre>
       * The entire previous calendar year preceding the calendar year the
       * report is run.
       * </pre>
       *
       * <code>LAST_YEAR = 10;</code>
       */
      LAST_YEAR(10),
      /**
       *
       *
       * <pre>
       * The 7 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_7_DAYS = 11;</code>
       */
      LAST_7_DAYS(11),
      /**
       *
       *
       * <pre>
       * The 30 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_30_DAYS = 12;</code>
       */
      LAST_30_DAYS(12),
      /**
       *
       *
       * <pre>
       * The 60 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_60_DAYS = 13;</code>
       */
      LAST_60_DAYS(13),
      /**
       *
       *
       * <pre>
       * The 90 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_90_DAYS = 14;</code>
       */
      LAST_90_DAYS(14),
      /**
       *
       *
       * <pre>
       * The 180 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_180_DAYS = 15;</code>
       */
      LAST_180_DAYS(15),
      /**
       *
       *
       * <pre>
       * The 360 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_360_DAYS = 16;</code>
       */
      LAST_360_DAYS(16),
      /**
       *
       *
       * <pre>
       * The 365 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_365_DAYS = 17;</code>
       */
      LAST_365_DAYS(17),
      /**
       *
       *
       * <pre>
       * The entire previous 3 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_3_MONTHS = 18;</code>
       */
      LAST_3_MONTHS(18),
      /**
       *
       *
       * <pre>
       * The entire previous 6 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_6_MONTHS = 19;</code>
       */
      LAST_6_MONTHS(19),
      /**
       *
       *
       * <pre>
       * The entire previous 6 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_12_MONTHS = 20;</code>
       */
      LAST_12_MONTHS(20),
      /**
       *
       *
       * <pre>
       * From 3 years before the report is run, to the day before the report is
       * run, inclusive.
       * </pre>
       *
       * <code>ALL_AVAILABLE = 21;</code>
       */
      ALL_AVAILABLE(21),
      /**
       *
       *
       * <pre>
       * The date a day after the date that the report is run.
       * </pre>
       *
       * <code>TOMORROW = 30;</code>
       */
      TOMORROW(30),
      /**
       *
       *
       * <pre>
       * The 90 days following the day the report is run.
       * </pre>
       *
       * <code>NEXT_90_DAYS = 31;</code>
       */
      NEXT_90_DAYS(31),
      /**
       *
       *
       * <pre>
       * The entire calendar month following the calendar month the report is
       * run.
       * </pre>
       *
       * <code>NEXT_MONTH = 32;</code>
       */
      NEXT_MONTH(32),
      /**
       *
       *
       * <pre>
       * The entire 3 calendar months following the calendar month the report
       * is run.
       * </pre>
       *
       * <code>NEXT_3_MONTHS = 33;</code>
       */
      NEXT_3_MONTHS(33),
      /**
       *
       *
       * <pre>
       * The entire 12 calendar months following the calendar month the report
       * is run.
       * </pre>
       *
       * <code>NEXT_12_MONTHS = 34;</code>
       */
      NEXT_12_MONTHS(34),
      /**
       *
       *
       * <pre>
       * The entire calendar week, Monday to Sunday (inclusive), following the
       * calendar week the report is run.
       * </pre>
       *
       * <code>NEXT_WEEK = 35;</code>
       */
      NEXT_WEEK(35),
      /**
       *
       *
       * <pre>
       * The entire calendar quarter following the calendar quarter the report
       * is run.
       * </pre>
       *
       * <code>NEXT_QUARTER = 36;</code>
       */
      NEXT_QUARTER(36),
      /**
       *
       *
       * <pre>
       * From the date a day after the date that the report is run, to the end
       * of the calendar month following the calendar month the report is run.
       * </pre>
       *
       * <code>TO_END_OF_NEXT_MONTH = 37;</code>
       */
      TO_END_OF_NEXT_MONTH(37),
      /**
       *
       *
       * <pre>
       * Only valid when used in the comparison_date_range field. The complete
       * period preceding the date period provided in date_range.
       *
       * In the case where date_range is a FixedDateRange of N days, this will
       * be a period of N days where the end date is the date preceding the
       * start date of the date_range.
       *
       * In the case where date_range is a RelativeDateRange, this will be a
       * period of the same timeframe preceding the date_range. In the case
       * where the date_range does not capture the full period because a report
       * is run in the middle of that period, this will still be the full
       * preceding period. For example, if date_range is THIS_WEEK, but the
       * report is run on a Wednesday, THIS_WEEK will be Monday - Wednesday, but
       * PREVIOUS_PERIOD will be Monday - Sunday.
       * </pre>
       *
       * <code>PREVIOUS_PERIOD = 22;</code>
       */
      PREVIOUS_PERIOD(22),
      /**
       *
       *
       * <pre>
       * Only valid when used in the comparison_date_range field. The period
       * starting 1 year prior to the date period provided in date_range.
       *
       * In the case where date_range is a FixedDateRange, this will be a date
       * range starting 1 year prior to the date_range start date and ending 1
       * year prior to the date_range end date.
       *
       * In the case where date_range is a RelativeDateRange, this will be a
       * period of the same timeframe exactly 1 year prior to the date_range.
       * In the case where the date_range does not capture the full period
       * because a report is run in the middle of that period, this will still
       * be the full period 1 year prior. For example, if date range is
       * THIS_WEEK, but the report is run on a Wednesday, THIS_WEEK will be
       * Monday - Wednesday, but SAME_PERIOD_PREVIOUS_YEAR will be Monday -
       * Sunday.
       * </pre>
       *
       * <code>SAME_PERIOD_PREVIOUS_YEAR = 24;</code>
       */
      SAME_PERIOD_PREVIOUS_YEAR(24),
      UNRECOGNIZED(-1),
      ;

      /**
       *
       *
       * <pre>
       * Default value. This value is unused.
       * </pre>
       *
       * <code>RELATIVE_DATE_RANGE_UNSPECIFIED = 0;</code>
       */
      public static final int RELATIVE_DATE_RANGE_UNSPECIFIED_VALUE = 0;

      /**
       *
       *
       * <pre>
       * The date the report is run.
       * </pre>
       *
       * <code>TODAY = 1;</code>
       */
      public static final int TODAY_VALUE = 1;

      /**
       *
       *
       * <pre>
       * The date a day before the date that the report is run.
       * </pre>
       *
       * <code>YESTERDAY = 2;</code>
       */
      public static final int YESTERDAY_VALUE = 2;

      /**
       *
       *
       * <pre>
       * The full week in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_WEEK = 3;</code>
       */
      public static final int THIS_WEEK_VALUE = 3;

      /**
       *
       *
       * <pre>
       * From the beginning of the calendar week (Monday to Sunday) in which the
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_WEEK_TO_DATE = 29;</code>
       */
      public static final int THIS_WEEK_TO_DATE_VALUE = 29;

      /**
       *
       *
       * <pre>
       * The full month in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_MONTH = 4;</code>
       */
      public static final int THIS_MONTH_VALUE = 4;

      /**
       *
       *
       * <pre>
       * From the beginning of the calendar month in which the report is run, to
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_MONTH_TO_DATE = 26;</code>
       */
      public static final int THIS_MONTH_TO_DATE_VALUE = 26;

      /**
       *
       *
       * <pre>
       * The full quarter in which this report is run. Could include dates
       * in the future.
       * </pre>
       *
       * <code>THIS_QUARTER = 5;</code>
       */
      public static final int THIS_QUARTER_VALUE = 5;

      /**
       *
       *
       * <pre>
       * From the beginning of the calendar quarter in which the report is run,
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_QUARTER_TO_DATE = 27;</code>
       */
      public static final int THIS_QUARTER_TO_DATE_VALUE = 27;

      /**
       *
       *
       * <pre>
       * The full year in which this report is run. Could include dates in
       * the future.
       * </pre>
       *
       * <code>THIS_YEAR = 6;</code>
       */
      public static final int THIS_YEAR_VALUE = 6;

      /**
       *
       *
       * <pre>
       * From the beginning of the calendar year in which the report is run, to
       * up to and including the day the report is run.
       * </pre>
       *
       * <code>THIS_YEAR_TO_DATE = 28;</code>
       */
      public static final int THIS_YEAR_TO_DATE_VALUE = 28;

      /**
       *
       *
       * <pre>
       * The entire previous calendar week, Monday to Sunday (inclusive),
       * preceding the calendar week the report is run.
       * </pre>
       *
       * <code>LAST_WEEK = 7;</code>
       */
      public static final int LAST_WEEK_VALUE = 7;

      /**
       *
       *
       * <pre>
       * The entire previous calendar month preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_MONTH = 8;</code>
       */
      public static final int LAST_MONTH_VALUE = 8;

      /**
       *
       *
       * <pre>
       * The entire previous calendar quarter preceding the calendar quarter the
       * report is run.
       * </pre>
       *
       * <code>LAST_QUARTER = 9;</code>
       */
      public static final int LAST_QUARTER_VALUE = 9;

      /**
       *
       *
       * <pre>
       * The entire previous calendar year preceding the calendar year the
       * report is run.
       * </pre>
       *
       * <code>LAST_YEAR = 10;</code>
       */
      public static final int LAST_YEAR_VALUE = 10;

      /**
       *
       *
       * <pre>
       * The 7 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_7_DAYS = 11;</code>
       */
      public static final int LAST_7_DAYS_VALUE = 11;

      /**
       *
       *
       * <pre>
       * The 30 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_30_DAYS = 12;</code>
       */
      public static final int LAST_30_DAYS_VALUE = 12;

      /**
       *
       *
       * <pre>
       * The 60 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_60_DAYS = 13;</code>
       */
      public static final int LAST_60_DAYS_VALUE = 13;

      /**
       *
       *
       * <pre>
       * The 90 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_90_DAYS = 14;</code>
       */
      public static final int LAST_90_DAYS_VALUE = 14;

      /**
       *
       *
       * <pre>
       * The 180 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_180_DAYS = 15;</code>
       */
      public static final int LAST_180_DAYS_VALUE = 15;

      /**
       *
       *
       * <pre>
       * The 360 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_360_DAYS = 16;</code>
       */
      public static final int LAST_360_DAYS_VALUE = 16;

      /**
       *
       *
       * <pre>
       * The 365 days preceding the day the report is run.
       * </pre>
       *
       * <code>LAST_365_DAYS = 17;</code>
       */
      public static final int LAST_365_DAYS_VALUE = 17;

      /**
       *
       *
       * <pre>
       * The entire previous 3 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_3_MONTHS = 18;</code>
       */
      public static final int LAST_3_MONTHS_VALUE = 18;

      /**
       *
       *
       * <pre>
       * The entire previous 6 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_6_MONTHS = 19;</code>
       */
      public static final int LAST_6_MONTHS_VALUE = 19;

      /**
       *
       *
       * <pre>
       * The entire previous 6 calendar months preceding the calendar month the
       * report is run.
       * </pre>
       *
       * <code>LAST_12_MONTHS = 20;</code>
       */
      public static final int LAST_12_MONTHS_VALUE = 20;

      /**
       *
       *
       * <pre>
       * From 3 years before the report is run, to the day before the report is
       * run, inclusive.
       * </pre>
       *
       * <code>ALL_AVAILABLE = 21;</code>
       */
      public static final int ALL_AVAILABLE_VALUE = 21;

      /**
       *
       *
       * <pre>
       * The date a day after the date that the report is run.
       * </pre>
       *
       * <code>TOMORROW = 30;</code>
       */
      public static final int TOMORROW_VALUE = 30;

      /**
       *
       *
       * <pre>
       * The 90 days following the day the report is run.
       * </pre>
       *
       * <code>NEXT_90_DAYS = 31;</code>
       */
      public static final int NEXT_90_DAYS_VALUE = 31;

      /**
       *
       *
       * <pre>
       * The entire calendar month following the calendar month the report is
       * run.
       * </pre>
       *
       * <code>NEXT_MONTH = 32;</code>
       */
      public static final int NEXT_MONTH_VALUE = 32;

      /**
       *
       *
       * <pre>
       * The entire 3 calendar months following the calendar month the report
       * is run.
       * </pre>
       *
       * <code>NEXT_3_MONTHS = 33;</code>
       */
      public static final int NEXT_3_MONTHS_VALUE = 33;

      /**
       *
       *
       * <pre>
       * The entire 12 calendar months following the calendar month the report
       * is run.
       * </pre>
       *
       * <code>NEXT_12_MONTHS = 34;</code>
       */
      public static final int NEXT_12_MONTHS_VALUE = 34;

      /**
       *
       *
       * <pre>
       * The entire calendar week, Monday to Sunday (inclusive), following the
       * calendar week the report is run.
       * </pre>
       *
       * <code>NEXT_WEEK = 35;</code>
       */
      public static final int NEXT_WEEK_VALUE = 35;

      /**
       *
       *
       * <pre>
       * The entire calendar quarter following the calendar quarter the report
       * is run.
       * </pre>
       *
       * <code>NEXT_QUARTER = 36;</code>
       */
      public static final int NEXT_QUARTER_VALUE = 36;

      /**
       *
       *
       * <pre>
       * From the date a day after the date that the report is run, to the end
       * of the calendar month following the calendar month the report is run.
       * </pre>
       *
       * <code>TO_END_OF_NEXT_MONTH = 37;</code>
       */
      public static final int TO_END_OF_NEXT_MONTH_VALUE = 37;

      /**
       *
       *
       * <pre>
       * Only valid when used in the comparison_date_range field. The complete
       * period preceding the date period provided in date_range.
       *
       * In the case where date_range is a FixedDateRange of N days, this will
       * be a period of N days where the end date is the date preceding the
       * start date of the date_range.
       *
       * In the case where date_range is a RelativeDateRange, this will be a
       * period of the same timeframe preceding the date_range. In the case
       * where the date_range does not capture the full period because a report
       * is run in the middle of that period, this will still be the full
       * preceding period. For example, if date_range is THIS_WEEK, but the
       * report is run on a Wednesday, THIS_WEEK will be Monday - Wednesday, but
       * PREVIOUS_PERIOD will be Monday - Sunday.
       * </pre>
       *
       * <code>PREVIOUS_PERIOD = 22;</code>
       */
      public static final int PREVIOUS_PERIOD_VALUE = 22;

      /**
       *
       *
       * <pre>
       * Only valid when used in the comparison_date_range field. The period
       * starting 1 year prior to the date period provided in date_range.
       *
       * In the case where date_range is a FixedDateRange, this will be a date
       * range starting 1 year prior to the date_range start date and ending 1
       * year prior to the date_range end date.
       *
       * In the case where date_range is a RelativeDateRange, this will be a
       * period of the same timeframe exactly 1 year prior to the date_range.
       * In the case where the date_range does not capture the full period
       * because a report is run in the middle of that period, this will still
       * be the full period 1 year prior. For example, if date range is
       * THIS_WEEK, but the report is run on a Wednesday, THIS_WEEK will be
       * Monday - Wednesday, but SAME_PERIOD_PREVIOUS_YEAR will be Monday -
       * Sunday.
       * </pre>
       *
       * <code>SAME_PERIOD_PREVIOUS_YEAR = 24;</code>
       */
      public static final int SAME_PERIOD_PREVIOUS_YEAR_VALUE = 24;

      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RelativeDateRange valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static RelativeDateRange forNumber(int value) {
        switch (value) {
          case 0:
            return RELATIVE_DATE_RANGE_UNSPECIFIED;
          case 1:
            return TODAY;
          case 2:
            return YESTERDAY;
          case 3:
            return THIS_WEEK;
          case 29:
            return THIS_WEEK_TO_DATE;
          case 4:
            return THIS_MONTH;
          case 26:
            return THIS_MONTH_TO_DATE;
          case 5:
            return THIS_QUARTER;
          case 27:
            return THIS_QUARTER_TO_DATE;
          case 6:
            return THIS_YEAR;
          case 28:
            return THIS_YEAR_TO_DATE;
          case 7:
            return LAST_WEEK;
          case 8:
            return LAST_MONTH;
          case 9:
            return LAST_QUARTER;
          case 10:
            return LAST_YEAR;
          case 11:
            return LAST_7_DAYS;
          case 12:
            return LAST_30_DAYS;
          case 13:
            return LAST_60_DAYS;
          case 14:
            return LAST_90_DAYS;
          case 15:
            return LAST_180_DAYS;
          case 16:
            return LAST_360_DAYS;
          case 17:
            return LAST_365_DAYS;
          case 18:
            return LAST_3_MONTHS;
          case 19:
            return LAST_6_MONTHS;
          case 20:
            return LAST_12_MONTHS;
          case 21:
            return ALL_AVAILABLE;
          case 30:
            return TOMORROW;
          case 31:
            return NEXT_90_DAYS;
          case 32:
            return NEXT_MONTH;
          case 33:
            return NEXT_3_MONTHS;
          case 34:
            return NEXT_12_MONTHS;
          case 35:
            return NEXT_WEEK;
          case 36:
            return NEXT_QUARTER;
          case 37:
            return TO_END_OF_NEXT_MONTH;
          case 22:
            return PREVIOUS_PERIOD;
          case 24:
            return SAME_PERIOD_PREVIOUS_YEAR;
          default:
            return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RelativeDateRange>
          internalGetValueMap() {
        return internalValueMap;
      }

      private static final com.google.protobuf.Internal.EnumLiteMap<RelativeDateRange>
          internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<RelativeDateRange>() {
                public RelativeDateRange findValueByNumber(int number) {
                  return RelativeDateRange.forNumber(number);
                }
              };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }

      public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
      }

      public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinition.DateRange.getDescriptor()
            .getEnumTypes()
            .get(0);
      }

      private static final RelativeDateRange[] VALUES = values();

      public static RelativeDateRange valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RelativeDateRange(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange)
    }

    public interface FixedDateRangeOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
        com.google.protobuf.MessageOrBuilder {

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return Whether the startDate field is set.
       */
      boolean hasStartDate();

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return The startDate.
       */
      com.google.type.Date getStartDate();

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       */
      com.google.type.DateOrBuilder getStartDateOrBuilder();

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return Whether the endDate field is set.
       */
      boolean hasEndDate();

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return The endDate.
       */
      com.google.type.Date getEndDate();

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       */
      com.google.type.DateOrBuilder getEndDateOrBuilder();
    }

    /**
     *
     *
     * <pre>
     * A date range between two fixed dates (inclusive of end date).
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange}
     */
    public static final class FixedDateRange extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
        FixedDateRangeOrBuilder {
      private static final long serialVersionUID = 0L;

      // Use FixedDateRange.newBuilder() to construct.
      private FixedDateRange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private FixedDateRange() {}

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new FixedDateRange();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_FixedDateRange_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_FixedDateRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.class,
                com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder
                    .class);
      }

      private int bitField0_;
      public static final int START_DATE_FIELD_NUMBER = 1;
      private com.google.type.Date startDate_;

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return Whether the startDate field is set.
       */
      @java.lang.Override
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000001) != 0);
      }

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return The startDate.
       */
      @java.lang.Override
      public com.google.type.Date getStartDate() {
        return startDate_ == null ? com.google.type.Date.getDefaultInstance() : startDate_;
      }

      /**
       *
       *
       * <pre>
       * Required. The start date of this date range.
       * </pre>
       *
       * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       */
      @java.lang.Override
      public com.google.type.DateOrBuilder getStartDateOrBuilder() {
        return startDate_ == null ? com.google.type.Date.getDefaultInstance() : startDate_;
      }

      public static final int END_DATE_FIELD_NUMBER = 2;
      private com.google.type.Date endDate_;

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return Whether the endDate field is set.
       */
      @java.lang.Override
      public boolean hasEndDate() {
        return ((bitField0_ & 0x00000002) != 0);
      }

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       *
       * @return The endDate.
       */
      @java.lang.Override
      public com.google.type.Date getEndDate() {
        return endDate_ == null ? com.google.type.Date.getDefaultInstance() : endDate_;
      }

      /**
       *
       *
       * <pre>
       * Required. The end date (inclusive) of this date range.
       * </pre>
       *
       * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
       */
      @java.lang.Override
      public com.google.type.DateOrBuilder getEndDateOrBuilder() {
        return endDate_ == null ? com.google.type.Date.getDefaultInstance() : endDate_;
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getStartDate());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getEndDate());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getStartDate());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getEndDate());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj
            instanceof com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)) {
          return super.equals(obj);
        }
        com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange other =
            (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange) obj;

        if (hasStartDate() != other.hasStartDate()) return false;
        if (hasStartDate()) {
          if (!getStartDate().equals(other.getStartDate())) return false;
        }
        if (hasEndDate() != other.hasEndDate()) return false;
        if (hasEndDate()) {
          if (!getEndDate().equals(other.getEndDate())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasStartDate()) {
          hash = (37 * hash) + START_DATE_FIELD_NUMBER;
          hash = (53 * hash) + getStartDate().hashCode();
        }
        if (hasEndDate()) {
          hash = (37 * hash) + END_DATE_FIELD_NUMBER;
          hash = (53 * hash) + getEndDate().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }

      /**
       *
       *
       * <pre>
       * A date range between two fixed dates (inclusive of end date).
       * </pre>
       *
       * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_FixedDateRange_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_FixedDateRange_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.class,
                  com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder
                      .class);
        }

        // Construct using
        // com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
            getStartDateFieldBuilder();
            getEndDateFieldBuilder();
          }
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          startDate_ = null;
          if (startDateBuilder_ != null) {
            startDateBuilder_.dispose();
            startDateBuilder_ = null;
          }
          endDate_ = null;
          if (endDateBuilder_ != null) {
            endDateBuilder_.dispose();
            endDateBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_FixedDateRange_descriptor;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
            getDefaultInstanceForType() {
          return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
              .getDefaultInstance();
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange build() {
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange result =
              buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
            buildPartial() {
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange result =
              new com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange(this);
          if (bitField0_ != 0) {
            buildPartial0(result);
          }
          onBuilt();
          return result;
        }

        private void buildPartial0(
            com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.startDate_ = startDateBuilder_ == null ? startDate_ : startDateBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.endDate_ = endDateBuilder_ == null ? endDate_ : endDateBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other
              instanceof com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange) {
            return mergeFrom(
                (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange other) {
          if (other
              == com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
                  .getDefaultInstance()) return this;
          if (other.hasStartDate()) {
            mergeStartDate(other.getStartDate());
          }
          if (other.hasEndDate()) {
            mergeEndDate(other.getEndDate());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10:
                  {
                    input.readMessage(getStartDateFieldBuilder().getBuilder(), extensionRegistry);
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                case 18:
                  {
                    input.readMessage(getEndDateFieldBuilder().getBuilder(), extensionRegistry);
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 18
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int bitField0_;

        private com.google.type.Date startDate_;
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
            startDateBuilder_;

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         *
         * @return Whether the startDate field is set.
         */
        public boolean hasStartDate() {
          return ((bitField0_ & 0x00000001) != 0);
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         *
         * @return The startDate.
         */
        public com.google.type.Date getStartDate() {
          if (startDateBuilder_ == null) {
            return startDate_ == null ? com.google.type.Date.getDefaultInstance() : startDate_;
          } else {
            return startDateBuilder_.getMessage();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder setStartDate(com.google.type.Date value) {
          if (startDateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            startDate_ = value;
          } else {
            startDateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder setStartDate(com.google.type.Date.Builder builderForValue) {
          if (startDateBuilder_ == null) {
            startDate_ = builderForValue.build();
          } else {
            startDateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder mergeStartDate(com.google.type.Date value) {
          if (startDateBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)
                && startDate_ != null
                && startDate_ != com.google.type.Date.getDefaultInstance()) {
              getStartDateBuilder().mergeFrom(value);
            } else {
              startDate_ = value;
            }
          } else {
            startDateBuilder_.mergeFrom(value);
          }
          if (startDate_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder clearStartDate() {
          bitField0_ = (bitField0_ & ~0x00000001);
          startDate_ = null;
          if (startDateBuilder_ != null) {
            startDateBuilder_.dispose();
            startDateBuilder_ = null;
          }
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public com.google.type.Date.Builder getStartDateBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStartDateFieldBuilder().getBuilder();
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public com.google.type.DateOrBuilder getStartDateOrBuilder() {
          if (startDateBuilder_ != null) {
            return startDateBuilder_.getMessageOrBuilder();
          } else {
            return startDate_ == null ? com.google.type.Date.getDefaultInstance() : startDate_;
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The start date of this date range.
         * </pre>
         *
         * <code>.google.type.Date start_date = 1 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
            getStartDateFieldBuilder() {
          if (startDateBuilder_ == null) {
            startDateBuilder_ =
                new com.google.protobuf.SingleFieldBuilderV3<
                    com.google.type.Date,
                    com.google.type.Date.Builder,
                    com.google.type.DateOrBuilder>(
                    getStartDate(), getParentForChildren(), isClean());
            startDate_ = null;
          }
          return startDateBuilder_;
        }

        private com.google.type.Date endDate_;
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
            endDateBuilder_;

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         *
         * @return Whether the endDate field is set.
         */
        public boolean hasEndDate() {
          return ((bitField0_ & 0x00000002) != 0);
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         *
         * @return The endDate.
         */
        public com.google.type.Date getEndDate() {
          if (endDateBuilder_ == null) {
            return endDate_ == null ? com.google.type.Date.getDefaultInstance() : endDate_;
          } else {
            return endDateBuilder_.getMessage();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder setEndDate(com.google.type.Date value) {
          if (endDateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            endDate_ = value;
          } else {
            endDateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder setEndDate(com.google.type.Date.Builder builderForValue) {
          if (endDateBuilder_ == null) {
            endDate_ = builderForValue.build();
          } else {
            endDateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder mergeEndDate(com.google.type.Date value) {
          if (endDateBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)
                && endDate_ != null
                && endDate_ != com.google.type.Date.getDefaultInstance()) {
              getEndDateBuilder().mergeFrom(value);
            } else {
              endDate_ = value;
            }
          } else {
            endDateBuilder_.mergeFrom(value);
          }
          if (endDate_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public Builder clearEndDate() {
          bitField0_ = (bitField0_ & ~0x00000002);
          endDate_ = null;
          if (endDateBuilder_ != null) {
            endDateBuilder_.dispose();
            endDateBuilder_ = null;
          }
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public com.google.type.Date.Builder getEndDateBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getEndDateFieldBuilder().getBuilder();
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        public com.google.type.DateOrBuilder getEndDateOrBuilder() {
          if (endDateBuilder_ != null) {
            return endDateBuilder_.getMessageOrBuilder();
          } else {
            return endDate_ == null ? com.google.type.Date.getDefaultInstance() : endDate_;
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The end date (inclusive) of this date range.
         * </pre>
         *
         * <code>.google.type.Date end_date = 2 [(.google.api.field_behavior) = REQUIRED];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.type.Date, com.google.type.Date.Builder, com.google.type.DateOrBuilder>
            getEndDateFieldBuilder() {
          if (endDateBuilder_ == null) {
            endDateBuilder_ =
                new com.google.protobuf.SingleFieldBuilderV3<
                    com.google.type.Date,
                    com.google.type.Date.Builder,
                    com.google.type.DateOrBuilder>(getEndDate(), getParentForChildren(), isClean());
            endDate_ = null;
          }
          return endDateBuilder_;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
      }

      // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
      private static final com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE =
            new com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange();
      }

      public static com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FixedDateRange> PARSER =
          new com.google.protobuf.AbstractParser<FixedDateRange>() {
            @java.lang.Override
            public FixedDateRange parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<FixedDateRange> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FixedDateRange> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    private int dateRangeTypeCase_ = 0;

    @SuppressWarnings("serial")
    private java.lang.Object dateRangeType_;

    public enum DateRangeTypeCase
        implements
            com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      FIXED(1),
      RELATIVE(2),
      DATERANGETYPE_NOT_SET(0);
      private final int value;

      private DateRangeTypeCase(int value) {
        this.value = value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DateRangeTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static DateRangeTypeCase forNumber(int value) {
        switch (value) {
          case 1:
            return FIXED;
          case 2:
            return RELATIVE;
          case 0:
            return DATERANGETYPE_NOT_SET;
          default:
            return null;
        }
      }

      public int getNumber() {
        return this.value;
      }
    };

    public DateRangeTypeCase getDateRangeTypeCase() {
      return DateRangeTypeCase.forNumber(dateRangeTypeCase_);
    }

    public static final int FIXED_FIELD_NUMBER = 1;

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     *
     * @return Whether the fixed field is set.
     */
    @java.lang.Override
    public boolean hasFixed() {
      return dateRangeTypeCase_ == 1;
    }

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     *
     * @return The fixed.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange getFixed() {
      if (dateRangeTypeCase_ == 1) {
        return (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
            dateRangeType_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          .getDefaultInstance();
    }

    /**
     *
     *
     * <pre>
     * A fixed date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder
        getFixedOrBuilder() {
      if (dateRangeTypeCase_ == 1) {
        return (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
            dateRangeType_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
          .getDefaultInstance();
    }

    public static final int RELATIVE_FIELD_NUMBER = 2;

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return Whether the relative field is set.
     */
    public boolean hasRelative() {
      return dateRangeTypeCase_ == 2;
    }

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return The enum numeric value on the wire for relative.
     */
    public int getRelativeValue() {
      if (dateRangeTypeCase_ == 2) {
        return (java.lang.Integer) dateRangeType_;
      }
      return 0;
    }

    /**
     *
     *
     * <pre>
     * A relative date range.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
     * </code>
     *
     * @return The relative.
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange getRelative() {
      if (dateRangeTypeCase_ == 2) {
        com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange result =
            com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange.forNumber(
                (java.lang.Integer) dateRangeType_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange.UNRECOGNIZED
            : result;
      }
      return com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange
          .RELATIVE_DATE_RANGE_UNSPECIFIED;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (dateRangeTypeCase_ == 1) {
        output.writeMessage(
            1,
            (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange) dateRangeType_);
      }
      if (dateRangeTypeCase_ == 2) {
        output.writeEnum(2, ((java.lang.Integer) dateRangeType_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dateRangeTypeCase_ == 1) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                1,
                (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
                    dateRangeType_);
      }
      if (dateRangeTypeCase_ == 2) {
        size +=
            com.google.protobuf.CodedOutputStream.computeEnumSize(
                2, ((java.lang.Integer) dateRangeType_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.DateRange)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.DateRange other =
          (com.google.ads.admanager.v1.ReportDefinition.DateRange) obj;

      if (!getDateRangeTypeCase().equals(other.getDateRangeTypeCase())) return false;
      switch (dateRangeTypeCase_) {
        case 1:
          if (!getFixed().equals(other.getFixed())) return false;
          break;
        case 2:
          if (getRelativeValue() != other.getRelativeValue()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (dateRangeTypeCase_) {
        case 1:
          hash = (37 * hash) + FIXED_FIELD_NUMBER;
          hash = (53 * hash) + getFixed().hashCode();
          break;
        case 2:
          hash = (37 * hash) + RELATIVE_FIELD_NUMBER;
          hash = (53 * hash) + getRelativeValue();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.ads.admanager.v1.ReportDefinition.DateRange prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * A date range for a report.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.DateRange}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.DateRange)
        com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.DateRange.class,
                com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.DateRange.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (fixedBuilder_ != null) {
          fixedBuilder_.clear();
        }
        dateRangeTypeCase_ = 0;
        dateRangeType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_DateRange_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange build() {
        com.google.ads.admanager.v1.ReportDefinition.DateRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.DateRange result =
            new com.google.ads.admanager.v1.ReportDefinition.DateRange(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.DateRange result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(
          com.google.ads.admanager.v1.ReportDefinition.DateRange result) {
        result.dateRangeTypeCase_ = dateRangeTypeCase_;
        result.dateRangeType_ = this.dateRangeType_;
        if (dateRangeTypeCase_ == 1 && fixedBuilder_ != null) {
          result.dateRangeType_ = fixedBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.DateRange) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.DateRange) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.DateRange other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance())
          return this;
        switch (other.getDateRangeTypeCase()) {
          case FIXED:
            {
              mergeFixed(other.getFixed());
              break;
            }
          case RELATIVE:
            {
              setRelativeValue(other.getRelativeValue());
              break;
            }
          case DATERANGETYPE_NOT_SET:
            {
              break;
            }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  input.readMessage(getFixedFieldBuilder().getBuilder(), extensionRegistry);
                  dateRangeTypeCase_ = 1;
                  break;
                } // case 10
              case 16:
                {
                  int rawValue = input.readEnum();
                  dateRangeTypeCase_ = 2;
                  dateRangeType_ = rawValue;
                  break;
                } // case 16
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int dateRangeTypeCase_ = 0;
      private java.lang.Object dateRangeType_;

      public DateRangeTypeCase getDateRangeTypeCase() {
        return DateRangeTypeCase.forNumber(dateRangeTypeCase_);
      }

      public Builder clearDateRangeType() {
        dateRangeTypeCase_ = 0;
        dateRangeType_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange,
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder,
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder>
          fixedBuilder_;

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       *
       * @return Whether the fixed field is set.
       */
      @java.lang.Override
      public boolean hasFixed() {
        return dateRangeTypeCase_ == 1;
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       *
       * @return The fixed.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange getFixed() {
        if (fixedBuilder_ == null) {
          if (dateRangeTypeCase_ == 1) {
            return (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
                dateRangeType_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
              .getDefaultInstance();
        } else {
          if (dateRangeTypeCase_ == 1) {
            return fixedBuilder_.getMessage();
          }
          return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      public Builder setFixed(
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange value) {
        if (fixedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dateRangeType_ = value;
          onChanged();
        } else {
          fixedBuilder_.setMessage(value);
        }
        dateRangeTypeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      public Builder setFixed(
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder
              builderForValue) {
        if (fixedBuilder_ == null) {
          dateRangeType_ = builderForValue.build();
          onChanged();
        } else {
          fixedBuilder_.setMessage(builderForValue.build());
        }
        dateRangeTypeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      public Builder mergeFixed(
          com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange value) {
        if (fixedBuilder_ == null) {
          if (dateRangeTypeCase_ == 1
              && dateRangeType_
                  != com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
                      .getDefaultInstance()) {
            dateRangeType_ =
                com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.newBuilder(
                        (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
                            dateRangeType_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            dateRangeType_ = value;
          }
          onChanged();
        } else {
          if (dateRangeTypeCase_ == 1) {
            fixedBuilder_.mergeFrom(value);
          } else {
            fixedBuilder_.setMessage(value);
          }
        }
        dateRangeTypeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      public Builder clearFixed() {
        if (fixedBuilder_ == null) {
          if (dateRangeTypeCase_ == 1) {
            dateRangeTypeCase_ = 0;
            dateRangeType_ = null;
            onChanged();
          }
        } else {
          if (dateRangeTypeCase_ == 1) {
            dateRangeTypeCase_ = 0;
            dateRangeType_ = null;
          }
          fixedBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder
          getFixedBuilder() {
        return getFixedFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder
          getFixedOrBuilder() {
        if ((dateRangeTypeCase_ == 1) && (fixedBuilder_ != null)) {
          return fixedBuilder_.getMessageOrBuilder();
        } else {
          if (dateRangeTypeCase_ == 1) {
            return (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
                dateRangeType_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A fixed date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange fixed = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange,
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder,
              com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder>
          getFixedFieldBuilder() {
        if (fixedBuilder_ == null) {
          if (!(dateRangeTypeCase_ == 1)) {
            dateRangeType_ =
                com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange
                    .getDefaultInstance();
          }
          fixedBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange,
                  com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRangeOrBuilder>(
                  (com.google.ads.admanager.v1.ReportDefinition.DateRange.FixedDateRange)
                      dateRangeType_,
                  getParentForChildren(),
                  isClean());
          dateRangeType_ = null;
        }
        dateRangeTypeCase_ = 1;
        onChanged();
        return fixedBuilder_;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @return Whether the relative field is set.
       */
      @java.lang.Override
      public boolean hasRelative() {
        return dateRangeTypeCase_ == 2;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @return The enum numeric value on the wire for relative.
       */
      @java.lang.Override
      public int getRelativeValue() {
        if (dateRangeTypeCase_ == 2) {
          return ((java.lang.Integer) dateRangeType_).intValue();
        }
        return 0;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @param value The enum numeric value on the wire for relative to set.
       * @return This builder for chaining.
       */
      public Builder setRelativeValue(int value) {
        dateRangeTypeCase_ = 2;
        dateRangeType_ = value;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @return The relative.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange
          getRelative() {
        if (dateRangeTypeCase_ == 2) {
          com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange result =
              com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange.forNumber(
                  (java.lang.Integer) dateRangeType_);
          return result == null
              ? com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange
                  .UNRECOGNIZED
              : result;
        }
        return com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange
            .RELATIVE_DATE_RANGE_UNSPECIFIED;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @param value The relative to set.
       * @return This builder for chaining.
       */
      public Builder setRelative(
          com.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange value) {
        if (value == null) {
          throw new NullPointerException();
        }
        dateRangeTypeCase_ = 2;
        dateRangeType_ = value.getNumber();
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * A relative date range.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.DateRange.RelativeDateRange relative = 2;
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearRelative() {
        if (dateRangeTypeCase_ == 2) {
          dateRangeTypeCase_ = 0;
          dateRangeType_ = null;
          onChanged();
        }
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.DateRange)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.DateRange)
    private static final com.google.ads.admanager.v1.ReportDefinition.DateRange DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.DateRange();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.DateRange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DateRange> PARSER =
        new com.google.protobuf.AbstractParser<DateRange>() {
          @java.lang.Override
          public DateRange parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<DateRange> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DateRange> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.DateRange getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface FilterOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Filter)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     *
     * @return Whether the fieldFilter field is set.
     */
    boolean hasFieldFilter();

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     *
     * @return The fieldFilter.
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter getFieldFilter();

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder
        getFieldFilterOrBuilder();

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     *
     * @return Whether the notFilter field is set.
     */
    boolean hasNotFilter();

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     *
     * @return The notFilter.
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter getNotFilter();

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     */
    com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getNotFilterOrBuilder();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     *
     * @return Whether the andFilter field is set.
     */
    boolean hasAndFilter();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     *
     * @return The andFilter.
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getAndFilter();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder getAndFilterOrBuilder();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     *
     * @return Whether the orFilter field is set.
     */
    boolean hasOrFilter();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     *
     * @return The orFilter.
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getOrFilter();

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder getOrFilterOrBuilder();

    com.google.ads.admanager.v1.ReportDefinition.Filter.TypeCase getTypeCase();
  }

  /**
   *
   *
   * <pre>
   * A filter over one or more fields.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter}
   */
  public static final class Filter extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Filter)
      FilterOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Filter.newBuilder() to construct.
    private Filter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Filter() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Filter();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.Filter.class,
              com.google.ads.admanager.v1.ReportDefinition.Filter.Builder.class);
    }

    /**
     *
     *
     * <pre>
     * Supported filter operations.
     * </pre>
     *
     * Protobuf enum {@code google.ads.admanager.v1.ReportDefinition.Filter.Operation}
     */
    public enum Operation implements com.google.protobuf.ProtocolMessageEnum {
      /**
       *
       *
       * <pre>
       * For scalar operands, checks if the operand is in the set of provided
       * filter values.
       *
       * For list operands, checks if any element in the operand is in the set
       * of provided filter values.
       *
       * Default value.
       * </pre>
       *
       * <code>IN = 0;</code>
       */
      IN(0),
      /**
       *
       *
       * <pre>
       * For scalar operands, checks that the operand is not in the set of
       * provided filter values.
       *
       * For list operands, checks that none of the elements in the operand
       * is in the set of provided filter values.
       * </pre>
       *
       * <code>NOT_IN = 1;</code>
       */
      NOT_IN(1),
      /**
       *
       *
       * <pre>
       * For scalar string operands, checks if the operand contains any of the
       * provided filter substrings.
       *
       * For string list operands, checks if any string in the operand contains
       * any of the provided filter substrings.
       * </pre>
       *
       * <code>CONTAINS = 2;</code>
       */
      CONTAINS(2),
      /**
       *
       *
       * <pre>
       * For scalar string operands, checks that the operand contains none of
       * the provided filter substrings.
       *
       * For string list operands, checks that none of the strings in the
       * operand contain none of the provided filter substrings.
       * </pre>
       *
       * <code>NOT_CONTAINS = 3;</code>
       */
      NOT_CONTAINS(3),
      /**
       *
       *
       * <pre>
       * Operand is less than the provided filter value.
       * </pre>
       *
       * <code>LESS_THAN = 4;</code>
       */
      LESS_THAN(4),
      /**
       *
       *
       * <pre>
       * Operand is less than or equal to provided filter value.
       * </pre>
       *
       * <code>LESS_THAN_EQUALS = 5;</code>
       */
      LESS_THAN_EQUALS(5),
      /**
       *
       *
       * <pre>
       * Operand is greater than provided filter value.
       * </pre>
       *
       * <code>GREATER_THAN = 6;</code>
       */
      GREATER_THAN(6),
      /**
       *
       *
       * <pre>
       * Operand is greater than or equal to provided filter value.
       * </pre>
       *
       * <code>GREATER_THAN_EQUALS = 7;</code>
       */
      GREATER_THAN_EQUALS(7),
      /**
       *
       *
       * <pre>
       * Operand is between provided filter values.
       * </pre>
       *
       * <code>BETWEEN = 8;</code>
       */
      BETWEEN(8),
      /**
       *
       *
       * <pre>
       * Operand matches against a regular expression or set of regular
       * expressions (one must match).
       * </pre>
       *
       * <code>MATCHES = 9;</code>
       */
      MATCHES(9),
      /**
       *
       *
       * <pre>
       * Operand negative matches against a regular expression or set of regular
       * expressions (none must match).
       * </pre>
       *
       * <code>NOT_MATCHES = 10;</code>
       */
      NOT_MATCHES(10),
      UNRECOGNIZED(-1),
      ;

      /**
       *
       *
       * <pre>
       * For scalar operands, checks if the operand is in the set of provided
       * filter values.
       *
       * For list operands, checks if any element in the operand is in the set
       * of provided filter values.
       *
       * Default value.
       * </pre>
       *
       * <code>IN = 0;</code>
       */
      public static final int IN_VALUE = 0;

      /**
       *
       *
       * <pre>
       * For scalar operands, checks that the operand is not in the set of
       * provided filter values.
       *
       * For list operands, checks that none of the elements in the operand
       * is in the set of provided filter values.
       * </pre>
       *
       * <code>NOT_IN = 1;</code>
       */
      public static final int NOT_IN_VALUE = 1;

      /**
       *
       *
       * <pre>
       * For scalar string operands, checks if the operand contains any of the
       * provided filter substrings.
       *
       * For string list operands, checks if any string in the operand contains
       * any of the provided filter substrings.
       * </pre>
       *
       * <code>CONTAINS = 2;</code>
       */
      public static final int CONTAINS_VALUE = 2;

      /**
       *
       *
       * <pre>
       * For scalar string operands, checks that the operand contains none of
       * the provided filter substrings.
       *
       * For string list operands, checks that none of the strings in the
       * operand contain none of the provided filter substrings.
       * </pre>
       *
       * <code>NOT_CONTAINS = 3;</code>
       */
      public static final int NOT_CONTAINS_VALUE = 3;

      /**
       *
       *
       * <pre>
       * Operand is less than the provided filter value.
       * </pre>
       *
       * <code>LESS_THAN = 4;</code>
       */
      public static final int LESS_THAN_VALUE = 4;

      /**
       *
       *
       * <pre>
       * Operand is less than or equal to provided filter value.
       * </pre>
       *
       * <code>LESS_THAN_EQUALS = 5;</code>
       */
      public static final int LESS_THAN_EQUALS_VALUE = 5;

      /**
       *
       *
       * <pre>
       * Operand is greater than provided filter value.
       * </pre>
       *
       * <code>GREATER_THAN = 6;</code>
       */
      public static final int GREATER_THAN_VALUE = 6;

      /**
       *
       *
       * <pre>
       * Operand is greater than or equal to provided filter value.
       * </pre>
       *
       * <code>GREATER_THAN_EQUALS = 7;</code>
       */
      public static final int GREATER_THAN_EQUALS_VALUE = 7;

      /**
       *
       *
       * <pre>
       * Operand is between provided filter values.
       * </pre>
       *
       * <code>BETWEEN = 8;</code>
       */
      public static final int BETWEEN_VALUE = 8;

      /**
       *
       *
       * <pre>
       * Operand matches against a regular expression or set of regular
       * expressions (one must match).
       * </pre>
       *
       * <code>MATCHES = 9;</code>
       */
      public static final int MATCHES_VALUE = 9;

      /**
       *
       *
       * <pre>
       * Operand negative matches against a regular expression or set of regular
       * expressions (none must match).
       * </pre>
       *
       * <code>NOT_MATCHES = 10;</code>
       */
      public static final int NOT_MATCHES_VALUE = 10;

      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Operation valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Operation forNumber(int value) {
        switch (value) {
          case 0:
            return IN;
          case 1:
            return NOT_IN;
          case 2:
            return CONTAINS;
          case 3:
            return NOT_CONTAINS;
          case 4:
            return LESS_THAN;
          case 5:
            return LESS_THAN_EQUALS;
          case 6:
            return GREATER_THAN;
          case 7:
            return GREATER_THAN_EQUALS;
          case 8:
            return BETWEEN;
          case 9:
            return MATCHES;
          case 10:
            return NOT_MATCHES;
          default:
            return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Operation> internalGetValueMap() {
        return internalValueMap;
      }

      private static final com.google.protobuf.Internal.EnumLiteMap<Operation> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Operation>() {
            public Operation findValueByNumber(int number) {
              return Operation.forNumber(number);
            }
          };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }

      public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
      }

      public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinition.Filter.getDescriptor()
            .getEnumTypes()
            .get(0);
      }

      private static final Operation[] VALUES = values();

      public static Operation valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Operation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:google.ads.admanager.v1.ReportDefinition.Filter.Operation)
    }

    public interface FieldFilterOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)
        com.google.protobuf.MessageOrBuilder {

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return Whether the field field is set.
       */
      boolean hasField();

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The field.
       */
      com.google.ads.admanager.v1.ReportDefinition.Field getField();

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder();

      /**
       *
       *
       * <pre>
       * Required. The operation of this filter.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The enum numeric value on the wire for operation.
       */
      int getOperationValue();

      /**
       *
       *
       * <pre>
       * Required. The operation of this filter.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The operation.
       */
      com.google.ads.admanager.v1.ReportDefinition.Filter.Operation getOperation();

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<com.google.ads.admanager.v1.ReportValue> getValuesList();

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.ads.admanager.v1.ReportValue getValues(int index);

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      int getValuesCount();

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<? extends com.google.ads.admanager.v1.ReportValueOrBuilder>
          getValuesOrBuilderList();

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.ads.admanager.v1.ReportValueOrBuilder getValuesOrBuilder(int index);

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the slice field is set.
       */
      boolean hasSlice();

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The slice.
       */
      com.google.ads.admanager.v1.ReportDefinition.Slice getSlice();

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder();

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to filter on a
       * specific column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the timePeriodIndex field is set.
       */
      boolean hasTimePeriodIndex();

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to filter on a
       * specific column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The timePeriodIndex.
       */
      int getTimePeriodIndex();

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the metricValueType field is set.
       */
      boolean hasMetricValueType();

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The enum numeric value on the wire for metricValueType.
       */
      int getMetricValueTypeValue();

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The metricValueType.
       */
      com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType();
    }

    /**
     *
     *
     * <pre>
     * A filter on a specific field.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter}
     */
    public static final class FieldFilter extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)
        FieldFilterOrBuilder {
      private static final long serialVersionUID = 0L;

      // Use FieldFilter.newBuilder() to construct.
      private FieldFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private FieldFilter() {
        operation_ = 0;
        values_ = java.util.Collections.emptyList();
        metricValueType_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new FieldFilter();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FieldFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FieldFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.class,
                com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder.class);
      }

      private int bitField0_;
      public static final int FIELD_FIELD_NUMBER = 1;
      private com.google.ads.admanager.v1.ReportDefinition.Field field_;

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return Whether the field field is set.
       */
      @java.lang.Override
      public boolean hasField() {
        return ((bitField0_ & 0x00000001) != 0);
      }

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The field.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Field getField() {
        return field_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
            : field_;
      }

      /**
       *
       *
       * <pre>
       * Required. The field to filter on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder() {
        return field_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
            : field_;
      }

      public static final int OPERATION_FIELD_NUMBER = 2;
      private int operation_ = 0;

      /**
       *
       *
       * <pre>
       * Required. The operation of this filter.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The enum numeric value on the wire for operation.
       */
      @java.lang.Override
      public int getOperationValue() {
        return operation_;
      }

      /**
       *
       *
       * <pre>
       * Required. The operation of this filter.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The operation.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.Operation getOperation() {
        com.google.ads.admanager.v1.ReportDefinition.Filter.Operation result =
            com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.forNumber(operation_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.UNRECOGNIZED
            : result;
      }

      public static final int VALUES_FIELD_NUMBER = 3;

      @SuppressWarnings("serial")
      private java.util.List<com.google.ads.admanager.v1.ReportValue> values_;

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<com.google.ads.admanager.v1.ReportValue> getValuesList() {
        return values_;
      }

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<? extends com.google.ads.admanager.v1.ReportValueOrBuilder>
          getValuesOrBuilderList() {
        return values_;
      }

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public int getValuesCount() {
        return values_.size();
      }

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportValue getValues(int index) {
        return values_.get(index);
      }

      /**
       *
       *
       * <pre>
       * Required. Values to filter to.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportValueOrBuilder getValuesOrBuilder(int index) {
        return values_.get(index);
      }

      public static final int SLICE_FIELD_NUMBER = 4;
      private com.google.ads.admanager.v1.ReportDefinition.Slice slice_;

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the slice field is set.
       */
      @java.lang.Override
      public boolean hasSlice() {
        return ((bitField0_ & 0x00000002) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The slice.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Slice getSlice() {
        return slice_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
            : slice_;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to filter on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder() {
        return slice_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
            : slice_;
      }

      public static final int TIME_PERIOD_INDEX_FIELD_NUMBER = 5;
      private int timePeriodIndex_ = 0;

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to filter on a
       * specific column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the timePeriodIndex field is set.
       */
      @java.lang.Override
      public boolean hasTimePeriodIndex() {
        return ((bitField0_ & 0x00000004) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to filter on a
       * specific column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The timePeriodIndex.
       */
      @java.lang.Override
      public int getTimePeriodIndex() {
        return timePeriodIndex_;
      }

      public static final int METRIC_VALUE_TYPE_FIELD_NUMBER = 6;
      private int metricValueType_ = 0;

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the metricValueType field is set.
       */
      @java.lang.Override
      public boolean hasMetricValueType() {
        return ((bitField0_ & 0x00000008) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The enum numeric value on the wire for metricValueType.
       */
      @java.lang.Override
      public int getMetricValueTypeValue() {
        return metricValueType_;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to filter on. Defaults
       * to PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The metricValueType.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType() {
        com.google.ads.admanager.v1.ReportDefinition.MetricValueType result =
            com.google.ads.admanager.v1.ReportDefinition.MetricValueType.forNumber(
                metricValueType_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.MetricValueType.UNRECOGNIZED
            : result;
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getField());
        }
        if (operation_
            != com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.IN.getNumber()) {
          output.writeEnum(2, operation_);
        }
        for (int i = 0; i < values_.size(); i++) {
          output.writeMessage(3, values_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(4, getSlice());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(5, timePeriodIndex_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeEnum(6, metricValueType_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getField());
        }
        if (operation_
            != com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.IN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, operation_);
        }
        for (int i = 0; i < values_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, values_.get(i));
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getSlice());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeInt32Size(5, timePeriodIndex_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream.computeEnumSize(6, metricValueType_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)) {
          return super.equals(obj);
        }
        com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter other =
            (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) obj;

        if (hasField() != other.hasField()) return false;
        if (hasField()) {
          if (!getField().equals(other.getField())) return false;
        }
        if (operation_ != other.operation_) return false;
        if (!getValuesList().equals(other.getValuesList())) return false;
        if (hasSlice() != other.hasSlice()) return false;
        if (hasSlice()) {
          if (!getSlice().equals(other.getSlice())) return false;
        }
        if (hasTimePeriodIndex() != other.hasTimePeriodIndex()) return false;
        if (hasTimePeriodIndex()) {
          if (getTimePeriodIndex() != other.getTimePeriodIndex()) return false;
        }
        if (hasMetricValueType() != other.hasMetricValueType()) return false;
        if (hasMetricValueType()) {
          if (metricValueType_ != other.metricValueType_) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasField()) {
          hash = (37 * hash) + FIELD_FIELD_NUMBER;
          hash = (53 * hash) + getField().hashCode();
        }
        hash = (37 * hash) + OPERATION_FIELD_NUMBER;
        hash = (53 * hash) + operation_;
        if (getValuesCount() > 0) {
          hash = (37 * hash) + VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getValuesList().hashCode();
        }
        if (hasSlice()) {
          hash = (37 * hash) + SLICE_FIELD_NUMBER;
          hash = (53 * hash) + getSlice().hashCode();
        }
        if (hasTimePeriodIndex()) {
          hash = (37 * hash) + TIME_PERIOD_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getTimePeriodIndex();
        }
        if (hasMetricValueType()) {
          hash = (37 * hash) + METRIC_VALUE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + metricValueType_;
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }

      /**
       *
       *
       * <pre>
       * A filter on a specific field.
       * </pre>
       *
       * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FieldFilter_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FieldFilter_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.class,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder.class);
        }

        // Construct using
        // com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
            getFieldFieldBuilder();
            getValuesFieldBuilder();
            getSliceFieldBuilder();
          }
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          field_ = null;
          if (fieldBuilder_ != null) {
            fieldBuilder_.dispose();
            fieldBuilder_ = null;
          }
          operation_ = 0;
          if (valuesBuilder_ == null) {
            values_ = java.util.Collections.emptyList();
          } else {
            values_ = null;
            valuesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          slice_ = null;
          if (sliceBuilder_ != null) {
            sliceBuilder_.dispose();
            sliceBuilder_ = null;
          }
          timePeriodIndex_ = 0;
          metricValueType_ = 0;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FieldFilter_descriptor;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
            getDefaultInstanceForType() {
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
              .getDefaultInstance();
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter build() {
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter buildPartial() {
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter result =
              new com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) {
            buildPartial0(result);
          }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter result) {
          if (valuesBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0)) {
              values_ = java.util.Collections.unmodifiableList(values_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.values_ = values_;
          } else {
            result.values_ = valuesBuilder_.build();
          }
        }

        private void buildPartial0(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.field_ = fieldBuilder_ == null ? field_ : fieldBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.operation_ = operation_;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.slice_ = sliceBuilder_ == null ? slice_ : sliceBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.timePeriodIndex_ = timePeriodIndex_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.metricValueType_ = metricValueType_;
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) {
            return mergeFrom(
                (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter other) {
          if (other
              == com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
                  .getDefaultInstance()) return this;
          if (other.hasField()) {
            mergeField(other.getField());
          }
          if (other.operation_ != 0) {
            setOperationValue(other.getOperationValue());
          }
          if (valuesBuilder_ == null) {
            if (!other.values_.isEmpty()) {
              if (values_.isEmpty()) {
                values_ = other.values_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureValuesIsMutable();
                values_.addAll(other.values_);
              }
              onChanged();
            }
          } else {
            if (!other.values_.isEmpty()) {
              if (valuesBuilder_.isEmpty()) {
                valuesBuilder_.dispose();
                valuesBuilder_ = null;
                values_ = other.values_;
                bitField0_ = (bitField0_ & ~0x00000004);
                valuesBuilder_ =
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                        ? getValuesFieldBuilder()
                        : null;
              } else {
                valuesBuilder_.addAllMessages(other.values_);
              }
            }
          }
          if (other.hasSlice()) {
            mergeSlice(other.getSlice());
          }
          if (other.hasTimePeriodIndex()) {
            setTimePeriodIndex(other.getTimePeriodIndex());
          }
          if (other.hasMetricValueType()) {
            setMetricValueType(other.getMetricValueType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10:
                  {
                    input.readMessage(getFieldFieldBuilder().getBuilder(), extensionRegistry);
                    bitField0_ |= 0x00000001;
                    break;
                  } // case 10
                case 16:
                  {
                    operation_ = input.readEnum();
                    bitField0_ |= 0x00000002;
                    break;
                  } // case 16
                case 26:
                  {
                    com.google.ads.admanager.v1.ReportValue m =
                        input.readMessage(
                            com.google.ads.admanager.v1.ReportValue.parser(), extensionRegistry);
                    if (valuesBuilder_ == null) {
                      ensureValuesIsMutable();
                      values_.add(m);
                    } else {
                      valuesBuilder_.addMessage(m);
                    }
                    break;
                  } // case 26
                case 34:
                  {
                    input.readMessage(getSliceFieldBuilder().getBuilder(), extensionRegistry);
                    bitField0_ |= 0x00000008;
                    break;
                  } // case 34
                case 40:
                  {
                    timePeriodIndex_ = input.readInt32();
                    bitField0_ |= 0x00000010;
                    break;
                  } // case 40
                case 48:
                  {
                    metricValueType_ = input.readEnum();
                    bitField0_ |= 0x00000020;
                    break;
                  } // case 48
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int bitField0_;

        private com.google.ads.admanager.v1.ReportDefinition.Field field_;
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Field,
                com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>
            fieldBuilder_;

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @return Whether the field field is set.
         */
        public boolean hasField() {
          return ((bitField0_ & 0x00000001) != 0);
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @return The field.
         */
        public com.google.ads.admanager.v1.ReportDefinition.Field getField() {
          if (fieldBuilder_ == null) {
            return field_ == null
                ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
                : field_;
          } else {
            return fieldBuilder_.getMessage();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setField(com.google.ads.admanager.v1.ReportDefinition.Field value) {
          if (fieldBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            field_ = value;
          } else {
            fieldBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setField(
            com.google.ads.admanager.v1.ReportDefinition.Field.Builder builderForValue) {
          if (fieldBuilder_ == null) {
            field_ = builderForValue.build();
          } else {
            fieldBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder mergeField(com.google.ads.admanager.v1.ReportDefinition.Field value) {
          if (fieldBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)
                && field_ != null
                && field_
                    != com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()) {
              getFieldBuilder().mergeFrom(value);
            } else {
              field_ = value;
            }
          } else {
            fieldBuilder_.mergeFrom(value);
          }
          if (field_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder clearField() {
          bitField0_ = (bitField0_ & ~0x00000001);
          field_ = null;
          if (fieldBuilder_ != null) {
            fieldBuilder_.dispose();
            fieldBuilder_ = null;
          }
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Field.Builder getFieldBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getFieldFieldBuilder().getBuilder();
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder() {
          if (fieldBuilder_ != null) {
            return fieldBuilder_.getMessageOrBuilder();
          } else {
            return field_ == null
                ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
                : field_;
          }
        }

        /**
         *
         *
         * <pre>
         * Required. The field to filter on.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Field,
                com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>
            getFieldFieldBuilder() {
          if (fieldBuilder_ == null) {
            fieldBuilder_ =
                new com.google.protobuf.SingleFieldBuilderV3<
                    com.google.ads.admanager.v1.ReportDefinition.Field,
                    com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
                    com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>(
                    getField(), getParentForChildren(), isClean());
            field_ = null;
          }
          return fieldBuilder_;
        }

        private int operation_ = 0;

        /**
         *
         *
         * <pre>
         * Required. The operation of this filter.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @return The enum numeric value on the wire for operation.
         */
        @java.lang.Override
        public int getOperationValue() {
          return operation_;
        }

        /**
         *
         *
         * <pre>
         * Required. The operation of this filter.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @param value The enum numeric value on the wire for operation to set.
         * @return This builder for chaining.
         */
        public Builder setOperationValue(int value) {
          operation_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The operation of this filter.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @return The operation.
         */
        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.Operation getOperation() {
          com.google.ads.admanager.v1.ReportDefinition.Filter.Operation result =
              com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.forNumber(operation_);
          return result == null
              ? com.google.ads.admanager.v1.ReportDefinition.Filter.Operation.UNRECOGNIZED
              : result;
        }

        /**
         *
         *
         * <pre>
         * Required. The operation of this filter.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @param value The operation to set.
         * @return This builder for chaining.
         */
        public Builder setOperation(
            com.google.ads.admanager.v1.ReportDefinition.Filter.Operation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          operation_ = value.getNumber();
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. The operation of this filter.
         * </pre>
         *
         * <code>
         * .google.ads.admanager.v1.ReportDefinition.Filter.Operation operation = 2 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         *
         * @return This builder for chaining.
         */
        public Builder clearOperation() {
          bitField0_ = (bitField0_ & ~0x00000002);
          operation_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.google.ads.admanager.v1.ReportValue> values_ =
            java.util.Collections.emptyList();

        private void ensureValuesIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            values_ = new java.util.ArrayList<com.google.ads.admanager.v1.ReportValue>(values_);
            bitField0_ |= 0x00000004;
          }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportValue,
                com.google.ads.admanager.v1.ReportValue.Builder,
                com.google.ads.admanager.v1.ReportValueOrBuilder>
            valuesBuilder_;

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.ads.admanager.v1.ReportValue> getValuesList() {
          if (valuesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(values_);
          } else {
            return valuesBuilder_.getMessageList();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public int getValuesCount() {
          if (valuesBuilder_ == null) {
            return values_.size();
          } else {
            return valuesBuilder_.getCount();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportValue getValues(int index) {
          if (valuesBuilder_ == null) {
            return values_.get(index);
          } else {
            return valuesBuilder_.getMessage(index);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setValues(int index, com.google.ads.admanager.v1.ReportValue value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.set(index, value);
            onChanged();
          } else {
            valuesBuilder_.setMessage(index, value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setValues(
            int index, com.google.ads.admanager.v1.ReportValue.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.set(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addValues(com.google.ads.admanager.v1.ReportValue value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.add(value);
            onChanged();
          } else {
            valuesBuilder_.addMessage(value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addValues(int index, com.google.ads.admanager.v1.ReportValue value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValuesIsMutable();
            values_.add(index, value);
            onChanged();
          } else {
            valuesBuilder_.addMessage(index, value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addValues(com.google.ads.admanager.v1.ReportValue.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.add(builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addValues(
            int index, com.google.ads.admanager.v1.ReportValue.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.add(index, builderForValue.build());
            onChanged();
          } else {
            valuesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addAllValues(
            java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportValue> values) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(values, values_);
            onChanged();
          } else {
            valuesBuilder_.addAllMessages(values);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder clearValues() {
          if (valuesBuilder_ == null) {
            values_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            valuesBuilder_.clear();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder removeValues(int index) {
          if (valuesBuilder_ == null) {
            ensureValuesIsMutable();
            values_.remove(index);
            onChanged();
          } else {
            valuesBuilder_.remove(index);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportValue.Builder getValuesBuilder(int index) {
          return getValuesFieldBuilder().getBuilder(index);
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportValueOrBuilder getValuesOrBuilder(int index) {
          if (valuesBuilder_ == null) {
            return values_.get(index);
          } else {
            return valuesBuilder_.getMessageOrBuilder(index);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<? extends com.google.ads.admanager.v1.ReportValueOrBuilder>
            getValuesOrBuilderList() {
          if (valuesBuilder_ != null) {
            return valuesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(values_);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportValue.Builder addValuesBuilder() {
          return getValuesFieldBuilder()
              .addBuilder(com.google.ads.admanager.v1.ReportValue.getDefaultInstance());
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportValue.Builder addValuesBuilder(int index) {
          return getValuesFieldBuilder()
              .addBuilder(index, com.google.ads.admanager.v1.ReportValue.getDefaultInstance());
        }

        /**
         *
         *
         * <pre>
         * Required. Values to filter to.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportValue values = 3 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.ads.admanager.v1.ReportValue.Builder>
            getValuesBuilderList() {
          return getValuesFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportValue,
                com.google.ads.admanager.v1.ReportValue.Builder,
                com.google.ads.admanager.v1.ReportValueOrBuilder>
            getValuesFieldBuilder() {
          if (valuesBuilder_ == null) {
            valuesBuilder_ =
                new com.google.protobuf.RepeatedFieldBuilderV3<
                    com.google.ads.admanager.v1.ReportValue,
                    com.google.ads.admanager.v1.ReportValue.Builder,
                    com.google.ads.admanager.v1.ReportValueOrBuilder>(
                    values_, ((bitField0_ & 0x00000004) != 0), getParentForChildren(), isClean());
            values_ = null;
          }
          return valuesBuilder_;
        }

        private com.google.ads.admanager.v1.ReportDefinition.Slice slice_;
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Slice,
                com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
                com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>
            sliceBuilder_;

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return Whether the slice field is set.
         */
        public boolean hasSlice() {
          return ((bitField0_ & 0x00000008) != 0);
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return The slice.
         */
        public com.google.ads.admanager.v1.ReportDefinition.Slice getSlice() {
          if (sliceBuilder_ == null) {
            return slice_ == null
                ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
                : slice_;
          } else {
            return sliceBuilder_.getMessage();
          }
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public Builder setSlice(com.google.ads.admanager.v1.ReportDefinition.Slice value) {
          if (sliceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            slice_ = value;
          } else {
            sliceBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public Builder setSlice(
            com.google.ads.admanager.v1.ReportDefinition.Slice.Builder builderForValue) {
          if (sliceBuilder_ == null) {
            slice_ = builderForValue.build();
          } else {
            sliceBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public Builder mergeSlice(com.google.ads.admanager.v1.ReportDefinition.Slice value) {
          if (sliceBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0)
                && slice_ != null
                && slice_
                    != com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()) {
              getSliceBuilder().mergeFrom(value);
            } else {
              slice_ = value;
            }
          } else {
            sliceBuilder_.mergeFrom(value);
          }
          if (slice_ != null) {
            bitField0_ |= 0x00000008;
            onChanged();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public Builder clearSlice() {
          bitField0_ = (bitField0_ & ~0x00000008);
          slice_ = null;
          if (sliceBuilder_ != null) {
            sliceBuilder_.dispose();
            sliceBuilder_ = null;
          }
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Slice.Builder getSliceBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getSliceFieldBuilder().getBuilder();
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder() {
          if (sliceBuilder_ != null) {
            return sliceBuilder_.getMessageOrBuilder();
          } else {
            return slice_ == null
                ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
                : slice_;
          }
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to filter on a specific slice of data.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 4 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Slice,
                com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
                com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>
            getSliceFieldBuilder() {
          if (sliceBuilder_ == null) {
            sliceBuilder_ =
                new com.google.protobuf.SingleFieldBuilderV3<
                    com.google.ads.admanager.v1.ReportDefinition.Slice,
                    com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
                    com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>(
                    getSlice(), getParentForChildren(), isClean());
            slice_ = null;
          }
          return sliceBuilder_;
        }

        private int timePeriodIndex_;

        /**
         *
         *
         * <pre>
         * Optional. When using time period columns, use this to filter on a
         * specific column.
         * </pre>
         *
         * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return Whether the timePeriodIndex field is set.
         */
        @java.lang.Override
        public boolean hasTimePeriodIndex() {
          return ((bitField0_ & 0x00000010) != 0);
        }

        /**
         *
         *
         * <pre>
         * Optional. When using time period columns, use this to filter on a
         * specific column.
         * </pre>
         *
         * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return The timePeriodIndex.
         */
        @java.lang.Override
        public int getTimePeriodIndex() {
          return timePeriodIndex_;
        }

        /**
         *
         *
         * <pre>
         * Optional. When using time period columns, use this to filter on a
         * specific column.
         * </pre>
         *
         * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @param value The timePeriodIndex to set.
         * @return This builder for chaining.
         */
        public Builder setTimePeriodIndex(int value) {

          timePeriodIndex_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. When using time period columns, use this to filter on a
         * specific column.
         * </pre>
         *
         * <code>optional int32 time_period_index = 5 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return This builder for chaining.
         */
        public Builder clearTimePeriodIndex() {
          bitField0_ = (bitField0_ & ~0x00000010);
          timePeriodIndex_ = 0;
          onChanged();
          return this;
        }

        private int metricValueType_ = 0;

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return Whether the metricValueType field is set.
         */
        @java.lang.Override
        public boolean hasMetricValueType() {
          return ((bitField0_ & 0x00000020) != 0);
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return The enum numeric value on the wire for metricValueType.
         */
        @java.lang.Override
        public int getMetricValueTypeValue() {
          return metricValueType_;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @param value The enum numeric value on the wire for metricValueType to set.
         * @return This builder for chaining.
         */
        public Builder setMetricValueTypeValue(int value) {
          metricValueType_ = value;
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return The metricValueType.
         */
        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType() {
          com.google.ads.admanager.v1.ReportDefinition.MetricValueType result =
              com.google.ads.admanager.v1.ReportDefinition.MetricValueType.forNumber(
                  metricValueType_);
          return result == null
              ? com.google.ads.admanager.v1.ReportDefinition.MetricValueType.UNRECOGNIZED
              : result;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @param value The metricValueType to set.
         * @return This builder for chaining.
         */
        public Builder setMetricValueType(
            com.google.ads.admanager.v1.ReportDefinition.MetricValueType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000020;
          metricValueType_ = value.getNumber();
          onChanged();
          return this;
        }

        /**
         *
         *
         * <pre>
         * Optional. Use to specify which metric value type to filter on. Defaults
         * to PRIMARY.
         * </pre>
         *
         * <code>
         * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 6 [(.google.api.field_behavior) = OPTIONAL];
         * </code>
         *
         * @return This builder for chaining.
         */
        public Builder clearMetricValueType() {
          bitField0_ = (bitField0_ & ~0x00000020);
          metricValueType_ = 0;
          onChanged();
          return this;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)
      }

      // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter)
      private static final com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter();
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FieldFilter> PARSER =
          new com.google.protobuf.AbstractParser<FieldFilter>() {
            @java.lang.Override
            public FieldFilter parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<FieldFilter> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FieldFilter> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    public interface FilterListOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Filter.FilterList)
        com.google.protobuf.MessageOrBuilder {

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList();

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index);

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      int getFiltersCount();

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          getFiltersOrBuilderList();

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(int index);
    }

    /**
     *
     *
     * <pre>
     * A list of filters.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter.FilterList}
     */
    public static final class FilterList extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Filter.FilterList)
        FilterListOrBuilder {
      private static final long serialVersionUID = 0L;

      // Use FilterList.newBuilder() to construct.
      private FilterList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private FilterList() {
        filters_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new FilterList();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FilterList_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FilterList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.class,
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder.class);
      }

      public static final int FILTERS_FIELD_NUMBER = 1;

      @SuppressWarnings("serial")
      private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_;

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList() {
        return filters_;
      }

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          getFiltersOrBuilderList() {
        return filters_;
      }

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public int getFiltersCount() {
        return filters_.size();
      }

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
        return filters_.get(index);
      }

      /**
       *
       *
       * <pre>
       * Required. A list of filters.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
          int index) {
        return filters_.get(index);
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        for (int i = 0; i < filters_.size(); i++) {
          output.writeMessage(1, filters_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < filters_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, filters_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList)) {
          return super.equals(obj);
        }
        com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList other =
            (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) obj;

        if (!getFiltersList().equals(other.getFiltersList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getFiltersCount() > 0) {
          hash = (37 * hash) + FILTERS_FIELD_NUMBER;
          hash = (53 * hash) + getFiltersList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }

      /**
       *
       *
       * <pre>
       * A list of filters.
       * </pre>
       *
       * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter.FilterList}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Filter.FilterList)
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FilterList_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FilterList_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.class,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder.class);
        }

        // Construct using
        // com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.newBuilder()
        private Builder() {}

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          if (filtersBuilder_ == null) {
            filters_ = java.util.Collections.emptyList();
          } else {
            filters_ = null;
            filtersBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.ads.admanager.v1.ReportDefinitionProto
              .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_FilterList_descriptor;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
            getDefaultInstanceForType() {
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList build() {
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList buildPartial() {
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList result =
              new com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) {
            buildPartial0(result);
          }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList result) {
          if (filtersBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              filters_ = java.util.Collections.unmodifiableList(filters_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.filters_ = filters_;
          } else {
            result.filters_ = filtersBuilder_.build();
          }
        }

        private void buildPartial0(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList result) {
          int from_bitField0_ = bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) {
            return mergeFrom(
                (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList other) {
          if (other
              == com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
                  .getDefaultInstance()) return this;
          if (filtersBuilder_ == null) {
            if (!other.filters_.isEmpty()) {
              if (filters_.isEmpty()) {
                filters_ = other.filters_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureFiltersIsMutable();
                filters_.addAll(other.filters_);
              }
              onChanged();
            }
          } else {
            if (!other.filters_.isEmpty()) {
              if (filtersBuilder_.isEmpty()) {
                filtersBuilder_.dispose();
                filtersBuilder_ = null;
                filters_ = other.filters_;
                bitField0_ = (bitField0_ & ~0x00000001);
                filtersBuilder_ =
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                        ? getFiltersFieldBuilder()
                        : null;
              } else {
                filtersBuilder_.addAllMessages(other.filters_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10:
                  {
                    com.google.ads.admanager.v1.ReportDefinition.Filter m =
                        input.readMessage(
                            com.google.ads.admanager.v1.ReportDefinition.Filter.parser(),
                            extensionRegistry);
                    if (filtersBuilder_ == null) {
                      ensureFiltersIsMutable();
                      filters_.add(m);
                    } else {
                      filtersBuilder_.addMessage(m);
                    }
                    break;
                  } // case 10
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int bitField0_;

        private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_ =
            java.util.Collections.emptyList();

        private void ensureFiltersIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            filters_ =
                new java.util.ArrayList<com.google.ads.admanager.v1.ReportDefinition.Filter>(
                    filters_);
            bitField0_ |= 0x00000001;
          }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Filter,
                com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
            filtersBuilder_;

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter>
            getFiltersList() {
          if (filtersBuilder_ == null) {
            return java.util.Collections.unmodifiableList(filters_);
          } else {
            return filtersBuilder_.getMessageList();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public int getFiltersCount() {
          if (filtersBuilder_ == null) {
            return filters_.size();
          } else {
            return filtersBuilder_.getCount();
          }
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
          if (filtersBuilder_ == null) {
            return filters_.get(index);
          } else {
            return filtersBuilder_.getMessage(index);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setFilters(
            int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
          if (filtersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFiltersIsMutable();
            filters_.set(index, value);
            onChanged();
          } else {
            filtersBuilder_.setMessage(index, value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setFilters(
            int index,
            com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
          if (filtersBuilder_ == null) {
            ensureFiltersIsMutable();
            filters_.set(index, builderForValue.build());
            onChanged();
          } else {
            filtersBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addFilters(com.google.ads.admanager.v1.ReportDefinition.Filter value) {
          if (filtersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFiltersIsMutable();
            filters_.add(value);
            onChanged();
          } else {
            filtersBuilder_.addMessage(value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addFilters(
            int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
          if (filtersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFiltersIsMutable();
            filters_.add(index, value);
            onChanged();
          } else {
            filtersBuilder_.addMessage(index, value);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addFilters(
            com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
          if (filtersBuilder_ == null) {
            ensureFiltersIsMutable();
            filters_.add(builderForValue.build());
            onChanged();
          } else {
            filtersBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addFilters(
            int index,
            com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
          if (filtersBuilder_ == null) {
            ensureFiltersIsMutable();
            filters_.add(index, builderForValue.build());
            onChanged();
          } else {
            filtersBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addAllFilters(
            java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Filter>
                values) {
          if (filtersBuilder_ == null) {
            ensureFiltersIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(values, filters_);
            onChanged();
          } else {
            filtersBuilder_.addAllMessages(values);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder clearFilters() {
          if (filtersBuilder_ == null) {
            filters_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            filtersBuilder_.clear();
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder removeFilters(int index) {
          if (filtersBuilder_ == null) {
            ensureFiltersIsMutable();
            filters_.remove(index);
            onChanged();
          } else {
            filtersBuilder_.remove(index);
          }
          return this;
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder getFiltersBuilder(
            int index) {
          return getFiltersFieldBuilder().getBuilder(index);
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
            int index) {
          if (filtersBuilder_ == null) {
            return filters_.get(index);
          } else {
            return filtersBuilder_.getMessageOrBuilder(index);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<
                ? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
            getFiltersOrBuilderList() {
          if (filtersBuilder_ != null) {
            return filtersBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(filters_);
          }
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder() {
          return getFiltersFieldBuilder()
              .addBuilder(com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder(
            int index) {
          return getFiltersFieldBuilder()
              .addBuilder(
                  index, com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
        }

        /**
         *
         *
         * <pre>
         * Required. A list of filters.
         * </pre>
         *
         * <code>
         * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter.Builder>
            getFiltersBuilderList() {
          return getFiltersFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Filter,
                com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
            getFiltersFieldBuilder() {
          if (filtersBuilder_ == null) {
            filtersBuilder_ =
                new com.google.protobuf.RepeatedFieldBuilderV3<
                    com.google.ads.admanager.v1.ReportDefinition.Filter,
                    com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                    com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>(
                    filters_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
            filters_ = null;
          }
          return filtersBuilder_;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Filter.FilterList)
      }

      // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Filter.FilterList)
      private static final com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList();
      }

      public static com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FilterList> PARSER =
          new com.google.protobuf.AbstractParser<FilterList>() {
            @java.lang.Override
            public FilterList parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<FilterList> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FilterList> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    private int typeCase_ = 0;

    @SuppressWarnings("serial")
    private java.lang.Object type_;

    public enum TypeCase
        implements
            com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      FIELD_FILTER(1),
      NOT_FILTER(2),
      AND_FILTER(3),
      OR_FILTER(4),
      TYPE_NOT_SET(0);
      private final int value;

      private TypeCase(int value) {
        this.value = value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeCase forNumber(int value) {
        switch (value) {
          case 1:
            return FIELD_FILTER;
          case 2:
            return NOT_FILTER;
          case 3:
            return AND_FILTER;
          case 4:
            return OR_FILTER;
          case 0:
            return TYPE_NOT_SET;
          default:
            return null;
        }
      }

      public int getNumber() {
        return this.value;
      }
    };

    public TypeCase getTypeCase() {
      return TypeCase.forNumber(typeCase_);
    }

    public static final int FIELD_FILTER_FIELD_NUMBER = 1;

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     *
     * @return Whether the fieldFilter field is set.
     */
    @java.lang.Override
    public boolean hasFieldFilter() {
      return typeCase_ == 1;
    }

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     *
     * @return The fieldFilter.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter getFieldFilter() {
      if (typeCase_ == 1) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.getDefaultInstance();
    }

    /**
     *
     *
     * <pre>
     * A filter on a single field.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder
        getFieldFilterOrBuilder() {
      if (typeCase_ == 1) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.getDefaultInstance();
    }

    public static final int NOT_FILTER_FIELD_NUMBER = 2;

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     *
     * @return Whether the notFilter field is set.
     */
    @java.lang.Override
    public boolean hasNotFilter() {
      return typeCase_ == 2;
    }

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     *
     * @return The notFilter.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter getNotFilter() {
      if (typeCase_ == 2) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
    }

    /**
     *
     *
     * <pre>
     * A filter whose result is negated.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getNotFilterOrBuilder() {
      if (typeCase_ == 2) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
    }

    public static final int AND_FILTER_FIELD_NUMBER = 3;

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     *
     * @return Whether the andFilter field is set.
     */
    @java.lang.Override
    public boolean hasAndFilter() {
      return typeCase_ == 3;
    }

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     *
     * @return The andFilter.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getAndFilter() {
      if (typeCase_ == 3) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
    }

    /**
     *
     *
     * <pre>
     * A list of filters whose results are AND-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder
        getAndFilterOrBuilder() {
      if (typeCase_ == 3) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
    }

    public static final int OR_FILTER_FIELD_NUMBER = 4;

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     *
     * @return Whether the orFilter field is set.
     */
    @java.lang.Override
    public boolean hasOrFilter() {
      return typeCase_ == 4;
    }

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     *
     * @return The orFilter.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getOrFilter() {
      if (typeCase_ == 4) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
    }

    /**
     *
     *
     * <pre>
     * A list of filters whose results are OR-ed.
     * </pre>
     *
     * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder
        getOrFilterOrBuilder() {
      if (typeCase_ == 4) {
        return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
      }
      return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (typeCase_ == 1) {
        output.writeMessage(
            1, (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_);
      }
      if (typeCase_ == 2) {
        output.writeMessage(2, (com.google.ads.admanager.v1.ReportDefinition.Filter) type_);
      }
      if (typeCase_ == 3) {
        output.writeMessage(
            3, (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_);
      }
      if (typeCase_ == 4) {
        output.writeMessage(
            4, (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typeCase_ == 1) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                1, (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_);
      }
      if (typeCase_ == 2) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                2, (com.google.ads.admanager.v1.ReportDefinition.Filter) type_);
      }
      if (typeCase_ == 3) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                3, (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_);
      }
      if (typeCase_ == 4) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                4, (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Filter)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.Filter other =
          (com.google.ads.admanager.v1.ReportDefinition.Filter) obj;

      if (!getTypeCase().equals(other.getTypeCase())) return false;
      switch (typeCase_) {
        case 1:
          if (!getFieldFilter().equals(other.getFieldFilter())) return false;
          break;
        case 2:
          if (!getNotFilter().equals(other.getNotFilter())) return false;
          break;
        case 3:
          if (!getAndFilter().equals(other.getAndFilter())) return false;
          break;
        case 4:
          if (!getOrFilter().equals(other.getOrFilter())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (typeCase_) {
        case 1:
          hash = (37 * hash) + FIELD_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getFieldFilter().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NOT_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getNotFilter().hashCode();
          break;
        case 3:
          hash = (37 * hash) + AND_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getAndFilter().hashCode();
          break;
        case 4:
          hash = (37 * hash) + OR_FILTER_FIELD_NUMBER;
          hash = (53 * hash) + getOrFilter().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.ads.admanager.v1.ReportDefinition.Filter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * A filter over one or more fields.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Filter}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Filter)
        com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Filter.class,
                com.google.ads.admanager.v1.ReportDefinition.Filter.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.Filter.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (fieldFilterBuilder_ != null) {
          fieldFilterBuilder_.clear();
        }
        if (notFilterBuilder_ != null) {
          notFilterBuilder_.clear();
        }
        if (andFilterBuilder_ != null) {
          andFilterBuilder_.clear();
        }
        if (orFilterBuilder_ != null) {
          orFilterBuilder_.clear();
        }
        typeCase_ = 0;
        type_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Filter_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter build() {
        com.google.ads.admanager.v1.ReportDefinition.Filter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.Filter result =
            new com.google.ads.admanager.v1.ReportDefinition.Filter(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.Filter result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.google.ads.admanager.v1.ReportDefinition.Filter result) {
        result.typeCase_ = typeCase_;
        result.type_ = this.type_;
        if (typeCase_ == 1 && fieldFilterBuilder_ != null) {
          result.type_ = fieldFilterBuilder_.build();
        }
        if (typeCase_ == 2 && notFilterBuilder_ != null) {
          result.type_ = notFilterBuilder_.build();
        }
        if (typeCase_ == 3 && andFilterBuilder_ != null) {
          result.type_ = andFilterBuilder_.build();
        }
        if (typeCase_ == 4 && orFilterBuilder_ != null) {
          result.type_ = orFilterBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Filter) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.Filter) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.Filter other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance())
          return this;
        switch (other.getTypeCase()) {
          case FIELD_FILTER:
            {
              mergeFieldFilter(other.getFieldFilter());
              break;
            }
          case NOT_FILTER:
            {
              mergeNotFilter(other.getNotFilter());
              break;
            }
          case AND_FILTER:
            {
              mergeAndFilter(other.getAndFilter());
              break;
            }
          case OR_FILTER:
            {
              mergeOrFilter(other.getOrFilter());
              break;
            }
          case TYPE_NOT_SET:
            {
              break;
            }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  input.readMessage(getFieldFilterFieldBuilder().getBuilder(), extensionRegistry);
                  typeCase_ = 1;
                  break;
                } // case 10
              case 18:
                {
                  input.readMessage(getNotFilterFieldBuilder().getBuilder(), extensionRegistry);
                  typeCase_ = 2;
                  break;
                } // case 18
              case 26:
                {
                  input.readMessage(getAndFilterFieldBuilder().getBuilder(), extensionRegistry);
                  typeCase_ = 3;
                  break;
                } // case 26
              case 34:
                {
                  input.readMessage(getOrFilterFieldBuilder().getBuilder(), extensionRegistry);
                  typeCase_ = 4;
                  break;
                } // case 34
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int typeCase_ = 0;
      private java.lang.Object type_;

      public TypeCase getTypeCase() {
        return TypeCase.forNumber(typeCase_);
      }

      public Builder clearType() {
        typeCase_ = 0;
        type_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder>
          fieldFilterBuilder_;

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       *
       * @return Whether the fieldFilter field is set.
       */
      @java.lang.Override
      public boolean hasFieldFilter() {
        return typeCase_ == 1;
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       *
       * @return The fieldFilter.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter getFieldFilter() {
        if (fieldFilterBuilder_ == null) {
          if (typeCase_ == 1) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
              .getDefaultInstance();
        } else {
          if (typeCase_ == 1) {
            return fieldFilterBuilder_.getMessage();
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      public Builder setFieldFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter value) {
        if (fieldFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          fieldFilterBuilder_.setMessage(value);
        }
        typeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      public Builder setFieldFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder builderForValue) {
        if (fieldFilterBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          fieldFilterBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      public Builder mergeFieldFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter value) {
        if (fieldFilterBuilder_ == null) {
          if (typeCase_ == 1
              && type_
                  != com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
                      .getDefaultInstance()) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.newBuilder(
                        (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 1) {
            fieldFilterBuilder_.mergeFrom(value);
          } else {
            fieldFilterBuilder_.setMessage(value);
          }
        }
        typeCase_ = 1;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      public Builder clearFieldFilter() {
        if (fieldFilterBuilder_ == null) {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
          }
          fieldFilterBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder
          getFieldFilterBuilder() {
        return getFieldFilterFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder
          getFieldFilterOrBuilder() {
        if ((typeCase_ == 1) && (fieldFilterBuilder_ != null)) {
          return fieldFilterBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 1) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A filter on a single field.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter field_filter = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder>
          getFieldFilterFieldBuilder() {
        if (fieldFilterBuilder_ == null) {
          if (!(typeCase_ == 1)) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter
                    .getDefaultInstance();
          }
          fieldFilterBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilterOrBuilder>(
                  (com.google.ads.admanager.v1.ReportDefinition.Filter.FieldFilter) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 1;
        onChanged();
        return fieldFilterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          notFilterBuilder_;

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       *
       * @return Whether the notFilter field is set.
       */
      @java.lang.Override
      public boolean hasNotFilter() {
        return typeCase_ == 2;
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       *
       * @return The notFilter.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter getNotFilter() {
        if (notFilterBuilder_ == null) {
          if (typeCase_ == 2) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
        } else {
          if (typeCase_ == 2) {
            return notFilterBuilder_.getMessage();
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      public Builder setNotFilter(com.google.ads.admanager.v1.ReportDefinition.Filter value) {
        if (notFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          notFilterBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      public Builder setNotFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
        if (notFilterBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          notFilterBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 2;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      public Builder mergeNotFilter(com.google.ads.admanager.v1.ReportDefinition.Filter value) {
        if (notFilterBuilder_ == null) {
          if (typeCase_ == 2
              && type_
                  != com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance()) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.newBuilder(
                        (com.google.ads.admanager.v1.ReportDefinition.Filter) type_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 2) {
            notFilterBuilder_.mergeFrom(value);
          } else {
            notFilterBuilder_.setMessage(value);
          }
        }
        typeCase_ = 2;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      public Builder clearNotFilter() {
        if (notFilterBuilder_ == null) {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
          }
          notFilterBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder getNotFilterBuilder() {
        return getNotFilterFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getNotFilterOrBuilder() {
        if ((typeCase_ == 2) && (notFilterBuilder_ != null)) {
          return notFilterBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 2) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A filter whose result is negated.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter not_filter = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          getNotFilterFieldBuilder() {
        if (notFilterBuilder_ == null) {
          if (!(typeCase_ == 2)) {
            type_ = com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance();
          }
          notFilterBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Filter,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>(
                  (com.google.ads.admanager.v1.ReportDefinition.Filter) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 2;
        onChanged();
        return notFilterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>
          andFilterBuilder_;

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       *
       * @return Whether the andFilter field is set.
       */
      @java.lang.Override
      public boolean hasAndFilter() {
        return typeCase_ == 3;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       *
       * @return The andFilter.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getAndFilter() {
        if (andFilterBuilder_ == null) {
          if (typeCase_ == 3) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        } else {
          if (typeCase_ == 3) {
            return andFilterBuilder_.getMessage();
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      public Builder setAndFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList value) {
        if (andFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          andFilterBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      public Builder setAndFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder builderForValue) {
        if (andFilterBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          andFilterBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 3;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      public Builder mergeAndFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList value) {
        if (andFilterBuilder_ == null) {
          if (typeCase_ == 3
              && type_
                  != com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
                      .getDefaultInstance()) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.newBuilder(
                        (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 3) {
            andFilterBuilder_.mergeFrom(value);
          } else {
            andFilterBuilder_.setMessage(value);
          }
        }
        typeCase_ = 3;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      public Builder clearAndFilter() {
        if (andFilterBuilder_ == null) {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
          }
          andFilterBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder
          getAndFilterBuilder() {
        return getAndFilterFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder
          getAndFilterOrBuilder() {
        if ((typeCase_ == 3) && (andFilterBuilder_ != null)) {
          return andFilterBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 3) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are AND-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList and_filter = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>
          getAndFilterFieldBuilder() {
        if (andFilterBuilder_ == null) {
          if (!(typeCase_ == 3)) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
          }
          andFilterBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>(
                  (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 3;
        onChanged();
        return andFilterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>
          orFilterBuilder_;

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       *
       * @return Whether the orFilter field is set.
       */
      @java.lang.Override
      public boolean hasOrFilter() {
        return typeCase_ == 4;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       *
       * @return The orFilter.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList getOrFilter() {
        if (orFilterBuilder_ == null) {
          if (typeCase_ == 4) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        } else {
          if (typeCase_ == 4) {
            return orFilterBuilder_.getMessage();
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      public Builder setOrFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList value) {
        if (orFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          orFilterBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      public Builder setOrFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder builderForValue) {
        if (orFilterBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          orFilterBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 4;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      public Builder mergeOrFilter(
          com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList value) {
        if (orFilterBuilder_ == null) {
          if (typeCase_ == 4
              && type_
                  != com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
                      .getDefaultInstance()) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.newBuilder(
                        (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 4) {
            orFilterBuilder_.mergeFrom(value);
          } else {
            orFilterBuilder_.setMessage(value);
          }
        }
        typeCase_ = 4;
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      public Builder clearOrFilter() {
        if (orFilterBuilder_ == null) {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
          }
          orFilterBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder
          getOrFilterBuilder() {
        return getOrFilterFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder
          getOrFilterOrBuilder() {
        if ((typeCase_ == 4) && (orFilterBuilder_ != null)) {
          return orFilterBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 4) {
            return (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_;
          }
          return com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList
              .getDefaultInstance();
        }
      }

      /**
       *
       *
       * <pre>
       * A list of filters whose results are OR-ed.
       * </pre>
       *
       * <code>.google.ads.admanager.v1.ReportDefinition.Filter.FilterList or_filter = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
              com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>
          getOrFilterFieldBuilder() {
        if (orFilterBuilder_ == null) {
          if (!(typeCase_ == 4)) {
            type_ =
                com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.getDefaultInstance();
          }
          orFilterBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.FilterListOrBuilder>(
                  (com.google.ads.admanager.v1.ReportDefinition.Filter.FilterList) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 4;
        onChanged();
        return orFilterBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Filter)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Filter)
    private static final com.google.ads.admanager.v1.ReportDefinition.Filter DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Filter();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Filter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Filter> PARSER =
        new com.google.protobuf.AbstractParser<Filter>() {
          @java.lang.Override
          public Filter parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Filter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Filter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface SortOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Sort)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the field field is set.
     */
    boolean hasField();

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The field.
     */
    com.google.ads.admanager.v1.ReportDefinition.Field getField();

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder();

    /**
     *
     *
     * <pre>
     * Optional. The sort order. If true the sort will be descending.
     * </pre>
     *
     * <code>bool descending = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The descending.
     */
    boolean getDescending();

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the slice field is set.
     */
    boolean hasSlice();

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The slice.
     */
    com.google.ads.admanager.v1.ReportDefinition.Slice getSlice();

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder();

    /**
     *
     *
     * <pre>
     * Optional. When using time period columns, use this to sort on a specific
     * column.
     * </pre>
     *
     * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return Whether the timePeriodIndex field is set.
     */
    boolean hasTimePeriodIndex();

    /**
     *
     *
     * <pre>
     * Optional. When using time period columns, use this to sort on a specific
     * column.
     * </pre>
     *
     * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The timePeriodIndex.
     */
    int getTimePeriodIndex();

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the metricValueType field is set.
     */
    boolean hasMetricValueType();

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for metricValueType.
     */
    int getMetricValueTypeValue();

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The metricValueType.
     */
    com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType();
  }

  /**
   *
   *
   * <pre>
   * Represents a sorting in a report.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Sort}
   */
  public static final class Sort extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Sort)
      SortOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Sort.newBuilder() to construct.
    private Sort(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Sort() {
      metricValueType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Sort();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Sort_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Sort_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.Sort.class,
              com.google.ads.admanager.v1.ReportDefinition.Sort.Builder.class);
    }

    private int bitField0_;
    public static final int FIELD_FIELD_NUMBER = 1;
    private com.google.ads.admanager.v1.ReportDefinition.Field field_;

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the field field is set.
     */
    @java.lang.Override
    public boolean hasField() {
      return ((bitField0_ & 0x00000001) != 0);
    }

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The field.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Field getField() {
      return field_ == null
          ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
          : field_;
    }

    /**
     *
     *
     * <pre>
     * Required. A field (dimension or metric) to sort by.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder() {
      return field_ == null
          ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
          : field_;
    }

    public static final int DESCENDING_FIELD_NUMBER = 2;
    private boolean descending_ = false;

    /**
     *
     *
     * <pre>
     * Optional. The sort order. If true the sort will be descending.
     * </pre>
     *
     * <code>bool descending = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The descending.
     */
    @java.lang.Override
    public boolean getDescending() {
      return descending_;
    }

    public static final int SLICE_FIELD_NUMBER = 3;
    private com.google.ads.admanager.v1.ReportDefinition.Slice slice_;

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the slice field is set.
     */
    @java.lang.Override
    public boolean hasSlice() {
      return ((bitField0_ & 0x00000002) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The slice.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Slice getSlice() {
      return slice_ == null
          ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
          : slice_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Use to sort on a specific slice of data.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder() {
      return slice_ == null
          ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
          : slice_;
    }

    public static final int TIME_PERIOD_INDEX_FIELD_NUMBER = 4;
    private int timePeriodIndex_ = 0;

    /**
     *
     *
     * <pre>
     * Optional. When using time period columns, use this to sort on a specific
     * column.
     * </pre>
     *
     * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return Whether the timePeriodIndex field is set.
     */
    @java.lang.Override
    public boolean hasTimePeriodIndex() {
      return ((bitField0_ & 0x00000004) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. When using time period columns, use this to sort on a specific
     * column.
     * </pre>
     *
     * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The timePeriodIndex.
     */
    @java.lang.Override
    public int getTimePeriodIndex() {
      return timePeriodIndex_;
    }

    public static final int METRIC_VALUE_TYPE_FIELD_NUMBER = 5;
    private int metricValueType_ = 0;

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the metricValueType field is set.
     */
    @java.lang.Override
    public boolean hasMetricValueType() {
      return ((bitField0_ & 0x00000008) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for metricValueType.
     */
    @java.lang.Override
    public int getMetricValueTypeValue() {
      return metricValueType_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Use to specify which metric value type to sort on. Defaults to
     * PRIMARY.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The metricValueType.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType() {
      com.google.ads.admanager.v1.ReportDefinition.MetricValueType result =
          com.google.ads.admanager.v1.ReportDefinition.MetricValueType.forNumber(metricValueType_);
      return result == null
          ? com.google.ads.admanager.v1.ReportDefinition.MetricValueType.UNRECOGNIZED
          : result;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getField());
      }
      if (descending_ != false) {
        output.writeBool(2, descending_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getSlice());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(4, timePeriodIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(5, metricValueType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getField());
      }
      if (descending_ != false) {
        size += com.google.protobuf.CodedOutputStream.computeBoolSize(2, descending_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getSlice());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(4, timePeriodIndex_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(5, metricValueType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Sort)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.Sort other =
          (com.google.ads.admanager.v1.ReportDefinition.Sort) obj;

      if (hasField() != other.hasField()) return false;
      if (hasField()) {
        if (!getField().equals(other.getField())) return false;
      }
      if (getDescending() != other.getDescending()) return false;
      if (hasSlice() != other.hasSlice()) return false;
      if (hasSlice()) {
        if (!getSlice().equals(other.getSlice())) return false;
      }
      if (hasTimePeriodIndex() != other.hasTimePeriodIndex()) return false;
      if (hasTimePeriodIndex()) {
        if (getTimePeriodIndex() != other.getTimePeriodIndex()) return false;
      }
      if (hasMetricValueType() != other.hasMetricValueType()) return false;
      if (hasMetricValueType()) {
        if (metricValueType_ != other.metricValueType_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasField()) {
        hash = (37 * hash) + FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getField().hashCode();
      }
      hash = (37 * hash) + DESCENDING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getDescending());
      if (hasSlice()) {
        hash = (37 * hash) + SLICE_FIELD_NUMBER;
        hash = (53 * hash) + getSlice().hashCode();
      }
      if (hasTimePeriodIndex()) {
        hash = (37 * hash) + TIME_PERIOD_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getTimePeriodIndex();
      }
      if (hasMetricValueType()) {
        hash = (37 * hash) + METRIC_VALUE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + metricValueType_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.google.ads.admanager.v1.ReportDefinition.Sort prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * Represents a sorting in a report.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Sort}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Sort)
        com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Sort_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Sort_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Sort.class,
                com.google.ads.admanager.v1.ReportDefinition.Sort.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.Sort.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getFieldFieldBuilder();
          getSliceFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        field_ = null;
        if (fieldBuilder_ != null) {
          fieldBuilder_.dispose();
          fieldBuilder_ = null;
        }
        descending_ = false;
        slice_ = null;
        if (sliceBuilder_ != null) {
          sliceBuilder_.dispose();
          sliceBuilder_ = null;
        }
        timePeriodIndex_ = 0;
        metricValueType_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Sort_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Sort getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.Sort.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Sort build() {
        com.google.ads.admanager.v1.ReportDefinition.Sort result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Sort buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.Sort result =
            new com.google.ads.admanager.v1.ReportDefinition.Sort(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.Sort result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.field_ = fieldBuilder_ == null ? field_ : fieldBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.descending_ = descending_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.slice_ = sliceBuilder_ == null ? slice_ : sliceBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.timePeriodIndex_ = timePeriodIndex_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.metricValueType_ = metricValueType_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Sort) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.Sort) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.Sort other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.Sort.getDefaultInstance())
          return this;
        if (other.hasField()) {
          mergeField(other.getField());
        }
        if (other.getDescending() != false) {
          setDescending(other.getDescending());
        }
        if (other.hasSlice()) {
          mergeSlice(other.getSlice());
        }
        if (other.hasTimePeriodIndex()) {
          setTimePeriodIndex(other.getTimePeriodIndex());
        }
        if (other.hasMetricValueType()) {
          setMetricValueType(other.getMetricValueType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  input.readMessage(getFieldFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
              case 16:
                {
                  descending_ = input.readBool();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
              case 26:
                {
                  input.readMessage(getSliceFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
              case 32:
                {
                  timePeriodIndex_ = input.readInt32();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
              case 40:
                {
                  metricValueType_ = input.readEnum();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private com.google.ads.admanager.v1.ReportDefinition.Field field_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Field,
              com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>
          fieldBuilder_;

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return Whether the field field is set.
       */
      public boolean hasField() {
        return ((bitField0_ & 0x00000001) != 0);
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The field.
       */
      public com.google.ads.admanager.v1.ReportDefinition.Field getField() {
        if (fieldBuilder_ == null) {
          return field_ == null
              ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
              : field_;
        } else {
          return fieldBuilder_.getMessage();
        }
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setField(com.google.ads.admanager.v1.ReportDefinition.Field value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          field_ = value;
        } else {
          fieldBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setField(
          com.google.ads.admanager.v1.ReportDefinition.Field.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          field_ = builderForValue.build();
        } else {
          fieldBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder mergeField(com.google.ads.admanager.v1.ReportDefinition.Field value) {
        if (fieldBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)
              && field_ != null
              && field_
                  != com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()) {
            getFieldBuilder().mergeFrom(value);
          } else {
            field_ = value;
          }
        } else {
          fieldBuilder_.mergeFrom(value);
        }
        if (field_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder clearField() {
        bitField0_ = (bitField0_ & ~0x00000001);
        field_ = null;
        if (fieldBuilder_ != null) {
          fieldBuilder_.dispose();
          fieldBuilder_ = null;
        }
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Field.Builder getFieldBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFieldFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder getFieldOrBuilder() {
        if (fieldBuilder_ != null) {
          return fieldBuilder_.getMessageOrBuilder();
        } else {
          return field_ == null
              ? com.google.ads.admanager.v1.ReportDefinition.Field.getDefaultInstance()
              : field_;
        }
      }

      /**
       *
       *
       * <pre>
       * Required. A field (dimension or metric) to sort by.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Field field = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Field,
              com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>
          getFieldFieldBuilder() {
        if (fieldBuilder_ == null) {
          fieldBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Field,
                  com.google.ads.admanager.v1.ReportDefinition.Field.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.FieldOrBuilder>(
                  getField(), getParentForChildren(), isClean());
          field_ = null;
        }
        return fieldBuilder_;
      }

      private boolean descending_;

      /**
       *
       *
       * <pre>
       * Optional. The sort order. If true the sort will be descending.
       * </pre>
       *
       * <code>bool descending = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @return The descending.
       */
      @java.lang.Override
      public boolean getDescending() {
        return descending_;
      }

      /**
       *
       *
       * <pre>
       * Optional. The sort order. If true the sort will be descending.
       * </pre>
       *
       * <code>bool descending = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @param value The descending to set.
       * @return This builder for chaining.
       */
      public Builder setDescending(boolean value) {

        descending_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. The sort order. If true the sort will be descending.
       * </pre>
       *
       * <code>bool descending = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearDescending() {
        bitField0_ = (bitField0_ & ~0x00000002);
        descending_ = false;
        onChanged();
        return this;
      }

      private com.google.ads.admanager.v1.ReportDefinition.Slice slice_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Slice,
              com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
              com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>
          sliceBuilder_;

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the slice field is set.
       */
      public boolean hasSlice() {
        return ((bitField0_ & 0x00000004) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The slice.
       */
      public com.google.ads.admanager.v1.ReportDefinition.Slice getSlice() {
        if (sliceBuilder_ == null) {
          return slice_ == null
              ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
              : slice_;
        } else {
          return sliceBuilder_.getMessage();
        }
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public Builder setSlice(com.google.ads.admanager.v1.ReportDefinition.Slice value) {
        if (sliceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          slice_ = value;
        } else {
          sliceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public Builder setSlice(
          com.google.ads.admanager.v1.ReportDefinition.Slice.Builder builderForValue) {
        if (sliceBuilder_ == null) {
          slice_ = builderForValue.build();
        } else {
          sliceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public Builder mergeSlice(com.google.ads.admanager.v1.ReportDefinition.Slice value) {
        if (sliceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)
              && slice_ != null
              && slice_
                  != com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()) {
            getSliceBuilder().mergeFrom(value);
          } else {
            slice_ = value;
          }
        } else {
          sliceBuilder_.mergeFrom(value);
        }
        if (slice_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public Builder clearSlice() {
        bitField0_ = (bitField0_ & ~0x00000004);
        slice_ = null;
        if (sliceBuilder_ != null) {
          sliceBuilder_.dispose();
          sliceBuilder_ = null;
        }
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Slice.Builder getSliceBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSliceFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder getSliceOrBuilder() {
        if (sliceBuilder_ != null) {
          return sliceBuilder_.getMessageOrBuilder();
        } else {
          return slice_ == null
              ? com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance()
              : slice_;
        }
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to sort on a specific slice of data.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.Slice slice = 3 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Slice,
              com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
              com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>
          getSliceFieldBuilder() {
        if (sliceBuilder_ == null) {
          sliceBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Slice,
                  com.google.ads.admanager.v1.ReportDefinition.Slice.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder>(
                  getSlice(), getParentForChildren(), isClean());
          slice_ = null;
        }
        return sliceBuilder_;
      }

      private int timePeriodIndex_;

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to sort on a specific
       * column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the timePeriodIndex field is set.
       */
      @java.lang.Override
      public boolean hasTimePeriodIndex() {
        return ((bitField0_ & 0x00000008) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to sort on a specific
       * column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The timePeriodIndex.
       */
      @java.lang.Override
      public int getTimePeriodIndex() {
        return timePeriodIndex_;
      }

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to sort on a specific
       * column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @param value The timePeriodIndex to set.
       * @return This builder for chaining.
       */
      public Builder setTimePeriodIndex(int value) {

        timePeriodIndex_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. When using time period columns, use this to sort on a specific
       * column.
       * </pre>
       *
       * <code>optional int32 time_period_index = 4 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearTimePeriodIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        timePeriodIndex_ = 0;
        onChanged();
        return this;
      }

      private int metricValueType_ = 0;

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return Whether the metricValueType field is set.
       */
      @java.lang.Override
      public boolean hasMetricValueType() {
        return ((bitField0_ & 0x00000010) != 0);
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The enum numeric value on the wire for metricValueType.
       */
      @java.lang.Override
      public int getMetricValueTypeValue() {
        return metricValueType_;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @param value The enum numeric value on the wire for metricValueType to set.
       * @return This builder for chaining.
       */
      public Builder setMetricValueTypeValue(int value) {
        metricValueType_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return The metricValueType.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.MetricValueType getMetricValueType() {
        com.google.ads.admanager.v1.ReportDefinition.MetricValueType result =
            com.google.ads.admanager.v1.ReportDefinition.MetricValueType.forNumber(
                metricValueType_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.MetricValueType.UNRECOGNIZED
            : result;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @param value The metricValueType to set.
       * @return This builder for chaining.
       */
      public Builder setMetricValueType(
          com.google.ads.admanager.v1.ReportDefinition.MetricValueType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        metricValueType_ = value.getNumber();
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Use to specify which metric value type to sort on. Defaults to
       * PRIMARY.
       * </pre>
       *
       * <code>
       * optional .google.ads.admanager.v1.ReportDefinition.MetricValueType metric_value_type = 5 [(.google.api.field_behavior) = OPTIONAL];
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearMetricValueType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        metricValueType_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Sort)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Sort)
    private static final com.google.ads.admanager.v1.ReportDefinition.Sort DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Sort();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Sort getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sort> PARSER =
        new com.google.protobuf.AbstractParser<Sort>() {
          @java.lang.Override
          public Sort parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Sort> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sort> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Sort getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface SliceOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Slice)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Required. The dimension to slice on.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for dimension.
     */
    int getDimensionValue();

    /**
     *
     *
     * <pre>
     * Required. The dimension to slice on.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The dimension.
     */
    com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension();

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the value field is set.
     */
    boolean hasValue();

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The value.
     */
    com.google.ads.admanager.v1.ReportValue getValue();

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    com.google.ads.admanager.v1.ReportValueOrBuilder getValueOrBuilder();
  }

  /**
   *
   *
   * <pre>
   * Use to specify a slice of data.
   *
   * For example, in a report, to focus on just data from the US, specify
   * `COUNTRY_NAME` for dimension and value: `"United States"`.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Slice}
   */
  public static final class Slice extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Slice)
      SliceOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Slice.newBuilder() to construct.
    private Slice(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Slice() {
      dimension_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Slice();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Slice_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Slice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.Slice.class,
              com.google.ads.admanager.v1.ReportDefinition.Slice.Builder.class);
    }

    private int bitField0_;
    public static final int DIMENSION_FIELD_NUMBER = 1;
    private int dimension_ = 0;

    /**
     *
     *
     * <pre>
     * Required. The dimension to slice on.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for dimension.
     */
    @java.lang.Override
    public int getDimensionValue() {
      return dimension_;
    }

    /**
     *
     *
     * <pre>
     * Required. The dimension to slice on.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The dimension.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension() {
      com.google.ads.admanager.v1.ReportDefinition.Dimension result =
          com.google.ads.admanager.v1.ReportDefinition.Dimension.forNumber(dimension_);
      return result == null
          ? com.google.ads.admanager.v1.ReportDefinition.Dimension.UNRECOGNIZED
          : result;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private com.google.ads.admanager.v1.ReportValue value_;

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The value.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportValue getValue() {
      return value_ == null ? com.google.ads.admanager.v1.ReportValue.getDefaultInstance() : value_;
    }

    /**
     *
     *
     * <pre>
     * Required. The value of the dimension.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportValueOrBuilder getValueOrBuilder() {
      return value_ == null ? com.google.ads.admanager.v1.ReportValue.getDefaultInstance() : value_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (dimension_
          != com.google.ads.admanager.v1.ReportDefinition.Dimension.DIMENSION_UNSPECIFIED
              .getNumber()) {
        output.writeEnum(1, dimension_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getValue());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dimension_
          != com.google.ads.admanager.v1.ReportDefinition.Dimension.DIMENSION_UNSPECIFIED
              .getNumber()) {
        size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, dimension_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Slice)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.Slice other =
          (com.google.ads.admanager.v1.ReportDefinition.Slice) obj;

      if (dimension_ != other.dimension_) return false;
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue().equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DIMENSION_FIELD_NUMBER;
      hash = (53 * hash) + dimension_;
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.google.ads.admanager.v1.ReportDefinition.Slice prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * Use to specify a slice of data.
     *
     * For example, in a report, to focus on just data from the US, specify
     * `COUNTRY_NAME` for dimension and value: `"United States"`.
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Slice}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Slice)
        com.google.ads.admanager.v1.ReportDefinition.SliceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Slice_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Slice_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Slice.class,
                com.google.ads.admanager.v1.ReportDefinition.Slice.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.Slice.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        dimension_ = 0;
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Slice_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Slice getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Slice build() {
        com.google.ads.admanager.v1.ReportDefinition.Slice result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Slice buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.Slice result =
            new com.google.ads.admanager.v1.ReportDefinition.Slice(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.Slice result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.dimension_ = dimension_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = valueBuilder_ == null ? value_ : valueBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Slice) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.Slice) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.Slice other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.Slice.getDefaultInstance())
          return this;
        if (other.dimension_ != 0) {
          setDimensionValue(other.getDimensionValue());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8:
                {
                  dimension_ = input.readEnum();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
              case 18:
                {
                  input.readMessage(getValueFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private int dimension_ = 0;

      /**
       *
       *
       * <pre>
       * Required. The dimension to slice on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The enum numeric value on the wire for dimension.
       */
      @java.lang.Override
      public int getDimensionValue() {
        return dimension_;
      }

      /**
       *
       *
       * <pre>
       * Required. The dimension to slice on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @param value The enum numeric value on the wire for dimension to set.
       * @return This builder for chaining.
       */
      public Builder setDimensionValue(int value) {
        dimension_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The dimension to slice on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The dimension.
       */
      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimension() {
        com.google.ads.admanager.v1.ReportDefinition.Dimension result =
            com.google.ads.admanager.v1.ReportDefinition.Dimension.forNumber(dimension_);
        return result == null
            ? com.google.ads.admanager.v1.ReportDefinition.Dimension.UNRECOGNIZED
            : result;
      }

      /**
       *
       *
       * <pre>
       * Required. The dimension to slice on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @param value The dimension to set.
       * @return This builder for chaining.
       */
      public Builder setDimension(com.google.ads.admanager.v1.ReportDefinition.Dimension value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        dimension_ = value.getNumber();
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The dimension to slice on.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportDefinition.Dimension dimension = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return This builder for chaining.
       */
      public Builder clearDimension() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dimension_ = 0;
        onChanged();
        return this;
      }

      private com.google.ads.admanager.v1.ReportValue value_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportValue,
              com.google.ads.admanager.v1.ReportValue.Builder,
              com.google.ads.admanager.v1.ReportValueOrBuilder>
          valueBuilder_;

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       *
       * @return The value.
       */
      public com.google.ads.admanager.v1.ReportValue getValue() {
        if (valueBuilder_ == null) {
          return value_ == null
              ? com.google.ads.admanager.v1.ReportValue.getDefaultInstance()
              : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setValue(com.google.ads.admanager.v1.ReportValue value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setValue(com.google.ads.admanager.v1.ReportValue.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder mergeValue(com.google.ads.admanager.v1.ReportValue value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)
              && value_ != null
              && value_ != com.google.ads.admanager.v1.ReportValue.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        if (value_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportValue.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportValueOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null
              ? com.google.ads.admanager.v1.ReportValue.getDefaultInstance()
              : value_;
        }
      }

      /**
       *
       *
       * <pre>
       * Required. The value of the dimension.
       * </pre>
       *
       * <code>
       * .google.ads.admanager.v1.ReportValue value = 2 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.ads.admanager.v1.ReportValue,
              com.google.ads.admanager.v1.ReportValue.Builder,
              com.google.ads.admanager.v1.ReportValueOrBuilder>
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportValue,
                  com.google.ads.admanager.v1.ReportValue.Builder,
                  com.google.ads.admanager.v1.ReportValueOrBuilder>(
                  getValue(), getParentForChildren(), isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Slice)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Slice)
    private static final com.google.ads.admanager.v1.ReportDefinition.Slice DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Slice();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Slice getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Slice> PARSER =
        new com.google.protobuf.AbstractParser<Slice>() {
          @java.lang.Override
          public Slice parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Slice> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Slice> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Slice getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface FlagOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.ads.admanager.v1.ReportDefinition.Flag)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList();

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index);

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    int getFiltersCount();

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
        getFiltersOrBuilderList();

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(int index);

    /**
     *
     *
     * <pre>
     * Optional. Name of the flag.
     * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
     * the colored flags that appear in the UI. The UI won't display flags
     * with other names, but they are available for use by API clients.
     * </pre>
     *
     * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The name.
     */
    java.lang.String getName();

    /**
     *
     *
     * <pre>
     * Optional. Name of the flag.
     * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
     * the colored flags that appear in the UI. The UI won't display flags
     * with other names, but they are available for use by API clients.
     * </pre>
     *
     * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString getNameBytes();
  }

  /**
   *
   *
   * <pre>
   * A flag for a report. Flags are used show if certain thresholds are met.
   * Result rows that match the filter will have the corresponding
   * [MetricValueGroup.flagValues][MetricValueGroup] index set to true.
   * For more information about flags see:
   * https://support.google.com/admanager/answer/15079975
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Flag}
   */
  public static final class Flag extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.ads.admanager.v1.ReportDefinition.Flag)
      FlagOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Flag.newBuilder() to construct.
    private Flag(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private Flag() {
      filters_ = java.util.Collections.emptyList();
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new Flag();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Flag_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_Flag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.Flag.class,
              com.google.ads.admanager.v1.ReportDefinition.Flag.Builder.class);
    }

    public static final int FILTERS_FIELD_NUMBER = 1;

    @SuppressWarnings("serial")
    private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_;

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList() {
      return filters_;
    }

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
        getFiltersOrBuilderList() {
      return filters_;
    }

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public int getFiltersCount() {
      return filters_.size();
    }

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
      return filters_.get(index);
    }

    /**
     *
     *
     * <pre>
     * Required. Filters to apply for the flag.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
        int index) {
      return filters_.get(index);
    }

    public static final int NAME_FIELD_NUMBER = 2;

    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Name of the flag.
     * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
     * the colored flags that appear in the UI. The UI won't display flags
     * with other names, but they are available for use by API clients.
     * </pre>
     *
     * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Name of the flag.
     * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
     * the colored flags that appear in the UI. The UI won't display flags
     * with other names, but they are available for use by API clients.
     * </pre>
     *
     * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      for (int i = 0; i < filters_.size(); i++) {
        output.writeMessage(1, filters_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, filters_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition.Flag)) {
        return super.equals(obj);
      }
      com.google.ads.admanager.v1.ReportDefinition.Flag other =
          (com.google.ads.admanager.v1.ReportDefinition.Flag) obj;

      if (!getFiltersList().equals(other.getFiltersList())) return false;
      if (!getName().equals(other.getName())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFiltersCount() > 0) {
        hash = (37 * hash) + FILTERS_FIELD_NUMBER;
        hash = (53 * hash) + getFiltersList().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.google.ads.admanager.v1.ReportDefinition.Flag prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     *
     *
     * <pre>
     * A flag for a report. Flags are used show if certain thresholds are met.
     * Result rows that match the filter will have the corresponding
     * [MetricValueGroup.flagValues][MetricValueGroup] index set to true.
     * For more information about flags see:
     * https://support.google.com/admanager/answer/15079975
     * </pre>
     *
     * Protobuf type {@code google.ads.admanager.v1.ReportDefinition.Flag}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition.Flag)
        com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Flag_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Flag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.ads.admanager.v1.ReportDefinition.Flag.class,
                com.google.ads.admanager.v1.ReportDefinition.Flag.Builder.class);
      }

      // Construct using com.google.ads.admanager.v1.ReportDefinition.Flag.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
        } else {
          filters_ = null;
          filtersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.ads.admanager.v1.ReportDefinitionProto
            .internal_static_google_ads_admanager_v1_ReportDefinition_Flag_descriptor;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Flag getDefaultInstanceForType() {
        return com.google.ads.admanager.v1.ReportDefinition.Flag.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Flag build() {
        com.google.ads.admanager.v1.ReportDefinition.Flag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.ads.admanager.v1.ReportDefinition.Flag buildPartial() {
        com.google.ads.admanager.v1.ReportDefinition.Flag result =
            new com.google.ads.admanager.v1.ReportDefinition.Flag(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(
          com.google.ads.admanager.v1.ReportDefinition.Flag result) {
        if (filtersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filters_ = java.util.Collections.unmodifiableList(filters_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filters_ = filters_;
        } else {
          result.filters_ = filtersBuilder_.build();
        }
      }

      private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition.Flag result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.ads.admanager.v1.ReportDefinition.Flag) {
          return mergeFrom((com.google.ads.admanager.v1.ReportDefinition.Flag) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition.Flag other) {
        if (other == com.google.ads.admanager.v1.ReportDefinition.Flag.getDefaultInstance())
          return this;
        if (filtersBuilder_ == null) {
          if (!other.filters_.isEmpty()) {
            if (filters_.isEmpty()) {
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFiltersIsMutable();
              filters_.addAll(other.filters_);
            }
            onChanged();
          }
        } else {
          if (!other.filters_.isEmpty()) {
            if (filtersBuilder_.isEmpty()) {
              filtersBuilder_.dispose();
              filtersBuilder_ = null;
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filtersBuilder_ =
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                      ? getFiltersFieldBuilder()
                      : null;
            } else {
              filtersBuilder_.addAllMessages(other.filters_);
            }
          }
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  com.google.ads.admanager.v1.ReportDefinition.Filter m =
                      input.readMessage(
                          com.google.ads.admanager.v1.ReportDefinition.Filter.parser(),
                          extensionRegistry);
                  if (filtersBuilder_ == null) {
                    ensureFiltersIsMutable();
                    filters_.add(m);
                  } else {
                    filtersBuilder_.addMessage(m);
                  }
                  break;
                } // case 10
              case 18:
                {
                  name_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_ =
          java.util.Collections.emptyList();

      private void ensureFiltersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filters_ =
              new java.util.ArrayList<com.google.ads.admanager.v1.ReportDefinition.Filter>(
                  filters_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          filtersBuilder_;

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList() {
        if (filtersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filters_);
        } else {
          return filtersBuilder_.getMessageList();
        }
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public int getFiltersCount() {
        if (filtersBuilder_ == null) {
          return filters_.size();
        } else {
          return filtersBuilder_.getCount();
        }
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);
        } else {
          return filtersBuilder_.getMessage(index);
        }
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setFilters(
          int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.set(index, value);
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder setFilters(
          int index, com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.set(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder addFilters(com.google.ads.admanager.v1.ReportDefinition.Filter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder addFilters(
          int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(index, value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder addFilters(
          com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder addFilters(
          int index, com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder addAllFilters(
          java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Filter>
              values) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, filters_);
          onChanged();
        } else {
          filtersBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder clearFilters() {
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filtersBuilder_.clear();
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public Builder removeFilters(int index) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.remove(index);
          onChanged();
        } else {
          filtersBuilder_.remove(index);
        }
        return this;
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder getFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder().getBuilder(index);
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
          int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);
        } else {
          return filtersBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          getFiltersOrBuilderList() {
        if (filtersBuilder_ != null) {
          return filtersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filters_);
        }
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder() {
        return getFiltersFieldBuilder()
            .addBuilder(com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder()
            .addBuilder(
                index, com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
      }

      /**
       *
       *
       * <pre>
       * Required. Filters to apply for the flag.
       * </pre>
       *
       * <code>
       * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 1 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter.Builder>
          getFiltersBuilderList() {
        return getFiltersFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.ads.admanager.v1.ReportDefinition.Filter,
              com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
              com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
          getFiltersFieldBuilder() {
        if (filtersBuilder_ == null) {
          filtersBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<
                  com.google.ads.admanager.v1.ReportDefinition.Filter,
                  com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                  com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>(
                  filters_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
          filters_ = null;
        }
        return filtersBuilder_;
      }

      private java.lang.Object name_ = "";

      /**
       *
       *
       * <pre>
       * Optional. Name of the flag.
       * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
       * the colored flags that appear in the UI. The UI won't display flags
       * with other names, but they are available for use by API clients.
       * </pre>
       *
       * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }

      /**
       *
       *
       * <pre>
       * Optional. Name of the flag.
       * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
       * the colored flags that appear in the UI. The UI won't display flags
       * with other names, but they are available for use by API clients.
       * </pre>
       *
       * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      /**
       *
       *
       * <pre>
       * Optional. Name of the flag.
       * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
       * the colored flags that appear in the UI. The UI won't display flags
       * with other names, but they are available for use by API clients.
       * </pre>
       *
       * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Name of the flag.
       * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
       * the colored flags that appear in the UI. The UI won't display flags
       * with other names, but they are available for use by API clients.
       * </pre>
       *
       * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      /**
       *
       *
       * <pre>
       * Optional. Name of the flag.
       * The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
       * the colored flags that appear in the UI. The UI won't display flags
       * with other names, but they are available for use by API clients.
       * </pre>
       *
       * <code>string name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
       *
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition.Flag)
    }

    // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition.Flag)
    private static final com.google.ads.admanager.v1.ReportDefinition.Flag DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition.Flag();
    }

    public static com.google.ads.admanager.v1.ReportDefinition.Flag getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Flag> PARSER =
        new com.google.protobuf.AbstractParser<Flag>() {
          @java.lang.Override
          public Flag parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<Flag> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Flag> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.Flag getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int bitField0_;
  public static final int DIMENSIONS_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> dimensions_;

  private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Dimension>
      dimensions_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Dimension>() {
            public com.google.ads.admanager.v1.ReportDefinition.Dimension convert(
                java.lang.Integer from) {
              com.google.ads.admanager.v1.ReportDefinition.Dimension result =
                  com.google.ads.admanager.v1.ReportDefinition.Dimension.forNumber(from);
              return result == null
                  ? com.google.ads.admanager.v1.ReportDefinition.Dimension.UNRECOGNIZED
                  : result;
            }
          };

  /**
   *
   *
   * <pre>
   * Required. The list of dimensions to report on. If empty, the report will
   * have no dimensions, and any metrics will be totals.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return A list containing the dimensions.
   */
  @java.lang.Override
  public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Dimension>
      getDimensionsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Dimension>(
        dimensions_, dimensions_converter_);
  }

  /**
   *
   *
   * <pre>
   * Required. The list of dimensions to report on. If empty, the report will
   * have no dimensions, and any metrics will be totals.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The count of dimensions.
   */
  @java.lang.Override
  public int getDimensionsCount() {
    return dimensions_.size();
  }

  /**
   *
   *
   * <pre>
   * Required. The list of dimensions to report on. If empty, the report will
   * have no dimensions, and any metrics will be totals.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The dimensions at the given index.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimensions(int index) {
    return dimensions_converter_.convert(dimensions_.get(index));
  }

  /**
   *
   *
   * <pre>
   * Required. The list of dimensions to report on. If empty, the report will
   * have no dimensions, and any metrics will be totals.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for dimensions.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getDimensionsValueList() {
    return dimensions_;
  }

  /**
   *
   *
   * <pre>
   * Required. The list of dimensions to report on. If empty, the report will
   * have no dimensions, and any metrics will be totals.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of dimensions at the given index.
   */
  @java.lang.Override
  public int getDimensionsValue(int index) {
    return dimensions_.get(index);
  }

  private int dimensionsMemoizedSerializedSize;

  public static final int METRICS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> metrics_;

  private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Metric>
      metrics_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Metric>() {
            public com.google.ads.admanager.v1.ReportDefinition.Metric convert(
                java.lang.Integer from) {
              com.google.ads.admanager.v1.ReportDefinition.Metric result =
                  com.google.ads.admanager.v1.ReportDefinition.Metric.forNumber(from);
              return result == null
                  ? com.google.ads.admanager.v1.ReportDefinition.Metric.UNRECOGNIZED
                  : result;
            }
          };

  /**
   *
   *
   * <pre>
   * Required. The list of metrics to report on. If empty, the report will have
   * no metrics.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return A list containing the metrics.
   */
  @java.lang.Override
  public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Metric> getMetricsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Metric>(
        metrics_, metrics_converter_);
  }

  /**
   *
   *
   * <pre>
   * Required. The list of metrics to report on. If empty, the report will have
   * no metrics.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The count of metrics.
   */
  @java.lang.Override
  public int getMetricsCount() {
    return metrics_.size();
  }

  /**
   *
   *
   * <pre>
   * Required. The list of metrics to report on. If empty, the report will have
   * no metrics.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The metrics at the given index.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.Metric getMetrics(int index) {
    return metrics_converter_.convert(metrics_.get(index));
  }

  /**
   *
   *
   * <pre>
   * Required. The list of metrics to report on. If empty, the report will have
   * no metrics.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for metrics.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getMetricsValueList() {
    return metrics_;
  }

  /**
   *
   *
   * <pre>
   * Required. The list of metrics to report on. If empty, the report will have
   * no metrics.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of metrics at the given index.
   */
  @java.lang.Override
  public int getMetricsValue(int index) {
    return metrics_.get(index);
  }

  private int metricsMemoizedSerializedSize;

  public static final int FILTERS_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_;

  /**
   *
   *
   * <pre>
   * Optional. The filters for this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList() {
    return filters_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The filters for this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
      getFiltersOrBuilderList() {
    return filters_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The filters for this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public int getFiltersCount() {
    return filters_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. The filters for this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
    return filters_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Optional. The filters for this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
      int index) {
    return filters_.get(index);
  }

  public static final int TIME_ZONE_SOURCE_FIELD_NUMBER = 20;
  private int timeZoneSource_ = 0;

  /**
   *
   *
   * <pre>
   * Optional. Where to get the time zone for this report. Defaults to using the
   * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
   * field in the report definition must also set a time zone.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for timeZoneSource.
   */
  @java.lang.Override
  public int getTimeZoneSourceValue() {
    return timeZoneSource_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Where to get the time zone for this report. Defaults to using the
   * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
   * field in the report definition must also set a time zone.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The timeZoneSource.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource getTimeZoneSource() {
    com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource result =
        com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.forNumber(timeZoneSource_);
    return result == null
        ? com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.UNRECOGNIZED
        : result;
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object timeZone_ = "";

  /**
   *
   *
   * <pre>
   * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
   * this report. Leave empty for any other time zone source. Time zone in IANA
   * format. For example, "America/New_York".
   * </pre>
   *
   * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The timeZone.
   */
  @java.lang.Override
  public java.lang.String getTimeZone() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      timeZone_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
   * this report. Leave empty for any other time zone source. Time zone in IANA
   * format. For example, "America/New_York".
   * </pre>
   *
   * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for timeZone.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTimeZoneBytes() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      timeZone_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CURRENCY_CODE_FIELD_NUMBER = 5;

  @SuppressWarnings("serial")
  private volatile java.lang.Object currencyCode_ = "";

  /**
   *
   *
   * <pre>
   * Optional. The ISO 4217 currency code for this report. Defaults to publisher
   * currency code if not specified.
   * </pre>
   *
   * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The currencyCode.
   */
  @java.lang.Override
  public java.lang.String getCurrencyCode() {
    java.lang.Object ref = currencyCode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      currencyCode_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. The ISO 4217 currency code for this report. Defaults to publisher
   * currency code if not specified.
   * </pre>
   *
   * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for currencyCode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getCurrencyCodeBytes() {
    java.lang.Object ref = currencyCode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      currencyCode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DATE_RANGE_FIELD_NUMBER = 6;
  private com.google.ads.admanager.v1.ReportDefinition.DateRange dateRange_;

  /**
   *
   *
   * <pre>
   * Required. The primary date range of this report.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the dateRange field is set.
   */
  @java.lang.Override
  public boolean hasDateRange() {
    return ((bitField0_ & 0x00000001) != 0);
  }

  /**
   *
   *
   * <pre>
   * Required. The primary date range of this report.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The dateRange.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.DateRange getDateRange() {
    return dateRange_ == null
        ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
        : dateRange_;
  }

  /**
   *
   *
   * <pre>
   * Required. The primary date range of this report.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder getDateRangeOrBuilder() {
    return dateRange_ == null
        ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
        : dateRange_;
  }

  public static final int COMPARISON_DATE_RANGE_FIELD_NUMBER = 9;
  private com.google.ads.admanager.v1.ReportDefinition.DateRange comparisonDateRange_;

  /**
   *
   *
   * <pre>
   * Optional. The comparison date range of this report. If unspecified, the
   * report won't have any comparison metrics.
   * </pre>
   *
   * <code>
   * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the comparisonDateRange field is set.
   */
  @java.lang.Override
  public boolean hasComparisonDateRange() {
    return ((bitField0_ & 0x00000002) != 0);
  }

  /**
   *
   *
   * <pre>
   * Optional. The comparison date range of this report. If unspecified, the
   * report won't have any comparison metrics.
   * </pre>
   *
   * <code>
   * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The comparisonDateRange.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.DateRange getComparisonDateRange() {
    return comparisonDateRange_ == null
        ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
        : comparisonDateRange_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The comparison date range of this report. If unspecified, the
   * report won't have any comparison metrics.
   * </pre>
   *
   * <code>
   * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder
      getComparisonDateRangeOrBuilder() {
    return comparisonDateRange_ == null
        ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
        : comparisonDateRange_;
  }

  public static final int CUSTOM_DIMENSION_KEY_IDS_FIELD_NUMBER = 7;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList customDimensionKeyIds_ = emptyLongList();

  /**
   *
   *
   * <pre>
   * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, custom_dimension_key_ids[0] describes
   * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the customDimensionKeyIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long> getCustomDimensionKeyIdsList() {
    return customDimensionKeyIds_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, custom_dimension_key_ids[0] describes
   * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of customDimensionKeyIds.
   */
  public int getCustomDimensionKeyIdsCount() {
    return customDimensionKeyIds_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, custom_dimension_key_ids[0] describes
   * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The customDimensionKeyIds at the given index.
   */
  public long getCustomDimensionKeyIds(int index) {
    return customDimensionKeyIds_.getLong(index);
  }

  private int customDimensionKeyIdsMemoizedSerializedSize = -1;

  public static final int LINE_ITEM_CUSTOM_FIELD_IDS_FIELD_NUMBER = 11;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList lineItemCustomFieldIds_ = emptyLongList();

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, line_item_custom_field_ids[0] describes
   * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the lineItemCustomFieldIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long> getLineItemCustomFieldIdsList() {
    return lineItemCustomFieldIds_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, line_item_custom_field_ids[0] describes
   * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of lineItemCustomFieldIds.
   */
  public int getLineItemCustomFieldIdsCount() {
    return lineItemCustomFieldIds_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, line_item_custom_field_ids[0] describes
   * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The lineItemCustomFieldIds at the given index.
   */
  public long getLineItemCustomFieldIds(int index) {
    return lineItemCustomFieldIds_.getLong(index);
  }

  private int lineItemCustomFieldIdsMemoizedSerializedSize = -1;

  public static final int ORDER_CUSTOM_FIELD_IDS_FIELD_NUMBER = 12;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList orderCustomFieldIds_ = emptyLongList();

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, order_custom_field_ids[0] describes
   * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the orderCustomFieldIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long> getOrderCustomFieldIdsList() {
    return orderCustomFieldIds_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, order_custom_field_ids[0] describes
   * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of orderCustomFieldIds.
   */
  public int getOrderCustomFieldIdsCount() {
    return orderCustomFieldIds_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, order_custom_field_ids[0] describes
   * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The orderCustomFieldIds at the given index.
   */
  public long getOrderCustomFieldIds(int index) {
    return orderCustomFieldIds_.getLong(index);
  }

  private int orderCustomFieldIdsMemoizedSerializedSize = -1;

  public static final int CREATIVE_CUSTOM_FIELD_IDS_FIELD_NUMBER = 13;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList creativeCustomFieldIds_ = emptyLongList();

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, creative_custom_field_ids[0] describes
   * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the creativeCustomFieldIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long> getCreativeCustomFieldIdsList() {
    return creativeCustomFieldIds_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, creative_custom_field_ids[0] describes
   * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of creativeCustomFieldIds.
   */
  public int getCreativeCustomFieldIdsCount() {
    return creativeCustomFieldIds_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
   * dimensions. The index of this repeated field corresponds to the index on
   * each dimension. For example, creative_custom_field_ids[0] describes
   * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
   * </pre>
   *
   * <code>repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The creativeCustomFieldIds at the given index.
   */
  public long getCreativeCustomFieldIds(int index) {
    return creativeCustomFieldIds_.getLong(index);
  }

  private int creativeCustomFieldIdsMemoizedSerializedSize = -1;

  public static final int REPORT_TYPE_FIELD_NUMBER = 8;
  private int reportType_ = 0;

  /**
   *
   *
   * <pre>
   * Required. The type of this report.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The enum numeric value on the wire for reportType.
   */
  @java.lang.Override
  public int getReportTypeValue() {
    return reportType_;
  }

  /**
   *
   *
   * <pre>
   * Required. The type of this report.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The reportType.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.ReportType getReportType() {
    com.google.ads.admanager.v1.ReportDefinition.ReportType result =
        com.google.ads.admanager.v1.ReportDefinition.ReportType.forNumber(reportType_);
    return result == null
        ? com.google.ads.admanager.v1.ReportDefinition.ReportType.UNRECOGNIZED
        : result;
  }

  public static final int TIME_PERIOD_COLUMN_FIELD_NUMBER = 10;
  private int timePeriodColumn_ = 0;

  /**
   *
   *
   * <pre>
   * Optional. Include a time period column to introduce comparison columns in
   * the report for each generated period. For example, set to  "QUARTERS" here
   * to have a column for each quarter present in the primary date range. If
   * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
   * column will also include comparison values for its relative previous
   * quarter.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for timePeriodColumn.
   */
  @java.lang.Override
  public int getTimePeriodColumnValue() {
    return timePeriodColumn_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Include a time period column to introduce comparison columns in
   * the report for each generated period. For example, set to  "QUARTERS" here
   * to have a column for each quarter present in the primary date range. If
   * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
   * column will also include comparison values for its relative previous
   * quarter.
   * </pre>
   *
   * <code>
   * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The timePeriodColumn.
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn getTimePeriodColumn() {
    com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn result =
        com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn.forNumber(timePeriodColumn_);
    return result == null
        ? com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn.UNRECOGNIZED
        : result;
  }

  public static final int FLAGS_FIELD_NUMBER = 14;

  @SuppressWarnings("serial")
  private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Flag> flags_;

  /**
   *
   *
   * <pre>
   * Optional. List of flags for this report. Used to flag rows in a result set
   * based on a set of defined filters.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Flag> getFlagsList() {
    return flags_;
  }

  /**
   *
   *
   * <pre>
   * Optional. List of flags for this report. Used to flag rows in a result set
   * based on a set of defined filters.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder>
      getFlagsOrBuilderList() {
    return flags_;
  }

  /**
   *
   *
   * <pre>
   * Optional. List of flags for this report. Used to flag rows in a result set
   * based on a set of defined filters.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public int getFlagsCount() {
    return flags_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. List of flags for this report. Used to flag rows in a result set
   * based on a set of defined filters.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.Flag getFlags(int index) {
    return flags_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Optional. List of flags for this report. Used to flag rows in a result set
   * based on a set of defined filters.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder getFlagsOrBuilder(int index) {
    return flags_.get(index);
  }

  public static final int SORTS_FIELD_NUMBER = 15;

  @SuppressWarnings("serial")
  private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Sort> sorts_;

  /**
   *
   *
   * <pre>
   * Optional. Default sorts to apply to this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Sort> getSortsList() {
    return sorts_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Default sorts to apply to this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder>
      getSortsOrBuilderList() {
    return sorts_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Default sorts to apply to this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public int getSortsCount() {
    return sorts_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. Default sorts to apply to this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.Sort getSorts(int index) {
    return sorts_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Optional. Default sorts to apply to this report.
   * </pre>
   *
   * <code>
   * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder getSortsOrBuilder(int index) {
    return sorts_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    getSerializedSize();
    if (getDimensionsList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(dimensionsMemoizedSerializedSize);
    }
    for (int i = 0; i < dimensions_.size(); i++) {
      output.writeEnumNoTag(dimensions_.get(i));
    }
    if (getMetricsList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(metricsMemoizedSerializedSize);
    }
    for (int i = 0; i < metrics_.size(); i++) {
      output.writeEnumNoTag(metrics_.get(i));
    }
    for (int i = 0; i < filters_.size(); i++) {
      output.writeMessage(3, filters_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeZone_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, timeZone_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(currencyCode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, currencyCode_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(6, getDateRange());
    }
    if (getCustomDimensionKeyIdsList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(customDimensionKeyIdsMemoizedSerializedSize);
    }
    for (int i = 0; i < customDimensionKeyIds_.size(); i++) {
      output.writeInt64NoTag(customDimensionKeyIds_.getLong(i));
    }
    if (reportType_
        != com.google.ads.admanager.v1.ReportDefinition.ReportType.REPORT_TYPE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(8, reportType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(9, getComparisonDateRange());
    }
    if (timePeriodColumn_
        != com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn
            .TIME_PERIOD_COLUMN_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(10, timePeriodColumn_);
    }
    if (getLineItemCustomFieldIdsList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(lineItemCustomFieldIdsMemoizedSerializedSize);
    }
    for (int i = 0; i < lineItemCustomFieldIds_.size(); i++) {
      output.writeInt64NoTag(lineItemCustomFieldIds_.getLong(i));
    }
    if (getOrderCustomFieldIdsList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(orderCustomFieldIdsMemoizedSerializedSize);
    }
    for (int i = 0; i < orderCustomFieldIds_.size(); i++) {
      output.writeInt64NoTag(orderCustomFieldIds_.getLong(i));
    }
    if (getCreativeCustomFieldIdsList().size() > 0) {
      output.writeUInt32NoTag(106);
      output.writeUInt32NoTag(creativeCustomFieldIdsMemoizedSerializedSize);
    }
    for (int i = 0; i < creativeCustomFieldIds_.size(); i++) {
      output.writeInt64NoTag(creativeCustomFieldIds_.getLong(i));
    }
    for (int i = 0; i < flags_.size(); i++) {
      output.writeMessage(14, flags_.get(i));
    }
    for (int i = 0; i < sorts_.size(); i++) {
      output.writeMessage(15, sorts_.get(i));
    }
    if (timeZoneSource_
        != com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.TIME_ZONE_SOURCE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(20, timeZoneSource_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < dimensions_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(dimensions_.get(i));
      }
      size += dataSize;
      if (!getDimensionsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataSize);
      }
      dimensionsMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < metrics_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(metrics_.get(i));
      }
      size += dataSize;
      if (!getMetricsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataSize);
      }
      metricsMemoizedSerializedSize = dataSize;
    }
    for (int i = 0; i < filters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, filters_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeZone_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, timeZone_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(currencyCode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, currencyCode_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getDateRange());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < customDimensionKeyIds_.size(); i++) {
        dataSize +=
            com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(
                customDimensionKeyIds_.getLong(i));
      }
      size += dataSize;
      if (!getCustomDimensionKeyIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      customDimensionKeyIdsMemoizedSerializedSize = dataSize;
    }
    if (reportType_
        != com.google.ads.admanager.v1.ReportDefinition.ReportType.REPORT_TYPE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(8, reportType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(9, getComparisonDateRange());
    }
    if (timePeriodColumn_
        != com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn
            .TIME_PERIOD_COLUMN_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(10, timePeriodColumn_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < lineItemCustomFieldIds_.size(); i++) {
        dataSize +=
            com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(
                lineItemCustomFieldIds_.getLong(i));
      }
      size += dataSize;
      if (!getLineItemCustomFieldIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      lineItemCustomFieldIdsMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < orderCustomFieldIds_.size(); i++) {
        dataSize +=
            com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(
                orderCustomFieldIds_.getLong(i));
      }
      size += dataSize;
      if (!getOrderCustomFieldIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      orderCustomFieldIdsMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < creativeCustomFieldIds_.size(); i++) {
        dataSize +=
            com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(
                creativeCustomFieldIds_.getLong(i));
      }
      size += dataSize;
      if (!getCreativeCustomFieldIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      creativeCustomFieldIdsMemoizedSerializedSize = dataSize;
    }
    for (int i = 0; i < flags_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(14, flags_.get(i));
    }
    for (int i = 0; i < sorts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(15, sorts_.get(i));
    }
    if (timeZoneSource_
        != com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.TIME_ZONE_SOURCE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(20, timeZoneSource_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.ads.admanager.v1.ReportDefinition)) {
      return super.equals(obj);
    }
    com.google.ads.admanager.v1.ReportDefinition other =
        (com.google.ads.admanager.v1.ReportDefinition) obj;

    if (!dimensions_.equals(other.dimensions_)) return false;
    if (!metrics_.equals(other.metrics_)) return false;
    if (!getFiltersList().equals(other.getFiltersList())) return false;
    if (timeZoneSource_ != other.timeZoneSource_) return false;
    if (!getTimeZone().equals(other.getTimeZone())) return false;
    if (!getCurrencyCode().equals(other.getCurrencyCode())) return false;
    if (hasDateRange() != other.hasDateRange()) return false;
    if (hasDateRange()) {
      if (!getDateRange().equals(other.getDateRange())) return false;
    }
    if (hasComparisonDateRange() != other.hasComparisonDateRange()) return false;
    if (hasComparisonDateRange()) {
      if (!getComparisonDateRange().equals(other.getComparisonDateRange())) return false;
    }
    if (!getCustomDimensionKeyIdsList().equals(other.getCustomDimensionKeyIdsList())) return false;
    if (!getLineItemCustomFieldIdsList().equals(other.getLineItemCustomFieldIdsList()))
      return false;
    if (!getOrderCustomFieldIdsList().equals(other.getOrderCustomFieldIdsList())) return false;
    if (!getCreativeCustomFieldIdsList().equals(other.getCreativeCustomFieldIdsList()))
      return false;
    if (reportType_ != other.reportType_) return false;
    if (timePeriodColumn_ != other.timePeriodColumn_) return false;
    if (!getFlagsList().equals(other.getFlagsList())) return false;
    if (!getSortsList().equals(other.getSortsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDimensionsCount() > 0) {
      hash = (37 * hash) + DIMENSIONS_FIELD_NUMBER;
      hash = (53 * hash) + dimensions_.hashCode();
    }
    if (getMetricsCount() > 0) {
      hash = (37 * hash) + METRICS_FIELD_NUMBER;
      hash = (53 * hash) + metrics_.hashCode();
    }
    if (getFiltersCount() > 0) {
      hash = (37 * hash) + FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getFiltersList().hashCode();
    }
    hash = (37 * hash) + TIME_ZONE_SOURCE_FIELD_NUMBER;
    hash = (53 * hash) + timeZoneSource_;
    hash = (37 * hash) + TIME_ZONE_FIELD_NUMBER;
    hash = (53 * hash) + getTimeZone().hashCode();
    hash = (37 * hash) + CURRENCY_CODE_FIELD_NUMBER;
    hash = (53 * hash) + getCurrencyCode().hashCode();
    if (hasDateRange()) {
      hash = (37 * hash) + DATE_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getDateRange().hashCode();
    }
    if (hasComparisonDateRange()) {
      hash = (37 * hash) + COMPARISON_DATE_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getComparisonDateRange().hashCode();
    }
    if (getCustomDimensionKeyIdsCount() > 0) {
      hash = (37 * hash) + CUSTOM_DIMENSION_KEY_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getCustomDimensionKeyIdsList().hashCode();
    }
    if (getLineItemCustomFieldIdsCount() > 0) {
      hash = (37 * hash) + LINE_ITEM_CUSTOM_FIELD_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getLineItemCustomFieldIdsList().hashCode();
    }
    if (getOrderCustomFieldIdsCount() > 0) {
      hash = (37 * hash) + ORDER_CUSTOM_FIELD_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getOrderCustomFieldIdsList().hashCode();
    }
    if (getCreativeCustomFieldIdsCount() > 0) {
      hash = (37 * hash) + CREATIVE_CUSTOM_FIELD_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getCreativeCustomFieldIdsList().hashCode();
    }
    hash = (37 * hash) + REPORT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + reportType_;
    hash = (37 * hash) + TIME_PERIOD_COLUMN_FIELD_NUMBER;
    hash = (53 * hash) + timePeriodColumn_;
    if (getFlagsCount() > 0) {
      hash = (37 * hash) + FLAGS_FIELD_NUMBER;
      hash = (53 * hash) + getFlagsList().hashCode();
    }
    if (getSortsCount() > 0) {
      hash = (37 * hash) + SORTS_FIELD_NUMBER;
      hash = (53 * hash) + getSortsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.ads.admanager.v1.ReportDefinition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.ads.admanager.v1.ReportDefinition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * The definition of how a report should be run.
   * </pre>
   *
   * Protobuf type {@code google.ads.admanager.v1.ReportDefinition}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.ads.admanager.v1.ReportDefinition)
      com.google.ads.admanager.v1.ReportDefinitionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ads.admanager.v1.ReportDefinition.class,
              com.google.ads.admanager.v1.ReportDefinition.Builder.class);
    }

    // Construct using com.google.ads.admanager.v1.ReportDefinition.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getFiltersFieldBuilder();
        getDateRangeFieldBuilder();
        getComparisonDateRangeFieldBuilder();
        getFlagsFieldBuilder();
        getSortsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      dimensions_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      metrics_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
      } else {
        filters_ = null;
        filtersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      timeZoneSource_ = 0;
      timeZone_ = "";
      currencyCode_ = "";
      dateRange_ = null;
      if (dateRangeBuilder_ != null) {
        dateRangeBuilder_.dispose();
        dateRangeBuilder_ = null;
      }
      comparisonDateRange_ = null;
      if (comparisonDateRangeBuilder_ != null) {
        comparisonDateRangeBuilder_.dispose();
        comparisonDateRangeBuilder_ = null;
      }
      customDimensionKeyIds_ = emptyLongList();
      lineItemCustomFieldIds_ = emptyLongList();
      orderCustomFieldIds_ = emptyLongList();
      creativeCustomFieldIds_ = emptyLongList();
      reportType_ = 0;
      timePeriodColumn_ = 0;
      if (flagsBuilder_ == null) {
        flags_ = java.util.Collections.emptyList();
      } else {
        flags_ = null;
        flagsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00004000);
      if (sortsBuilder_ == null) {
        sorts_ = java.util.Collections.emptyList();
      } else {
        sorts_ = null;
        sortsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00008000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.ads.admanager.v1.ReportDefinitionProto
          .internal_static_google_ads_admanager_v1_ReportDefinition_descriptor;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition getDefaultInstanceForType() {
      return com.google.ads.admanager.v1.ReportDefinition.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition build() {
      com.google.ads.admanager.v1.ReportDefinition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition buildPartial() {
      com.google.ads.admanager.v1.ReportDefinition result =
          new com.google.ads.admanager.v1.ReportDefinition(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.ads.admanager.v1.ReportDefinition result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        dimensions_ = java.util.Collections.unmodifiableList(dimensions_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.dimensions_ = dimensions_;
      if (((bitField0_ & 0x00000002) != 0)) {
        metrics_ = java.util.Collections.unmodifiableList(metrics_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.metrics_ = metrics_;
      if (filtersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          filters_ = java.util.Collections.unmodifiableList(filters_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.filters_ = filters_;
      } else {
        result.filters_ = filtersBuilder_.build();
      }
      if (flagsBuilder_ == null) {
        if (((bitField0_ & 0x00004000) != 0)) {
          flags_ = java.util.Collections.unmodifiableList(flags_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.flags_ = flags_;
      } else {
        result.flags_ = flagsBuilder_.build();
      }
      if (sortsBuilder_ == null) {
        if (((bitField0_ & 0x00008000) != 0)) {
          sorts_ = java.util.Collections.unmodifiableList(sorts_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.sorts_ = sorts_;
      } else {
        result.sorts_ = sortsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.ads.admanager.v1.ReportDefinition result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.timeZoneSource_ = timeZoneSource_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.timeZone_ = timeZone_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.currencyCode_ = currencyCode_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.dateRange_ = dateRangeBuilder_ == null ? dateRange_ : dateRangeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.comparisonDateRange_ =
            comparisonDateRangeBuilder_ == null
                ? comparisonDateRange_
                : comparisonDateRangeBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        customDimensionKeyIds_.makeImmutable();
        result.customDimensionKeyIds_ = customDimensionKeyIds_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        lineItemCustomFieldIds_.makeImmutable();
        result.lineItemCustomFieldIds_ = lineItemCustomFieldIds_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        orderCustomFieldIds_.makeImmutable();
        result.orderCustomFieldIds_ = orderCustomFieldIds_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        creativeCustomFieldIds_.makeImmutable();
        result.creativeCustomFieldIds_ = creativeCustomFieldIds_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.reportType_ = reportType_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.timePeriodColumn_ = timePeriodColumn_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ads.admanager.v1.ReportDefinition) {
        return mergeFrom((com.google.ads.admanager.v1.ReportDefinition) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ads.admanager.v1.ReportDefinition other) {
      if (other == com.google.ads.admanager.v1.ReportDefinition.getDefaultInstance()) return this;
      if (!other.dimensions_.isEmpty()) {
        if (dimensions_.isEmpty()) {
          dimensions_ = other.dimensions_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureDimensionsIsMutable();
          dimensions_.addAll(other.dimensions_);
        }
        onChanged();
      }
      if (!other.metrics_.isEmpty()) {
        if (metrics_.isEmpty()) {
          metrics_ = other.metrics_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureMetricsIsMutable();
          metrics_.addAll(other.metrics_);
        }
        onChanged();
      }
      if (filtersBuilder_ == null) {
        if (!other.filters_.isEmpty()) {
          if (filters_.isEmpty()) {
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFiltersIsMutable();
            filters_.addAll(other.filters_);
          }
          onChanged();
        }
      } else {
        if (!other.filters_.isEmpty()) {
          if (filtersBuilder_.isEmpty()) {
            filtersBuilder_.dispose();
            filtersBuilder_ = null;
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000004);
            filtersBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getFiltersFieldBuilder()
                    : null;
          } else {
            filtersBuilder_.addAllMessages(other.filters_);
          }
        }
      }
      if (other.timeZoneSource_ != 0) {
        setTimeZoneSourceValue(other.getTimeZoneSourceValue());
      }
      if (!other.getTimeZone().isEmpty()) {
        timeZone_ = other.timeZone_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (!other.getCurrencyCode().isEmpty()) {
        currencyCode_ = other.currencyCode_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (other.hasDateRange()) {
        mergeDateRange(other.getDateRange());
      }
      if (other.hasComparisonDateRange()) {
        mergeComparisonDateRange(other.getComparisonDateRange());
      }
      if (!other.customDimensionKeyIds_.isEmpty()) {
        if (customDimensionKeyIds_.isEmpty()) {
          customDimensionKeyIds_ = other.customDimensionKeyIds_;
          customDimensionKeyIds_.makeImmutable();
          bitField0_ |= 0x00000100;
        } else {
          ensureCustomDimensionKeyIdsIsMutable();
          customDimensionKeyIds_.addAll(other.customDimensionKeyIds_);
        }
        onChanged();
      }
      if (!other.lineItemCustomFieldIds_.isEmpty()) {
        if (lineItemCustomFieldIds_.isEmpty()) {
          lineItemCustomFieldIds_ = other.lineItemCustomFieldIds_;
          lineItemCustomFieldIds_.makeImmutable();
          bitField0_ |= 0x00000200;
        } else {
          ensureLineItemCustomFieldIdsIsMutable();
          lineItemCustomFieldIds_.addAll(other.lineItemCustomFieldIds_);
        }
        onChanged();
      }
      if (!other.orderCustomFieldIds_.isEmpty()) {
        if (orderCustomFieldIds_.isEmpty()) {
          orderCustomFieldIds_ = other.orderCustomFieldIds_;
          orderCustomFieldIds_.makeImmutable();
          bitField0_ |= 0x00000400;
        } else {
          ensureOrderCustomFieldIdsIsMutable();
          orderCustomFieldIds_.addAll(other.orderCustomFieldIds_);
        }
        onChanged();
      }
      if (!other.creativeCustomFieldIds_.isEmpty()) {
        if (creativeCustomFieldIds_.isEmpty()) {
          creativeCustomFieldIds_ = other.creativeCustomFieldIds_;
          creativeCustomFieldIds_.makeImmutable();
          bitField0_ |= 0x00000800;
        } else {
          ensureCreativeCustomFieldIdsIsMutable();
          creativeCustomFieldIds_.addAll(other.creativeCustomFieldIds_);
        }
        onChanged();
      }
      if (other.reportType_ != 0) {
        setReportTypeValue(other.getReportTypeValue());
      }
      if (other.timePeriodColumn_ != 0) {
        setTimePeriodColumnValue(other.getTimePeriodColumnValue());
      }
      if (flagsBuilder_ == null) {
        if (!other.flags_.isEmpty()) {
          if (flags_.isEmpty()) {
            flags_ = other.flags_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureFlagsIsMutable();
            flags_.addAll(other.flags_);
          }
          onChanged();
        }
      } else {
        if (!other.flags_.isEmpty()) {
          if (flagsBuilder_.isEmpty()) {
            flagsBuilder_.dispose();
            flagsBuilder_ = null;
            flags_ = other.flags_;
            bitField0_ = (bitField0_ & ~0x00004000);
            flagsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getFlagsFieldBuilder()
                    : null;
          } else {
            flagsBuilder_.addAllMessages(other.flags_);
          }
        }
      }
      if (sortsBuilder_ == null) {
        if (!other.sorts_.isEmpty()) {
          if (sorts_.isEmpty()) {
            sorts_ = other.sorts_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureSortsIsMutable();
            sorts_.addAll(other.sorts_);
          }
          onChanged();
        }
      } else {
        if (!other.sorts_.isEmpty()) {
          if (sortsBuilder_.isEmpty()) {
            sortsBuilder_.dispose();
            sortsBuilder_ = null;
            sorts_ = other.sorts_;
            bitField0_ = (bitField0_ & ~0x00008000);
            sortsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getSortsFieldBuilder()
                    : null;
          } else {
            sortsBuilder_.addAllMessages(other.sorts_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                int tmpRaw = input.readEnum();
                ensureDimensionsIsMutable();
                dimensions_.add(tmpRaw);
                break;
              } // case 8
            case 10:
              {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureDimensionsIsMutable();
                  dimensions_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 10
            case 16:
              {
                int tmpRaw = input.readEnum();
                ensureMetricsIsMutable();
                metrics_.add(tmpRaw);
                break;
              } // case 16
            case 18:
              {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureMetricsIsMutable();
                  metrics_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 18
            case 26:
              {
                com.google.ads.admanager.v1.ReportDefinition.Filter m =
                    input.readMessage(
                        com.google.ads.admanager.v1.ReportDefinition.Filter.parser(),
                        extensionRegistry);
                if (filtersBuilder_ == null) {
                  ensureFiltersIsMutable();
                  filters_.add(m);
                } else {
                  filtersBuilder_.addMessage(m);
                }
                break;
              } // case 26
            case 34:
              {
                timeZone_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 34
            case 42:
              {
                currencyCode_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(getDateRangeFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 50
            case 56:
              {
                long v = input.readInt64();
                ensureCustomDimensionKeyIdsIsMutable();
                customDimensionKeyIds_.addLong(v);
                break;
              } // case 56
            case 58:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureCustomDimensionKeyIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  customDimensionKeyIds_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 58
            case 64:
              {
                reportType_ = input.readEnum();
                bitField0_ |= 0x00001000;
                break;
              } // case 64
            case 74:
              {
                input.readMessage(
                    getComparisonDateRangeFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 74
            case 80:
              {
                timePeriodColumn_ = input.readEnum();
                bitField0_ |= 0x00002000;
                break;
              } // case 80
            case 88:
              {
                long v = input.readInt64();
                ensureLineItemCustomFieldIdsIsMutable();
                lineItemCustomFieldIds_.addLong(v);
                break;
              } // case 88
            case 90:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLineItemCustomFieldIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  lineItemCustomFieldIds_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 90
            case 96:
              {
                long v = input.readInt64();
                ensureOrderCustomFieldIdsIsMutable();
                orderCustomFieldIds_.addLong(v);
                break;
              } // case 96
            case 98:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureOrderCustomFieldIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  orderCustomFieldIds_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 98
            case 104:
              {
                long v = input.readInt64();
                ensureCreativeCustomFieldIdsIsMutable();
                creativeCustomFieldIds_.addLong(v);
                break;
              } // case 104
            case 106:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureCreativeCustomFieldIdsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  creativeCustomFieldIds_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 106
            case 114:
              {
                com.google.ads.admanager.v1.ReportDefinition.Flag m =
                    input.readMessage(
                        com.google.ads.admanager.v1.ReportDefinition.Flag.parser(),
                        extensionRegistry);
                if (flagsBuilder_ == null) {
                  ensureFlagsIsMutable();
                  flags_.add(m);
                } else {
                  flagsBuilder_.addMessage(m);
                }
                break;
              } // case 114
            case 122:
              {
                com.google.ads.admanager.v1.ReportDefinition.Sort m =
                    input.readMessage(
                        com.google.ads.admanager.v1.ReportDefinition.Sort.parser(),
                        extensionRegistry);
                if (sortsBuilder_ == null) {
                  ensureSortsIsMutable();
                  sorts_.add(m);
                } else {
                  sortsBuilder_.addMessage(m);
                }
                break;
              } // case 122
            case 160:
              {
                timeZoneSource_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 160
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<java.lang.Integer> dimensions_ = java.util.Collections.emptyList();

    private void ensureDimensionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        dimensions_ = new java.util.ArrayList<java.lang.Integer>(dimensions_);
        bitField0_ |= 0x00000001;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return A list containing the dimensions.
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Dimension>
        getDimensionsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Dimension>(
          dimensions_, dimensions_converter_);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The count of dimensions.
     */
    public int getDimensionsCount() {
      return dimensions_.size();
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The dimensions at the given index.
     */
    public com.google.ads.admanager.v1.ReportDefinition.Dimension getDimensions(int index) {
      return dimensions_converter_.convert(dimensions_.get(index));
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The dimensions to set.
     * @return This builder for chaining.
     */
    public Builder setDimensions(
        int index, com.google.ads.admanager.v1.ReportDefinition.Dimension value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDimensionsIsMutable();
      dimensions_.set(index, value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The dimensions to add.
     * @return This builder for chaining.
     */
    public Builder addDimensions(com.google.ads.admanager.v1.ReportDefinition.Dimension value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDimensionsIsMutable();
      dimensions_.add(value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param values The dimensions to add.
     * @return This builder for chaining.
     */
    public Builder addAllDimensions(
        java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Dimension>
            values) {
      ensureDimensionsIsMutable();
      for (com.google.ads.admanager.v1.ReportDefinition.Dimension value : values) {
        dimensions_.add(value.getNumber());
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDimensions() {
      dimensions_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return A list containing the enum numeric values on the wire for dimensions.
     */
    public java.util.List<java.lang.Integer> getDimensionsValueList() {
      return java.util.Collections.unmodifiableList(dimensions_);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of dimensions at the given index.
     */
    public int getDimensionsValue(int index) {
      return dimensions_.get(index);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for dimensions to set.
     * @return This builder for chaining.
     */
    public Builder setDimensionsValue(int index, int value) {
      ensureDimensionsIsMutable();
      dimensions_.set(index, value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for dimensions to add.
     * @return This builder for chaining.
     */
    public Builder addDimensionsValue(int value) {
      ensureDimensionsIsMutable();
      dimensions_.add(value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of dimensions to report on. If empty, the report will
     * have no dimensions, and any metrics will be totals.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Dimension dimensions = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param values The enum numeric values on the wire for dimensions to add.
     * @return This builder for chaining.
     */
    public Builder addAllDimensionsValue(java.lang.Iterable<java.lang.Integer> values) {
      ensureDimensionsIsMutable();
      for (int value : values) {
        dimensions_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> metrics_ = java.util.Collections.emptyList();

    private void ensureMetricsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        metrics_ = new java.util.ArrayList<java.lang.Integer>(metrics_);
        bitField0_ |= 0x00000002;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return A list containing the metrics.
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Metric> getMetricsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.ads.admanager.v1.ReportDefinition.Metric>(
          metrics_, metrics_converter_);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The count of metrics.
     */
    public int getMetricsCount() {
      return metrics_.size();
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The metrics at the given index.
     */
    public com.google.ads.admanager.v1.ReportDefinition.Metric getMetrics(int index) {
      return metrics_converter_.convert(metrics_.get(index));
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The metrics to set.
     * @return This builder for chaining.
     */
    public Builder setMetrics(
        int index, com.google.ads.admanager.v1.ReportDefinition.Metric value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureMetricsIsMutable();
      metrics_.set(index, value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The metrics to add.
     * @return This builder for chaining.
     */
    public Builder addMetrics(com.google.ads.admanager.v1.ReportDefinition.Metric value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureMetricsIsMutable();
      metrics_.add(value.getNumber());
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param values The metrics to add.
     * @return This builder for chaining.
     */
    public Builder addAllMetrics(
        java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Metric> values) {
      ensureMetricsIsMutable();
      for (com.google.ads.admanager.v1.ReportDefinition.Metric value : values) {
        metrics_.add(value.getNumber());
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMetrics() {
      metrics_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return A list containing the enum numeric values on the wire for metrics.
     */
    public java.util.List<java.lang.Integer> getMetricsValueList() {
      return java.util.Collections.unmodifiableList(metrics_);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of metrics at the given index.
     */
    public int getMetricsValue(int index) {
      return metrics_.get(index);
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for metrics to set.
     * @return This builder for chaining.
     */
    public Builder setMetricsValue(int index, int value) {
      ensureMetricsIsMutable();
      metrics_.set(index, value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for metrics to add.
     * @return This builder for chaining.
     */
    public Builder addMetricsValue(int value) {
      ensureMetricsIsMutable();
      metrics_.add(value);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The list of metrics to report on. If empty, the report will have
     * no metrics.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Metric metrics = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param values The enum numeric values on the wire for metrics to add.
     * @return This builder for chaining.
     */
    public Builder addAllMetricsValue(java.lang.Iterable<java.lang.Integer> values) {
      ensureMetricsIsMutable();
      for (int value : values) {
        metrics_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> filters_ =
        java.util.Collections.emptyList();

    private void ensureFiltersIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        filters_ =
            new java.util.ArrayList<com.google.ads.admanager.v1.ReportDefinition.Filter>(filters_);
        bitField0_ |= 0x00000004;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Filter,
            com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
            com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
        filtersBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter> getFiltersList() {
      if (filtersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filters_);
      } else {
        return filtersBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public int getFiltersCount() {
      if (filtersBuilder_ == null) {
        return filters_.size();
      } else {
        return filtersBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Filter getFilters(int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);
      } else {
        return filtersBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setFilters(
        int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.set(index, value);
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setFilters(
        int index, com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.set(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFilters(com.google.ads.admanager.v1.ReportDefinition.Filter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFilters(
        int index, com.google.ads.admanager.v1.ReportDefinition.Filter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(index, value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFilters(
        com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFilters(
        int index, com.google.ads.admanager.v1.ReportDefinition.Filter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllFilters(
        java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Filter> values) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, filters_);
        onChanged();
      } else {
        filtersBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearFilters() {
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        filtersBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeFilters(int index) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.remove(index);
        onChanged();
      } else {
        filtersBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder getFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder getFiltersOrBuilder(
        int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);
      } else {
        return filtersBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
        getFiltersOrBuilderList() {
      if (filtersBuilder_ != null) {
        return filtersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filters_);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder() {
      return getFiltersFieldBuilder()
          .addBuilder(com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Filter.Builder addFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder()
          .addBuilder(
              index, com.google.ads.admanager.v1.ReportDefinition.Filter.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The filters for this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Filter filters = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Filter.Builder>
        getFiltersBuilderList() {
      return getFiltersFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Filter,
            com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
            com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>
        getFiltersFieldBuilder() {
      if (filtersBuilder_ == null) {
        filtersBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Filter,
                com.google.ads.admanager.v1.ReportDefinition.Filter.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FilterOrBuilder>(
                filters_, ((bitField0_ & 0x00000004) != 0), getParentForChildren(), isClean());
        filters_ = null;
      }
      return filtersBuilder_;
    }

    private int timeZoneSource_ = 0;

    /**
     *
     *
     * <pre>
     * Optional. Where to get the time zone for this report. Defaults to using the
     * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
     * field in the report definition must also set a time zone.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for timeZoneSource.
     */
    @java.lang.Override
    public int getTimeZoneSourceValue() {
      return timeZoneSource_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Where to get the time zone for this report. Defaults to using the
     * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
     * field in the report definition must also set a time zone.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for timeZoneSource to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZoneSourceValue(int value) {
      timeZoneSource_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Where to get the time zone for this report. Defaults to using the
     * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
     * field in the report definition must also set a time zone.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The timeZoneSource.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource getTimeZoneSource() {
      com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource result =
          com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.forNumber(timeZoneSource_);
      return result == null
          ? com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource.UNRECOGNIZED
          : result;
    }

    /**
     *
     *
     * <pre>
     * Optional. Where to get the time zone for this report. Defaults to using the
     * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
     * field in the report definition must also set a time zone.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The timeZoneSource to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZoneSource(
        com.google.ads.admanager.v1.ReportDefinition.TimeZoneSource value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      timeZoneSource_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Where to get the time zone for this report. Defaults to using the
     * network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
     * field in the report definition must also set a time zone.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimeZoneSource time_zone_source = 20 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimeZoneSource() {
      bitField0_ = (bitField0_ & ~0x00000008);
      timeZoneSource_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object timeZone_ = "";

    /**
     *
     *
     * <pre>
     * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
     * this report. Leave empty for any other time zone source. Time zone in IANA
     * format. For example, "America/New_York".
     * </pre>
     *
     * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The timeZone.
     */
    public java.lang.String getTimeZone() {
      java.lang.Object ref = timeZone_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timeZone_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
     * this report. Leave empty for any other time zone source. Time zone in IANA
     * format. For example, "America/New_York".
     * </pre>
     *
     * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for timeZone.
     */
    public com.google.protobuf.ByteString getTimeZoneBytes() {
      java.lang.Object ref = timeZone_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        timeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
     * this report. Leave empty for any other time zone source. Time zone in IANA
     * format. For example, "America/New_York".
     * </pre>
     *
     * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZone(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      timeZone_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
     * this report. Leave empty for any other time zone source. Time zone in IANA
     * format. For example, "America/New_York".
     * </pre>
     *
     * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimeZone() {
      timeZone_ = getDefaultInstance().getTimeZone();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. If time_zone_source is PROVIDED, this is the time zone to use for
     * this report. Leave empty for any other time zone source. Time zone in IANA
     * format. For example, "America/New_York".
     * </pre>
     *
     * <code>string time_zone = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZoneBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      timeZone_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object currencyCode_ = "";

    /**
     *
     *
     * <pre>
     * Optional. The ISO 4217 currency code for this report. Defaults to publisher
     * currency code if not specified.
     * </pre>
     *
     * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The currencyCode.
     */
    public java.lang.String getCurrencyCode() {
      java.lang.Object ref = currencyCode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        currencyCode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The ISO 4217 currency code for this report. Defaults to publisher
     * currency code if not specified.
     * </pre>
     *
     * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for currencyCode.
     */
    public com.google.protobuf.ByteString getCurrencyCodeBytes() {
      java.lang.Object ref = currencyCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        currencyCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The ISO 4217 currency code for this report. Defaults to publisher
     * currency code if not specified.
     * </pre>
     *
     * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The currencyCode to set.
     * @return This builder for chaining.
     */
    public Builder setCurrencyCode(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      currencyCode_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The ISO 4217 currency code for this report. Defaults to publisher
     * currency code if not specified.
     * </pre>
     *
     * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCurrencyCode() {
      currencyCode_ = getDefaultInstance().getCurrencyCode();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The ISO 4217 currency code for this report. Defaults to publisher
     * currency code if not specified.
     * </pre>
     *
     * <code>string currency_code = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for currencyCode to set.
     * @return This builder for chaining.
     */
    public Builder setCurrencyCodeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      currencyCode_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private com.google.ads.admanager.v1.ReportDefinition.DateRange dateRange_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.DateRange,
            com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
            com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>
        dateRangeBuilder_;

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the dateRange field is set.
     */
    public boolean hasDateRange() {
      return ((bitField0_ & 0x00000040) != 0);
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The dateRange.
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRange getDateRange() {
      if (dateRangeBuilder_ == null) {
        return dateRange_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
            : dateRange_;
      } else {
        return dateRangeBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setDateRange(com.google.ads.admanager.v1.ReportDefinition.DateRange value) {
      if (dateRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dateRange_ = value;
      } else {
        dateRangeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setDateRange(
        com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder builderForValue) {
      if (dateRangeBuilder_ == null) {
        dateRange_ = builderForValue.build();
      } else {
        dateRangeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeDateRange(com.google.ads.admanager.v1.ReportDefinition.DateRange value) {
      if (dateRangeBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)
            && dateRange_ != null
            && dateRange_
                != com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()) {
          getDateRangeBuilder().mergeFrom(value);
        } else {
          dateRange_ = value;
        }
      } else {
        dateRangeBuilder_.mergeFrom(value);
      }
      if (dateRange_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearDateRange() {
      bitField0_ = (bitField0_ & ~0x00000040);
      dateRange_ = null;
      if (dateRangeBuilder_ != null) {
        dateRangeBuilder_.dispose();
        dateRangeBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder getDateRangeBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getDateRangeFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder getDateRangeOrBuilder() {
      if (dateRangeBuilder_ != null) {
        return dateRangeBuilder_.getMessageOrBuilder();
      } else {
        return dateRange_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
            : dateRange_;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The primary date range of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.DateRange date_range = 6 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.DateRange,
            com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
            com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>
        getDateRangeFieldBuilder() {
      if (dateRangeBuilder_ == null) {
        dateRangeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.DateRange,
                com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
                com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>(
                getDateRange(), getParentForChildren(), isClean());
        dateRange_ = null;
      }
      return dateRangeBuilder_;
    }

    private com.google.ads.admanager.v1.ReportDefinition.DateRange comparisonDateRange_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.DateRange,
            com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
            com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>
        comparisonDateRangeBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the comparisonDateRange field is set.
     */
    public boolean hasComparisonDateRange() {
      return ((bitField0_ & 0x00000080) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The comparisonDateRange.
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRange getComparisonDateRange() {
      if (comparisonDateRangeBuilder_ == null) {
        return comparisonDateRange_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
            : comparisonDateRange_;
      } else {
        return comparisonDateRangeBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setComparisonDateRange(
        com.google.ads.admanager.v1.ReportDefinition.DateRange value) {
      if (comparisonDateRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        comparisonDateRange_ = value;
      } else {
        comparisonDateRangeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setComparisonDateRange(
        com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder builderForValue) {
      if (comparisonDateRangeBuilder_ == null) {
        comparisonDateRange_ = builderForValue.build();
      } else {
        comparisonDateRangeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeComparisonDateRange(
        com.google.ads.admanager.v1.ReportDefinition.DateRange value) {
      if (comparisonDateRangeBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)
            && comparisonDateRange_ != null
            && comparisonDateRange_
                != com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()) {
          getComparisonDateRangeBuilder().mergeFrom(value);
        } else {
          comparisonDateRange_ = value;
        }
      } else {
        comparisonDateRangeBuilder_.mergeFrom(value);
      }
      if (comparisonDateRange_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearComparisonDateRange() {
      bitField0_ = (bitField0_ & ~0x00000080);
      comparisonDateRange_ = null;
      if (comparisonDateRangeBuilder_ != null) {
        comparisonDateRangeBuilder_.dispose();
        comparisonDateRangeBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder
        getComparisonDateRangeBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getComparisonDateRangeFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder
        getComparisonDateRangeOrBuilder() {
      if (comparisonDateRangeBuilder_ != null) {
        return comparisonDateRangeBuilder_.getMessageOrBuilder();
      } else {
        return comparisonDateRange_ == null
            ? com.google.ads.admanager.v1.ReportDefinition.DateRange.getDefaultInstance()
            : comparisonDateRange_;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The comparison date range of this report. If unspecified, the
     * report won't have any comparison metrics.
     * </pre>
     *
     * <code>
     * optional .google.ads.admanager.v1.ReportDefinition.DateRange comparison_date_range = 9 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.DateRange,
            com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
            com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>
        getComparisonDateRangeFieldBuilder() {
      if (comparisonDateRangeBuilder_ == null) {
        comparisonDateRangeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.DateRange,
                com.google.ads.admanager.v1.ReportDefinition.DateRange.Builder,
                com.google.ads.admanager.v1.ReportDefinition.DateRangeOrBuilder>(
                getComparisonDateRange(), getParentForChildren(), isClean());
        comparisonDateRange_ = null;
      }
      return comparisonDateRangeBuilder_;
    }

    private com.google.protobuf.Internal.LongList customDimensionKeyIds_ = emptyLongList();

    private void ensureCustomDimensionKeyIdsIsMutable() {
      if (!customDimensionKeyIds_.isModifiable()) {
        customDimensionKeyIds_ = makeMutableCopy(customDimensionKeyIds_);
      }
      bitField0_ |= 0x00000100;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the customDimensionKeyIds.
     */
    public java.util.List<java.lang.Long> getCustomDimensionKeyIdsList() {
      customDimensionKeyIds_.makeImmutable();
      return customDimensionKeyIds_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of customDimensionKeyIds.
     */
    public int getCustomDimensionKeyIdsCount() {
      return customDimensionKeyIds_.size();
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The customDimensionKeyIds at the given index.
     */
    public long getCustomDimensionKeyIds(int index) {
      return customDimensionKeyIds_.getLong(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The customDimensionKeyIds to set.
     * @return This builder for chaining.
     */
    public Builder setCustomDimensionKeyIds(int index, long value) {

      ensureCustomDimensionKeyIdsIsMutable();
      customDimensionKeyIds_.setLong(index, value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The customDimensionKeyIds to add.
     * @return This builder for chaining.
     */
    public Builder addCustomDimensionKeyIds(long value) {

      ensureCustomDimensionKeyIdsIsMutable();
      customDimensionKeyIds_.addLong(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The customDimensionKeyIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllCustomDimensionKeyIds(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureCustomDimensionKeyIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, customDimensionKeyIds_);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, custom_dimension_key_ids[0] describes
     * CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 custom_dimension_key_ids = 7 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCustomDimensionKeyIds() {
      customDimensionKeyIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList lineItemCustomFieldIds_ = emptyLongList();

    private void ensureLineItemCustomFieldIdsIsMutable() {
      if (!lineItemCustomFieldIds_.isModifiable()) {
        lineItemCustomFieldIds_ = makeMutableCopy(lineItemCustomFieldIds_);
      }
      bitField0_ |= 0x00000200;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the lineItemCustomFieldIds.
     */
    public java.util.List<java.lang.Long> getLineItemCustomFieldIdsList() {
      lineItemCustomFieldIds_.makeImmutable();
      return lineItemCustomFieldIds_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of lineItemCustomFieldIds.
     */
    public int getLineItemCustomFieldIdsCount() {
      return lineItemCustomFieldIds_.size();
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The lineItemCustomFieldIds at the given index.
     */
    public long getLineItemCustomFieldIds(int index) {
      return lineItemCustomFieldIds_.getLong(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The lineItemCustomFieldIds to set.
     * @return This builder for chaining.
     */
    public Builder setLineItemCustomFieldIds(int index, long value) {

      ensureLineItemCustomFieldIdsIsMutable();
      lineItemCustomFieldIds_.setLong(index, value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The lineItemCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addLineItemCustomFieldIds(long value) {

      ensureLineItemCustomFieldIdsIsMutable();
      lineItemCustomFieldIds_.addLong(value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The lineItemCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllLineItemCustomFieldIds(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureLineItemCustomFieldIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, lineItemCustomFieldIds_);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, line_item_custom_field_ids[0] describes
     * LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 line_item_custom_field_ids = 11 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearLineItemCustomFieldIds() {
      lineItemCustomFieldIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList orderCustomFieldIds_ = emptyLongList();

    private void ensureOrderCustomFieldIdsIsMutable() {
      if (!orderCustomFieldIds_.isModifiable()) {
        orderCustomFieldIds_ = makeMutableCopy(orderCustomFieldIds_);
      }
      bitField0_ |= 0x00000400;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the orderCustomFieldIds.
     */
    public java.util.List<java.lang.Long> getOrderCustomFieldIdsList() {
      orderCustomFieldIds_.makeImmutable();
      return orderCustomFieldIds_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of orderCustomFieldIds.
     */
    public int getOrderCustomFieldIdsCount() {
      return orderCustomFieldIds_.size();
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The orderCustomFieldIds at the given index.
     */
    public long getOrderCustomFieldIds(int index) {
      return orderCustomFieldIds_.getLong(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The orderCustomFieldIds to set.
     * @return This builder for chaining.
     */
    public Builder setOrderCustomFieldIds(int index, long value) {

      ensureOrderCustomFieldIdsIsMutable();
      orderCustomFieldIds_.setLong(index, value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The orderCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addOrderCustomFieldIds(long value) {

      ensureOrderCustomFieldIdsIsMutable();
      orderCustomFieldIds_.addLong(value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The orderCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllOrderCustomFieldIds(java.lang.Iterable<? extends java.lang.Long> values) {
      ensureOrderCustomFieldIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, orderCustomFieldIds_);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, order_custom_field_ids[0] describes
     * ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>repeated int64 order_custom_field_ids = 12 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearOrderCustomFieldIds() {
      orderCustomFieldIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList creativeCustomFieldIds_ = emptyLongList();

    private void ensureCreativeCustomFieldIdsIsMutable() {
      if (!creativeCustomFieldIds_.isModifiable()) {
        creativeCustomFieldIds_ = makeMutableCopy(creativeCustomFieldIds_);
      }
      bitField0_ |= 0x00000800;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the creativeCustomFieldIds.
     */
    public java.util.List<java.lang.Long> getCreativeCustomFieldIdsList() {
      creativeCustomFieldIds_.makeImmutable();
      return creativeCustomFieldIds_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of creativeCustomFieldIds.
     */
    public int getCreativeCustomFieldIdsCount() {
      return creativeCustomFieldIds_.size();
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The creativeCustomFieldIds at the given index.
     */
    public long getCreativeCustomFieldIds(int index) {
      return creativeCustomFieldIds_.getLong(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The creativeCustomFieldIds to set.
     * @return This builder for chaining.
     */
    public Builder setCreativeCustomFieldIds(int index, long value) {

      ensureCreativeCustomFieldIdsIsMutable();
      creativeCustomFieldIds_.setLong(index, value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The creativeCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addCreativeCustomFieldIds(long value) {

      ensureCreativeCustomFieldIdsIsMutable();
      creativeCustomFieldIds_.addLong(value);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The creativeCustomFieldIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllCreativeCustomFieldIds(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureCreativeCustomFieldIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, creativeCustomFieldIds_);
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
     * dimensions. The index of this repeated field corresponds to the index on
     * each dimension. For example, creative_custom_field_ids[0] describes
     * CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
     * </pre>
     *
     * <code>
     * repeated int64 creative_custom_field_ids = 13 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCreativeCustomFieldIds() {
      creativeCustomFieldIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }

    private int reportType_ = 0;

    /**
     *
     *
     * <pre>
     * Required. The type of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for reportType.
     */
    @java.lang.Override
    public int getReportTypeValue() {
      return reportType_;
    }

    /**
     *
     *
     * <pre>
     * Required. The type of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for reportType to set.
     * @return This builder for chaining.
     */
    public Builder setReportTypeValue(int value) {
      reportType_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The type of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The reportType.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.ReportType getReportType() {
      com.google.ads.admanager.v1.ReportDefinition.ReportType result =
          com.google.ads.admanager.v1.ReportDefinition.ReportType.forNumber(reportType_);
      return result == null
          ? com.google.ads.admanager.v1.ReportDefinition.ReportType.UNRECOGNIZED
          : result;
    }

    /**
     *
     *
     * <pre>
     * Required. The type of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The reportType to set.
     * @return This builder for chaining.
     */
    public Builder setReportType(com.google.ads.admanager.v1.ReportDefinition.ReportType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00001000;
      reportType_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The type of this report.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.ReportType report_type = 8 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearReportType() {
      bitField0_ = (bitField0_ & ~0x00001000);
      reportType_ = 0;
      onChanged();
      return this;
    }

    private int timePeriodColumn_ = 0;

    /**
     *
     *
     * <pre>
     * Optional. Include a time period column to introduce comparison columns in
     * the report for each generated period. For example, set to  "QUARTERS" here
     * to have a column for each quarter present in the primary date range. If
     * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
     * column will also include comparison values for its relative previous
     * quarter.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The enum numeric value on the wire for timePeriodColumn.
     */
    @java.lang.Override
    public int getTimePeriodColumnValue() {
      return timePeriodColumn_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Include a time period column to introduce comparison columns in
     * the report for each generated period. For example, set to  "QUARTERS" here
     * to have a column for each quarter present in the primary date range. If
     * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
     * column will also include comparison values for its relative previous
     * quarter.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for timePeriodColumn to set.
     * @return This builder for chaining.
     */
    public Builder setTimePeriodColumnValue(int value) {
      timePeriodColumn_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Include a time period column to introduce comparison columns in
     * the report for each generated period. For example, set to  "QUARTERS" here
     * to have a column for each quarter present in the primary date range. If
     * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
     * column will also include comparison values for its relative previous
     * quarter.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The timePeriodColumn.
     */
    @java.lang.Override
    public com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn getTimePeriodColumn() {
      com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn result =
          com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn.forNumber(
              timePeriodColumn_);
      return result == null
          ? com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn.UNRECOGNIZED
          : result;
    }

    /**
     *
     *
     * <pre>
     * Optional. Include a time period column to introduce comparison columns in
     * the report for each generated period. For example, set to  "QUARTERS" here
     * to have a column for each quarter present in the primary date range. If
     * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
     * column will also include comparison values for its relative previous
     * quarter.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The timePeriodColumn to set.
     * @return This builder for chaining.
     */
    public Builder setTimePeriodColumn(
        com.google.ads.admanager.v1.ReportDefinition.TimePeriodColumn value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00002000;
      timePeriodColumn_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Include a time period column to introduce comparison columns in
     * the report for each generated period. For example, set to  "QUARTERS" here
     * to have a column for each quarter present in the primary date range. If
     * "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
     * column will also include comparison values for its relative previous
     * quarter.
     * </pre>
     *
     * <code>
     * .google.ads.admanager.v1.ReportDefinition.TimePeriodColumn time_period_column = 10 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimePeriodColumn() {
      bitField0_ = (bitField0_ & ~0x00002000);
      timePeriodColumn_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Flag> flags_ =
        java.util.Collections.emptyList();

    private void ensureFlagsIsMutable() {
      if (!((bitField0_ & 0x00004000) != 0)) {
        flags_ = new java.util.ArrayList<com.google.ads.admanager.v1.ReportDefinition.Flag>(flags_);
        bitField0_ |= 0x00004000;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Flag,
            com.google.ads.admanager.v1.ReportDefinition.Flag.Builder,
            com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder>
        flagsBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Flag> getFlagsList() {
      if (flagsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(flags_);
      } else {
        return flagsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public int getFlagsCount() {
      if (flagsBuilder_ == null) {
        return flags_.size();
      } else {
        return flagsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Flag getFlags(int index) {
      if (flagsBuilder_ == null) {
        return flags_.get(index);
      } else {
        return flagsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setFlags(int index, com.google.ads.admanager.v1.ReportDefinition.Flag value) {
      if (flagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFlagsIsMutable();
        flags_.set(index, value);
        onChanged();
      } else {
        flagsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setFlags(
        int index, com.google.ads.admanager.v1.ReportDefinition.Flag.Builder builderForValue) {
      if (flagsBuilder_ == null) {
        ensureFlagsIsMutable();
        flags_.set(index, builderForValue.build());
        onChanged();
      } else {
        flagsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFlags(com.google.ads.admanager.v1.ReportDefinition.Flag value) {
      if (flagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFlagsIsMutable();
        flags_.add(value);
        onChanged();
      } else {
        flagsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFlags(int index, com.google.ads.admanager.v1.ReportDefinition.Flag value) {
      if (flagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFlagsIsMutable();
        flags_.add(index, value);
        onChanged();
      } else {
        flagsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFlags(
        com.google.ads.admanager.v1.ReportDefinition.Flag.Builder builderForValue) {
      if (flagsBuilder_ == null) {
        ensureFlagsIsMutable();
        flags_.add(builderForValue.build());
        onChanged();
      } else {
        flagsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addFlags(
        int index, com.google.ads.admanager.v1.ReportDefinition.Flag.Builder builderForValue) {
      if (flagsBuilder_ == null) {
        ensureFlagsIsMutable();
        flags_.add(index, builderForValue.build());
        onChanged();
      } else {
        flagsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllFlags(
        java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Flag> values) {
      if (flagsBuilder_ == null) {
        ensureFlagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, flags_);
        onChanged();
      } else {
        flagsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearFlags() {
      if (flagsBuilder_ == null) {
        flags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
      } else {
        flagsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeFlags(int index) {
      if (flagsBuilder_ == null) {
        ensureFlagsIsMutable();
        flags_.remove(index);
        onChanged();
      } else {
        flagsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Flag.Builder getFlagsBuilder(int index) {
      return getFlagsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder getFlagsOrBuilder(int index) {
      if (flagsBuilder_ == null) {
        return flags_.get(index);
      } else {
        return flagsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder>
        getFlagsOrBuilderList() {
      if (flagsBuilder_ != null) {
        return flagsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(flags_);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Flag.Builder addFlagsBuilder() {
      return getFlagsFieldBuilder()
          .addBuilder(com.google.ads.admanager.v1.ReportDefinition.Flag.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Flag.Builder addFlagsBuilder(int index) {
      return getFlagsFieldBuilder()
          .addBuilder(
              index, com.google.ads.admanager.v1.ReportDefinition.Flag.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. List of flags for this report. Used to flag rows in a result set
     * based on a set of defined filters.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Flag flags = 14 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Flag.Builder>
        getFlagsBuilderList() {
      return getFlagsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Flag,
            com.google.ads.admanager.v1.ReportDefinition.Flag.Builder,
            com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder>
        getFlagsFieldBuilder() {
      if (flagsBuilder_ == null) {
        flagsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Flag,
                com.google.ads.admanager.v1.ReportDefinition.Flag.Builder,
                com.google.ads.admanager.v1.ReportDefinition.FlagOrBuilder>(
                flags_, ((bitField0_ & 0x00004000) != 0), getParentForChildren(), isClean());
        flags_ = null;
      }
      return flagsBuilder_;
    }

    private java.util.List<com.google.ads.admanager.v1.ReportDefinition.Sort> sorts_ =
        java.util.Collections.emptyList();

    private void ensureSortsIsMutable() {
      if (!((bitField0_ & 0x00008000) != 0)) {
        sorts_ = new java.util.ArrayList<com.google.ads.admanager.v1.ReportDefinition.Sort>(sorts_);
        bitField0_ |= 0x00008000;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Sort,
            com.google.ads.admanager.v1.ReportDefinition.Sort.Builder,
            com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder>
        sortsBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Sort> getSortsList() {
      if (sortsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sorts_);
      } else {
        return sortsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public int getSortsCount() {
      if (sortsBuilder_ == null) {
        return sorts_.size();
      } else {
        return sortsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Sort getSorts(int index) {
      if (sortsBuilder_ == null) {
        return sorts_.get(index);
      } else {
        return sortsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSorts(int index, com.google.ads.admanager.v1.ReportDefinition.Sort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.set(index, value);
        onChanged();
      } else {
        sortsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSorts(
        int index, com.google.ads.admanager.v1.ReportDefinition.Sort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.set(index, builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addSorts(com.google.ads.admanager.v1.ReportDefinition.Sort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.add(value);
        onChanged();
      } else {
        sortsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addSorts(int index, com.google.ads.admanager.v1.ReportDefinition.Sort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.add(index, value);
        onChanged();
      } else {
        sortsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addSorts(
        com.google.ads.admanager.v1.ReportDefinition.Sort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.add(builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addSorts(
        int index, com.google.ads.admanager.v1.ReportDefinition.Sort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.add(index, builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllSorts(
        java.lang.Iterable<? extends com.google.ads.admanager.v1.ReportDefinition.Sort> values) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, sorts_);
        onChanged();
      } else {
        sortsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearSorts() {
      if (sortsBuilder_ == null) {
        sorts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
      } else {
        sortsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeSorts(int index) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.remove(index);
        onChanged();
      } else {
        sortsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Sort.Builder getSortsBuilder(int index) {
      return getSortsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder getSortsOrBuilder(int index) {
      if (sortsBuilder_ == null) {
        return sorts_.get(index);
      } else {
        return sortsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<? extends com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder>
        getSortsOrBuilderList() {
      if (sortsBuilder_ != null) {
        return sortsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sorts_);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Sort.Builder addSortsBuilder() {
      return getSortsFieldBuilder()
          .addBuilder(com.google.ads.admanager.v1.ReportDefinition.Sort.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.ads.admanager.v1.ReportDefinition.Sort.Builder addSortsBuilder(int index) {
      return getSortsFieldBuilder()
          .addBuilder(
              index, com.google.ads.admanager.v1.ReportDefinition.Sort.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. Default sorts to apply to this report.
     * </pre>
     *
     * <code>
     * repeated .google.ads.admanager.v1.ReportDefinition.Sort sorts = 15 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.ads.admanager.v1.ReportDefinition.Sort.Builder>
        getSortsBuilderList() {
      return getSortsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.ads.admanager.v1.ReportDefinition.Sort,
            com.google.ads.admanager.v1.ReportDefinition.Sort.Builder,
            com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder>
        getSortsFieldBuilder() {
      if (sortsBuilder_ == null) {
        sortsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.ads.admanager.v1.ReportDefinition.Sort,
                com.google.ads.admanager.v1.ReportDefinition.Sort.Builder,
                com.google.ads.admanager.v1.ReportDefinition.SortOrBuilder>(
                sorts_, ((bitField0_ & 0x00008000) != 0), getParentForChildren(), isClean());
        sorts_ = null;
      }
      return sortsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.ads.admanager.v1.ReportDefinition)
  }

  // @@protoc_insertion_point(class_scope:google.ads.admanager.v1.ReportDefinition)
  private static final com.google.ads.admanager.v1.ReportDefinition DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.ads.admanager.v1.ReportDefinition();
  }

  public static com.google.ads.admanager.v1.ReportDefinition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReportDefinition> PARSER =
      new com.google.protobuf.AbstractParser<ReportDefinition>() {
        @java.lang.Override
        public ReportDefinition parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ReportDefinition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReportDefinition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ads.admanager.v1.ReportDefinition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
