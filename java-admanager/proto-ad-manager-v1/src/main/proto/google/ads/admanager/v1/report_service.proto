// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.ads.admanager.v1;

import "google/ads/admanager/v1/report_messages.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Google.Ads.AdManager.V1";
option go_package = "google.golang.org/genproto/googleapis/ads/admanager/v1;admanager";
option java_multiple_files = true;
option java_outer_classname = "ReportServiceProto";
option java_package = "com.google.ads.admanager.v1";
option php_namespace = "Google\\Ads\\AdManager\\V1";
option ruby_package = "Google::Ads::AdManager::V1";

// Provides methods for interacting with reports.
service ReportService {
  option (google.api.default_host) = "admanager.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/admanager";

  // API to retrieve a `Report` object.
  rpc GetReport(GetReportRequest) returns (Report) {
    option (google.api.http) = {
      get: "/v1/{name=networks/*/reports/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // API to retrieve a list of `Report` objects.
  rpc ListReports(ListReportsRequest) returns (ListReportsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=networks/*}/reports"
    };
    option (google.api.method_signature) = "parent";
  }

  // API to create a `Report` object.
  rpc CreateReport(CreateReportRequest) returns (Report) {
    option (google.api.http) = {
      post: "/v1/{parent=networks/*}/reports"
      body: "report"
    };
    option (google.api.method_signature) = "parent,report";
  }

  // API to update a `Report` object.
  rpc UpdateReport(UpdateReportRequest) returns (Report) {
    option (google.api.http) = {
      patch: "/v1/{report.name=networks/*/reports/*}"
      body: "report"
    };
    option (google.api.method_signature) = "report,update_mask";
  }

  // Initiates the execution of an existing report asynchronously. Users can
  // get the report by polling this operation via
  // `OperationsService.GetOperation`.
  // Poll every 5 seconds initially, with an exponential
  // backoff. Once a report is complete, the operation will contain a
  // `RunReportResponse` in its response field containing a report_result that
  // can be passed to the `FetchReportResultRows` method to retrieve the report
  // data.
  rpc RunReport(RunReportRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{name=networks/*/reports/*}:run"
      body: "*"
    };
    option (google.api.method_signature) = "name";
    option (google.longrunning.operation_info) = {
      response_type: "RunReportResponse"
      metadata_type: "RunReportMetadata"
    };
  }

  // Returns the result rows from a completed report.
  // The caller must have previously called `RunReport` and waited for that
  // operation to complete. The rows will be returned according to the order
  // specified by the `sorts` member of the report definition.
  rpc FetchReportResultRows(FetchReportResultRowsRequest)
      returns (FetchReportResultRowsResponse) {
    option (google.api.http) = {
      get: "/v1/{name=networks/*/reports/*/results/*}:fetchRows"
    };
    option (google.api.method_signature) = "name";
  }
}

// Request message for a running a report.
message RunReportRequest {
  // Required. The report to run.
  // Format: `networks/{network_code}/reports/{report_id}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "admanager.googleapis.com/Report"
    }
  ];
}

// `RunReport` operation metadata.
message RunReportMetadata {
  // An estimate of how close this report is to being completed. Will always be
  // 100 for failed and completed reports.
  int32 percent_complete = 2;

  // The result's parent report.
  string report = 4 [(google.api.resource_reference) = {
    type: "admanager.googleapis.com/Report"
  }];
}

// Response message for a completed `RunReport` operation.
message RunReportResponse {
  // The unique name of the generated result. Use with `FetchReportResultRows`
  // to retrieve data.
  string report_result = 1;
}

// Request object for `GetReport` method.
message GetReportRequest {
  // Required. The resource name of the report.
  // Format: `networks/{network_code}/reports/{report_id}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "admanager.googleapis.com/Report"
    }
  ];
}

// Request object for `ListReports` method.
message ListReportsRequest {
  // Required. The parent, which owns this collection of reports.
  // Format: `networks/{network_code}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "admanager.googleapis.com/Network"
    }
  ];

  // Optional. The maximum number of `Reports` to return. The service may return
  // fewer than this value. If unspecified, at most 50 `Reports` will be
  // returned. The maximum value is 1000; values above 1000 will be coerced to
  // 1000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A page token, received from a previous `ListReports` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListReports` must
  // match the call that provided the page token.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Expression to filter the response.
  // See syntax details at
  // https://developers.google.com/ad-manager/api/beta/filters
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Expression to specify sorting order.
  // See syntax details at
  // https://developers.google.com/ad-manager/api/beta/filters#order
  string order_by = 5 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Number of individual resources to skip while paginating.
  int32 skip = 6 [(google.api.field_behavior) = OPTIONAL];
}

// Response object for `ListReportsResponse` containing matching `Report`
// objects.
message ListReportsResponse {
  // The `Report` objects from the specified network.
  repeated Report reports = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;

  // Total number of `Report` objects.
  // If a filter was included in the request, this reflects the total number
  // after the filtering is applied.
  //
  // `total_size` will not be calculated in the response unless it has been
  // included in a response field mask. The response field mask can be provided
  // to the method by using the URL parameter `$fields` or `fields`, or by using
  // the HTTP/gRPC header `X-Goog-FieldMask`.
  //
  // For more information, see
  // https://developers.google.com/ad-manager/api/beta/field-masks
  int32 total_size = 3;
}

// Request object for `CreateReport` method.
message CreateReportRequest {
  // Required. The parent resource where this `Report` will be created.
  // Format: `networks/{network_code}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "admanager.googleapis.com/Network"
    }
  ];

  // Required. The `Report` to create.
  Report report = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request object for `UpdateReport` method.
message UpdateReportRequest {
  // Required. The `Report` to update.
  Report report = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The list of fields to update.
  google.protobuf.FieldMask update_mask = 2
      [(google.api.field_behavior) = REQUIRED];
}

// The request message for the fetch report result rows endpoint.
message FetchReportResultRowsRequest {
  // The report result being fetched.
  // Format:
  // `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
  string name = 1;

  // Optional. The maximum number of rows to return. The service may return
  // fewer than this value. If unspecified, at most 1,000 rows will be returned.
  // The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A page token, received from a previous `FetchReportResultRows`
  // call. Provide this to retrieve the second and subsequent batches of rows.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for the fetch report result rows endpoint.
message FetchReportResultRowsResponse {
  // Up to `page_size` rows of report data.
  repeated Report.DataTable.Row rows = 1;

  // The time at which the report was scheduled to run. For non-scheduled
  // reports, this is the time at which the report was requested to be run.
  google.protobuf.Timestamp run_time = 2;

  // The computed fixed date ranges this report includes.
  // Only returned with the first page of results (when page_token is not
  // included in the request).
  repeated Report.DateRange.FixedDateRange date_ranges = 3;

  // The computed comparison fixed date ranges this report includes.
  // Only returned with the first page of results (when page_token is not
  // included in the request).
  repeated Report.DateRange.FixedDateRange comparison_date_ranges = 4;

  // The total number of rows available from this report. Useful for
  // pagination.
  // Only returned with the first page of results (when page_token is not
  // included in the request).
  int32 total_row_count = 5;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 6;
}
