/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/run/v2/k8s.min.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.run.v2;

public interface VersionToPathOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.run.v2.VersionToPath)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The relative path of the secret in the container.
   * </pre>
   *
   * <code>string path = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The path.
   */
  java.lang.String getPath();
  /**
   *
   *
   * <pre>
   * Required. The relative path of the secret in the container.
   * </pre>
   *
   * <code>string path = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for path.
   */
  com.google.protobuf.ByteString getPathBytes();

  /**
   *
   *
   * <pre>
   * The Cloud Secret Manager secret version.
   * Can be 'latest' for the latest value, or an integer or a secret alias for a
   * specific version.
   * </pre>
   *
   * <code>string version = 2;</code>
   *
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   *
   *
   * <pre>
   * The Cloud Secret Manager secret version.
   * Can be 'latest' for the latest value, or an integer or a secret alias for a
   * specific version.
   * </pre>
   *
   * <code>string version = 2;</code>
   *
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString getVersionBytes();

  /**
   *
   *
   * <pre>
   * Integer octal mode bits to use on this file, must be a value between
   * 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be
   * used.
   *
   * Notes
   *
   * * Internally, a umask of 0222 will be applied to any non-zero value.
   * * This is an integer representation of the mode bits. So, the octal
   * integer value should look exactly as the chmod numeric notation with a
   * leading zero. Some examples: for chmod 640 (u=rw,g=r), set to 0640 (octal)
   * or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or
   * 493 (base-10).
   * * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and the result can be other mode bits set.
   * </pre>
   *
   * <code>int32 mode = 3;</code>
   *
   * @return The mode.
   */
  int getMode();
}
