/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/run/v2/k8s.min.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.run.v2;

public interface SecretVolumeSourceOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.run.v2.SecretVolumeSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The name of the secret in Cloud Secret Manager.
   * Format: {secret} if the secret is in the same project.
   * projects/{project}/secrets/{secret} if the secret is
   * in a different project.
   * </pre>
   *
   * <code>string secret = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The secret.
   */
  java.lang.String getSecret();
  /**
   *
   *
   * <pre>
   * Required. The name of the secret in Cloud Secret Manager.
   * Format: {secret} if the secret is in the same project.
   * projects/{project}/secrets/{secret} if the secret is
   * in a different project.
   * </pre>
   *
   * <code>string secret = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for secret.
   */
  com.google.protobuf.ByteString getSecretBytes();

  /**
   *
   *
   * <pre>
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   * </pre>
   *
   * <code>repeated .google.cloud.run.v2.VersionToPath items = 2;</code>
   */
  java.util.List<com.google.cloud.run.v2.VersionToPath> getItemsList();
  /**
   *
   *
   * <pre>
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   * </pre>
   *
   * <code>repeated .google.cloud.run.v2.VersionToPath items = 2;</code>
   */
  com.google.cloud.run.v2.VersionToPath getItems(int index);
  /**
   *
   *
   * <pre>
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   * </pre>
   *
   * <code>repeated .google.cloud.run.v2.VersionToPath items = 2;</code>
   */
  int getItemsCount();
  /**
   *
   *
   * <pre>
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   * </pre>
   *
   * <code>repeated .google.cloud.run.v2.VersionToPath items = 2;</code>
   */
  java.util.List<? extends com.google.cloud.run.v2.VersionToPathOrBuilder> getItemsOrBuilderList();
  /**
   *
   *
   * <pre>
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   * </pre>
   *
   * <code>repeated .google.cloud.run.v2.VersionToPath items = 2;</code>
   */
  com.google.cloud.run.v2.VersionToPathOrBuilder getItemsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Integer representation of mode bits to use on created files by default.
   * Must be a value between 0000 and 0777 (octal), defaulting to 0444.
   * Directories within the path are not affected by  this setting.
   *
   * Notes
   *
   * * Internally, a umask of 0222 will be applied to any non-zero value.
   * * This is an integer representation of the mode bits. So, the octal
   * integer value should look exactly as the chmod numeric notation with a
   * leading zero. Some examples: for chmod 640 (u=rw,g=r), set to 0640 (octal)
   * or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or
   * 493 (base-10).
   * * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and the result can be other mode bits set.
   *
   * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and as a result, other mode bits could be set.
   * </pre>
   *
   * <code>int32 default_mode = 3;</code>
   *
   * @return The defaultMode.
   */
  int getDefaultMode();
}
