/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/shopping/merchant/issueresolution/v1/issueresolution.proto

// Protobuf Java Version: 3.25.8
package com.google.shopping.merchant.issueresolution.v1;

/**
 *
 *
 * <pre>
 * An issue affecting specific business or their product.
 * </pre>
 *
 * Protobuf type {@code google.shopping.merchant.issueresolution.v1.RenderedIssue}
 */
public final class RenderedIssue extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.shopping.merchant.issueresolution.v1.RenderedIssue)
    RenderedIssueOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use RenderedIssue.newBuilder() to construct.
  private RenderedIssue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private RenderedIssue() {
    title_ = "";
    actions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new RenderedIssue();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.shopping.merchant.issueresolution.v1.IssueResolutionProto
        .internal_static_google_shopping_merchant_issueresolution_v1_RenderedIssue_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.shopping.merchant.issueresolution.v1.IssueResolutionProto
        .internal_static_google_shopping_merchant_issueresolution_v1_RenderedIssue_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.shopping.merchant.issueresolution.v1.RenderedIssue.class,
            com.google.shopping.merchant.issueresolution.v1.RenderedIssue.Builder.class);
  }

  private int bitField0_;
  private int contentCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object content_;

  public enum ContentCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PRERENDERED_CONTENT(3),
    CONTENT_NOT_SET(0);
    private final int value;

    private ContentCase(int value) {
      this.value = value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContentCase valueOf(int value) {
      return forNumber(value);
    }

    public static ContentCase forNumber(int value) {
      switch (value) {
        case 3:
          return PRERENDERED_CONTENT;
        case 0:
          return CONTENT_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public ContentCase getContentCase() {
    return ContentCase.forNumber(contentCase_);
  }

  private int outOfCourtDisputeSettlementCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object outOfCourtDisputeSettlement_;

  public enum OutOfCourtDisputeSettlementCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PRERENDERED_OUT_OF_COURT_DISPUTE_SETTLEMENT(5),
    OUTOFCOURTDISPUTESETTLEMENT_NOT_SET(0);
    private final int value;

    private OutOfCourtDisputeSettlementCase(int value) {
      this.value = value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OutOfCourtDisputeSettlementCase valueOf(int value) {
      return forNumber(value);
    }

    public static OutOfCourtDisputeSettlementCase forNumber(int value) {
      switch (value) {
        case 5:
          return PRERENDERED_OUT_OF_COURT_DISPUTE_SETTLEMENT;
        case 0:
          return OUTOFCOURTDISPUTESETTLEMENT_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public OutOfCourtDisputeSettlementCase getOutOfCourtDisputeSettlementCase() {
    return OutOfCourtDisputeSettlementCase.forNumber(outOfCourtDisputeSettlementCase_);
  }

  public static final int PRERENDERED_CONTENT_FIELD_NUMBER = 3;

  /**
   *
   *
   * <pre>
   * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
   * classes that can be used to customize the style of the content.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `issue-detail` - top level container for the detail of the issue
   * * `callout-banners` - section of the `issue-detail` with callout banners
   * * `callout-banner` - single callout banner, inside `callout-banners`
   * * `callout-banner-info` - callout with important information (default)
   * * `callout-banner-warning` - callout with a warning
   * * `callout-banner-error` - callout informing about an error (most severe)
   * * `issue-content` - section of the `issue-detail`, contains multiple
   * `content-element`
   * * `content-element` - content element such as a list, link or paragraph,
   * inside `issue-content`
   * * `root-causes` - unordered list with items describing root causes of the
   * issue, inside `issue-content`
   * * `root-causes-intro` - intro text before the `root-causes` list, inside
   * `issue-content`
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * * `content-moderation` - marks the paragraph that explains how the issue
   * was identified.
   * * `new-element` - Present for new elements added to the pre-rendered
   * content in the future. To make sure that a new content element does not
   * break your style, you can hide everything with this class.
   * </pre>
   *
   * <code>string prerendered_content = 3;</code>
   *
   * @return Whether the prerenderedContent field is set.
   */
  public boolean hasPrerenderedContent() {
    return contentCase_ == 3;
  }

  /**
   *
   *
   * <pre>
   * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
   * classes that can be used to customize the style of the content.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `issue-detail` - top level container for the detail of the issue
   * * `callout-banners` - section of the `issue-detail` with callout banners
   * * `callout-banner` - single callout banner, inside `callout-banners`
   * * `callout-banner-info` - callout with important information (default)
   * * `callout-banner-warning` - callout with a warning
   * * `callout-banner-error` - callout informing about an error (most severe)
   * * `issue-content` - section of the `issue-detail`, contains multiple
   * `content-element`
   * * `content-element` - content element such as a list, link or paragraph,
   * inside `issue-content`
   * * `root-causes` - unordered list with items describing root causes of the
   * issue, inside `issue-content`
   * * `root-causes-intro` - intro text before the `root-causes` list, inside
   * `issue-content`
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * * `content-moderation` - marks the paragraph that explains how the issue
   * was identified.
   * * `new-element` - Present for new elements added to the pre-rendered
   * content in the future. To make sure that a new content element does not
   * break your style, you can hide everything with this class.
   * </pre>
   *
   * <code>string prerendered_content = 3;</code>
   *
   * @return The prerenderedContent.
   */
  public java.lang.String getPrerenderedContent() {
    java.lang.Object ref = "";
    if (contentCase_ == 3) {
      ref = content_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (contentCase_ == 3) {
        content_ = s;
      }
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
   * classes that can be used to customize the style of the content.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `issue-detail` - top level container for the detail of the issue
   * * `callout-banners` - section of the `issue-detail` with callout banners
   * * `callout-banner` - single callout banner, inside `callout-banners`
   * * `callout-banner-info` - callout with important information (default)
   * * `callout-banner-warning` - callout with a warning
   * * `callout-banner-error` - callout informing about an error (most severe)
   * * `issue-content` - section of the `issue-detail`, contains multiple
   * `content-element`
   * * `content-element` - content element such as a list, link or paragraph,
   * inside `issue-content`
   * * `root-causes` - unordered list with items describing root causes of the
   * issue, inside `issue-content`
   * * `root-causes-intro` - intro text before the `root-causes` list, inside
   * `issue-content`
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * * `content-moderation` - marks the paragraph that explains how the issue
   * was identified.
   * * `new-element` - Present for new elements added to the pre-rendered
   * content in the future. To make sure that a new content element does not
   * break your style, you can hide everything with this class.
   * </pre>
   *
   * <code>string prerendered_content = 3;</code>
   *
   * @return The bytes for prerenderedContent.
   */
  public com.google.protobuf.ByteString getPrerenderedContentBytes() {
    java.lang.Object ref = "";
    if (contentCase_ == 3) {
      ref = content_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      if (contentCase_ == 3) {
        content_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRERENDERED_OUT_OF_COURT_DISPUTE_SETTLEMENT_FIELD_NUMBER = 5;

  /**
   *
   *
   * <pre>
   * Pre-rendered HTML that contains a link to the external location where the
   * ODS can be requested and instructions for how to request it. HTML
   * elements contain CSS classes that can be used to customize the style of
   * this snippet.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `ods-section`* - wrapper around the out-of-court dispute resolution
   * section
   * * `ods-description`* - intro text for the out-of-court dispute
   * resolution. It may contain multiple segments and a link.
   * * `ods-param`* - wrapper around the header-value pair for parameters that
   * the business may need to provide during the ODS process.
   * * `ods-routing-id`* - ods param for the Routing ID.
   * * `ods-reference-id`* - ods param for the Routing ID.
   * * `ods-param-header`* - header for the ODS parameter
   * * `ods-param-value`* - value of the ODS parameter. This value should be
   * rendered in a way that it is easy for the user to identify and copy.
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * </pre>
   *
   * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
   *
   * @return Whether the prerenderedOutOfCourtDisputeSettlement field is set.
   */
  public boolean hasPrerenderedOutOfCourtDisputeSettlement() {
    return outOfCourtDisputeSettlementCase_ == 5;
  }

  /**
   *
   *
   * <pre>
   * Pre-rendered HTML that contains a link to the external location where the
   * ODS can be requested and instructions for how to request it. HTML
   * elements contain CSS classes that can be used to customize the style of
   * this snippet.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `ods-section`* - wrapper around the out-of-court dispute resolution
   * section
   * * `ods-description`* - intro text for the out-of-court dispute
   * resolution. It may contain multiple segments and a link.
   * * `ods-param`* - wrapper around the header-value pair for parameters that
   * the business may need to provide during the ODS process.
   * * `ods-routing-id`* - ods param for the Routing ID.
   * * `ods-reference-id`* - ods param for the Routing ID.
   * * `ods-param-header`* - header for the ODS parameter
   * * `ods-param-value`* - value of the ODS parameter. This value should be
   * rendered in a way that it is easy for the user to identify and copy.
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * </pre>
   *
   * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
   *
   * @return The prerenderedOutOfCourtDisputeSettlement.
   */
  public java.lang.String getPrerenderedOutOfCourtDisputeSettlement() {
    java.lang.Object ref = "";
    if (outOfCourtDisputeSettlementCase_ == 5) {
      ref = outOfCourtDisputeSettlement_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (outOfCourtDisputeSettlementCase_ == 5) {
        outOfCourtDisputeSettlement_ = s;
      }
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Pre-rendered HTML that contains a link to the external location where the
   * ODS can be requested and instructions for how to request it. HTML
   * elements contain CSS classes that can be used to customize the style of
   * this snippet.
   *
   * Always sanitize the HTML before embedding it directly to your
   * application. The sanitizer needs to allow basic HTML tags, such as:
   * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
   * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
   *
   * CSS classes:
   *
   * * `ods-section`* - wrapper around the out-of-court dispute resolution
   * section
   * * `ods-description`* - intro text for the out-of-court dispute
   * resolution. It may contain multiple segments and a link.
   * * `ods-param`* - wrapper around the header-value pair for parameters that
   * the business may need to provide during the ODS process.
   * * `ods-routing-id`* - ods param for the Routing ID.
   * * `ods-reference-id`* - ods param for the Routing ID.
   * * `ods-param-header`* - header for the ODS parameter
   * * `ods-param-value`* - value of the ODS parameter. This value should be
   * rendered in a way that it is easy for the user to identify and copy.
   * * `segment` - section of the text, `span` inside paragraph
   * * `segment-attribute` - section of the text that represents a product
   * attribute, for example 'image&#92;_link'
   * * `segment-literal` - section of the text that contains a special value,
   * for example '0-1000 kg'
   * * `segment-bold` - section of the text that should be rendered as bold
   * * `segment-italic` - section of the text that should be rendered as
   * italic
   * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
   * A section of the text in such a paragraph will have a class
   * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
   * style is not used, the `tooltip-text` section would be shown on a new
   * line, after the main part of the text.
   * * `tooltip-text` - marks a section of the text within a `tooltip`, that
   * is intended to be shown in a mouse over dialog.
   * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
   * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
   * this section contains a `br` tag, that is separating the main text and
   * the tooltip text when the style is not used.
   * * `tooltip-style-question` - the tooltip shows helpful information,
   * can use the '?' as an icon.
   * * `tooltip-style-info` - the tooltip adds additional information fitting
   * to the context, can use the 'i' as an icon.
   * </pre>
   *
   * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
   *
   * @return The bytes for prerenderedOutOfCourtDisputeSettlement.
   */
  public com.google.protobuf.ByteString getPrerenderedOutOfCourtDisputeSettlementBytes() {
    java.lang.Object ref = "";
    if (outOfCourtDisputeSettlementCase_ == 5) {
      ref = outOfCourtDisputeSettlement_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      if (outOfCourtDisputeSettlementCase_ == 5) {
        outOfCourtDisputeSettlement_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TITLE_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object title_ = "";

  /**
   *
   *
   * <pre>
   * Title of the issue.
   * </pre>
   *
   * <code>string title = 1;</code>
   *
   * @return The title.
   */
  @java.lang.Override
  public java.lang.String getTitle() {
    java.lang.Object ref = title_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      title_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Title of the issue.
   * </pre>
   *
   * <code>string title = 1;</code>
   *
   * @return The bytes for title.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTitleBytes() {
    java.lang.Object ref = title_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      title_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IMPACT_FIELD_NUMBER = 2;
  private com.google.shopping.merchant.issueresolution.v1.Impact impact_;

  /**
   *
   *
   * <pre>
   * Clarifies the severity of the issue.
   *
   * The [summarizing
   * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
   * present, should be shown right under the title for each issue. It helps
   * business to quickly understand the impact of the issue.
   *
   * The detailed
   * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
   * helps the business to fully understand the impact of the issue. It can be
   * rendered as dialog that opens when the business mouse over the summarized
   * impact statement.
   *
   * Issues with different
   * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
   * be styled differently. They may use a different color or icon to signal the
   * difference between `ERROR`, `WARNING` and `INFO`.
   * </pre>
   *
   * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
   *
   * @return Whether the impact field is set.
   */
  @java.lang.Override
  public boolean hasImpact() {
    return ((bitField0_ & 0x00000001) != 0);
  }

  /**
   *
   *
   * <pre>
   * Clarifies the severity of the issue.
   *
   * The [summarizing
   * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
   * present, should be shown right under the title for each issue. It helps
   * business to quickly understand the impact of the issue.
   *
   * The detailed
   * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
   * helps the business to fully understand the impact of the issue. It can be
   * rendered as dialog that opens when the business mouse over the summarized
   * impact statement.
   *
   * Issues with different
   * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
   * be styled differently. They may use a different color or icon to signal the
   * difference between `ERROR`, `WARNING` and `INFO`.
   * </pre>
   *
   * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
   *
   * @return The impact.
   */
  @java.lang.Override
  public com.google.shopping.merchant.issueresolution.v1.Impact getImpact() {
    return impact_ == null
        ? com.google.shopping.merchant.issueresolution.v1.Impact.getDefaultInstance()
        : impact_;
  }

  /**
   *
   *
   * <pre>
   * Clarifies the severity of the issue.
   *
   * The [summarizing
   * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
   * present, should be shown right under the title for each issue. It helps
   * business to quickly understand the impact of the issue.
   *
   * The detailed
   * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
   * helps the business to fully understand the impact of the issue. It can be
   * rendered as dialog that opens when the business mouse over the summarized
   * impact statement.
   *
   * Issues with different
   * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
   * be styled differently. They may use a different color or icon to signal the
   * difference between `ERROR`, `WARNING` and `INFO`.
   * </pre>
   *
   * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
   */
  @java.lang.Override
  public com.google.shopping.merchant.issueresolution.v1.ImpactOrBuilder getImpactOrBuilder() {
    return impact_ == null
        ? com.google.shopping.merchant.issueresolution.v1.Impact.getDefaultInstance()
        : impact_;
  }

  public static final int ACTIONS_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private java.util.List<com.google.shopping.merchant.issueresolution.v1.Action> actions_;

  /**
   *
   *
   * <pre>
   * A list of actionable steps that can be executed to solve the issue. An
   * example is requesting a re-review or providing arguments when business
   * disagrees with the issue.
   *
   * Actions that are supported in (your) third-party application can be
   * rendered as buttons and should be available to the business when they
   * expand the issue.
   * </pre>
   *
   * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.shopping.merchant.issueresolution.v1.Action> getActionsList() {
    return actions_;
  }

  /**
   *
   *
   * <pre>
   * A list of actionable steps that can be executed to solve the issue. An
   * example is requesting a re-review or providing arguments when business
   * disagrees with the issue.
   *
   * Actions that are supported in (your) third-party application can be
   * rendered as buttons and should be available to the business when they
   * expand the issue.
   * </pre>
   *
   * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder>
      getActionsOrBuilderList() {
    return actions_;
  }

  /**
   *
   *
   * <pre>
   * A list of actionable steps that can be executed to solve the issue. An
   * example is requesting a re-review or providing arguments when business
   * disagrees with the issue.
   *
   * Actions that are supported in (your) third-party application can be
   * rendered as buttons and should be available to the business when they
   * expand the issue.
   * </pre>
   *
   * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
   */
  @java.lang.Override
  public int getActionsCount() {
    return actions_.size();
  }

  /**
   *
   *
   * <pre>
   * A list of actionable steps that can be executed to solve the issue. An
   * example is requesting a re-review or providing arguments when business
   * disagrees with the issue.
   *
   * Actions that are supported in (your) third-party application can be
   * rendered as buttons and should be available to the business when they
   * expand the issue.
   * </pre>
   *
   * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
   */
  @java.lang.Override
  public com.google.shopping.merchant.issueresolution.v1.Action getActions(int index) {
    return actions_.get(index);
  }

  /**
   *
   *
   * <pre>
   * A list of actionable steps that can be executed to solve the issue. An
   * example is requesting a re-review or providing arguments when business
   * disagrees with the issue.
   *
   * Actions that are supported in (your) third-party application can be
   * rendered as buttons and should be available to the business when they
   * expand the issue.
   * </pre>
   *
   * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
   */
  @java.lang.Override
  public com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder getActionsOrBuilder(
      int index) {
    return actions_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(title_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, title_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getImpact());
    }
    if (contentCase_ == 3) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, content_);
    }
    for (int i = 0; i < actions_.size(); i++) {
      output.writeMessage(4, actions_.get(i));
    }
    if (outOfCourtDisputeSettlementCase_ == 5) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, outOfCourtDisputeSettlement_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(title_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, title_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getImpact());
    }
    if (contentCase_ == 3) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, content_);
    }
    for (int i = 0; i < actions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, actions_.get(i));
    }
    if (outOfCourtDisputeSettlementCase_ == 5) {
      size +=
          com.google.protobuf.GeneratedMessageV3.computeStringSize(5, outOfCourtDisputeSettlement_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.shopping.merchant.issueresolution.v1.RenderedIssue)) {
      return super.equals(obj);
    }
    com.google.shopping.merchant.issueresolution.v1.RenderedIssue other =
        (com.google.shopping.merchant.issueresolution.v1.RenderedIssue) obj;

    if (!getTitle().equals(other.getTitle())) return false;
    if (hasImpact() != other.hasImpact()) return false;
    if (hasImpact()) {
      if (!getImpact().equals(other.getImpact())) return false;
    }
    if (!getActionsList().equals(other.getActionsList())) return false;
    if (!getContentCase().equals(other.getContentCase())) return false;
    switch (contentCase_) {
      case 3:
        if (!getPrerenderedContent().equals(other.getPrerenderedContent())) return false;
        break;
      case 0:
      default:
    }
    if (!getOutOfCourtDisputeSettlementCase().equals(other.getOutOfCourtDisputeSettlementCase()))
      return false;
    switch (outOfCourtDisputeSettlementCase_) {
      case 5:
        if (!getPrerenderedOutOfCourtDisputeSettlement()
            .equals(other.getPrerenderedOutOfCourtDisputeSettlement())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TITLE_FIELD_NUMBER;
    hash = (53 * hash) + getTitle().hashCode();
    if (hasImpact()) {
      hash = (37 * hash) + IMPACT_FIELD_NUMBER;
      hash = (53 * hash) + getImpact().hashCode();
    }
    if (getActionsCount() > 0) {
      hash = (37 * hash) + ACTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getActionsList().hashCode();
    }
    switch (contentCase_) {
      case 3:
        hash = (37 * hash) + PRERENDERED_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getPrerenderedContent().hashCode();
        break;
      case 0:
      default:
    }
    switch (outOfCourtDisputeSettlementCase_) {
      case 5:
        hash = (37 * hash) + PRERENDERED_OUT_OF_COURT_DISPUTE_SETTLEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getPrerenderedOutOfCourtDisputeSettlement().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.shopping.merchant.issueresolution.v1.RenderedIssue prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * An issue affecting specific business or their product.
   * </pre>
   *
   * Protobuf type {@code google.shopping.merchant.issueresolution.v1.RenderedIssue}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.shopping.merchant.issueresolution.v1.RenderedIssue)
      com.google.shopping.merchant.issueresolution.v1.RenderedIssueOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.shopping.merchant.issueresolution.v1.IssueResolutionProto
          .internal_static_google_shopping_merchant_issueresolution_v1_RenderedIssue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.shopping.merchant.issueresolution.v1.IssueResolutionProto
          .internal_static_google_shopping_merchant_issueresolution_v1_RenderedIssue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.shopping.merchant.issueresolution.v1.RenderedIssue.class,
              com.google.shopping.merchant.issueresolution.v1.RenderedIssue.Builder.class);
    }

    // Construct using com.google.shopping.merchant.issueresolution.v1.RenderedIssue.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getImpactFieldBuilder();
        getActionsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      title_ = "";
      impact_ = null;
      if (impactBuilder_ != null) {
        impactBuilder_.dispose();
        impactBuilder_ = null;
      }
      if (actionsBuilder_ == null) {
        actions_ = java.util.Collections.emptyList();
      } else {
        actions_ = null;
        actionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      contentCase_ = 0;
      content_ = null;
      outOfCourtDisputeSettlementCase_ = 0;
      outOfCourtDisputeSettlement_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.shopping.merchant.issueresolution.v1.IssueResolutionProto
          .internal_static_google_shopping_merchant_issueresolution_v1_RenderedIssue_descriptor;
    }

    @java.lang.Override
    public com.google.shopping.merchant.issueresolution.v1.RenderedIssue
        getDefaultInstanceForType() {
      return com.google.shopping.merchant.issueresolution.v1.RenderedIssue.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.shopping.merchant.issueresolution.v1.RenderedIssue build() {
      com.google.shopping.merchant.issueresolution.v1.RenderedIssue result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.shopping.merchant.issueresolution.v1.RenderedIssue buildPartial() {
      com.google.shopping.merchant.issueresolution.v1.RenderedIssue result =
          new com.google.shopping.merchant.issueresolution.v1.RenderedIssue(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(
        com.google.shopping.merchant.issueresolution.v1.RenderedIssue result) {
      if (actionsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          actions_ = java.util.Collections.unmodifiableList(actions_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.actions_ = actions_;
      } else {
        result.actions_ = actionsBuilder_.build();
      }
    }

    private void buildPartial0(
        com.google.shopping.merchant.issueresolution.v1.RenderedIssue result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.title_ = title_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.impact_ = impactBuilder_ == null ? impact_ : impactBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(
        com.google.shopping.merchant.issueresolution.v1.RenderedIssue result) {
      result.contentCase_ = contentCase_;
      result.content_ = this.content_;
      result.outOfCourtDisputeSettlementCase_ = outOfCourtDisputeSettlementCase_;
      result.outOfCourtDisputeSettlement_ = this.outOfCourtDisputeSettlement_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.shopping.merchant.issueresolution.v1.RenderedIssue) {
        return mergeFrom((com.google.shopping.merchant.issueresolution.v1.RenderedIssue) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.shopping.merchant.issueresolution.v1.RenderedIssue other) {
      if (other
          == com.google.shopping.merchant.issueresolution.v1.RenderedIssue.getDefaultInstance())
        return this;
      if (!other.getTitle().isEmpty()) {
        title_ = other.title_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.hasImpact()) {
        mergeImpact(other.getImpact());
      }
      if (actionsBuilder_ == null) {
        if (!other.actions_.isEmpty()) {
          if (actions_.isEmpty()) {
            actions_ = other.actions_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureActionsIsMutable();
            actions_.addAll(other.actions_);
          }
          onChanged();
        }
      } else {
        if (!other.actions_.isEmpty()) {
          if (actionsBuilder_.isEmpty()) {
            actionsBuilder_.dispose();
            actionsBuilder_ = null;
            actions_ = other.actions_;
            bitField0_ = (bitField0_ & ~0x00000010);
            actionsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getActionsFieldBuilder()
                    : null;
          } else {
            actionsBuilder_.addAllMessages(other.actions_);
          }
        }
      }
      switch (other.getContentCase()) {
        case PRERENDERED_CONTENT:
          {
            contentCase_ = 3;
            content_ = other.content_;
            onChanged();
            break;
          }
        case CONTENT_NOT_SET:
          {
            break;
          }
      }
      switch (other.getOutOfCourtDisputeSettlementCase()) {
        case PRERENDERED_OUT_OF_COURT_DISPUTE_SETTLEMENT:
          {
            outOfCourtDisputeSettlementCase_ = 5;
            outOfCourtDisputeSettlement_ = other.outOfCourtDisputeSettlement_;
            onChanged();
            break;
          }
        case OUTOFCOURTDISPUTESETTLEMENT_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                title_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getImpactFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 18
            case 26:
              {
                java.lang.String s = input.readStringRequireUtf8();
                contentCase_ = 3;
                content_ = s;
                break;
              } // case 26
            case 34:
              {
                com.google.shopping.merchant.issueresolution.v1.Action m =
                    input.readMessage(
                        com.google.shopping.merchant.issueresolution.v1.Action.parser(),
                        extensionRegistry);
                if (actionsBuilder_ == null) {
                  ensureActionsIsMutable();
                  actions_.add(m);
                } else {
                  actionsBuilder_.addMessage(m);
                }
                break;
              } // case 34
            case 42:
              {
                java.lang.String s = input.readStringRequireUtf8();
                outOfCourtDisputeSettlementCase_ = 5;
                outOfCourtDisputeSettlement_ = s;
                break;
              } // case 42
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int contentCase_ = 0;
    private java.lang.Object content_;

    public ContentCase getContentCase() {
      return ContentCase.forNumber(contentCase_);
    }

    public Builder clearContent() {
      contentCase_ = 0;
      content_ = null;
      onChanged();
      return this;
    }

    private int outOfCourtDisputeSettlementCase_ = 0;
    private java.lang.Object outOfCourtDisputeSettlement_;

    public OutOfCourtDisputeSettlementCase getOutOfCourtDisputeSettlementCase() {
      return OutOfCourtDisputeSettlementCase.forNumber(outOfCourtDisputeSettlementCase_);
    }

    public Builder clearOutOfCourtDisputeSettlement() {
      outOfCourtDisputeSettlementCase_ = 0;
      outOfCourtDisputeSettlement_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @return Whether the prerenderedContent field is set.
     */
    @java.lang.Override
    public boolean hasPrerenderedContent() {
      return contentCase_ == 3;
    }

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @return The prerenderedContent.
     */
    @java.lang.Override
    public java.lang.String getPrerenderedContent() {
      java.lang.Object ref = "";
      if (contentCase_ == 3) {
        ref = content_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (contentCase_ == 3) {
          content_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @return The bytes for prerenderedContent.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrerenderedContentBytes() {
      java.lang.Object ref = "";
      if (contentCase_ == 3) {
        ref = content_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        if (contentCase_ == 3) {
          content_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @param value The prerenderedContent to set.
     * @return This builder for chaining.
     */
    public Builder setPrerenderedContent(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      contentCase_ = 3;
      content_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPrerenderedContent() {
      if (contentCase_ == 3) {
        contentCase_ = 0;
        content_ = null;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     * </pre>
     *
     * <code>string prerendered_content = 3;</code>
     *
     * @param value The bytes for prerenderedContent to set.
     * @return This builder for chaining.
     */
    public Builder setPrerenderedContentBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      contentCase_ = 3;
      content_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @return Whether the prerenderedOutOfCourtDisputeSettlement field is set.
     */
    @java.lang.Override
    public boolean hasPrerenderedOutOfCourtDisputeSettlement() {
      return outOfCourtDisputeSettlementCase_ == 5;
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @return The prerenderedOutOfCourtDisputeSettlement.
     */
    @java.lang.Override
    public java.lang.String getPrerenderedOutOfCourtDisputeSettlement() {
      java.lang.Object ref = "";
      if (outOfCourtDisputeSettlementCase_ == 5) {
        ref = outOfCourtDisputeSettlement_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (outOfCourtDisputeSettlementCase_ == 5) {
          outOfCourtDisputeSettlement_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @return The bytes for prerenderedOutOfCourtDisputeSettlement.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrerenderedOutOfCourtDisputeSettlementBytes() {
      java.lang.Object ref = "";
      if (outOfCourtDisputeSettlementCase_ == 5) {
        ref = outOfCourtDisputeSettlement_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        if (outOfCourtDisputeSettlementCase_ == 5) {
          outOfCourtDisputeSettlement_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @param value The prerenderedOutOfCourtDisputeSettlement to set.
     * @return This builder for chaining.
     */
    public Builder setPrerenderedOutOfCourtDisputeSettlement(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      outOfCourtDisputeSettlementCase_ = 5;
      outOfCourtDisputeSettlement_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPrerenderedOutOfCourtDisputeSettlement() {
      if (outOfCourtDisputeSettlementCase_ == 5) {
        outOfCourtDisputeSettlementCase_ = 0;
        outOfCourtDisputeSettlement_ = null;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     *
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *
     * CSS classes:
     *
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image&#92;_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * </pre>
     *
     * <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     *
     * @param value The bytes for prerenderedOutOfCourtDisputeSettlement to set.
     * @return This builder for chaining.
     */
    public Builder setPrerenderedOutOfCourtDisputeSettlementBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      outOfCourtDisputeSettlementCase_ = 5;
      outOfCourtDisputeSettlement_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object title_ = "";

    /**
     *
     *
     * <pre>
     * Title of the issue.
     * </pre>
     *
     * <code>string title = 1;</code>
     *
     * @return The title.
     */
    public java.lang.String getTitle() {
      java.lang.Object ref = title_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        title_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Title of the issue.
     * </pre>
     *
     * <code>string title = 1;</code>
     *
     * @return The bytes for title.
     */
    public com.google.protobuf.ByteString getTitleBytes() {
      java.lang.Object ref = title_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        title_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Title of the issue.
     * </pre>
     *
     * <code>string title = 1;</code>
     *
     * @param value The title to set.
     * @return This builder for chaining.
     */
    public Builder setTitle(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      title_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Title of the issue.
     * </pre>
     *
     * <code>string title = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTitle() {
      title_ = getDefaultInstance().getTitle();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Title of the issue.
     * </pre>
     *
     * <code>string title = 1;</code>
     *
     * @param value The bytes for title to set.
     * @return This builder for chaining.
     */
    public Builder setTitleBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      title_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private com.google.shopping.merchant.issueresolution.v1.Impact impact_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.shopping.merchant.issueresolution.v1.Impact,
            com.google.shopping.merchant.issueresolution.v1.Impact.Builder,
            com.google.shopping.merchant.issueresolution.v1.ImpactOrBuilder>
        impactBuilder_;

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     *
     * @return Whether the impact field is set.
     */
    public boolean hasImpact() {
      return ((bitField0_ & 0x00000008) != 0);
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     *
     * @return The impact.
     */
    public com.google.shopping.merchant.issueresolution.v1.Impact getImpact() {
      if (impactBuilder_ == null) {
        return impact_ == null
            ? com.google.shopping.merchant.issueresolution.v1.Impact.getDefaultInstance()
            : impact_;
      } else {
        return impactBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public Builder setImpact(com.google.shopping.merchant.issueresolution.v1.Impact value) {
      if (impactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        impact_ = value;
      } else {
        impactBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public Builder setImpact(
        com.google.shopping.merchant.issueresolution.v1.Impact.Builder builderForValue) {
      if (impactBuilder_ == null) {
        impact_ = builderForValue.build();
      } else {
        impactBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public Builder mergeImpact(com.google.shopping.merchant.issueresolution.v1.Impact value) {
      if (impactBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)
            && impact_ != null
            && impact_
                != com.google.shopping.merchant.issueresolution.v1.Impact.getDefaultInstance()) {
          getImpactBuilder().mergeFrom(value);
        } else {
          impact_ = value;
        }
      } else {
        impactBuilder_.mergeFrom(value);
      }
      if (impact_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public Builder clearImpact() {
      bitField0_ = (bitField0_ & ~0x00000008);
      impact_ = null;
      if (impactBuilder_ != null) {
        impactBuilder_.dispose();
        impactBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.Impact.Builder getImpactBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getImpactFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.ImpactOrBuilder getImpactOrBuilder() {
      if (impactBuilder_ != null) {
        return impactBuilder_.getMessageOrBuilder();
      } else {
        return impact_ == null
            ? com.google.shopping.merchant.issueresolution.v1.Impact.getDefaultInstance()
            : impact_;
      }
    }

    /**
     *
     *
     * <pre>
     * Clarifies the severity of the issue.
     *
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     *
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     *
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     * </pre>
     *
     * <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.shopping.merchant.issueresolution.v1.Impact,
            com.google.shopping.merchant.issueresolution.v1.Impact.Builder,
            com.google.shopping.merchant.issueresolution.v1.ImpactOrBuilder>
        getImpactFieldBuilder() {
      if (impactBuilder_ == null) {
        impactBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.shopping.merchant.issueresolution.v1.Impact,
                com.google.shopping.merchant.issueresolution.v1.Impact.Builder,
                com.google.shopping.merchant.issueresolution.v1.ImpactOrBuilder>(
                getImpact(), getParentForChildren(), isClean());
        impact_ = null;
      }
      return impactBuilder_;
    }

    private java.util.List<com.google.shopping.merchant.issueresolution.v1.Action> actions_ =
        java.util.Collections.emptyList();

    private void ensureActionsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        actions_ =
            new java.util.ArrayList<com.google.shopping.merchant.issueresolution.v1.Action>(
                actions_);
        bitField0_ |= 0x00000010;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.shopping.merchant.issueresolution.v1.Action,
            com.google.shopping.merchant.issueresolution.v1.Action.Builder,
            com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder>
        actionsBuilder_;

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public java.util.List<com.google.shopping.merchant.issueresolution.v1.Action> getActionsList() {
      if (actionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(actions_);
      } else {
        return actionsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public int getActionsCount() {
      if (actionsBuilder_ == null) {
        return actions_.size();
      } else {
        return actionsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.Action getActions(int index) {
      if (actionsBuilder_ == null) {
        return actions_.get(index);
      } else {
        return actionsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder setActions(
        int index, com.google.shopping.merchant.issueresolution.v1.Action value) {
      if (actionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActionsIsMutable();
        actions_.set(index, value);
        onChanged();
      } else {
        actionsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder setActions(
        int index, com.google.shopping.merchant.issueresolution.v1.Action.Builder builderForValue) {
      if (actionsBuilder_ == null) {
        ensureActionsIsMutable();
        actions_.set(index, builderForValue.build());
        onChanged();
      } else {
        actionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder addActions(com.google.shopping.merchant.issueresolution.v1.Action value) {
      if (actionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActionsIsMutable();
        actions_.add(value);
        onChanged();
      } else {
        actionsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder addActions(
        int index, com.google.shopping.merchant.issueresolution.v1.Action value) {
      if (actionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActionsIsMutable();
        actions_.add(index, value);
        onChanged();
      } else {
        actionsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder addActions(
        com.google.shopping.merchant.issueresolution.v1.Action.Builder builderForValue) {
      if (actionsBuilder_ == null) {
        ensureActionsIsMutable();
        actions_.add(builderForValue.build());
        onChanged();
      } else {
        actionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder addActions(
        int index, com.google.shopping.merchant.issueresolution.v1.Action.Builder builderForValue) {
      if (actionsBuilder_ == null) {
        ensureActionsIsMutable();
        actions_.add(index, builderForValue.build());
        onChanged();
      } else {
        actionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder addAllActions(
        java.lang.Iterable<? extends com.google.shopping.merchant.issueresolution.v1.Action>
            values) {
      if (actionsBuilder_ == null) {
        ensureActionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, actions_);
        onChanged();
      } else {
        actionsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder clearActions() {
      if (actionsBuilder_ == null) {
        actions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        actionsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public Builder removeActions(int index) {
      if (actionsBuilder_ == null) {
        ensureActionsIsMutable();
        actions_.remove(index);
        onChanged();
      } else {
        actionsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.Action.Builder getActionsBuilder(
        int index) {
      return getActionsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder getActionsOrBuilder(
        int index) {
      if (actionsBuilder_ == null) {
        return actions_.get(index);
      } else {
        return actionsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public java.util.List<? extends com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder>
        getActionsOrBuilderList() {
      if (actionsBuilder_ != null) {
        return actionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(actions_);
      }
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.Action.Builder addActionsBuilder() {
      return getActionsFieldBuilder()
          .addBuilder(com.google.shopping.merchant.issueresolution.v1.Action.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public com.google.shopping.merchant.issueresolution.v1.Action.Builder addActionsBuilder(
        int index) {
      return getActionsFieldBuilder()
          .addBuilder(
              index, com.google.shopping.merchant.issueresolution.v1.Action.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     *
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     * </pre>
     *
     * <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    public java.util.List<com.google.shopping.merchant.issueresolution.v1.Action.Builder>
        getActionsBuilderList() {
      return getActionsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.shopping.merchant.issueresolution.v1.Action,
            com.google.shopping.merchant.issueresolution.v1.Action.Builder,
            com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder>
        getActionsFieldBuilder() {
      if (actionsBuilder_ == null) {
        actionsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.shopping.merchant.issueresolution.v1.Action,
                com.google.shopping.merchant.issueresolution.v1.Action.Builder,
                com.google.shopping.merchant.issueresolution.v1.ActionOrBuilder>(
                actions_, ((bitField0_ & 0x00000010) != 0), getParentForChildren(), isClean());
        actions_ = null;
      }
      return actionsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.shopping.merchant.issueresolution.v1.RenderedIssue)
  }

  // @@protoc_insertion_point(class_scope:google.shopping.merchant.issueresolution.v1.RenderedIssue)
  private static final com.google.shopping.merchant.issueresolution.v1.RenderedIssue
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.shopping.merchant.issueresolution.v1.RenderedIssue();
  }

  public static com.google.shopping.merchant.issueresolution.v1.RenderedIssue getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RenderedIssue> PARSER =
      new com.google.protobuf.AbstractParser<RenderedIssue>() {
        @java.lang.Override
        public RenderedIssue parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<RenderedIssue> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RenderedIssue> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.shopping.merchant.issueresolution.v1.RenderedIssue getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
