/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/vertex_rag_data.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.aiplatform.v1beta1;

public interface RagFileMetadataConfigOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1beta1.RagFileMetadataConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata_schema.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_schema_source = 1;</code>
   *
   * @return Whether the gcsMetadataSchemaSource field is set.
   */
  boolean hasGcsMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata_schema.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_schema_source = 1;</code>
   *
   * @return The gcsMetadataSchemaSource.
   */
  com.google.cloud.aiplatform.v1beta1.GcsSource getGcsMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata_schema.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_schema_source = 1;</code>
   */
  com.google.cloud.aiplatform.v1beta1.GcsSourceOrBuilder getGcsMetadataSchemaSourceOrBuilder();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a folder, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_schema_source = 2;
   * </code>
   *
   * @return Whether the googleDriveMetadataSchemaSource field is set.
   */
  boolean hasGoogleDriveMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a folder, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_schema_source = 2;
   * </code>
   *
   * @return The googleDriveMetadataSchemaSource.
   */
  com.google.cloud.aiplatform.v1beta1.GoogleDriveSource getGoogleDriveMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a folder, the metadata schema will be read from
   * the files that ends with "metadata_schema.json" in the directory.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_schema_source = 2;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.GoogleDriveSourceOrBuilder
      getGoogleDriveMetadataSchemaSourceOrBuilder();

  /**
   *
   *
   * <pre>
   * Inline metadata schema source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_schema_source = 3;</code>
   *
   * @return Whether the inlineMetadataSchemaSource field is set.
   */
  boolean hasInlineMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Inline metadata schema source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_schema_source = 3;</code>
   *
   * @return The inlineMetadataSchemaSource.
   */
  java.lang.String getInlineMetadataSchemaSource();

  /**
   *
   *
   * <pre>
   * Inline metadata schema source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_schema_source = 3;</code>
   *
   * @return The bytes for inlineMetadataSchemaSource.
   */
  com.google.protobuf.ByteString getInlineMetadataSchemaSourceBytes();

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_source = 4;</code>
   *
   * @return Whether the gcsMetadataSource field is set.
   */
  boolean hasGcsMetadataSource();

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_source = 4;</code>
   *
   * @return The gcsMetadataSource.
   */
  com.google.cloud.aiplatform.v1beta1.GcsSource getGcsMetadataSource();

  /**
   *
   *
   * <pre>
   * Google Cloud Storage location. Supports importing individual files as
   * well as entire Google Cloud Storage directories. Sample formats:
   * - `gs://bucket_name/my_directory/object_name/metadata.json`
   * - `gs://bucket_name/my_directory`
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GcsSource gcs_metadata_source = 4;</code>
   */
  com.google.cloud.aiplatform.v1beta1.GcsSourceOrBuilder getGcsMetadataSourceOrBuilder();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_source = 5;
   * </code>
   *
   * @return Whether the googleDriveMetadataSource field is set.
   */
  boolean hasGoogleDriveMetadataSource();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_source = 5;
   * </code>
   *
   * @return The googleDriveMetadataSource.
   */
  com.google.cloud.aiplatform.v1beta1.GoogleDriveSource getGoogleDriveMetadataSource();

  /**
   *
   *
   * <pre>
   * Google Drive location. Supports importing individual files as
   * well as Google Drive folders.
   * If providing a directory, the metadata will be read from
   * the files that ends with "metadata.json" in the directory.
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.GoogleDriveSource google_drive_metadata_source = 5;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.GoogleDriveSourceOrBuilder
      getGoogleDriveMetadataSourceOrBuilder();

  /**
   *
   *
   * <pre>
   * Inline metadata source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_source = 6;</code>
   *
   * @return Whether the inlineMetadataSource field is set.
   */
  boolean hasInlineMetadataSource();

  /**
   *
   *
   * <pre>
   * Inline metadata source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_source = 6;</code>
   *
   * @return The inlineMetadataSource.
   */
  java.lang.String getInlineMetadataSource();

  /**
   *
   *
   * <pre>
   * Inline metadata source. Must be a JSON string.
   * </pre>
   *
   * <code>string inline_metadata_source = 6;</code>
   *
   * @return The bytes for inlineMetadataSource.
   */
  com.google.protobuf.ByteString getInlineMetadataSourceBytes();

  com.google.cloud.aiplatform.v1beta1.RagFileMetadataConfig.MetadataSchemaSourceCase
      getMetadataSchemaSourceCase();

  com.google.cloud.aiplatform.v1beta1.RagFileMetadataConfig.MetadataSourceCase
      getMetadataSourceCase();
}
