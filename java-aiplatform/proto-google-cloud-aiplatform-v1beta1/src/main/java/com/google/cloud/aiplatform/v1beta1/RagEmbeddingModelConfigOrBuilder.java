/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/vertex_rag_data.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.aiplatform.v1beta1;

public interface RagEmbeddingModelConfigOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The Vertex AI Prediction Endpoint that either refers to a publisher model
   * or an endpoint that is hosting a 1P fine-tuned text embedding model.
   * Endpoints hosting non-1P fine-tuned text embedding models are
   * currently not supported.
   * This is used for dense vector search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint vertex_prediction_endpoint = 1;
   * </code>
   *
   * @return Whether the vertexPredictionEndpoint field is set.
   */
  boolean hasVertexPredictionEndpoint();
  /**
   *
   *
   * <pre>
   * The Vertex AI Prediction Endpoint that either refers to a publisher model
   * or an endpoint that is hosting a 1P fine-tuned text embedding model.
   * Endpoints hosting non-1P fine-tuned text embedding models are
   * currently not supported.
   * This is used for dense vector search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint vertex_prediction_endpoint = 1;
   * </code>
   *
   * @return The vertexPredictionEndpoint.
   */
  com.google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint
      getVertexPredictionEndpoint();
  /**
   *
   *
   * <pre>
   * The Vertex AI Prediction Endpoint that either refers to a publisher model
   * or an endpoint that is hosting a 1P fine-tuned text embedding model.
   * Endpoints hosting non-1P fine-tuned text embedding models are
   * currently not supported.
   * This is used for dense vector search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint vertex_prediction_endpoint = 1;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpointOrBuilder
      getVertexPredictionEndpointOrBuilder();

  /**
   *
   *
   * <pre>
   * Configuration for hybrid search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig hybrid_search_config = 2;
   * </code>
   *
   * @return Whether the hybridSearchConfig field is set.
   */
  boolean hasHybridSearchConfig();
  /**
   *
   *
   * <pre>
   * Configuration for hybrid search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig hybrid_search_config = 2;
   * </code>
   *
   * @return The hybridSearchConfig.
   */
  com.google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig
      getHybridSearchConfig();
  /**
   *
   *
   * <pre>
   * Configuration for hybrid search.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig hybrid_search_config = 2;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfigOrBuilder
      getHybridSearchConfigOrBuilder();

  com.google.cloud.aiplatform.v1beta1.RagEmbeddingModelConfig.ModelConfigCase getModelConfigCase();
}
