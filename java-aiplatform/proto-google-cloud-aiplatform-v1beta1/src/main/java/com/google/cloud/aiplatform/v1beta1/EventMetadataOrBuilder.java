/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/session.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.aiplatform.v1beta1;

public interface EventMetadataOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1beta1.EventMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. Metadata returned to client when grounding is enabled.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GroundingMetadata grounding_metadata = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the groundingMetadata field is set.
   */
  boolean hasGroundingMetadata();

  /**
   *
   *
   * <pre>
   * Optional. Metadata returned to client when grounding is enabled.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GroundingMetadata grounding_metadata = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The groundingMetadata.
   */
  com.google.cloud.aiplatform.v1beta1.GroundingMetadata getGroundingMetadata();

  /**
   *
   *
   * <pre>
   * Optional. Metadata returned to client when grounding is enabled.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.GroundingMetadata grounding_metadata = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.GroundingMetadataOrBuilder getGroundingMetadataOrBuilder();

  /**
   *
   *
   * <pre>
   * Optional. Indicates whether the text content is part of a unfinished text
   * stream. Only used for streaming mode and when the content is plain text.
   * </pre>
   *
   * <code>bool partial = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The partial.
   */
  boolean getPartial();

  /**
   *
   *
   * <pre>
   * Optional. Indicates whether the response from the model is complete.
   * Only used for streaming mode.
   * </pre>
   *
   * <code>bool turn_complete = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The turnComplete.
   */
  boolean getTurnComplete();

  /**
   *
   *
   * <pre>
   * Optional. Flag indicating that LLM was interrupted when generating the
   * content. Usually it's due to user interruption during a bidi streaming.
   * </pre>
   *
   * <code>bool interrupted = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The interrupted.
   */
  boolean getInterrupted();

  /**
   *
   *
   * <pre>
   * Optional. Set of ids of the long running function calls.
   * Agent client will know from this field about which function call is long
   * running. Only valid for function call event.
   * </pre>
   *
   * <code>repeated string long_running_tool_ids = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the longRunningToolIds.
   */
  java.util.List<java.lang.String> getLongRunningToolIdsList();

  /**
   *
   *
   * <pre>
   * Optional. Set of ids of the long running function calls.
   * Agent client will know from this field about which function call is long
   * running. Only valid for function call event.
   * </pre>
   *
   * <code>repeated string long_running_tool_ids = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of longRunningToolIds.
   */
  int getLongRunningToolIdsCount();

  /**
   *
   *
   * <pre>
   * Optional. Set of ids of the long running function calls.
   * Agent client will know from this field about which function call is long
   * running. Only valid for function call event.
   * </pre>
   *
   * <code>repeated string long_running_tool_ids = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The longRunningToolIds at the given index.
   */
  java.lang.String getLongRunningToolIds(int index);

  /**
   *
   *
   * <pre>
   * Optional. Set of ids of the long running function calls.
   * Agent client will know from this field about which function call is long
   * running. Only valid for function call event.
   * </pre>
   *
   * <code>repeated string long_running_tool_ids = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the longRunningToolIds at the given index.
   */
  com.google.protobuf.ByteString getLongRunningToolIdsBytes(int index);

  /**
   *
   *
   * <pre>
   * Optional. The branch of the event.
   * The format is like agent_1.agent_2.agent_3, where agent_1 is the parent of
   * agent_2, and agent_2 is the parent of agent_3.
   * Branch is used when multiple child agents shouldn't see their siblings'
   * conversation history.
   * </pre>
   *
   * <code>string branch = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The branch.
   */
  java.lang.String getBranch();

  /**
   *
   *
   * <pre>
   * Optional. The branch of the event.
   * The format is like agent_1.agent_2.agent_3, where agent_1 is the parent of
   * agent_2, and agent_2 is the parent of agent_3.
   * Branch is used when multiple child agents shouldn't see their siblings'
   * conversation history.
   * </pre>
   *
   * <code>string branch = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for branch.
   */
  com.google.protobuf.ByteString getBranchBytes();
}
