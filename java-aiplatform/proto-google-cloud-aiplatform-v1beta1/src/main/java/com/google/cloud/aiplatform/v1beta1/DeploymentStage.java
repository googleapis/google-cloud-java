/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/deployment_stage.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.aiplatform.v1beta1;

/**
 *
 *
 * <pre>
 * Stage field indicating the current progress of a deployment.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.aiplatform.v1beta1.DeploymentStage}
 */
public enum DeploymentStage implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>DEPLOYMENT_STAGE_UNSPECIFIED = 0;</code>
   */
  DEPLOYMENT_STAGE_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * The deployment is initializing and setting up the environment.
   * </pre>
   *
   * <code>STARTING_DEPLOYMENT = 5;</code>
   */
  STARTING_DEPLOYMENT(5),
  /**
   *
   *
   * <pre>
   * The deployment is preparing the model assets.
   * </pre>
   *
   * <code>PREPARING_MODEL = 6;</code>
   */
  PREPARING_MODEL(6),
  /**
   *
   *
   * <pre>
   * The deployment is creating the underlying serving cluster.
   * </pre>
   *
   * <code>CREATING_SERVING_CLUSTER = 7;</code>
   */
  CREATING_SERVING_CLUSTER(7),
  /**
   *
   *
   * <pre>
   * The deployment is adding nodes to the serving cluster.
   * </pre>
   *
   * <code>ADDING_NODES_TO_CLUSTER = 8;</code>
   */
  ADDING_NODES_TO_CLUSTER(8),
  /**
   *
   *
   * <pre>
   * The deployment is getting the container image for the model server.
   * </pre>
   *
   * <code>GETTING_CONTAINER_IMAGE = 9;</code>
   */
  GETTING_CONTAINER_IMAGE(9),
  /**
   *
   *
   * <pre>
   * The deployment is starting the model server.
   * </pre>
   *
   * <code>STARTING_MODEL_SERVER = 3;</code>
   */
  STARTING_MODEL_SERVER(3),
  /**
   *
   *
   * <pre>
   * The deployment is performing finalization steps.
   * </pre>
   *
   * <code>FINISHING_UP = 4;</code>
   */
  FINISHING_UP(4),
  /**
   *
   *
   * <pre>
   * The deployment has terminated.
   * </pre>
   *
   * <code>DEPLOYMENT_TERMINATED = 10;</code>
   */
  DEPLOYMENT_TERMINATED(10),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Default value. This value is unused.
   * </pre>
   *
   * <code>DEPLOYMENT_STAGE_UNSPECIFIED = 0;</code>
   */
  public static final int DEPLOYMENT_STAGE_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * The deployment is initializing and setting up the environment.
   * </pre>
   *
   * <code>STARTING_DEPLOYMENT = 5;</code>
   */
  public static final int STARTING_DEPLOYMENT_VALUE = 5;

  /**
   *
   *
   * <pre>
   * The deployment is preparing the model assets.
   * </pre>
   *
   * <code>PREPARING_MODEL = 6;</code>
   */
  public static final int PREPARING_MODEL_VALUE = 6;

  /**
   *
   *
   * <pre>
   * The deployment is creating the underlying serving cluster.
   * </pre>
   *
   * <code>CREATING_SERVING_CLUSTER = 7;</code>
   */
  public static final int CREATING_SERVING_CLUSTER_VALUE = 7;

  /**
   *
   *
   * <pre>
   * The deployment is adding nodes to the serving cluster.
   * </pre>
   *
   * <code>ADDING_NODES_TO_CLUSTER = 8;</code>
   */
  public static final int ADDING_NODES_TO_CLUSTER_VALUE = 8;

  /**
   *
   *
   * <pre>
   * The deployment is getting the container image for the model server.
   * </pre>
   *
   * <code>GETTING_CONTAINER_IMAGE = 9;</code>
   */
  public static final int GETTING_CONTAINER_IMAGE_VALUE = 9;

  /**
   *
   *
   * <pre>
   * The deployment is starting the model server.
   * </pre>
   *
   * <code>STARTING_MODEL_SERVER = 3;</code>
   */
  public static final int STARTING_MODEL_SERVER_VALUE = 3;

  /**
   *
   *
   * <pre>
   * The deployment is performing finalization steps.
   * </pre>
   *
   * <code>FINISHING_UP = 4;</code>
   */
  public static final int FINISHING_UP_VALUE = 4;

  /**
   *
   *
   * <pre>
   * The deployment has terminated.
   * </pre>
   *
   * <code>DEPLOYMENT_TERMINATED = 10;</code>
   */
  public static final int DEPLOYMENT_TERMINATED_VALUE = 10;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DeploymentStage valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DeploymentStage forNumber(int value) {
    switch (value) {
      case 0:
        return DEPLOYMENT_STAGE_UNSPECIFIED;
      case 5:
        return STARTING_DEPLOYMENT;
      case 6:
        return PREPARING_MODEL;
      case 7:
        return CREATING_SERVING_CLUSTER;
      case 8:
        return ADDING_NODES_TO_CLUSTER;
      case 9:
        return GETTING_CONTAINER_IMAGE;
      case 3:
        return STARTING_MODEL_SERVER;
      case 4:
        return FINISHING_UP;
      case 10:
        return DEPLOYMENT_TERMINATED;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DeploymentStage> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<DeploymentStage> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<DeploymentStage>() {
        public DeploymentStage findValueByNumber(int number) {
          return DeploymentStage.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.aiplatform.v1beta1.DeploymentStageProto.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final DeploymentStage[] VALUES = values();

  public static DeploymentStage valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DeploymentStage(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.aiplatform.v1beta1.DeploymentStage)
}
