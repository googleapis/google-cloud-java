/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1/model_deployment_monitoring_job.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.aiplatform.v1;

/**
 *
 *
 * <pre>
 * The config for scheduling monitoring job.
 * </pre>
 *
 * Protobuf type {@code google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig}
 */
public final class ModelDeploymentMonitoringScheduleConfig
    extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig)
    ModelDeploymentMonitoringScheduleConfigOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ModelDeploymentMonitoringScheduleConfig.newBuilder() to construct.
  private ModelDeploymentMonitoringScheduleConfig(
      com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ModelDeploymentMonitoringScheduleConfig() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ModelDeploymentMonitoringScheduleConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJobProto
        .internal_static_google_cloud_aiplatform_v1_ModelDeploymentMonitoringScheduleConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJobProto
        .internal_static_google_cloud_aiplatform_v1_ModelDeploymentMonitoringScheduleConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.class,
            com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.Builder.class);
  }

  private int bitField0_;
  public static final int MONITOR_INTERVAL_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration monitorInterval_;
  /**
   *
   *
   * <pre>
   * Required. The model monitoring job scheduling interval. It will be rounded
   * up to next full hour. This defines how often the monitoring jobs are
   * triggered.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the monitorInterval field is set.
   */
  @java.lang.Override
  public boolean hasMonitorInterval() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Required. The model monitoring job scheduling interval. It will be rounded
   * up to next full hour. This defines how often the monitoring jobs are
   * triggered.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The monitorInterval.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getMonitorInterval() {
    return monitorInterval_ == null
        ? com.google.protobuf.Duration.getDefaultInstance()
        : monitorInterval_;
  }
  /**
   *
   *
   * <pre>
   * Required. The model monitoring job scheduling interval. It will be rounded
   * up to next full hour. This defines how often the monitoring jobs are
   * triggered.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getMonitorIntervalOrBuilder() {
    return monitorInterval_ == null
        ? com.google.protobuf.Duration.getDefaultInstance()
        : monitorInterval_;
  }

  public static final int MONITOR_WINDOW_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration monitorWindow_;
  /**
   *
   *
   * <pre>
   * The time window of the prediction data being included in each prediction
   * dataset. This window specifies how long the data should be collected from
   * historical model results for each run. If not set,
   * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
   * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
   * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
   * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
   * monitoring statistics.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_window = 2;</code>
   *
   * @return Whether the monitorWindow field is set.
   */
  @java.lang.Override
  public boolean hasMonitorWindow() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * The time window of the prediction data being included in each prediction
   * dataset. This window specifies how long the data should be collected from
   * historical model results for each run. If not set,
   * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
   * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
   * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
   * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
   * monitoring statistics.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_window = 2;</code>
   *
   * @return The monitorWindow.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getMonitorWindow() {
    return monitorWindow_ == null
        ? com.google.protobuf.Duration.getDefaultInstance()
        : monitorWindow_;
  }
  /**
   *
   *
   * <pre>
   * The time window of the prediction data being included in each prediction
   * dataset. This window specifies how long the data should be collected from
   * historical model results for each run. If not set,
   * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
   * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
   * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
   * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
   * monitoring statistics.
   * </pre>
   *
   * <code>.google.protobuf.Duration monitor_window = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getMonitorWindowOrBuilder() {
    return monitorWindow_ == null
        ? com.google.protobuf.Duration.getDefaultInstance()
        : monitorWindow_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getMonitorInterval());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getMonitorWindow());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getMonitorInterval());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getMonitorWindow());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig)) {
      return super.equals(obj);
    }
    com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig other =
        (com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig) obj;

    if (hasMonitorInterval() != other.hasMonitorInterval()) return false;
    if (hasMonitorInterval()) {
      if (!getMonitorInterval().equals(other.getMonitorInterval())) return false;
    }
    if (hasMonitorWindow() != other.hasMonitorWindow()) return false;
    if (hasMonitorWindow()) {
      if (!getMonitorWindow().equals(other.getMonitorWindow())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMonitorInterval()) {
      hash = (37 * hash) + MONITOR_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getMonitorInterval().hashCode();
    }
    if (hasMonitorWindow()) {
      hash = (37 * hash) + MONITOR_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + getMonitorWindow().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * The config for scheduling monitoring job.
   * </pre>
   *
   * Protobuf type {@code google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig)
      com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJobProto
          .internal_static_google_cloud_aiplatform_v1_ModelDeploymentMonitoringScheduleConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJobProto
          .internal_static_google_cloud_aiplatform_v1_ModelDeploymentMonitoringScheduleConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.class,
              com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.Builder.class);
    }

    // Construct using
    // com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getMonitorIntervalFieldBuilder();
        getMonitorWindowFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      monitorInterval_ = null;
      if (monitorIntervalBuilder_ != null) {
        monitorIntervalBuilder_.dispose();
        monitorIntervalBuilder_ = null;
      }
      monitorWindow_ = null;
      if (monitorWindowBuilder_ != null) {
        monitorWindowBuilder_.dispose();
        monitorWindowBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringJobProto
          .internal_static_google_cloud_aiplatform_v1_ModelDeploymentMonitoringScheduleConfig_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
        getDefaultInstanceForType() {
      return com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
          .getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig build() {
      com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig result =
          buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig buildPartial() {
      com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig result =
          new com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(
        com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.monitorInterval_ =
            monitorIntervalBuilder_ == null ? monitorInterval_ : monitorIntervalBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.monitorWindow_ =
            monitorWindowBuilder_ == null ? monitorWindow_ : monitorWindowBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig) {
        return mergeFrom(
            (com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig other) {
      if (other
          == com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
              .getDefaultInstance()) return this;
      if (other.hasMonitorInterval()) {
        mergeMonitorInterval(other.getMonitorInterval());
      }
      if (other.hasMonitorWindow()) {
        mergeMonitorWindow(other.getMonitorWindow());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getMonitorIntervalFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getMonitorWindowFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.Duration monitorInterval_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        monitorIntervalBuilder_;
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the monitorInterval field is set.
     */
    public boolean hasMonitorInterval() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The monitorInterval.
     */
    public com.google.protobuf.Duration getMonitorInterval() {
      if (monitorIntervalBuilder_ == null) {
        return monitorInterval_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : monitorInterval_;
      } else {
        return monitorIntervalBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setMonitorInterval(com.google.protobuf.Duration value) {
      if (monitorIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        monitorInterval_ = value;
      } else {
        monitorIntervalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setMonitorInterval(com.google.protobuf.Duration.Builder builderForValue) {
      if (monitorIntervalBuilder_ == null) {
        monitorInterval_ = builderForValue.build();
      } else {
        monitorIntervalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeMonitorInterval(com.google.protobuf.Duration value) {
      if (monitorIntervalBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && monitorInterval_ != null
            && monitorInterval_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getMonitorIntervalBuilder().mergeFrom(value);
        } else {
          monitorInterval_ = value;
        }
      } else {
        monitorIntervalBuilder_.mergeFrom(value);
      }
      if (monitorInterval_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearMonitorInterval() {
      bitField0_ = (bitField0_ & ~0x00000001);
      monitorInterval_ = null;
      if (monitorIntervalBuilder_ != null) {
        monitorIntervalBuilder_.dispose();
        monitorIntervalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.protobuf.Duration.Builder getMonitorIntervalBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getMonitorIntervalFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.protobuf.DurationOrBuilder getMonitorIntervalOrBuilder() {
      if (monitorIntervalBuilder_ != null) {
        return monitorIntervalBuilder_.getMessageOrBuilder();
      } else {
        return monitorInterval_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : monitorInterval_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The model monitoring job scheduling interval. It will be rounded
     * up to next full hour. This defines how often the monitoring jobs are
     * triggered.
     * </pre>
     *
     * <code>
     * .google.protobuf.Duration monitor_interval = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        getMonitorIntervalFieldBuilder() {
      if (monitorIntervalBuilder_ == null) {
        monitorIntervalBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration,
                com.google.protobuf.Duration.Builder,
                com.google.protobuf.DurationOrBuilder>(
                getMonitorInterval(), getParentForChildren(), isClean());
        monitorInterval_ = null;
      }
      return monitorIntervalBuilder_;
    }

    private com.google.protobuf.Duration monitorWindow_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        monitorWindowBuilder_;
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     *
     * @return Whether the monitorWindow field is set.
     */
    public boolean hasMonitorWindow() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     *
     * @return The monitorWindow.
     */
    public com.google.protobuf.Duration getMonitorWindow() {
      if (monitorWindowBuilder_ == null) {
        return monitorWindow_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : monitorWindow_;
      } else {
        return monitorWindowBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public Builder setMonitorWindow(com.google.protobuf.Duration value) {
      if (monitorWindowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        monitorWindow_ = value;
      } else {
        monitorWindowBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public Builder setMonitorWindow(com.google.protobuf.Duration.Builder builderForValue) {
      if (monitorWindowBuilder_ == null) {
        monitorWindow_ = builderForValue.build();
      } else {
        monitorWindowBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public Builder mergeMonitorWindow(com.google.protobuf.Duration value) {
      if (monitorWindowBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && monitorWindow_ != null
            && monitorWindow_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getMonitorWindowBuilder().mergeFrom(value);
        } else {
          monitorWindow_ = value;
        }
      } else {
        monitorWindowBuilder_.mergeFrom(value);
      }
      if (monitorWindow_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public Builder clearMonitorWindow() {
      bitField0_ = (bitField0_ & ~0x00000002);
      monitorWindow_ = null;
      if (monitorWindowBuilder_ != null) {
        monitorWindowBuilder_.dispose();
        monitorWindowBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public com.google.protobuf.Duration.Builder getMonitorWindowBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMonitorWindowFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    public com.google.protobuf.DurationOrBuilder getMonitorWindowOrBuilder() {
      if (monitorWindowBuilder_ != null) {
        return monitorWindowBuilder_.getMessageOrBuilder();
      } else {
        return monitorWindow_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : monitorWindow_;
      }
    }
    /**
     *
     *
     * <pre>
     * The time window of the prediction data being included in each prediction
     * dataset. This window specifies how long the data should be collected from
     * historical model results for each run. If not set,
     * [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
     * will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
     * the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
     * 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
     * monitoring statistics.
     * </pre>
     *
     * <code>.google.protobuf.Duration monitor_window = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        getMonitorWindowFieldBuilder() {
      if (monitorWindowBuilder_ == null) {
        monitorWindowBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration,
                com.google.protobuf.Duration.Builder,
                com.google.protobuf.DurationOrBuilder>(
                getMonitorWindow(), getParentForChildren(), isClean());
        monitorWindow_ = null;
      }
      return monitorWindowBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig)
  private static final com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig();
  }

  public static com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ModelDeploymentMonitoringScheduleConfig> PARSER =
      new com.google.protobuf.AbstractParser<ModelDeploymentMonitoringScheduleConfig>() {
        @java.lang.Override
        public ModelDeploymentMonitoringScheduleConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ModelDeploymentMonitoringScheduleConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ModelDeploymentMonitoringScheduleConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
