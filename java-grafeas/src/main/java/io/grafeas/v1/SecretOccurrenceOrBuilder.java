/*
 * Copyright 2025 The Grafeas Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grafeas/v1/secret.proto

// Protobuf Java Version: 3.25.5
package io.grafeas.v1;

public interface SecretOccurrenceOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:grafeas.v1.SecretOccurrence)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Type of secret.
   * </pre>
   *
   * <code>.grafeas.v1.SecretKind kind = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The enum numeric value on the wire for kind.
   */
  int getKindValue();

  /**
   *
   *
   * <pre>
   * Type of secret.
   * </pre>
   *
   * <code>.grafeas.v1.SecretKind kind = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The kind.
   */
  io.grafeas.v1.SecretKind getKind();

  /**
   *
   *
   * <pre>
   * Locations where the secret is detected.
   * </pre>
   *
   * <code>
   * repeated .grafeas.v1.SecretLocation locations = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<io.grafeas.v1.SecretLocation> getLocationsList();

  /**
   *
   *
   * <pre>
   * Locations where the secret is detected.
   * </pre>
   *
   * <code>
   * repeated .grafeas.v1.SecretLocation locations = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  io.grafeas.v1.SecretLocation getLocations(int index);

  /**
   *
   *
   * <pre>
   * Locations where the secret is detected.
   * </pre>
   *
   * <code>
   * repeated .grafeas.v1.SecretLocation locations = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getLocationsCount();

  /**
   *
   *
   * <pre>
   * Locations where the secret is detected.
   * </pre>
   *
   * <code>
   * repeated .grafeas.v1.SecretLocation locations = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<? extends io.grafeas.v1.SecretLocationOrBuilder> getLocationsOrBuilderList();

  /**
   *
   *
   * <pre>
   * Locations where the secret is detected.
   * </pre>
   *
   * <code>
   * repeated .grafeas.v1.SecretLocation locations = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  io.grafeas.v1.SecretLocationOrBuilder getLocationsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Status of the secret.
   * </pre>
   *
   * <code>repeated .grafeas.v1.SecretStatus statuses = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<io.grafeas.v1.SecretStatus> getStatusesList();

  /**
   *
   *
   * <pre>
   * Status of the secret.
   * </pre>
   *
   * <code>repeated .grafeas.v1.SecretStatus statuses = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  io.grafeas.v1.SecretStatus getStatuses(int index);

  /**
   *
   *
   * <pre>
   * Status of the secret.
   * </pre>
   *
   * <code>repeated .grafeas.v1.SecretStatus statuses = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getStatusesCount();

  /**
   *
   *
   * <pre>
   * Status of the secret.
   * </pre>
   *
   * <code>repeated .grafeas.v1.SecretStatus statuses = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<? extends io.grafeas.v1.SecretStatusOrBuilder> getStatusesOrBuilderList();

  /**
   *
   *
   * <pre>
   * Status of the secret.
   * </pre>
   *
   * <code>repeated .grafeas.v1.SecretStatus statuses = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  io.grafeas.v1.SecretStatusOrBuilder getStatusesOrBuilder(int index);
}
