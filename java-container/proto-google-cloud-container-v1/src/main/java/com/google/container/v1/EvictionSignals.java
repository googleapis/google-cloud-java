/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

// Protobuf Java Version: 3.25.8
package com.google.container.v1;

/**
 *
 *
 * <pre>
 * Eviction signals are the current state of a particular resource at a specific
 * point in time. The kubelet uses eviction signals to make eviction decisions
 * by comparing the signals to eviction thresholds, which are the minimum amount
 * of the resource that should be available on the node.
 * </pre>
 *
 * Protobuf type {@code google.container.v1.EvictionSignals}
 */
public final class EvictionSignals extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.container.v1.EvictionSignals)
    EvictionSignalsOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use EvictionSignals.newBuilder() to construct.
  private EvictionSignals(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private EvictionSignals() {
    memoryAvailable_ = "";
    nodefsAvailable_ = "";
    nodefsInodesFree_ = "";
    imagefsAvailable_ = "";
    imagefsInodesFree_ = "";
    pidAvailable_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new EvictionSignals();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.container.v1.ClusterServiceProto
        .internal_static_google_container_v1_EvictionSignals_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.container.v1.ClusterServiceProto
        .internal_static_google_container_v1_EvictionSignals_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.container.v1.EvictionSignals.class,
            com.google.container.v1.EvictionSignals.Builder.class);
  }

  public static final int MEMORY_AVAILABLE_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object memoryAvailable_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
   * the amount of "memory.available" signal in kubelet. Default is unset, if
   * not specified in the kubelet config. Format: positive number + unit, e.g.
   * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
   * of the node's memory. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The memoryAvailable.
   */
  @java.lang.Override
  public java.lang.String getMemoryAvailable() {
    java.lang.Object ref = memoryAvailable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      memoryAvailable_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
   * the amount of "memory.available" signal in kubelet. Default is unset, if
   * not specified in the kubelet config. Format: positive number + unit, e.g.
   * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
   * of the node's memory. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for memoryAvailable.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getMemoryAvailableBytes() {
    java.lang.Object ref = memoryAvailable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      memoryAvailable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NODEFS_AVAILABLE_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object nodefsAvailable_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Amount of storage available on filesystem that kubelet uses for
   * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
   * in kubelet. Default is unset, if not specified in the kubelet config. It
   * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
   * &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The nodefsAvailable.
   */
  @java.lang.Override
  public java.lang.String getNodefsAvailable() {
    java.lang.Object ref = nodefsAvailable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nodefsAvailable_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Amount of storage available on filesystem that kubelet uses for
   * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
   * in kubelet. Default is unset, if not specified in the kubelet config. It
   * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
   * &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for nodefsAvailable.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNodefsAvailableBytes() {
    java.lang.Object ref = nodefsAvailable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      nodefsAvailable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NODEFS_INODES_FREE_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object nodefsInodesFree_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Amount of inodes available on filesystem that kubelet uses for
   * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
   * in kubelet. Default is unset, if not specified in the kubelet config. Linux
   * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
   * 5% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The nodefsInodesFree.
   */
  @java.lang.Override
  public java.lang.String getNodefsInodesFree() {
    java.lang.Object ref = nodefsInodesFree_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nodefsInodesFree_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Amount of inodes available on filesystem that kubelet uses for
   * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
   * in kubelet. Default is unset, if not specified in the kubelet config. Linux
   * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
   * 5% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for nodefsInodesFree.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNodefsInodesFreeBytes() {
    java.lang.Object ref = nodefsInodesFree_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      nodefsInodesFree_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IMAGEFS_AVAILABLE_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object imagefsAvailable_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Amount of storage available on filesystem that container runtime
   * uses for storing images layers. If the container filesystem and image
   * filesystem are not separate, then imagefs can store both image layers and
   * writeable layers. Defines the amount of "imagefs.available" signal in
   * kubelet. Default is unset, if not specified in the kubelet config. It
   * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
   * &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The imagefsAvailable.
   */
  @java.lang.Override
  public java.lang.String getImagefsAvailable() {
    java.lang.Object ref = imagefsAvailable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      imagefsAvailable_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Amount of storage available on filesystem that container runtime
   * uses for storing images layers. If the container filesystem and image
   * filesystem are not separate, then imagefs can store both image layers and
   * writeable layers. Defines the amount of "imagefs.available" signal in
   * kubelet. Default is unset, if not specified in the kubelet config. It
   * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
   * &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for imagefsAvailable.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getImagefsAvailableBytes() {
    java.lang.Object ref = imagefsAvailable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      imagefsAvailable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IMAGEFS_INODES_FREE_FIELD_NUMBER = 5;

  @SuppressWarnings("serial")
  private volatile java.lang.Object imagefsInodesFree_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Amount of inodes available on filesystem that container runtime
   * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
   * signal in kubelet. Default is unset, if not specified in the kubelet
   * config. Linux only. It takses percentage value for now. Sample format:
   * "30%". Must be &gt;= 5% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The imagefsInodesFree.
   */
  @java.lang.Override
  public java.lang.String getImagefsInodesFree() {
    java.lang.Object ref = imagefsInodesFree_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      imagefsInodesFree_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Amount of inodes available on filesystem that container runtime
   * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
   * signal in kubelet. Default is unset, if not specified in the kubelet
   * config. Linux only. It takses percentage value for now. Sample format:
   * "30%". Must be &gt;= 5% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for imagefsInodesFree.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getImagefsInodesFreeBytes() {
    java.lang.Object ref = imagefsInodesFree_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      imagefsInodesFree_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PID_AVAILABLE_FIELD_NUMBER = 6;

  @SuppressWarnings("serial")
  private volatile java.lang.Object pidAvailable_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Amount of PID available for pod allocation. Defines the amount of
   * "pid.available" signal in kubelet. Default is unset, if not specified in
   * the kubelet config. It takses percentage value for now. Sample format:
   * "30%". Must be &gt;= 10% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The pidAvailable.
   */
  @java.lang.Override
  public java.lang.String getPidAvailable() {
    java.lang.Object ref = pidAvailable_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pidAvailable_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Amount of PID available for pod allocation. Defines the amount of
   * "pid.available" signal in kubelet. Default is unset, if not specified in
   * the kubelet config. It takses percentage value for now. Sample format:
   * "30%". Must be &gt;= 10% and &lt;= 50%. See
   * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
   * </pre>
   *
   * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for pidAvailable.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPidAvailableBytes() {
    java.lang.Object ref = pidAvailable_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      pidAvailable_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(memoryAvailable_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, memoryAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodefsAvailable_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, nodefsAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodefsInodesFree_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, nodefsInodesFree_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(imagefsAvailable_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, imagefsAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(imagefsInodesFree_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, imagefsInodesFree_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pidAvailable_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, pidAvailable_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(memoryAvailable_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, memoryAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodefsAvailable_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, nodefsAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodefsInodesFree_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, nodefsInodesFree_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(imagefsAvailable_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, imagefsAvailable_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(imagefsInodesFree_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, imagefsInodesFree_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pidAvailable_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, pidAvailable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.container.v1.EvictionSignals)) {
      return super.equals(obj);
    }
    com.google.container.v1.EvictionSignals other = (com.google.container.v1.EvictionSignals) obj;

    if (!getMemoryAvailable().equals(other.getMemoryAvailable())) return false;
    if (!getNodefsAvailable().equals(other.getNodefsAvailable())) return false;
    if (!getNodefsInodesFree().equals(other.getNodefsInodesFree())) return false;
    if (!getImagefsAvailable().equals(other.getImagefsAvailable())) return false;
    if (!getImagefsInodesFree().equals(other.getImagefsInodesFree())) return false;
    if (!getPidAvailable().equals(other.getPidAvailable())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MEMORY_AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + getMemoryAvailable().hashCode();
    hash = (37 * hash) + NODEFS_AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + getNodefsAvailable().hashCode();
    hash = (37 * hash) + NODEFS_INODES_FREE_FIELD_NUMBER;
    hash = (53 * hash) + getNodefsInodesFree().hashCode();
    hash = (37 * hash) + IMAGEFS_AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + getImagefsAvailable().hashCode();
    hash = (37 * hash) + IMAGEFS_INODES_FREE_FIELD_NUMBER;
    hash = (53 * hash) + getImagefsInodesFree().hashCode();
    hash = (37 * hash) + PID_AVAILABLE_FIELD_NUMBER;
    hash = (53 * hash) + getPidAvailable().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.container.v1.EvictionSignals parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.container.v1.EvictionSignals parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.container.v1.EvictionSignals parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.container.v1.EvictionSignals parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.container.v1.EvictionSignals prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * Eviction signals are the current state of a particular resource at a specific
   * point in time. The kubelet uses eviction signals to make eviction decisions
   * by comparing the signals to eviction thresholds, which are the minimum amount
   * of the resource that should be available on the node.
   * </pre>
   *
   * Protobuf type {@code google.container.v1.EvictionSignals}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.container.v1.EvictionSignals)
      com.google.container.v1.EvictionSignalsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_EvictionSignals_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_EvictionSignals_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.container.v1.EvictionSignals.class,
              com.google.container.v1.EvictionSignals.Builder.class);
    }

    // Construct using com.google.container.v1.EvictionSignals.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      memoryAvailable_ = "";
      nodefsAvailable_ = "";
      nodefsInodesFree_ = "";
      imagefsAvailable_ = "";
      imagefsInodesFree_ = "";
      pidAvailable_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_EvictionSignals_descriptor;
    }

    @java.lang.Override
    public com.google.container.v1.EvictionSignals getDefaultInstanceForType() {
      return com.google.container.v1.EvictionSignals.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.container.v1.EvictionSignals build() {
      com.google.container.v1.EvictionSignals result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.container.v1.EvictionSignals buildPartial() {
      com.google.container.v1.EvictionSignals result =
          new com.google.container.v1.EvictionSignals(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.container.v1.EvictionSignals result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.memoryAvailable_ = memoryAvailable_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nodefsAvailable_ = nodefsAvailable_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.nodefsInodesFree_ = nodefsInodesFree_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.imagefsAvailable_ = imagefsAvailable_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.imagefsInodesFree_ = imagefsInodesFree_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.pidAvailable_ = pidAvailable_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.container.v1.EvictionSignals) {
        return mergeFrom((com.google.container.v1.EvictionSignals) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.container.v1.EvictionSignals other) {
      if (other == com.google.container.v1.EvictionSignals.getDefaultInstance()) return this;
      if (!other.getMemoryAvailable().isEmpty()) {
        memoryAvailable_ = other.memoryAvailable_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getNodefsAvailable().isEmpty()) {
        nodefsAvailable_ = other.nodefsAvailable_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getNodefsInodesFree().isEmpty()) {
        nodefsInodesFree_ = other.nodefsInodesFree_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getImagefsAvailable().isEmpty()) {
        imagefsAvailable_ = other.imagefsAvailable_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (!other.getImagefsInodesFree().isEmpty()) {
        imagefsInodesFree_ = other.imagefsInodesFree_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (!other.getPidAvailable().isEmpty()) {
        pidAvailable_ = other.pidAvailable_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                memoryAvailable_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                nodefsAvailable_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                nodefsInodesFree_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                imagefsAvailable_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                imagefsInodesFree_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                pidAvailable_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object memoryAvailable_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
     * the amount of "memory.available" signal in kubelet. Default is unset, if
     * not specified in the kubelet config. Format: positive number + unit, e.g.
     * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
     * of the node's memory. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The memoryAvailable.
     */
    public java.lang.String getMemoryAvailable() {
      java.lang.Object ref = memoryAvailable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        memoryAvailable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
     * the amount of "memory.available" signal in kubelet. Default is unset, if
     * not specified in the kubelet config. Format: positive number + unit, e.g.
     * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
     * of the node's memory. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for memoryAvailable.
     */
    public com.google.protobuf.ByteString getMemoryAvailableBytes() {
      java.lang.Object ref = memoryAvailable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        memoryAvailable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
     * the amount of "memory.available" signal in kubelet. Default is unset, if
     * not specified in the kubelet config. Format: positive number + unit, e.g.
     * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
     * of the node's memory. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The memoryAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setMemoryAvailable(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      memoryAvailable_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
     * the amount of "memory.available" signal in kubelet. Default is unset, if
     * not specified in the kubelet config. Format: positive number + unit, e.g.
     * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
     * of the node's memory. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMemoryAvailable() {
      memoryAvailable_ = getDefaultInstance().getMemoryAvailable();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Memory available (i.e. capacity - workingSet), in bytes. Defines
     * the amount of "memory.available" signal in kubelet. Default is unset, if
     * not specified in the kubelet config. Format: positive number + unit, e.g.
     * 100Ki, 10Mi, 5Gi. Valid units are Ki, Mi, Gi. Must be &gt;= 100Mi and &lt;= 50%
     * of the node's memory. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string memory_available = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for memoryAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setMemoryAvailableBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      memoryAvailable_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object nodefsAvailable_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The nodefsAvailable.
     */
    public java.lang.String getNodefsAvailable() {
      java.lang.Object ref = nodefsAvailable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodefsAvailable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for nodefsAvailable.
     */
    public com.google.protobuf.ByteString getNodefsAvailableBytes() {
      java.lang.Object ref = nodefsAvailable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        nodefsAvailable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The nodefsAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setNodefsAvailable(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      nodefsAvailable_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearNodefsAvailable() {
      nodefsAvailable_ = getDefaultInstance().getNodefsAvailable();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.available" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 10% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_available = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for nodefsAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setNodefsAvailableBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      nodefsAvailable_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object nodefsInodesFree_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. Linux
     * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
     * 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The nodefsInodesFree.
     */
    public java.lang.String getNodefsInodesFree() {
      java.lang.Object ref = nodefsInodesFree_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodefsInodesFree_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. Linux
     * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
     * 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for nodefsInodesFree.
     */
    public com.google.protobuf.ByteString getNodefsInodesFreeBytes() {
      java.lang.Object ref = nodefsInodesFree_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        nodefsInodesFree_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. Linux
     * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
     * 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The nodefsInodesFree to set.
     * @return This builder for chaining.
     */
    public Builder setNodefsInodesFree(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      nodefsInodesFree_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. Linux
     * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
     * 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearNodefsInodesFree() {
      nodefsInodesFree_ = getDefaultInstance().getNodefsInodesFree();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that kubelet uses for
     * volumes, daemon logs, etc. Defines the amount of "nodefs.inodesFree" signal
     * in kubelet. Default is unset, if not specified in the kubelet config. Linux
     * only. It takses percentage value for now. Sample format: "30%". Must be &gt;=
     * 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string nodefs_inodes_free = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for nodefsInodesFree to set.
     * @return This builder for chaining.
     */
    public Builder setNodefsInodesFreeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      nodefsInodesFree_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object imagefsAvailable_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that container runtime
     * uses for storing images layers. If the container filesystem and image
     * filesystem are not separate, then imagefs can store both image layers and
     * writeable layers. Defines the amount of "imagefs.available" signal in
     * kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The imagefsAvailable.
     */
    public java.lang.String getImagefsAvailable() {
      java.lang.Object ref = imagefsAvailable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        imagefsAvailable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that container runtime
     * uses for storing images layers. If the container filesystem and image
     * filesystem are not separate, then imagefs can store both image layers and
     * writeable layers. Defines the amount of "imagefs.available" signal in
     * kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for imagefsAvailable.
     */
    public com.google.protobuf.ByteString getImagefsAvailableBytes() {
      java.lang.Object ref = imagefsAvailable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        imagefsAvailable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that container runtime
     * uses for storing images layers. If the container filesystem and image
     * filesystem are not separate, then imagefs can store both image layers and
     * writeable layers. Defines the amount of "imagefs.available" signal in
     * kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The imagefsAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setImagefsAvailable(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      imagefsAvailable_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that container runtime
     * uses for storing images layers. If the container filesystem and image
     * filesystem are not separate, then imagefs can store both image layers and
     * writeable layers. Defines the amount of "imagefs.available" signal in
     * kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearImagefsAvailable() {
      imagefsAvailable_ = getDefaultInstance().getImagefsAvailable();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of storage available on filesystem that container runtime
     * uses for storing images layers. If the container filesystem and image
     * filesystem are not separate, then imagefs can store both image layers and
     * writeable layers. Defines the amount of "imagefs.available" signal in
     * kubelet. Default is unset, if not specified in the kubelet config. It
     * takses percentage value for now. Sample format: "30%". Must be &gt;= 15% and
     * &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_available = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for imagefsAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setImagefsAvailableBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      imagefsAvailable_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private java.lang.Object imagefsInodesFree_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that container runtime
     * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
     * signal in kubelet. Default is unset, if not specified in the kubelet
     * config. Linux only. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The imagefsInodesFree.
     */
    public java.lang.String getImagefsInodesFree() {
      java.lang.Object ref = imagefsInodesFree_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        imagefsInodesFree_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that container runtime
     * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
     * signal in kubelet. Default is unset, if not specified in the kubelet
     * config. Linux only. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for imagefsInodesFree.
     */
    public com.google.protobuf.ByteString getImagefsInodesFreeBytes() {
      java.lang.Object ref = imagefsInodesFree_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        imagefsInodesFree_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that container runtime
     * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
     * signal in kubelet. Default is unset, if not specified in the kubelet
     * config. Linux only. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The imagefsInodesFree to set.
     * @return This builder for chaining.
     */
    public Builder setImagefsInodesFree(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      imagefsInodesFree_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that container runtime
     * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
     * signal in kubelet. Default is unset, if not specified in the kubelet
     * config. Linux only. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearImagefsInodesFree() {
      imagefsInodesFree_ = getDefaultInstance().getImagefsInodesFree();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of inodes available on filesystem that container runtime
     * uses for storing images layers. Defines the amount of "imagefs.inodesFree"
     * signal in kubelet. Default is unset, if not specified in the kubelet
     * config. Linux only. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 5% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string imagefs_inodes_free = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for imagefsInodesFree to set.
     * @return This builder for chaining.
     */
    public Builder setImagefsInodesFreeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      imagefsInodesFree_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object pidAvailable_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Amount of PID available for pod allocation. Defines the amount of
     * "pid.available" signal in kubelet. Default is unset, if not specified in
     * the kubelet config. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 10% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The pidAvailable.
     */
    public java.lang.String getPidAvailable() {
      java.lang.Object ref = pidAvailable_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pidAvailable_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of PID available for pod allocation. Defines the amount of
     * "pid.available" signal in kubelet. Default is unset, if not specified in
     * the kubelet config. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 10% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for pidAvailable.
     */
    public com.google.protobuf.ByteString getPidAvailableBytes() {
      java.lang.Object ref = pidAvailable_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        pidAvailable_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of PID available for pod allocation. Defines the amount of
     * "pid.available" signal in kubelet. Default is unset, if not specified in
     * the kubelet config. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 10% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The pidAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setPidAvailable(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      pidAvailable_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of PID available for pod allocation. Defines the amount of
     * "pid.available" signal in kubelet. Default is unset, if not specified in
     * the kubelet config. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 10% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPidAvailable() {
      pidAvailable_ = getDefaultInstance().getPidAvailable();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Amount of PID available for pod allocation. Defines the amount of
     * "pid.available" signal in kubelet. Default is unset, if not specified in
     * the kubelet config. It takses percentage value for now. Sample format:
     * "30%". Must be &gt;= 10% and &lt;= 50%. See
     * https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/#eviction-signals
     * </pre>
     *
     * <code>string pid_available = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for pidAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setPidAvailableBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      pidAvailable_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.container.v1.EvictionSignals)
  }

  // @@protoc_insertion_point(class_scope:google.container.v1.EvictionSignals)
  private static final com.google.container.v1.EvictionSignals DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.container.v1.EvictionSignals();
  }

  public static com.google.container.v1.EvictionSignals getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EvictionSignals> PARSER =
      new com.google.protobuf.AbstractParser<EvictionSignals>() {
        @java.lang.Override
        public EvictionSignals parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<EvictionSignals> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EvictionSignals> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.container.v1.EvictionSignals getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
