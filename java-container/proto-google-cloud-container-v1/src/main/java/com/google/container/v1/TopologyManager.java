/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

// Protobuf Java Version: 3.25.8
package com.google.container.v1;

/**
 *
 *
 * <pre>
 * TopologyManager defines the configuration options for Topology Manager
 * feature. See
 * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/
 * </pre>
 *
 * Protobuf type {@code google.container.v1.TopologyManager}
 */
public final class TopologyManager extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.container.v1.TopologyManager)
    TopologyManagerOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use TopologyManager.newBuilder() to construct.
  private TopologyManager(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private TopologyManager() {
    policy_ = "";
    scope_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new TopologyManager();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.container.v1.ClusterServiceProto
        .internal_static_google_container_v1_TopologyManager_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.container.v1.ClusterServiceProto
        .internal_static_google_container_v1_TopologyManager_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.container.v1.TopologyManager.class,
            com.google.container.v1.TopologyManager.Builder.class);
  }

  public static final int POLICY_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object policy_ = "";

  /**
   *
   *
   * <pre>
   * Configures the strategy for resource alignment.
   * Allowed values are:
   *
   * * none: the default policy, and does not perform any topology alignment.
   * * restricted: the topology manager stores the preferred NUMA node affinity
   * for the container, and will reject the pod if the affinity if not
   * preferred.
   * * best-effort: the topology manager stores the preferred NUMA node affinity
   * for the container. If the affinity is not preferred, the topology manager
   * will admit the pod to the node anyway.
   * * single-numa-node: the topology manager determines if the single NUMA node
   * affinity is possible. If it is, Topology Manager will store this and the
   * Hint Providers can then use this information when making the resource
   * allocation decision. If, however, this is not possible then the
   * Topology Manager will reject the pod from the node. This will result in a
   * pod in a Terminated state with a pod admission failure.
   *
   * The default policy value is 'none' if unspecified.
   * Details about each strategy can be found
   * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
   * </pre>
   *
   * <code>string policy = 1;</code>
   *
   * @return The policy.
   */
  @java.lang.Override
  public java.lang.String getPolicy() {
    java.lang.Object ref = policy_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      policy_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Configures the strategy for resource alignment.
   * Allowed values are:
   *
   * * none: the default policy, and does not perform any topology alignment.
   * * restricted: the topology manager stores the preferred NUMA node affinity
   * for the container, and will reject the pod if the affinity if not
   * preferred.
   * * best-effort: the topology manager stores the preferred NUMA node affinity
   * for the container. If the affinity is not preferred, the topology manager
   * will admit the pod to the node anyway.
   * * single-numa-node: the topology manager determines if the single NUMA node
   * affinity is possible. If it is, Topology Manager will store this and the
   * Hint Providers can then use this information when making the resource
   * allocation decision. If, however, this is not possible then the
   * Topology Manager will reject the pod from the node. This will result in a
   * pod in a Terminated state with a pod admission failure.
   *
   * The default policy value is 'none' if unspecified.
   * Details about each strategy can be found
   * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
   * </pre>
   *
   * <code>string policy = 1;</code>
   *
   * @return The bytes for policy.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPolicyBytes() {
    java.lang.Object ref = policy_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      policy_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SCOPE_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object scope_ = "";

  /**
   *
   *
   * <pre>
   * The Topology Manager aligns resources in following scopes:
   *
   * * container
   * * pod
   *
   * The default scope is 'container' if unspecified.
   * See
   * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
   * </pre>
   *
   * <code>string scope = 2;</code>
   *
   * @return The scope.
   */
  @java.lang.Override
  public java.lang.String getScope() {
    java.lang.Object ref = scope_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      scope_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * The Topology Manager aligns resources in following scopes:
   *
   * * container
   * * pod
   *
   * The default scope is 'container' if unspecified.
   * See
   * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
   * </pre>
   *
   * <code>string scope = 2;</code>
   *
   * @return The bytes for scope.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getScopeBytes() {
    java.lang.Object ref = scope_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      scope_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policy_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, policy_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(scope_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, scope_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policy_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, policy_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(scope_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, scope_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.container.v1.TopologyManager)) {
      return super.equals(obj);
    }
    com.google.container.v1.TopologyManager other = (com.google.container.v1.TopologyManager) obj;

    if (!getPolicy().equals(other.getPolicy())) return false;
    if (!getScope().equals(other.getScope())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + POLICY_FIELD_NUMBER;
    hash = (53 * hash) + getPolicy().hashCode();
    hash = (37 * hash) + SCOPE_FIELD_NUMBER;
    hash = (53 * hash) + getScope().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.container.v1.TopologyManager parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.TopologyManager parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.container.v1.TopologyManager parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.container.v1.TopologyManager parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.container.v1.TopologyManager parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.container.v1.TopologyManager parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.container.v1.TopologyManager prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * TopologyManager defines the configuration options for Topology Manager
   * feature. See
   * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/
   * </pre>
   *
   * Protobuf type {@code google.container.v1.TopologyManager}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.container.v1.TopologyManager)
      com.google.container.v1.TopologyManagerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_TopologyManager_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_TopologyManager_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.container.v1.TopologyManager.class,
              com.google.container.v1.TopologyManager.Builder.class);
    }

    // Construct using com.google.container.v1.TopologyManager.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      policy_ = "";
      scope_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.container.v1.ClusterServiceProto
          .internal_static_google_container_v1_TopologyManager_descriptor;
    }

    @java.lang.Override
    public com.google.container.v1.TopologyManager getDefaultInstanceForType() {
      return com.google.container.v1.TopologyManager.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.container.v1.TopologyManager build() {
      com.google.container.v1.TopologyManager result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.container.v1.TopologyManager buildPartial() {
      com.google.container.v1.TopologyManager result =
          new com.google.container.v1.TopologyManager(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.container.v1.TopologyManager result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.policy_ = policy_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.scope_ = scope_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.container.v1.TopologyManager) {
        return mergeFrom((com.google.container.v1.TopologyManager) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.container.v1.TopologyManager other) {
      if (other == com.google.container.v1.TopologyManager.getDefaultInstance()) return this;
      if (!other.getPolicy().isEmpty()) {
        policy_ = other.policy_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getScope().isEmpty()) {
        scope_ = other.scope_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                policy_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                scope_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object policy_ = "";

    /**
     *
     *
     * <pre>
     * Configures the strategy for resource alignment.
     * Allowed values are:
     *
     * * none: the default policy, and does not perform any topology alignment.
     * * restricted: the topology manager stores the preferred NUMA node affinity
     * for the container, and will reject the pod if the affinity if not
     * preferred.
     * * best-effort: the topology manager stores the preferred NUMA node affinity
     * for the container. If the affinity is not preferred, the topology manager
     * will admit the pod to the node anyway.
     * * single-numa-node: the topology manager determines if the single NUMA node
     * affinity is possible. If it is, Topology Manager will store this and the
     * Hint Providers can then use this information when making the resource
     * allocation decision. If, however, this is not possible then the
     * Topology Manager will reject the pod from the node. This will result in a
     * pod in a Terminated state with a pod admission failure.
     *
     * The default policy value is 'none' if unspecified.
     * Details about each strategy can be found
     * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
     * </pre>
     *
     * <code>string policy = 1;</code>
     *
     * @return The policy.
     */
    public java.lang.String getPolicy() {
      java.lang.Object ref = policy_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        policy_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Configures the strategy for resource alignment.
     * Allowed values are:
     *
     * * none: the default policy, and does not perform any topology alignment.
     * * restricted: the topology manager stores the preferred NUMA node affinity
     * for the container, and will reject the pod if the affinity if not
     * preferred.
     * * best-effort: the topology manager stores the preferred NUMA node affinity
     * for the container. If the affinity is not preferred, the topology manager
     * will admit the pod to the node anyway.
     * * single-numa-node: the topology manager determines if the single NUMA node
     * affinity is possible. If it is, Topology Manager will store this and the
     * Hint Providers can then use this information when making the resource
     * allocation decision. If, however, this is not possible then the
     * Topology Manager will reject the pod from the node. This will result in a
     * pod in a Terminated state with a pod admission failure.
     *
     * The default policy value is 'none' if unspecified.
     * Details about each strategy can be found
     * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
     * </pre>
     *
     * <code>string policy = 1;</code>
     *
     * @return The bytes for policy.
     */
    public com.google.protobuf.ByteString getPolicyBytes() {
      java.lang.Object ref = policy_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        policy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Configures the strategy for resource alignment.
     * Allowed values are:
     *
     * * none: the default policy, and does not perform any topology alignment.
     * * restricted: the topology manager stores the preferred NUMA node affinity
     * for the container, and will reject the pod if the affinity if not
     * preferred.
     * * best-effort: the topology manager stores the preferred NUMA node affinity
     * for the container. If the affinity is not preferred, the topology manager
     * will admit the pod to the node anyway.
     * * single-numa-node: the topology manager determines if the single NUMA node
     * affinity is possible. If it is, Topology Manager will store this and the
     * Hint Providers can then use this information when making the resource
     * allocation decision. If, however, this is not possible then the
     * Topology Manager will reject the pod from the node. This will result in a
     * pod in a Terminated state with a pod admission failure.
     *
     * The default policy value is 'none' if unspecified.
     * Details about each strategy can be found
     * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
     * </pre>
     *
     * <code>string policy = 1;</code>
     *
     * @param value The policy to set.
     * @return This builder for chaining.
     */
    public Builder setPolicy(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      policy_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Configures the strategy for resource alignment.
     * Allowed values are:
     *
     * * none: the default policy, and does not perform any topology alignment.
     * * restricted: the topology manager stores the preferred NUMA node affinity
     * for the container, and will reject the pod if the affinity if not
     * preferred.
     * * best-effort: the topology manager stores the preferred NUMA node affinity
     * for the container. If the affinity is not preferred, the topology manager
     * will admit the pod to the node anyway.
     * * single-numa-node: the topology manager determines if the single NUMA node
     * affinity is possible. If it is, Topology Manager will store this and the
     * Hint Providers can then use this information when making the resource
     * allocation decision. If, however, this is not possible then the
     * Topology Manager will reject the pod from the node. This will result in a
     * pod in a Terminated state with a pod admission failure.
     *
     * The default policy value is 'none' if unspecified.
     * Details about each strategy can be found
     * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
     * </pre>
     *
     * <code>string policy = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPolicy() {
      policy_ = getDefaultInstance().getPolicy();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Configures the strategy for resource alignment.
     * Allowed values are:
     *
     * * none: the default policy, and does not perform any topology alignment.
     * * restricted: the topology manager stores the preferred NUMA node affinity
     * for the container, and will reject the pod if the affinity if not
     * preferred.
     * * best-effort: the topology manager stores the preferred NUMA node affinity
     * for the container. If the affinity is not preferred, the topology manager
     * will admit the pod to the node anyway.
     * * single-numa-node: the topology manager determines if the single NUMA node
     * affinity is possible. If it is, Topology Manager will store this and the
     * Hint Providers can then use this information when making the resource
     * allocation decision. If, however, this is not possible then the
     * Topology Manager will reject the pod from the node. This will result in a
     * pod in a Terminated state with a pod admission failure.
     *
     * The default policy value is 'none' if unspecified.
     * Details about each strategy can be found
     * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-policies).
     * </pre>
     *
     * <code>string policy = 1;</code>
     *
     * @param value The bytes for policy to set.
     * @return This builder for chaining.
     */
    public Builder setPolicyBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      policy_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object scope_ = "";

    /**
     *
     *
     * <pre>
     * The Topology Manager aligns resources in following scopes:
     *
     * * container
     * * pod
     *
     * The default scope is 'container' if unspecified.
     * See
     * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
     * </pre>
     *
     * <code>string scope = 2;</code>
     *
     * @return The scope.
     */
    public java.lang.String getScope() {
      java.lang.Object ref = scope_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        scope_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The Topology Manager aligns resources in following scopes:
     *
     * * container
     * * pod
     *
     * The default scope is 'container' if unspecified.
     * See
     * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
     * </pre>
     *
     * <code>string scope = 2;</code>
     *
     * @return The bytes for scope.
     */
    public com.google.protobuf.ByteString getScopeBytes() {
      java.lang.Object ref = scope_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        scope_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The Topology Manager aligns resources in following scopes:
     *
     * * container
     * * pod
     *
     * The default scope is 'container' if unspecified.
     * See
     * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
     * </pre>
     *
     * <code>string scope = 2;</code>
     *
     * @param value The scope to set.
     * @return This builder for chaining.
     */
    public Builder setScope(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      scope_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The Topology Manager aligns resources in following scopes:
     *
     * * container
     * * pod
     *
     * The default scope is 'container' if unspecified.
     * See
     * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
     * </pre>
     *
     * <code>string scope = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearScope() {
      scope_ = getDefaultInstance().getScope();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The Topology Manager aligns resources in following scopes:
     *
     * * container
     * * pod
     *
     * The default scope is 'container' if unspecified.
     * See
     * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-scopes
     * </pre>
     *
     * <code>string scope = 2;</code>
     *
     * @param value The bytes for scope to set.
     * @return This builder for chaining.
     */
    public Builder setScopeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      scope_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.container.v1.TopologyManager)
  }

  // @@protoc_insertion_point(class_scope:google.container.v1.TopologyManager)
  private static final com.google.container.v1.TopologyManager DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.container.v1.TopologyManager();
  }

  public static com.google.container.v1.TopologyManager getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TopologyManager> PARSER =
      new com.google.protobuf.AbstractParser<TopologyManager>() {
        @java.lang.Override
        public TopologyManager parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<TopologyManager> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TopologyManager> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.container.v1.TopologyManager getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
