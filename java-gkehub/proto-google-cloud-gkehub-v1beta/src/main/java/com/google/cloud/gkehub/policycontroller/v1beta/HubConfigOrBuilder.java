/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/gkehub/policycontroller/v1beta/policycontroller.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.gkehub.policycontroller.v1beta;

public interface HubConfigOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.gkehub.policycontroller.v1beta.HubConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The install_spec represents the intended state specified by the
   * latest request that mutated install_spec in the feature spec,
   * not the lifecycle state of the
   * feature observed by the Hub feature controller
   * that is reported in the feature state.
   * </pre>
   *
   * <code>.google.cloud.gkehub.policycontroller.v1beta.HubConfig.InstallSpec install_spec = 1;
   * </code>
   *
   * @return The enum numeric value on the wire for installSpec.
   */
  int getInstallSpecValue();
  /**
   *
   *
   * <pre>
   * The install_spec represents the intended state specified by the
   * latest request that mutated install_spec in the feature spec,
   * not the lifecycle state of the
   * feature observed by the Hub feature controller
   * that is reported in the feature state.
   * </pre>
   *
   * <code>.google.cloud.gkehub.policycontroller.v1beta.HubConfig.InstallSpec install_spec = 1;
   * </code>
   *
   * @return The installSpec.
   */
  com.google.cloud.gkehub.policycontroller.v1beta.HubConfig.InstallSpec getInstallSpec();

  /**
   *
   *
   * <pre>
   * Sets the interval for Policy Controller Audit Scans (in seconds).
   * When set to 0, this disables audit functionality altogether.
   * </pre>
   *
   * <code>optional int64 audit_interval_seconds = 2;</code>
   *
   * @return Whether the auditIntervalSeconds field is set.
   */
  boolean hasAuditIntervalSeconds();
  /**
   *
   *
   * <pre>
   * Sets the interval for Policy Controller Audit Scans (in seconds).
   * When set to 0, this disables audit functionality altogether.
   * </pre>
   *
   * <code>optional int64 audit_interval_seconds = 2;</code>
   *
   * @return The auditIntervalSeconds.
   */
  long getAuditIntervalSeconds();

  /**
   *
   *
   * <pre>
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   * </pre>
   *
   * <code>repeated string exemptable_namespaces = 3;</code>
   *
   * @return A list containing the exemptableNamespaces.
   */
  java.util.List<java.lang.String> getExemptableNamespacesList();
  /**
   *
   *
   * <pre>
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   * </pre>
   *
   * <code>repeated string exemptable_namespaces = 3;</code>
   *
   * @return The count of exemptableNamespaces.
   */
  int getExemptableNamespacesCount();
  /**
   *
   *
   * <pre>
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   * </pre>
   *
   * <code>repeated string exemptable_namespaces = 3;</code>
   *
   * @param index The index of the element to return.
   * @return The exemptableNamespaces at the given index.
   */
  java.lang.String getExemptableNamespaces(int index);
  /**
   *
   *
   * <pre>
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   * </pre>
   *
   * <code>repeated string exemptable_namespaces = 3;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the exemptableNamespaces at the given index.
   */
  com.google.protobuf.ByteString getExemptableNamespacesBytes(int index);

  /**
   *
   *
   * <pre>
   * Enables the ability to use Constraint Templates that reference to objects
   * other than the object currently being evaluated.
   * </pre>
   *
   * <code>bool referential_rules_enabled = 4;</code>
   *
   * @return The referentialRulesEnabled.
   */
  boolean getReferentialRulesEnabled();

  /**
   *
   *
   * <pre>
   * Logs all denies and dry run failures.
   * </pre>
   *
   * <code>bool log_denies_enabled = 5;</code>
   *
   * @return The logDeniesEnabled.
   */
  boolean getLogDeniesEnabled();

  /**
   *
   *
   * <pre>
   * Enables the ability to mutate resources using Policy Controller.
   * </pre>
   *
   * <code>bool mutation_enabled = 6;</code>
   *
   * @return The mutationEnabled.
   */
  boolean getMutationEnabled();

  /**
   *
   *
   * <pre>
   * Monitoring specifies the configuration of monitoring.
   * </pre>
   *
   * <code>optional .google.cloud.gkehub.policycontroller.v1beta.MonitoringConfig monitoring = 8;
   * </code>
   *
   * @return Whether the monitoring field is set.
   */
  boolean hasMonitoring();
  /**
   *
   *
   * <pre>
   * Monitoring specifies the configuration of monitoring.
   * </pre>
   *
   * <code>optional .google.cloud.gkehub.policycontroller.v1beta.MonitoringConfig monitoring = 8;
   * </code>
   *
   * @return The monitoring.
   */
  com.google.cloud.gkehub.policycontroller.v1beta.MonitoringConfig getMonitoring();
  /**
   *
   *
   * <pre>
   * Monitoring specifies the configuration of monitoring.
   * </pre>
   *
   * <code>optional .google.cloud.gkehub.policycontroller.v1beta.MonitoringConfig monitoring = 8;
   * </code>
   */
  com.google.cloud.gkehub.policycontroller.v1beta.MonitoringConfigOrBuilder
      getMonitoringOrBuilder();

  /**
   *
   *
   * <pre>
   * Specifies the desired policy content on the cluster
   * </pre>
   *
   * <code>
   * optional .google.cloud.gkehub.policycontroller.v1beta.PolicyContentSpec policy_content = 9;
   * </code>
   *
   * @return Whether the policyContent field is set.
   */
  boolean hasPolicyContent();
  /**
   *
   *
   * <pre>
   * Specifies the desired policy content on the cluster
   * </pre>
   *
   * <code>
   * optional .google.cloud.gkehub.policycontroller.v1beta.PolicyContentSpec policy_content = 9;
   * </code>
   *
   * @return The policyContent.
   */
  com.google.cloud.gkehub.policycontroller.v1beta.PolicyContentSpec getPolicyContent();
  /**
   *
   *
   * <pre>
   * Specifies the desired policy content on the cluster
   * </pre>
   *
   * <code>
   * optional .google.cloud.gkehub.policycontroller.v1beta.PolicyContentSpec policy_content = 9;
   * </code>
   */
  com.google.cloud.gkehub.policycontroller.v1beta.PolicyContentSpecOrBuilder
      getPolicyContentOrBuilder();

  /**
   *
   *
   * <pre>
   * The maximum number of audit violations to be stored in a constraint.
   * If not set, the internal default (currently 20) will be used.
   * </pre>
   *
   * <code>optional int64 constraint_violation_limit = 10;</code>
   *
   * @return Whether the constraintViolationLimit field is set.
   */
  boolean hasConstraintViolationLimit();
  /**
   *
   *
   * <pre>
   * The maximum number of audit violations to be stored in a constraint.
   * If not set, the internal default (currently 20) will be used.
   * </pre>
   *
   * <code>optional int64 constraint_violation_limit = 10;</code>
   *
   * @return The constraintViolationLimit.
   */
  long getConstraintViolationLimit();

  /**
   *
   *
   * <pre>
   * Map of deployment configs to deployments ("admission", "audit",
   * "mutation').
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig&gt; deployment_configs = 11;
   * </code>
   */
  int getDeploymentConfigsCount();
  /**
   *
   *
   * <pre>
   * Map of deployment configs to deployments ("admission", "audit",
   * "mutation').
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig&gt; deployment_configs = 11;
   * </code>
   */
  boolean containsDeploymentConfigs(java.lang.String key);
  /** Use {@link #getDeploymentConfigsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<
          java.lang.String,
          com.google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig>
      getDeploymentConfigs();
  /**
   *
   *
   * <pre>
   * Map of deployment configs to deployments ("admission", "audit",
   * "mutation').
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig&gt; deployment_configs = 11;
   * </code>
   */
  java.util.Map<
          java.lang.String,
          com.google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig>
      getDeploymentConfigsMap();
  /**
   *
   *
   * <pre>
   * Map of deployment configs to deployments ("admission", "audit",
   * "mutation').
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig&gt; deployment_configs = 11;
   * </code>
   */
  /* nullable */
  com.google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig
      getDeploymentConfigsOrDefault(
          java.lang.String key,
          /* nullable */
          com.google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig
              defaultValue);
  /**
   *
   *
   * <pre>
   * Map of deployment configs to deployments ("admission", "audit",
   * "mutation').
   * </pre>
   *
   * <code>
   * map&lt;string, .google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig&gt; deployment_configs = 11;
   * </code>
   */
  com.google.cloud.gkehub.policycontroller.v1beta.PolicyControllerDeploymentConfig
      getDeploymentConfigsOrThrow(java.lang.String key);
}
