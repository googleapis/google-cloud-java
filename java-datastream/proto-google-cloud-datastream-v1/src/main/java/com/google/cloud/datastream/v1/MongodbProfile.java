/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/datastream/v1/datastream_resources.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.datastream.v1;

/**
 *
 *
 * <pre>
 * MongoDB profile.
 * </pre>
 *
 * Protobuf type {@code google.cloud.datastream.v1.MongodbProfile}
 */
public final class MongodbProfile extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.datastream.v1.MongodbProfile)
    MongodbProfileOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use MongodbProfile.newBuilder() to construct.
  private MongodbProfile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private MongodbProfile() {
    hostAddresses_ = java.util.Collections.emptyList();
    replicaSet_ = "";
    username_ = "";
    password_ = "";
    secretManagerStoredPassword_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new MongodbProfile();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.datastream.v1.DatastreamResourcesProto
        .internal_static_google_cloud_datastream_v1_MongodbProfile_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.datastream.v1.DatastreamResourcesProto
        .internal_static_google_cloud_datastream_v1_MongodbProfile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.datastream.v1.MongodbProfile.class,
            com.google.cloud.datastream.v1.MongodbProfile.Builder.class);
  }

  private int bitField0_;
  private int mongodbConnectionFormatCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object mongodbConnectionFormat_;

  public enum MongodbConnectionFormatCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SRV_CONNECTION_FORMAT(101),
    STANDARD_CONNECTION_FORMAT(102),
    MONGODBCONNECTIONFORMAT_NOT_SET(0);
    private final int value;

    private MongodbConnectionFormatCase(int value) {
      this.value = value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MongodbConnectionFormatCase valueOf(int value) {
      return forNumber(value);
    }

    public static MongodbConnectionFormatCase forNumber(int value) {
      switch (value) {
        case 101:
          return SRV_CONNECTION_FORMAT;
        case 102:
          return STANDARD_CONNECTION_FORMAT;
        case 0:
          return MONGODBCONNECTIONFORMAT_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public MongodbConnectionFormatCase getMongodbConnectionFormatCase() {
    return MongodbConnectionFormatCase.forNumber(mongodbConnectionFormatCase_);
  }

  public static final int HOST_ADDRESSES_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.datastream.v1.HostAddress> hostAddresses_;

  /**
   *
   *
   * <pre>
   * Required. List of host addresses for a MongoDB cluster.
   * For SRV connection format, this list must contain exactly one DNS host
   * without a port. For Standard connection format, this list must contain all
   * the required hosts in the cluster with their respective ports.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.datastream.v1.HostAddress> getHostAddressesList() {
    return hostAddresses_;
  }

  /**
   *
   *
   * <pre>
   * Required. List of host addresses for a MongoDB cluster.
   * For SRV connection format, this list must contain exactly one DNS host
   * without a port. For Standard connection format, this list must contain all
   * the required hosts in the cluster with their respective ports.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.datastream.v1.HostAddressOrBuilder>
      getHostAddressesOrBuilderList() {
    return hostAddresses_;
  }

  /**
   *
   *
   * <pre>
   * Required. List of host addresses for a MongoDB cluster.
   * For SRV connection format, this list must contain exactly one DNS host
   * without a port. For Standard connection format, this list must contain all
   * the required hosts in the cluster with their respective ports.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public int getHostAddressesCount() {
    return hostAddresses_.size();
  }

  /**
   *
   *
   * <pre>
   * Required. List of host addresses for a MongoDB cluster.
   * For SRV connection format, this list must contain exactly one DNS host
   * without a port. For Standard connection format, this list must contain all
   * the required hosts in the cluster with their respective ports.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.HostAddress getHostAddresses(int index) {
    return hostAddresses_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Required. List of host addresses for a MongoDB cluster.
   * For SRV connection format, this list must contain exactly one DNS host
   * without a port. For Standard connection format, this list must contain all
   * the required hosts in the cluster with their respective ports.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.HostAddressOrBuilder getHostAddressesOrBuilder(int index) {
    return hostAddresses_.get(index);
  }

  public static final int REPLICA_SET_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object replicaSet_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Name of the replica set. Only needed for self hosted replica set
   * type MongoDB cluster. For SRV connection format, this field must be empty.
   * For Standard connection format, this field must be specified.
   * </pre>
   *
   * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The replicaSet.
   */
  @java.lang.Override
  public java.lang.String getReplicaSet() {
    java.lang.Object ref = replicaSet_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      replicaSet_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Name of the replica set. Only needed for self hosted replica set
   * type MongoDB cluster. For SRV connection format, this field must be empty.
   * For Standard connection format, this field must be specified.
   * </pre>
   *
   * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for replicaSet.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getReplicaSetBytes() {
    java.lang.Object ref = replicaSet_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      replicaSet_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USERNAME_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object username_ = "";

  /**
   *
   *
   * <pre>
   * Required. Username for the MongoDB connection.
   * </pre>
   *
   * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The username.
   */
  @java.lang.Override
  public java.lang.String getUsername() {
    java.lang.Object ref = username_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      username_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Required. Username for the MongoDB connection.
   * </pre>
   *
   * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for username.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUsernameBytes() {
    java.lang.Object ref = username_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      username_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PASSWORD_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object password_ = "";

  /**
   *
   *
   * <pre>
   * Optional. Password for the MongoDB connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * </pre>
   *
   * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The password.
   */
  @java.lang.Override
  public java.lang.String getPassword() {
    java.lang.Object ref = password_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      password_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. Password for the MongoDB connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * </pre>
   *
   * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for password.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPasswordBytes() {
    java.lang.Object ref = password_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      password_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SECRET_MANAGER_STORED_PASSWORD_FIELD_NUMBER = 5;

  @SuppressWarnings("serial")
  private volatile java.lang.Object secretManagerStoredPassword_ = "";

  /**
   *
   *
   * <pre>
   * Optional. A reference to a Secret Manager resource name storing the
   * SQLServer connection password. Mutually exclusive with the `password`
   * field.
   * </pre>
   *
   * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The secretManagerStoredPassword.
   */
  @java.lang.Override
  public java.lang.String getSecretManagerStoredPassword() {
    java.lang.Object ref = secretManagerStoredPassword_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      secretManagerStoredPassword_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. A reference to a Secret Manager resource name storing the
   * SQLServer connection password. Mutually exclusive with the `password`
   * field.
   * </pre>
   *
   * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The bytes for secretManagerStoredPassword.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSecretManagerStoredPasswordBytes() {
    java.lang.Object ref = secretManagerStoredPassword_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      secretManagerStoredPassword_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SSL_CONFIG_FIELD_NUMBER = 6;
  private com.google.cloud.datastream.v1.MongodbSslConfig sslConfig_;

  /**
   *
   *
   * <pre>
   * Optional. SSL configuration for the MongoDB connection.
   * </pre>
   *
   * <code>
   * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the sslConfig field is set.
   */
  @java.lang.Override
  public boolean hasSslConfig() {
    return ((bitField0_ & 0x00000001) != 0);
  }

  /**
   *
   *
   * <pre>
   * Optional. SSL configuration for the MongoDB connection.
   * </pre>
   *
   * <code>
   * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The sslConfig.
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.MongodbSslConfig getSslConfig() {
    return sslConfig_ == null
        ? com.google.cloud.datastream.v1.MongodbSslConfig.getDefaultInstance()
        : sslConfig_;
  }

  /**
   *
   *
   * <pre>
   * Optional. SSL configuration for the MongoDB connection.
   * </pre>
   *
   * <code>
   * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.MongodbSslConfigOrBuilder getSslConfigOrBuilder() {
    return sslConfig_ == null
        ? com.google.cloud.datastream.v1.MongodbSslConfig.getDefaultInstance()
        : sslConfig_;
  }

  public static final int SRV_CONNECTION_FORMAT_FIELD_NUMBER = 101;

  /**
   *
   *
   * <pre>
   * Srv connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
   *
   * @return Whether the srvConnectionFormat field is set.
   */
  @java.lang.Override
  public boolean hasSrvConnectionFormat() {
    return mongodbConnectionFormatCase_ == 101;
  }

  /**
   *
   *
   * <pre>
   * Srv connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
   *
   * @return The srvConnectionFormat.
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.SrvConnectionFormat getSrvConnectionFormat() {
    if (mongodbConnectionFormatCase_ == 101) {
      return (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_;
    }
    return com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
  }

  /**
   *
   *
   * <pre>
   * Srv connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.SrvConnectionFormatOrBuilder
      getSrvConnectionFormatOrBuilder() {
    if (mongodbConnectionFormatCase_ == 101) {
      return (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_;
    }
    return com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
  }

  public static final int STANDARD_CONNECTION_FORMAT_FIELD_NUMBER = 102;

  /**
   *
   *
   * <pre>
   * Standard connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
   * </code>
   *
   * @return Whether the standardConnectionFormat field is set.
   */
  @java.lang.Override
  public boolean hasStandardConnectionFormat() {
    return mongodbConnectionFormatCase_ == 102;
  }

  /**
   *
   *
   * <pre>
   * Standard connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
   * </code>
   *
   * @return The standardConnectionFormat.
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.StandardConnectionFormat getStandardConnectionFormat() {
    if (mongodbConnectionFormatCase_ == 102) {
      return (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_;
    }
    return com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
  }

  /**
   *
   *
   * <pre>
   * Standard connection format.
   * </pre>
   *
   * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.datastream.v1.StandardConnectionFormatOrBuilder
      getStandardConnectionFormatOrBuilder() {
    if (mongodbConnectionFormatCase_ == 102) {
      return (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_;
    }
    return com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < hostAddresses_.size(); i++) {
      output.writeMessage(1, hostAddresses_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(replicaSet_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, replicaSet_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(username_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, username_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(password_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, password_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(secretManagerStoredPassword_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, secretManagerStoredPassword_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(6, getSslConfig());
    }
    if (mongodbConnectionFormatCase_ == 101) {
      output.writeMessage(
          101, (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_);
    }
    if (mongodbConnectionFormatCase_ == 102) {
      output.writeMessage(
          102, (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < hostAddresses_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, hostAddresses_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(replicaSet_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, replicaSet_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(username_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, username_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(password_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, password_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(secretManagerStoredPassword_)) {
      size +=
          com.google.protobuf.GeneratedMessageV3.computeStringSize(5, secretManagerStoredPassword_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getSslConfig());
    }
    if (mongodbConnectionFormatCase_ == 101) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              101, (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_);
    }
    if (mongodbConnectionFormatCase_ == 102) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              102,
              (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.datastream.v1.MongodbProfile)) {
      return super.equals(obj);
    }
    com.google.cloud.datastream.v1.MongodbProfile other =
        (com.google.cloud.datastream.v1.MongodbProfile) obj;

    if (!getHostAddressesList().equals(other.getHostAddressesList())) return false;
    if (!getReplicaSet().equals(other.getReplicaSet())) return false;
    if (!getUsername().equals(other.getUsername())) return false;
    if (!getPassword().equals(other.getPassword())) return false;
    if (!getSecretManagerStoredPassword().equals(other.getSecretManagerStoredPassword()))
      return false;
    if (hasSslConfig() != other.hasSslConfig()) return false;
    if (hasSslConfig()) {
      if (!getSslConfig().equals(other.getSslConfig())) return false;
    }
    if (!getMongodbConnectionFormatCase().equals(other.getMongodbConnectionFormatCase()))
      return false;
    switch (mongodbConnectionFormatCase_) {
      case 101:
        if (!getSrvConnectionFormat().equals(other.getSrvConnectionFormat())) return false;
        break;
      case 102:
        if (!getStandardConnectionFormat().equals(other.getStandardConnectionFormat()))
          return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getHostAddressesCount() > 0) {
      hash = (37 * hash) + HOST_ADDRESSES_FIELD_NUMBER;
      hash = (53 * hash) + getHostAddressesList().hashCode();
    }
    hash = (37 * hash) + REPLICA_SET_FIELD_NUMBER;
    hash = (53 * hash) + getReplicaSet().hashCode();
    hash = (37 * hash) + USERNAME_FIELD_NUMBER;
    hash = (53 * hash) + getUsername().hashCode();
    hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
    hash = (53 * hash) + getPassword().hashCode();
    hash = (37 * hash) + SECRET_MANAGER_STORED_PASSWORD_FIELD_NUMBER;
    hash = (53 * hash) + getSecretManagerStoredPassword().hashCode();
    if (hasSslConfig()) {
      hash = (37 * hash) + SSL_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getSslConfig().hashCode();
    }
    switch (mongodbConnectionFormatCase_) {
      case 101:
        hash = (37 * hash) + SRV_CONNECTION_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getSrvConnectionFormat().hashCode();
        break;
      case 102:
        hash = (37 * hash) + STANDARD_CONNECTION_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getStandardConnectionFormat().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.datastream.v1.MongodbProfile parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.datastream.v1.MongodbProfile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * MongoDB profile.
   * </pre>
   *
   * Protobuf type {@code google.cloud.datastream.v1.MongodbProfile}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.datastream.v1.MongodbProfile)
      com.google.cloud.datastream.v1.MongodbProfileOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.datastream.v1.DatastreamResourcesProto
          .internal_static_google_cloud_datastream_v1_MongodbProfile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.datastream.v1.DatastreamResourcesProto
          .internal_static_google_cloud_datastream_v1_MongodbProfile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.datastream.v1.MongodbProfile.class,
              com.google.cloud.datastream.v1.MongodbProfile.Builder.class);
    }

    // Construct using com.google.cloud.datastream.v1.MongodbProfile.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getHostAddressesFieldBuilder();
        getSslConfigFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (hostAddressesBuilder_ == null) {
        hostAddresses_ = java.util.Collections.emptyList();
      } else {
        hostAddresses_ = null;
        hostAddressesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      replicaSet_ = "";
      username_ = "";
      password_ = "";
      secretManagerStoredPassword_ = "";
      sslConfig_ = null;
      if (sslConfigBuilder_ != null) {
        sslConfigBuilder_.dispose();
        sslConfigBuilder_ = null;
      }
      if (srvConnectionFormatBuilder_ != null) {
        srvConnectionFormatBuilder_.clear();
      }
      if (standardConnectionFormatBuilder_ != null) {
        standardConnectionFormatBuilder_.clear();
      }
      mongodbConnectionFormatCase_ = 0;
      mongodbConnectionFormat_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.datastream.v1.DatastreamResourcesProto
          .internal_static_google_cloud_datastream_v1_MongodbProfile_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.datastream.v1.MongodbProfile getDefaultInstanceForType() {
      return com.google.cloud.datastream.v1.MongodbProfile.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.datastream.v1.MongodbProfile build() {
      com.google.cloud.datastream.v1.MongodbProfile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.datastream.v1.MongodbProfile buildPartial() {
      com.google.cloud.datastream.v1.MongodbProfile result =
          new com.google.cloud.datastream.v1.MongodbProfile(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.cloud.datastream.v1.MongodbProfile result) {
      if (hostAddressesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          hostAddresses_ = java.util.Collections.unmodifiableList(hostAddresses_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.hostAddresses_ = hostAddresses_;
      } else {
        result.hostAddresses_ = hostAddressesBuilder_.build();
      }
    }

    private void buildPartial0(com.google.cloud.datastream.v1.MongodbProfile result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.replicaSet_ = replicaSet_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.username_ = username_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.password_ = password_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.secretManagerStoredPassword_ = secretManagerStoredPassword_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.sslConfig_ = sslConfigBuilder_ == null ? sslConfig_ : sslConfigBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(com.google.cloud.datastream.v1.MongodbProfile result) {
      result.mongodbConnectionFormatCase_ = mongodbConnectionFormatCase_;
      result.mongodbConnectionFormat_ = this.mongodbConnectionFormat_;
      if (mongodbConnectionFormatCase_ == 101 && srvConnectionFormatBuilder_ != null) {
        result.mongodbConnectionFormat_ = srvConnectionFormatBuilder_.build();
      }
      if (mongodbConnectionFormatCase_ == 102 && standardConnectionFormatBuilder_ != null) {
        result.mongodbConnectionFormat_ = standardConnectionFormatBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.datastream.v1.MongodbProfile) {
        return mergeFrom((com.google.cloud.datastream.v1.MongodbProfile) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.datastream.v1.MongodbProfile other) {
      if (other == com.google.cloud.datastream.v1.MongodbProfile.getDefaultInstance()) return this;
      if (hostAddressesBuilder_ == null) {
        if (!other.hostAddresses_.isEmpty()) {
          if (hostAddresses_.isEmpty()) {
            hostAddresses_ = other.hostAddresses_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHostAddressesIsMutable();
            hostAddresses_.addAll(other.hostAddresses_);
          }
          onChanged();
        }
      } else {
        if (!other.hostAddresses_.isEmpty()) {
          if (hostAddressesBuilder_.isEmpty()) {
            hostAddressesBuilder_.dispose();
            hostAddressesBuilder_ = null;
            hostAddresses_ = other.hostAddresses_;
            bitField0_ = (bitField0_ & ~0x00000001);
            hostAddressesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getHostAddressesFieldBuilder()
                    : null;
          } else {
            hostAddressesBuilder_.addAllMessages(other.hostAddresses_);
          }
        }
      }
      if (!other.getReplicaSet().isEmpty()) {
        replicaSet_ = other.replicaSet_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getUsername().isEmpty()) {
        username_ = other.username_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getPassword().isEmpty()) {
        password_ = other.password_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (!other.getSecretManagerStoredPassword().isEmpty()) {
        secretManagerStoredPassword_ = other.secretManagerStoredPassword_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (other.hasSslConfig()) {
        mergeSslConfig(other.getSslConfig());
      }
      switch (other.getMongodbConnectionFormatCase()) {
        case SRV_CONNECTION_FORMAT:
          {
            mergeSrvConnectionFormat(other.getSrvConnectionFormat());
            break;
          }
        case STANDARD_CONNECTION_FORMAT:
          {
            mergeStandardConnectionFormat(other.getStandardConnectionFormat());
            break;
          }
        case MONGODBCONNECTIONFORMAT_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.cloud.datastream.v1.HostAddress m =
                    input.readMessage(
                        com.google.cloud.datastream.v1.HostAddress.parser(), extensionRegistry);
                if (hostAddressesBuilder_ == null) {
                  ensureHostAddressesIsMutable();
                  hostAddresses_.add(m);
                } else {
                  hostAddressesBuilder_.addMessage(m);
                }
                break;
              } // case 10
            case 18:
              {
                replicaSet_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                username_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                password_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                secretManagerStoredPassword_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(getSslConfigFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            case 810:
              {
                input.readMessage(
                    getSrvConnectionFormatFieldBuilder().getBuilder(), extensionRegistry);
                mongodbConnectionFormatCase_ = 101;
                break;
              } // case 810
            case 818:
              {
                input.readMessage(
                    getStandardConnectionFormatFieldBuilder().getBuilder(), extensionRegistry);
                mongodbConnectionFormatCase_ = 102;
                break;
              } // case 818
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int mongodbConnectionFormatCase_ = 0;
    private java.lang.Object mongodbConnectionFormat_;

    public MongodbConnectionFormatCase getMongodbConnectionFormatCase() {
      return MongodbConnectionFormatCase.forNumber(mongodbConnectionFormatCase_);
    }

    public Builder clearMongodbConnectionFormat() {
      mongodbConnectionFormatCase_ = 0;
      mongodbConnectionFormat_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.cloud.datastream.v1.HostAddress> hostAddresses_ =
        java.util.Collections.emptyList();

    private void ensureHostAddressesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        hostAddresses_ =
            new java.util.ArrayList<com.google.cloud.datastream.v1.HostAddress>(hostAddresses_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.datastream.v1.HostAddress,
            com.google.cloud.datastream.v1.HostAddress.Builder,
            com.google.cloud.datastream.v1.HostAddressOrBuilder>
        hostAddressesBuilder_;

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<com.google.cloud.datastream.v1.HostAddress> getHostAddressesList() {
      if (hostAddressesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hostAddresses_);
      } else {
        return hostAddressesBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public int getHostAddressesCount() {
      if (hostAddressesBuilder_ == null) {
        return hostAddresses_.size();
      } else {
        return hostAddressesBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.datastream.v1.HostAddress getHostAddresses(int index) {
      if (hostAddressesBuilder_ == null) {
        return hostAddresses_.get(index);
      } else {
        return hostAddressesBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setHostAddresses(int index, com.google.cloud.datastream.v1.HostAddress value) {
      if (hostAddressesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostAddressesIsMutable();
        hostAddresses_.set(index, value);
        onChanged();
      } else {
        hostAddressesBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setHostAddresses(
        int index, com.google.cloud.datastream.v1.HostAddress.Builder builderForValue) {
      if (hostAddressesBuilder_ == null) {
        ensureHostAddressesIsMutable();
        hostAddresses_.set(index, builderForValue.build());
        onChanged();
      } else {
        hostAddressesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addHostAddresses(com.google.cloud.datastream.v1.HostAddress value) {
      if (hostAddressesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostAddressesIsMutable();
        hostAddresses_.add(value);
        onChanged();
      } else {
        hostAddressesBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addHostAddresses(int index, com.google.cloud.datastream.v1.HostAddress value) {
      if (hostAddressesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostAddressesIsMutable();
        hostAddresses_.add(index, value);
        onChanged();
      } else {
        hostAddressesBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addHostAddresses(
        com.google.cloud.datastream.v1.HostAddress.Builder builderForValue) {
      if (hostAddressesBuilder_ == null) {
        ensureHostAddressesIsMutable();
        hostAddresses_.add(builderForValue.build());
        onChanged();
      } else {
        hostAddressesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addHostAddresses(
        int index, com.google.cloud.datastream.v1.HostAddress.Builder builderForValue) {
      if (hostAddressesBuilder_ == null) {
        ensureHostAddressesIsMutable();
        hostAddresses_.add(index, builderForValue.build());
        onChanged();
      } else {
        hostAddressesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder addAllHostAddresses(
        java.lang.Iterable<? extends com.google.cloud.datastream.v1.HostAddress> values) {
      if (hostAddressesBuilder_ == null) {
        ensureHostAddressesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, hostAddresses_);
        onChanged();
      } else {
        hostAddressesBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearHostAddresses() {
      if (hostAddressesBuilder_ == null) {
        hostAddresses_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        hostAddressesBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder removeHostAddresses(int index) {
      if (hostAddressesBuilder_ == null) {
        ensureHostAddressesIsMutable();
        hostAddresses_.remove(index);
        onChanged();
      } else {
        hostAddressesBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.datastream.v1.HostAddress.Builder getHostAddressesBuilder(int index) {
      return getHostAddressesFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.datastream.v1.HostAddressOrBuilder getHostAddressesOrBuilder(
        int index) {
      if (hostAddressesBuilder_ == null) {
        return hostAddresses_.get(index);
      } else {
        return hostAddressesBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<? extends com.google.cloud.datastream.v1.HostAddressOrBuilder>
        getHostAddressesOrBuilderList() {
      if (hostAddressesBuilder_ != null) {
        return hostAddressesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hostAddresses_);
      }
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.datastream.v1.HostAddress.Builder addHostAddressesBuilder() {
      return getHostAddressesFieldBuilder()
          .addBuilder(com.google.cloud.datastream.v1.HostAddress.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.datastream.v1.HostAddress.Builder addHostAddressesBuilder(int index) {
      return getHostAddressesFieldBuilder()
          .addBuilder(index, com.google.cloud.datastream.v1.HostAddress.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Required. List of host addresses for a MongoDB cluster.
     * For SRV connection format, this list must contain exactly one DNS host
     * without a port. For Standard connection format, this list must contain all
     * the required hosts in the cluster with their respective ports.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.datastream.v1.HostAddress host_addresses = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public java.util.List<com.google.cloud.datastream.v1.HostAddress.Builder>
        getHostAddressesBuilderList() {
      return getHostAddressesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.datastream.v1.HostAddress,
            com.google.cloud.datastream.v1.HostAddress.Builder,
            com.google.cloud.datastream.v1.HostAddressOrBuilder>
        getHostAddressesFieldBuilder() {
      if (hostAddressesBuilder_ == null) {
        hostAddressesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.datastream.v1.HostAddress,
                com.google.cloud.datastream.v1.HostAddress.Builder,
                com.google.cloud.datastream.v1.HostAddressOrBuilder>(
                hostAddresses_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        hostAddresses_ = null;
      }
      return hostAddressesBuilder_;
    }

    private java.lang.Object replicaSet_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Name of the replica set. Only needed for self hosted replica set
     * type MongoDB cluster. For SRV connection format, this field must be empty.
     * For Standard connection format, this field must be specified.
     * </pre>
     *
     * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The replicaSet.
     */
    public java.lang.String getReplicaSet() {
      java.lang.Object ref = replicaSet_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        replicaSet_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Name of the replica set. Only needed for self hosted replica set
     * type MongoDB cluster. For SRV connection format, this field must be empty.
     * For Standard connection format, this field must be specified.
     * </pre>
     *
     * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for replicaSet.
     */
    public com.google.protobuf.ByteString getReplicaSetBytes() {
      java.lang.Object ref = replicaSet_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        replicaSet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Name of the replica set. Only needed for self hosted replica set
     * type MongoDB cluster. For SRV connection format, this field must be empty.
     * For Standard connection format, this field must be specified.
     * </pre>
     *
     * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The replicaSet to set.
     * @return This builder for chaining.
     */
    public Builder setReplicaSet(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      replicaSet_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Name of the replica set. Only needed for self hosted replica set
     * type MongoDB cluster. For SRV connection format, this field must be empty.
     * For Standard connection format, this field must be specified.
     * </pre>
     *
     * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearReplicaSet() {
      replicaSet_ = getDefaultInstance().getReplicaSet();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Name of the replica set. Only needed for self hosted replica set
     * type MongoDB cluster. For SRV connection format, this field must be empty.
     * For Standard connection format, this field must be specified.
     * </pre>
     *
     * <code>string replica_set = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for replicaSet to set.
     * @return This builder for chaining.
     */
    public Builder setReplicaSetBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      replicaSet_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object username_ = "";

    /**
     *
     *
     * <pre>
     * Required. Username for the MongoDB connection.
     * </pre>
     *
     * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The username.
     */
    public java.lang.String getUsername() {
      java.lang.Object ref = username_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        username_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. Username for the MongoDB connection.
     * </pre>
     *
     * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The bytes for username.
     */
    public com.google.protobuf.ByteString getUsernameBytes() {
      java.lang.Object ref = username_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        username_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. Username for the MongoDB connection.
     * </pre>
     *
     * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The username to set.
     * @return This builder for chaining.
     */
    public Builder setUsername(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      username_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. Username for the MongoDB connection.
     * </pre>
     *
     * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUsername() {
      username_ = getDefaultInstance().getUsername();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. Username for the MongoDB connection.
     * </pre>
     *
     * <code>string username = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The bytes for username to set.
     * @return This builder for chaining.
     */
    public Builder setUsernameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      username_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object password_ = "";

    /**
     *
     *
     * <pre>
     * Optional. Password for the MongoDB connection. Mutually exclusive with the
     * `secret_manager_stored_password` field.
     * </pre>
     *
     * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The password.
     */
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        password_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Password for the MongoDB connection. Mutually exclusive with the
     * `secret_manager_stored_password` field.
     * </pre>
     *
     * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for password.
     */
    public com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Password for the MongoDB connection. Mutually exclusive with the
     * `secret_manager_stored_password` field.
     * </pre>
     *
     * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The password to set.
     * @return This builder for chaining.
     */
    public Builder setPassword(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      password_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Password for the MongoDB connection. Mutually exclusive with the
     * `secret_manager_stored_password` field.
     * </pre>
     *
     * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPassword() {
      password_ = getDefaultInstance().getPassword();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Password for the MongoDB connection. Mutually exclusive with the
     * `secret_manager_stored_password` field.
     * </pre>
     *
     * <code>string password = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for password to set.
     * @return This builder for chaining.
     */
    public Builder setPasswordBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      password_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private java.lang.Object secretManagerStoredPassword_ = "";

    /**
     *
     *
     * <pre>
     * Optional. A reference to a Secret Manager resource name storing the
     * SQLServer connection password. Mutually exclusive with the `password`
     * field.
     * </pre>
     *
     * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The secretManagerStoredPassword.
     */
    public java.lang.String getSecretManagerStoredPassword() {
      java.lang.Object ref = secretManagerStoredPassword_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        secretManagerStoredPassword_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. A reference to a Secret Manager resource name storing the
     * SQLServer connection password. Mutually exclusive with the `password`
     * field.
     * </pre>
     *
     * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The bytes for secretManagerStoredPassword.
     */
    public com.google.protobuf.ByteString getSecretManagerStoredPasswordBytes() {
      java.lang.Object ref = secretManagerStoredPassword_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        secretManagerStoredPassword_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. A reference to a Secret Manager resource name storing the
     * SQLServer connection password. Mutually exclusive with the `password`
     * field.
     * </pre>
     *
     * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The secretManagerStoredPassword to set.
     * @return This builder for chaining.
     */
    public Builder setSecretManagerStoredPassword(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      secretManagerStoredPassword_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. A reference to a Secret Manager resource name storing the
     * SQLServer connection password. Mutually exclusive with the `password`
     * field.
     * </pre>
     *
     * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSecretManagerStoredPassword() {
      secretManagerStoredPassword_ = getDefaultInstance().getSecretManagerStoredPassword();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. A reference to a Secret Manager resource name storing the
     * SQLServer connection password. Mutually exclusive with the `password`
     * field.
     * </pre>
     *
     * <code>string secret_manager_stored_password = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The bytes for secretManagerStoredPassword to set.
     * @return This builder for chaining.
     */
    public Builder setSecretManagerStoredPasswordBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      secretManagerStoredPassword_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private com.google.cloud.datastream.v1.MongodbSslConfig sslConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.MongodbSslConfig,
            com.google.cloud.datastream.v1.MongodbSslConfig.Builder,
            com.google.cloud.datastream.v1.MongodbSslConfigOrBuilder>
        sslConfigBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the sslConfig field is set.
     */
    public boolean hasSslConfig() {
      return ((bitField0_ & 0x00000020) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The sslConfig.
     */
    public com.google.cloud.datastream.v1.MongodbSslConfig getSslConfig() {
      if (sslConfigBuilder_ == null) {
        return sslConfig_ == null
            ? com.google.cloud.datastream.v1.MongodbSslConfig.getDefaultInstance()
            : sslConfig_;
      } else {
        return sslConfigBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSslConfig(com.google.cloud.datastream.v1.MongodbSslConfig value) {
      if (sslConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sslConfig_ = value;
      } else {
        sslConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setSslConfig(
        com.google.cloud.datastream.v1.MongodbSslConfig.Builder builderForValue) {
      if (sslConfigBuilder_ == null) {
        sslConfig_ = builderForValue.build();
      } else {
        sslConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeSslConfig(com.google.cloud.datastream.v1.MongodbSslConfig value) {
      if (sslConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)
            && sslConfig_ != null
            && sslConfig_ != com.google.cloud.datastream.v1.MongodbSslConfig.getDefaultInstance()) {
          getSslConfigBuilder().mergeFrom(value);
        } else {
          sslConfig_ = value;
        }
      } else {
        sslConfigBuilder_.mergeFrom(value);
      }
      if (sslConfig_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearSslConfig() {
      bitField0_ = (bitField0_ & ~0x00000020);
      sslConfig_ = null;
      if (sslConfigBuilder_ != null) {
        sslConfigBuilder_.dispose();
        sslConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.datastream.v1.MongodbSslConfig.Builder getSslConfigBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getSslConfigFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.datastream.v1.MongodbSslConfigOrBuilder getSslConfigOrBuilder() {
      if (sslConfigBuilder_ != null) {
        return sslConfigBuilder_.getMessageOrBuilder();
      } else {
        return sslConfig_ == null
            ? com.google.cloud.datastream.v1.MongodbSslConfig.getDefaultInstance()
            : sslConfig_;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. SSL configuration for the MongoDB connection.
     * </pre>
     *
     * <code>
     * .google.cloud.datastream.v1.MongodbSslConfig ssl_config = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.MongodbSslConfig,
            com.google.cloud.datastream.v1.MongodbSslConfig.Builder,
            com.google.cloud.datastream.v1.MongodbSslConfigOrBuilder>
        getSslConfigFieldBuilder() {
      if (sslConfigBuilder_ == null) {
        sslConfigBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.datastream.v1.MongodbSslConfig,
                com.google.cloud.datastream.v1.MongodbSslConfig.Builder,
                com.google.cloud.datastream.v1.MongodbSslConfigOrBuilder>(
                getSslConfig(), getParentForChildren(), isClean());
        sslConfig_ = null;
      }
      return sslConfigBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.SrvConnectionFormat,
            com.google.cloud.datastream.v1.SrvConnectionFormat.Builder,
            com.google.cloud.datastream.v1.SrvConnectionFormatOrBuilder>
        srvConnectionFormatBuilder_;

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     *
     * @return Whether the srvConnectionFormat field is set.
     */
    @java.lang.Override
    public boolean hasSrvConnectionFormat() {
      return mongodbConnectionFormatCase_ == 101;
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     *
     * @return The srvConnectionFormat.
     */
    @java.lang.Override
    public com.google.cloud.datastream.v1.SrvConnectionFormat getSrvConnectionFormat() {
      if (srvConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 101) {
          return (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_;
        }
        return com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
      } else {
        if (mongodbConnectionFormatCase_ == 101) {
          return srvConnectionFormatBuilder_.getMessage();
        }
        return com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    public Builder setSrvConnectionFormat(
        com.google.cloud.datastream.v1.SrvConnectionFormat value) {
      if (srvConnectionFormatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mongodbConnectionFormat_ = value;
        onChanged();
      } else {
        srvConnectionFormatBuilder_.setMessage(value);
      }
      mongodbConnectionFormatCase_ = 101;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    public Builder setSrvConnectionFormat(
        com.google.cloud.datastream.v1.SrvConnectionFormat.Builder builderForValue) {
      if (srvConnectionFormatBuilder_ == null) {
        mongodbConnectionFormat_ = builderForValue.build();
        onChanged();
      } else {
        srvConnectionFormatBuilder_.setMessage(builderForValue.build());
      }
      mongodbConnectionFormatCase_ = 101;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    public Builder mergeSrvConnectionFormat(
        com.google.cloud.datastream.v1.SrvConnectionFormat value) {
      if (srvConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 101
            && mongodbConnectionFormat_
                != com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance()) {
          mongodbConnectionFormat_ =
              com.google.cloud.datastream.v1.SrvConnectionFormat.newBuilder(
                      (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          mongodbConnectionFormat_ = value;
        }
        onChanged();
      } else {
        if (mongodbConnectionFormatCase_ == 101) {
          srvConnectionFormatBuilder_.mergeFrom(value);
        } else {
          srvConnectionFormatBuilder_.setMessage(value);
        }
      }
      mongodbConnectionFormatCase_ = 101;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    public Builder clearSrvConnectionFormat() {
      if (srvConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 101) {
          mongodbConnectionFormatCase_ = 0;
          mongodbConnectionFormat_ = null;
          onChanged();
        }
      } else {
        if (mongodbConnectionFormatCase_ == 101) {
          mongodbConnectionFormatCase_ = 0;
          mongodbConnectionFormat_ = null;
        }
        srvConnectionFormatBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    public com.google.cloud.datastream.v1.SrvConnectionFormat.Builder
        getSrvConnectionFormatBuilder() {
      return getSrvConnectionFormatFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    @java.lang.Override
    public com.google.cloud.datastream.v1.SrvConnectionFormatOrBuilder
        getSrvConnectionFormatOrBuilder() {
      if ((mongodbConnectionFormatCase_ == 101) && (srvConnectionFormatBuilder_ != null)) {
        return srvConnectionFormatBuilder_.getMessageOrBuilder();
      } else {
        if (mongodbConnectionFormatCase_ == 101) {
          return (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_;
        }
        return com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Srv connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.SrvConnectionFormat srv_connection_format = 101;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.SrvConnectionFormat,
            com.google.cloud.datastream.v1.SrvConnectionFormat.Builder,
            com.google.cloud.datastream.v1.SrvConnectionFormatOrBuilder>
        getSrvConnectionFormatFieldBuilder() {
      if (srvConnectionFormatBuilder_ == null) {
        if (!(mongodbConnectionFormatCase_ == 101)) {
          mongodbConnectionFormat_ =
              com.google.cloud.datastream.v1.SrvConnectionFormat.getDefaultInstance();
        }
        srvConnectionFormatBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.datastream.v1.SrvConnectionFormat,
                com.google.cloud.datastream.v1.SrvConnectionFormat.Builder,
                com.google.cloud.datastream.v1.SrvConnectionFormatOrBuilder>(
                (com.google.cloud.datastream.v1.SrvConnectionFormat) mongodbConnectionFormat_,
                getParentForChildren(),
                isClean());
        mongodbConnectionFormat_ = null;
      }
      mongodbConnectionFormatCase_ = 101;
      onChanged();
      return srvConnectionFormatBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.StandardConnectionFormat,
            com.google.cloud.datastream.v1.StandardConnectionFormat.Builder,
            com.google.cloud.datastream.v1.StandardConnectionFormatOrBuilder>
        standardConnectionFormatBuilder_;

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     *
     * @return Whether the standardConnectionFormat field is set.
     */
    @java.lang.Override
    public boolean hasStandardConnectionFormat() {
      return mongodbConnectionFormatCase_ == 102;
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     *
     * @return The standardConnectionFormat.
     */
    @java.lang.Override
    public com.google.cloud.datastream.v1.StandardConnectionFormat getStandardConnectionFormat() {
      if (standardConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 102) {
          return (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_;
        }
        return com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
      } else {
        if (mongodbConnectionFormatCase_ == 102) {
          return standardConnectionFormatBuilder_.getMessage();
        }
        return com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    public Builder setStandardConnectionFormat(
        com.google.cloud.datastream.v1.StandardConnectionFormat value) {
      if (standardConnectionFormatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mongodbConnectionFormat_ = value;
        onChanged();
      } else {
        standardConnectionFormatBuilder_.setMessage(value);
      }
      mongodbConnectionFormatCase_ = 102;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    public Builder setStandardConnectionFormat(
        com.google.cloud.datastream.v1.StandardConnectionFormat.Builder builderForValue) {
      if (standardConnectionFormatBuilder_ == null) {
        mongodbConnectionFormat_ = builderForValue.build();
        onChanged();
      } else {
        standardConnectionFormatBuilder_.setMessage(builderForValue.build());
      }
      mongodbConnectionFormatCase_ = 102;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    public Builder mergeStandardConnectionFormat(
        com.google.cloud.datastream.v1.StandardConnectionFormat value) {
      if (standardConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 102
            && mongodbConnectionFormat_
                != com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance()) {
          mongodbConnectionFormat_ =
              com.google.cloud.datastream.v1.StandardConnectionFormat.newBuilder(
                      (com.google.cloud.datastream.v1.StandardConnectionFormat)
                          mongodbConnectionFormat_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          mongodbConnectionFormat_ = value;
        }
        onChanged();
      } else {
        if (mongodbConnectionFormatCase_ == 102) {
          standardConnectionFormatBuilder_.mergeFrom(value);
        } else {
          standardConnectionFormatBuilder_.setMessage(value);
        }
      }
      mongodbConnectionFormatCase_ = 102;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    public Builder clearStandardConnectionFormat() {
      if (standardConnectionFormatBuilder_ == null) {
        if (mongodbConnectionFormatCase_ == 102) {
          mongodbConnectionFormatCase_ = 0;
          mongodbConnectionFormat_ = null;
          onChanged();
        }
      } else {
        if (mongodbConnectionFormatCase_ == 102) {
          mongodbConnectionFormatCase_ = 0;
          mongodbConnectionFormat_ = null;
        }
        standardConnectionFormatBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    public com.google.cloud.datastream.v1.StandardConnectionFormat.Builder
        getStandardConnectionFormatBuilder() {
      return getStandardConnectionFormatFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    @java.lang.Override
    public com.google.cloud.datastream.v1.StandardConnectionFormatOrBuilder
        getStandardConnectionFormatOrBuilder() {
      if ((mongodbConnectionFormatCase_ == 102) && (standardConnectionFormatBuilder_ != null)) {
        return standardConnectionFormatBuilder_.getMessageOrBuilder();
      } else {
        if (mongodbConnectionFormatCase_ == 102) {
          return (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_;
        }
        return com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Standard connection format.
     * </pre>
     *
     * <code>.google.cloud.datastream.v1.StandardConnectionFormat standard_connection_format = 102;
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.datastream.v1.StandardConnectionFormat,
            com.google.cloud.datastream.v1.StandardConnectionFormat.Builder,
            com.google.cloud.datastream.v1.StandardConnectionFormatOrBuilder>
        getStandardConnectionFormatFieldBuilder() {
      if (standardConnectionFormatBuilder_ == null) {
        if (!(mongodbConnectionFormatCase_ == 102)) {
          mongodbConnectionFormat_ =
              com.google.cloud.datastream.v1.StandardConnectionFormat.getDefaultInstance();
        }
        standardConnectionFormatBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.datastream.v1.StandardConnectionFormat,
                com.google.cloud.datastream.v1.StandardConnectionFormat.Builder,
                com.google.cloud.datastream.v1.StandardConnectionFormatOrBuilder>(
                (com.google.cloud.datastream.v1.StandardConnectionFormat) mongodbConnectionFormat_,
                getParentForChildren(),
                isClean());
        mongodbConnectionFormat_ = null;
      }
      mongodbConnectionFormatCase_ = 102;
      onChanged();
      return standardConnectionFormatBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.datastream.v1.MongodbProfile)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.datastream.v1.MongodbProfile)
  private static final com.google.cloud.datastream.v1.MongodbProfile DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.datastream.v1.MongodbProfile();
  }

  public static com.google.cloud.datastream.v1.MongodbProfile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MongodbProfile> PARSER =
      new com.google.protobuf.AbstractParser<MongodbProfile>() {
        @java.lang.Override
        public MongodbProfile parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<MongodbProfile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MongodbProfile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.datastream.v1.MongodbProfile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
