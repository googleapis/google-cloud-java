/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/app_yaml.proto

// Protobuf Java Version: 3.25.5
package com.google.appengine.v1;

/**
 *
 *
 * <pre>
 * Files served directly to the user for a given URL, such as images, CSS
 * stylesheets, or JavaScript source files. Static file handlers describe which
 * files in the application directory are static files, and which URLs serve
 * them.
 * </pre>
 *
 * Protobuf type {@code google.appengine.v1.StaticFilesHandler}
 */
public final class StaticFilesHandler extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.appengine.v1.StaticFilesHandler)
    StaticFilesHandlerOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use StaticFilesHandler.newBuilder() to construct.
  private StaticFilesHandler(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private StaticFilesHandler() {
    path_ = "";
    uploadPathRegex_ = "";
    mimeType_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new StaticFilesHandler();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.appengine.v1.AppYamlProto
        .internal_static_google_appengine_v1_StaticFilesHandler_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 3:
        return internalGetHttpHeaders();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.appengine.v1.AppYamlProto
        .internal_static_google_appengine_v1_StaticFilesHandler_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.appengine.v1.StaticFilesHandler.class,
            com.google.appengine.v1.StaticFilesHandler.Builder.class);
  }

  private int bitField0_;
  public static final int PATH_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object path_ = "";
  /**
   *
   *
   * <pre>
   * Path to the static files matched by the URL pattern, from the
   * application root directory. The path can refer to text matched in groupings
   * in the URL pattern.
   * </pre>
   *
   * <code>string path = 1;</code>
   *
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Path to the static files matched by the URL pattern, from the
   * application root directory. The path can refer to text matched in groupings
   * in the URL pattern.
   * </pre>
   *
   * <code>string path = 1;</code>
   *
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int UPLOAD_PATH_REGEX_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object uploadPathRegex_ = "";
  /**
   *
   *
   * <pre>
   * Regular expression that matches the file paths for all files that should be
   * referenced by this handler.
   * </pre>
   *
   * <code>string upload_path_regex = 2;</code>
   *
   * @return The uploadPathRegex.
   */
  @java.lang.Override
  public java.lang.String getUploadPathRegex() {
    java.lang.Object ref = uploadPathRegex_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      uploadPathRegex_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Regular expression that matches the file paths for all files that should be
   * referenced by this handler.
   * </pre>
   *
   * <code>string upload_path_regex = 2;</code>
   *
   * @return The bytes for uploadPathRegex.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUploadPathRegexBytes() {
    java.lang.Object ref = uploadPathRegex_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      uploadPathRegex_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HTTP_HEADERS_FIELD_NUMBER = 3;

  private static final class HttpHeadersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            com.google.appengine.v1.AppYamlProto
                .internal_static_google_appengine_v1_StaticFilesHandler_HttpHeadersEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<java.lang.String, java.lang.String> httpHeaders_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetHttpHeaders() {
    if (httpHeaders_ == null) {
      return com.google.protobuf.MapField.emptyMapField(HttpHeadersDefaultEntryHolder.defaultEntry);
    }
    return httpHeaders_;
  }

  public int getHttpHeadersCount() {
    return internalGetHttpHeaders().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * HTTP headers to use for all responses from these URLs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; http_headers = 3;</code>
   */
  @java.lang.Override
  public boolean containsHttpHeaders(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetHttpHeaders().getMap().containsKey(key);
  }
  /** Use {@link #getHttpHeadersMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getHttpHeaders() {
    return getHttpHeadersMap();
  }
  /**
   *
   *
   * <pre>
   * HTTP headers to use for all responses from these URLs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; http_headers = 3;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getHttpHeadersMap() {
    return internalGetHttpHeaders().getMap();
  }
  /**
   *
   *
   * <pre>
   * HTTP headers to use for all responses from these URLs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; http_headers = 3;</code>
   */
  @java.lang.Override
  public /* nullable */ java.lang.String getHttpHeadersOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetHttpHeaders().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * HTTP headers to use for all responses from these URLs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; http_headers = 3;</code>
   */
  @java.lang.Override
  public java.lang.String getHttpHeadersOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetHttpHeaders().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int MIME_TYPE_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object mimeType_ = "";
  /**
   *
   *
   * <pre>
   * MIME type used to serve all files served by this handler.
   *
   * Defaults to file-specific MIME types, which are derived from each file's
   * filename extension.
   * </pre>
   *
   * <code>string mime_type = 4;</code>
   *
   * @return The mimeType.
   */
  @java.lang.Override
  public java.lang.String getMimeType() {
    java.lang.Object ref = mimeType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      mimeType_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * MIME type used to serve all files served by this handler.
   *
   * Defaults to file-specific MIME types, which are derived from each file's
   * filename extension.
   * </pre>
   *
   * <code>string mime_type = 4;</code>
   *
   * @return The bytes for mimeType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getMimeTypeBytes() {
    java.lang.Object ref = mimeType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      mimeType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EXPIRATION_FIELD_NUMBER = 5;
  private com.google.protobuf.Duration expiration_;
  /**
   *
   *
   * <pre>
   * Time a static file served by this handler should be cached
   * by web proxies and browsers.
   * </pre>
   *
   * <code>.google.protobuf.Duration expiration = 5;</code>
   *
   * @return Whether the expiration field is set.
   */
  @java.lang.Override
  public boolean hasExpiration() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Time a static file served by this handler should be cached
   * by web proxies and browsers.
   * </pre>
   *
   * <code>.google.protobuf.Duration expiration = 5;</code>
   *
   * @return The expiration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getExpiration() {
    return expiration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : expiration_;
  }
  /**
   *
   *
   * <pre>
   * Time a static file served by this handler should be cached
   * by web proxies and browsers.
   * </pre>
   *
   * <code>.google.protobuf.Duration expiration = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getExpirationOrBuilder() {
    return expiration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : expiration_;
  }

  public static final int REQUIRE_MATCHING_FILE_FIELD_NUMBER = 6;
  private boolean requireMatchingFile_ = false;
  /**
   *
   *
   * <pre>
   * Whether this handler should match the request if the file
   * referenced by the handler does not exist.
   * </pre>
   *
   * <code>bool require_matching_file = 6;</code>
   *
   * @return The requireMatchingFile.
   */
  @java.lang.Override
  public boolean getRequireMatchingFile() {
    return requireMatchingFile_;
  }

  public static final int APPLICATION_READABLE_FIELD_NUMBER = 7;
  private boolean applicationReadable_ = false;
  /**
   *
   *
   * <pre>
   * Whether files should also be uploaded as code data. By default, files
   * declared in static file handlers are uploaded as static
   * data and are only served to end users; they cannot be read by the
   * application. If enabled, uploads are charged against both your code and
   * static data storage resource quotas.
   * </pre>
   *
   * <code>bool application_readable = 7;</code>
   *
   * @return The applicationReadable.
   */
  @java.lang.Override
  public boolean getApplicationReadable() {
    return applicationReadable_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, path_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(uploadPathRegex_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, uploadPathRegex_);
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetHttpHeaders(), HttpHeadersDefaultEntryHolder.defaultEntry, 3);
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mimeType_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, mimeType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getExpiration());
    }
    if (requireMatchingFile_ != false) {
      output.writeBool(6, requireMatchingFile_);
    }
    if (applicationReadable_ != false) {
      output.writeBool(7, applicationReadable_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, path_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(uploadPathRegex_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, uploadPathRegex_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetHttpHeaders().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> httpHeaders__ =
          HttpHeadersDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, httpHeaders__);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mimeType_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, mimeType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getExpiration());
    }
    if (requireMatchingFile_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(6, requireMatchingFile_);
    }
    if (applicationReadable_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(7, applicationReadable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.appengine.v1.StaticFilesHandler)) {
      return super.equals(obj);
    }
    com.google.appengine.v1.StaticFilesHandler other =
        (com.google.appengine.v1.StaticFilesHandler) obj;

    if (!getPath().equals(other.getPath())) return false;
    if (!getUploadPathRegex().equals(other.getUploadPathRegex())) return false;
    if (!internalGetHttpHeaders().equals(other.internalGetHttpHeaders())) return false;
    if (!getMimeType().equals(other.getMimeType())) return false;
    if (hasExpiration() != other.hasExpiration()) return false;
    if (hasExpiration()) {
      if (!getExpiration().equals(other.getExpiration())) return false;
    }
    if (getRequireMatchingFile() != other.getRequireMatchingFile()) return false;
    if (getApplicationReadable() != other.getApplicationReadable()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    hash = (37 * hash) + UPLOAD_PATH_REGEX_FIELD_NUMBER;
    hash = (53 * hash) + getUploadPathRegex().hashCode();
    if (!internalGetHttpHeaders().getMap().isEmpty()) {
      hash = (37 * hash) + HTTP_HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHttpHeaders().hashCode();
    }
    hash = (37 * hash) + MIME_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getMimeType().hashCode();
    if (hasExpiration()) {
      hash = (37 * hash) + EXPIRATION_FIELD_NUMBER;
      hash = (53 * hash) + getExpiration().hashCode();
    }
    hash = (37 * hash) + REQUIRE_MATCHING_FILE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getRequireMatchingFile());
    hash = (37 * hash) + APPLICATION_READABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getApplicationReadable());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.appengine.v1.StaticFilesHandler parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.appengine.v1.StaticFilesHandler prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Files served directly to the user for a given URL, such as images, CSS
   * stylesheets, or JavaScript source files. Static file handlers describe which
   * files in the application directory are static files, and which URLs serve
   * them.
   * </pre>
   *
   * Protobuf type {@code google.appengine.v1.StaticFilesHandler}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.appengine.v1.StaticFilesHandler)
      com.google.appengine.v1.StaticFilesHandlerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.appengine.v1.AppYamlProto
          .internal_static_google_appengine_v1_StaticFilesHandler_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetHttpHeaders();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableHttpHeaders();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.appengine.v1.AppYamlProto
          .internal_static_google_appengine_v1_StaticFilesHandler_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.appengine.v1.StaticFilesHandler.class,
              com.google.appengine.v1.StaticFilesHandler.Builder.class);
    }

    // Construct using com.google.appengine.v1.StaticFilesHandler.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getExpirationFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      path_ = "";
      uploadPathRegex_ = "";
      internalGetMutableHttpHeaders().clear();
      mimeType_ = "";
      expiration_ = null;
      if (expirationBuilder_ != null) {
        expirationBuilder_.dispose();
        expirationBuilder_ = null;
      }
      requireMatchingFile_ = false;
      applicationReadable_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.appengine.v1.AppYamlProto
          .internal_static_google_appengine_v1_StaticFilesHandler_descriptor;
    }

    @java.lang.Override
    public com.google.appengine.v1.StaticFilesHandler getDefaultInstanceForType() {
      return com.google.appengine.v1.StaticFilesHandler.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.appengine.v1.StaticFilesHandler build() {
      com.google.appengine.v1.StaticFilesHandler result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.appengine.v1.StaticFilesHandler buildPartial() {
      com.google.appengine.v1.StaticFilesHandler result =
          new com.google.appengine.v1.StaticFilesHandler(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.appengine.v1.StaticFilesHandler result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.path_ = path_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.uploadPathRegex_ = uploadPathRegex_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.httpHeaders_ = internalGetHttpHeaders();
        result.httpHeaders_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.mimeType_ = mimeType_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.expiration_ = expirationBuilder_ == null ? expiration_ : expirationBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.requireMatchingFile_ = requireMatchingFile_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.applicationReadable_ = applicationReadable_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.appengine.v1.StaticFilesHandler) {
        return mergeFrom((com.google.appengine.v1.StaticFilesHandler) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.appengine.v1.StaticFilesHandler other) {
      if (other == com.google.appengine.v1.StaticFilesHandler.getDefaultInstance()) return this;
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getUploadPathRegex().isEmpty()) {
        uploadPathRegex_ = other.uploadPathRegex_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      internalGetMutableHttpHeaders().mergeFrom(other.internalGetHttpHeaders());
      bitField0_ |= 0x00000004;
      if (!other.getMimeType().isEmpty()) {
        mimeType_ = other.mimeType_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasExpiration()) {
        mergeExpiration(other.getExpiration());
      }
      if (other.getRequireMatchingFile() != false) {
        setRequireMatchingFile(other.getRequireMatchingFile());
      }
      if (other.getApplicationReadable() != false) {
        setApplicationReadable(other.getApplicationReadable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                path_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                uploadPathRegex_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String> httpHeaders__ =
                    input.readMessage(
                        HttpHeadersDefaultEntryHolder.defaultEntry.getParserForType(),
                        extensionRegistry);
                internalGetMutableHttpHeaders()
                    .getMutableMap()
                    .put(httpHeaders__.getKey(), httpHeaders__.getValue());
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                mimeType_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getExpirationFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 48:
              {
                requireMatchingFile_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
            case 56:
              {
                applicationReadable_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object path_ = "";
    /**
     *
     *
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     *
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     *
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     *
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      path_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      path_ = getDefaultInstance().getPath();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     *
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      path_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object uploadPathRegex_ = "";
    /**
     *
     *
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     *
     * @return The uploadPathRegex.
     */
    public java.lang.String getUploadPathRegex() {
      java.lang.Object ref = uploadPathRegex_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uploadPathRegex_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     *
     * @return The bytes for uploadPathRegex.
     */
    public com.google.protobuf.ByteString getUploadPathRegexBytes() {
      java.lang.Object ref = uploadPathRegex_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        uploadPathRegex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     *
     * @param value The uploadPathRegex to set.
     * @return This builder for chaining.
     */
    public Builder setUploadPathRegex(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      uploadPathRegex_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUploadPathRegex() {
      uploadPathRegex_ = getDefaultInstance().getUploadPathRegex();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     *
     * @param value The bytes for uploadPathRegex to set.
     * @return This builder for chaining.
     */
    public Builder setUploadPathRegexBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      uploadPathRegex_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> httpHeaders_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetHttpHeaders() {
      if (httpHeaders_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HttpHeadersDefaultEntryHolder.defaultEntry);
      }
      return httpHeaders_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableHttpHeaders() {
      if (httpHeaders_ == null) {
        httpHeaders_ =
            com.google.protobuf.MapField.newMapField(HttpHeadersDefaultEntryHolder.defaultEntry);
      }
      if (!httpHeaders_.isMutable()) {
        httpHeaders_ = httpHeaders_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return httpHeaders_;
    }

    public int getHttpHeadersCount() {
      return internalGetHttpHeaders().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    @java.lang.Override
    public boolean containsHttpHeaders(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetHttpHeaders().getMap().containsKey(key);
    }
    /** Use {@link #getHttpHeadersMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getHttpHeaders() {
      return getHttpHeadersMap();
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getHttpHeadersMap() {
      return internalGetHttpHeaders().getMap();
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    @java.lang.Override
    public /* nullable */ java.lang.String getHttpHeadersOrDefault(
        java.lang.String key,
        /* nullable */
        java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetHttpHeaders().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getHttpHeadersOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetHttpHeaders().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearHttpHeaders() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableHttpHeaders().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    public Builder removeHttpHeaders(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableHttpHeaders().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableHttpHeaders() {
      bitField0_ |= 0x00000004;
      return internalGetMutableHttpHeaders().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    public Builder putHttpHeaders(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableHttpHeaders().getMutableMap().put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     *
     *
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    public Builder putAllHttpHeaders(java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableHttpHeaders().getMutableMap().putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }

    private java.lang.Object mimeType_ = "";
    /**
     *
     *
     * <pre>
     * MIME type used to serve all files served by this handler.
     *
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     *
     * @return The mimeType.
     */
    public java.lang.String getMimeType() {
      java.lang.Object ref = mimeType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mimeType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * MIME type used to serve all files served by this handler.
     *
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     *
     * @return The bytes for mimeType.
     */
    public com.google.protobuf.ByteString getMimeTypeBytes() {
      java.lang.Object ref = mimeType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        mimeType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * MIME type used to serve all files served by this handler.
     *
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     *
     * @param value The mimeType to set.
     * @return This builder for chaining.
     */
    public Builder setMimeType(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      mimeType_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * MIME type used to serve all files served by this handler.
     *
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMimeType() {
      mimeType_ = getDefaultInstance().getMimeType();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * MIME type used to serve all files served by this handler.
     *
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     *
     * @param value The bytes for mimeType to set.
     * @return This builder for chaining.
     */
    public Builder setMimeTypeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      mimeType_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.Duration expiration_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        expirationBuilder_;
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     *
     * @return Whether the expiration field is set.
     */
    public boolean hasExpiration() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     *
     * @return The expiration.
     */
    public com.google.protobuf.Duration getExpiration() {
      if (expirationBuilder_ == null) {
        return expiration_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : expiration_;
      } else {
        return expirationBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public Builder setExpiration(com.google.protobuf.Duration value) {
      if (expirationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expiration_ = value;
      } else {
        expirationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public Builder setExpiration(com.google.protobuf.Duration.Builder builderForValue) {
      if (expirationBuilder_ == null) {
        expiration_ = builderForValue.build();
      } else {
        expirationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public Builder mergeExpiration(com.google.protobuf.Duration value) {
      if (expirationBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && expiration_ != null
            && expiration_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getExpirationBuilder().mergeFrom(value);
        } else {
          expiration_ = value;
        }
      } else {
        expirationBuilder_.mergeFrom(value);
      }
      if (expiration_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public Builder clearExpiration() {
      bitField0_ = (bitField0_ & ~0x00000010);
      expiration_ = null;
      if (expirationBuilder_ != null) {
        expirationBuilder_.dispose();
        expirationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public com.google.protobuf.Duration.Builder getExpirationBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getExpirationFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public com.google.protobuf.DurationOrBuilder getExpirationOrBuilder() {
      if (expirationBuilder_ != null) {
        return expirationBuilder_.getMessageOrBuilder();
      } else {
        return expiration_ == null
            ? com.google.protobuf.Duration.getDefaultInstance()
            : expiration_;
      }
    }
    /**
     *
     *
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration,
            com.google.protobuf.Duration.Builder,
            com.google.protobuf.DurationOrBuilder>
        getExpirationFieldBuilder() {
      if (expirationBuilder_ == null) {
        expirationBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration,
                com.google.protobuf.Duration.Builder,
                com.google.protobuf.DurationOrBuilder>(
                getExpiration(), getParentForChildren(), isClean());
        expiration_ = null;
      }
      return expirationBuilder_;
    }

    private boolean requireMatchingFile_;
    /**
     *
     *
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     *
     * @return The requireMatchingFile.
     */
    @java.lang.Override
    public boolean getRequireMatchingFile() {
      return requireMatchingFile_;
    }
    /**
     *
     *
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     *
     * @param value The requireMatchingFile to set.
     * @return This builder for chaining.
     */
    public Builder setRequireMatchingFile(boolean value) {

      requireMatchingFile_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRequireMatchingFile() {
      bitField0_ = (bitField0_ & ~0x00000020);
      requireMatchingFile_ = false;
      onChanged();
      return this;
    }

    private boolean applicationReadable_;
    /**
     *
     *
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     *
     * @return The applicationReadable.
     */
    @java.lang.Override
    public boolean getApplicationReadable() {
      return applicationReadable_;
    }
    /**
     *
     *
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     *
     * @param value The applicationReadable to set.
     * @return This builder for chaining.
     */
    public Builder setApplicationReadable(boolean value) {

      applicationReadable_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearApplicationReadable() {
      bitField0_ = (bitField0_ & ~0x00000040);
      applicationReadable_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.appengine.v1.StaticFilesHandler)
  }

  // @@protoc_insertion_point(class_scope:google.appengine.v1.StaticFilesHandler)
  private static final com.google.appengine.v1.StaticFilesHandler DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.appengine.v1.StaticFilesHandler();
  }

  public static com.google.appengine.v1.StaticFilesHandler getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StaticFilesHandler> PARSER =
      new com.google.protobuf.AbstractParser<StaticFilesHandler>() {
        @java.lang.Override
        public StaticFilesHandler parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<StaticFilesHandler> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StaticFilesHandler> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.appengine.v1.StaticFilesHandler getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
