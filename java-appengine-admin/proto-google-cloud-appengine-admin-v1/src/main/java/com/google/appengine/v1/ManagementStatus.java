/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/certificate.proto

// Protobuf Java Version: 3.25.5
package com.google.appengine.v1;

/**
 *
 *
 * <pre>
 * State of certificate management. Refers to the most recent certificate
 * acquisition or renewal attempt.
 * </pre>
 *
 * Protobuf enum {@code google.appengine.v1.ManagementStatus}
 */
public enum ManagementStatus implements com.google.protobuf.ProtocolMessageEnum {
  /** <code>MANAGEMENT_STATUS_UNSPECIFIED = 0;</code> */
  MANAGEMENT_STATUS_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Certificate was successfully obtained and inserted into the serving
   * system.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  OK(1),
  /**
   *
   *
   * <pre>
   * Certificate is under active attempts to acquire or renew.
   * </pre>
   *
   * <code>PENDING = 2;</code>
   */
  PENDING(2),
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to an invalid DNS setup and will be
   * retried. Renewal attempts will continue to fail until the certificate
   * domain's DNS configuration is fixed. The last successfully provisioned
   * certificate may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_NOT_VISIBLE = 4;</code>
   */
  FAILED_RETRYING_NOT_VISIBLE(4),
  /**
   *
   *
   * <pre>
   * All renewal attempts have been exhausted, likely due to an invalid DNS
   * setup.
   * </pre>
   *
   * <code>FAILED_PERMANENT = 6;</code>
   */
  FAILED_PERMANENT(6),
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to an explicit CAA record that does not
   * include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
   * continue to fail until the CAA is reconfigured. The last successfully
   * provisioned certificate may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_CAA_FORBIDDEN = 7;</code>
   */
  FAILED_RETRYING_CAA_FORBIDDEN(7),
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to a CAA retrieval failure. This means that
   * the domain's DNS provider does not properly handle CAA records, failing
   * requests for CAA records when no CAA records are defined. Renewals will
   * continue to fail until the DNS provider is changed or a CAA record is
   * added for the given domain. The last successfully provisioned certificate
   * may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_CAA_CHECKING = 8;</code>
   */
  FAILED_RETRYING_CAA_CHECKING(8),
  UNRECOGNIZED(-1),
  ;

  /** <code>MANAGEMENT_STATUS_UNSPECIFIED = 0;</code> */
  public static final int MANAGEMENT_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * Certificate was successfully obtained and inserted into the serving
   * system.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  public static final int OK_VALUE = 1;
  /**
   *
   *
   * <pre>
   * Certificate is under active attempts to acquire or renew.
   * </pre>
   *
   * <code>PENDING = 2;</code>
   */
  public static final int PENDING_VALUE = 2;
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to an invalid DNS setup and will be
   * retried. Renewal attempts will continue to fail until the certificate
   * domain's DNS configuration is fixed. The last successfully provisioned
   * certificate may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_NOT_VISIBLE = 4;</code>
   */
  public static final int FAILED_RETRYING_NOT_VISIBLE_VALUE = 4;
  /**
   *
   *
   * <pre>
   * All renewal attempts have been exhausted, likely due to an invalid DNS
   * setup.
   * </pre>
   *
   * <code>FAILED_PERMANENT = 6;</code>
   */
  public static final int FAILED_PERMANENT_VALUE = 6;
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to an explicit CAA record that does not
   * include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
   * continue to fail until the CAA is reconfigured. The last successfully
   * provisioned certificate may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_CAA_FORBIDDEN = 7;</code>
   */
  public static final int FAILED_RETRYING_CAA_FORBIDDEN_VALUE = 7;
  /**
   *
   *
   * <pre>
   * Most recent renewal failed due to a CAA retrieval failure. This means that
   * the domain's DNS provider does not properly handle CAA records, failing
   * requests for CAA records when no CAA records are defined. Renewals will
   * continue to fail until the DNS provider is changed or a CAA record is
   * added for the given domain. The last successfully provisioned certificate
   * may still be serving.
   * </pre>
   *
   * <code>FAILED_RETRYING_CAA_CHECKING = 8;</code>
   */
  public static final int FAILED_RETRYING_CAA_CHECKING_VALUE = 8;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ManagementStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ManagementStatus forNumber(int value) {
    switch (value) {
      case 0:
        return MANAGEMENT_STATUS_UNSPECIFIED;
      case 1:
        return OK;
      case 2:
        return PENDING;
      case 4:
        return FAILED_RETRYING_NOT_VISIBLE;
      case 6:
        return FAILED_PERMANENT;
      case 7:
        return FAILED_RETRYING_CAA_FORBIDDEN;
      case 8:
        return FAILED_RETRYING_CAA_CHECKING;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ManagementStatus> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<ManagementStatus> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<ManagementStatus>() {
        public ManagementStatus findValueByNumber(int number) {
          return ManagementStatus.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.appengine.v1.CertificateProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ManagementStatus[] VALUES = values();

  public static ManagementStatus valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ManagementStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.appengine.v1.ManagementStatus)
}
