/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/managedkafka/v1/resources.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.managedkafka.v1;

public interface TopicOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.managedkafka.v1.Topic)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Identifier. The name of the topic. The `topic` segment is used when
   * connecting directly to the cluster. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Identifier. The name of the topic. The `topic` segment is used when
   * connecting directly to the cluster. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Required. The number of partitions this topic has. The partition count can
   * only be increased, not decreased. Please note that if partitions are
   * increased for a topic that has a key, the partitioning logic or the
   * ordering of the messages will be affected.
   * </pre>
   *
   * <code>int32 partition_count = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The partitionCount.
   */
  int getPartitionCount();

  /**
   *
   *
   * <pre>
   * Required. Immutable. The number of replicas of each partition. A
   * replication factor of 3 is recommended for high availability.
   * </pre>
   *
   * <code>
   * int32 replication_factor = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
   * </code>
   *
   * @return The replicationFactor.
   */
  int getReplicationFactor();

  /**
   *
   *
   * <pre>
   * Optional. Configurations for the topic that are overridden from the cluster
   * defaults. The key of the map is a Kafka topic property name, for example:
   * `cleanup.policy`, `compression.type`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  int getConfigsCount();
  /**
   *
   *
   * <pre>
   * Optional. Configurations for the topic that are overridden from the cluster
   * defaults. The key of the map is a Kafka topic property name, for example:
   * `cleanup.policy`, `compression.type`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  boolean containsConfigs(java.lang.String key);
  /** Use {@link #getConfigsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getConfigs();
  /**
   *
   *
   * <pre>
   * Optional. Configurations for the topic that are overridden from the cluster
   * defaults. The key of the map is a Kafka topic property name, for example:
   * `cleanup.policy`, `compression.type`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getConfigsMap();
  /**
   *
   *
   * <pre>
   * Optional. Configurations for the topic that are overridden from the cluster
   * defaults. The key of the map is a Kafka topic property name, for example:
   * `cleanup.policy`, `compression.type`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  /* nullable */
  java.lang.String getConfigsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);
  /**
   *
   *
   * <pre>
   * Optional. Configurations for the topic that are overridden from the cluster
   * defaults. The key of the map is a Kafka topic property name, for example:
   * `cleanup.policy`, `compression.type`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  java.lang.String getConfigsOrThrow(java.lang.String key);
}
