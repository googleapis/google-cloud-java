/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/managedkafka/v1/resources.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.managedkafka.v1;

public interface ConnectorOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.managedkafka.v1.Connector)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. Restarts the individual tasks of a Connector.
   * </pre>
   *
   * <code>
   * .google.cloud.managedkafka.v1.TaskRetryPolicy task_restart_policy = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the taskRestartPolicy field is set.
   */
  boolean hasTaskRestartPolicy();
  /**
   *
   *
   * <pre>
   * Optional. Restarts the individual tasks of a Connector.
   * </pre>
   *
   * <code>
   * .google.cloud.managedkafka.v1.TaskRetryPolicy task_restart_policy = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The taskRestartPolicy.
   */
  com.google.cloud.managedkafka.v1.TaskRetryPolicy getTaskRestartPolicy();
  /**
   *
   *
   * <pre>
   * Optional. Restarts the individual tasks of a Connector.
   * </pre>
   *
   * <code>
   * .google.cloud.managedkafka.v1.TaskRetryPolicy task_restart_policy = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.cloud.managedkafka.v1.TaskRetryPolicyOrBuilder getTaskRestartPolicyOrBuilder();

  /**
   *
   *
   * <pre>
   * Identifier. The name of the connector.
   * Structured like:
   * projects/{project}/locations/{location}/connectClusters/{connect_cluster}/connectors/{connector}
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Identifier. The name of the connector.
   * Structured like:
   * projects/{project}/locations/{location}/connectClusters/{connect_cluster}/connectors/{connector}
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Optional. Connector config as keys/values.
   * The keys of the map are connector property names, for example:
   * `connector.class`, `tasks.max`, `key.converter`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  int getConfigsCount();
  /**
   *
   *
   * <pre>
   * Optional. Connector config as keys/values.
   * The keys of the map are connector property names, for example:
   * `connector.class`, `tasks.max`, `key.converter`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  boolean containsConfigs(java.lang.String key);
  /** Use {@link #getConfigsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getConfigs();
  /**
   *
   *
   * <pre>
   * Optional. Connector config as keys/values.
   * The keys of the map are connector property names, for example:
   * `connector.class`, `tasks.max`, `key.converter`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getConfigsMap();
  /**
   *
   *
   * <pre>
   * Optional. Connector config as keys/values.
   * The keys of the map are connector property names, for example:
   * `connector.class`, `tasks.max`, `key.converter`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  /* nullable */
  java.lang.String getConfigsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);
  /**
   *
   *
   * <pre>
   * Optional. Connector config as keys/values.
   * The keys of the map are connector property names, for example:
   * `connector.class`, `tasks.max`, `key.converter`.
   * </pre>
   *
   * <code>map&lt;string, string&gt; configs = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  java.lang.String getConfigsOrThrow(java.lang.String key);

  /**
   *
   *
   * <pre>
   * Output only. The current state of the connector.
   * </pre>
   *
   * <code>
   * .google.cloud.managedkafka.v1.Connector.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   *
   *
   * <pre>
   * Output only. The current state of the connector.
   * </pre>
   *
   * <code>
   * .google.cloud.managedkafka.v1.Connector.State state = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The state.
   */
  com.google.cloud.managedkafka.v1.Connector.State getState();

  com.google.cloud.managedkafka.v1.Connector.RestartPolicyCase getRestartPolicyCase();
}
