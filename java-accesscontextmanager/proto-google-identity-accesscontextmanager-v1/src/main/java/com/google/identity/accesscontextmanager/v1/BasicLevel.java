/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/v1/access_level.proto

// Protobuf Java Version: 3.25.5
package com.google.identity.accesscontextmanager.v1;

/**
 *
 *
 * <pre>
 * `BasicLevel` is an `AccessLevel` using a set of recommended features.
 * </pre>
 *
 * Protobuf type {@code google.identity.accesscontextmanager.v1.BasicLevel}
 */
public final class BasicLevel extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.identity.accesscontextmanager.v1.BasicLevel)
    BasicLevelOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use BasicLevel.newBuilder() to construct.
  private BasicLevel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private BasicLevel() {
    conditions_ = java.util.Collections.emptyList();
    combiningFunction_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new BasicLevel();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.identity.accesscontextmanager.v1.AccessLevelProto
        .internal_static_google_identity_accesscontextmanager_v1_BasicLevel_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.identity.accesscontextmanager.v1.AccessLevelProto
        .internal_static_google_identity_accesscontextmanager_v1_BasicLevel_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.identity.accesscontextmanager.v1.BasicLevel.class,
            com.google.identity.accesscontextmanager.v1.BasicLevel.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Options for how the `conditions` list should be combined to determine if
   * this `AccessLevel` is applied. Default is AND.
   * </pre>
   *
   * Protobuf enum {@code
   * google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction}
   */
  public enum ConditionCombiningFunction implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * All `Conditions` must be true for the `BasicLevel` to be true.
     * </pre>
     *
     * <code>AND = 0;</code>
     */
    AND(0),
    /**
     *
     *
     * <pre>
     * If at least one `Condition` is true, then the `BasicLevel` is true.
     * </pre>
     *
     * <code>OR = 1;</code>
     */
    OR(1),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * All `Conditions` must be true for the `BasicLevel` to be true.
     * </pre>
     *
     * <code>AND = 0;</code>
     */
    public static final int AND_VALUE = 0;
    /**
     *
     *
     * <pre>
     * If at least one `Condition` is true, then the `BasicLevel` is true.
     * </pre>
     *
     * <code>OR = 1;</code>
     */
    public static final int OR_VALUE = 1;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConditionCombiningFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConditionCombiningFunction forNumber(int value) {
      switch (value) {
        case 0:
          return AND;
        case 1:
          return OR;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConditionCombiningFunction>
        internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ConditionCombiningFunction>
        internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConditionCombiningFunction>() {
              public ConditionCombiningFunction findValueByNumber(int number) {
                return ConditionCombiningFunction.forNumber(number);
              }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.identity.accesscontextmanager.v1.BasicLevel.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final ConditionCombiningFunction[] VALUES = values();

    public static ConditionCombiningFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConditionCombiningFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction)
  }

  public static final int CONDITIONS_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<com.google.identity.accesscontextmanager.v1.Condition> conditions_;
  /**
   *
   *
   * <pre>
   * Required. A list of requirements for the `AccessLevel` to be granted.
   * </pre>
   *
   * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.identity.accesscontextmanager.v1.Condition> getConditionsList() {
    return conditions_;
  }
  /**
   *
   *
   * <pre>
   * Required. A list of requirements for the `AccessLevel` to be granted.
   * </pre>
   *
   * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.identity.accesscontextmanager.v1.ConditionOrBuilder>
      getConditionsOrBuilderList() {
    return conditions_;
  }
  /**
   *
   *
   * <pre>
   * Required. A list of requirements for the `AccessLevel` to be granted.
   * </pre>
   *
   * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
   */
  @java.lang.Override
  public int getConditionsCount() {
    return conditions_.size();
  }
  /**
   *
   *
   * <pre>
   * Required. A list of requirements for the `AccessLevel` to be granted.
   * </pre>
   *
   * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
   */
  @java.lang.Override
  public com.google.identity.accesscontextmanager.v1.Condition getConditions(int index) {
    return conditions_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Required. A list of requirements for the `AccessLevel` to be granted.
   * </pre>
   *
   * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
   */
  @java.lang.Override
  public com.google.identity.accesscontextmanager.v1.ConditionOrBuilder getConditionsOrBuilder(
      int index) {
    return conditions_.get(index);
  }

  public static final int COMBINING_FUNCTION_FIELD_NUMBER = 2;
  private int combiningFunction_ = 0;
  /**
   *
   *
   * <pre>
   * How the `conditions` list should be combined to determine if a request is
   * granted this `AccessLevel`. If AND is used, each `Condition` in
   * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
   * is used, at least one `Condition` in `conditions` must be satisfied for the
   * `AccessLevel` to be applied. Default behavior is AND.
   * </pre>
   *
   * <code>
   * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
   * </code>
   *
   * @return The enum numeric value on the wire for combiningFunction.
   */
  @java.lang.Override
  public int getCombiningFunctionValue() {
    return combiningFunction_;
  }
  /**
   *
   *
   * <pre>
   * How the `conditions` list should be combined to determine if a request is
   * granted this `AccessLevel`. If AND is used, each `Condition` in
   * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
   * is used, at least one `Condition` in `conditions` must be satisfied for the
   * `AccessLevel` to be applied. Default behavior is AND.
   * </pre>
   *
   * <code>
   * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
   * </code>
   *
   * @return The combiningFunction.
   */
  @java.lang.Override
  public com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction
      getCombiningFunction() {
    com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction result =
        com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction.forNumber(
            combiningFunction_);
    return result == null
        ? com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction
            .UNRECOGNIZED
        : result;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < conditions_.size(); i++) {
      output.writeMessage(1, conditions_.get(i));
    }
    if (combiningFunction_
        != com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction.AND
            .getNumber()) {
      output.writeEnum(2, combiningFunction_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < conditions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, conditions_.get(i));
    }
    if (combiningFunction_
        != com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction.AND
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, combiningFunction_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.identity.accesscontextmanager.v1.BasicLevel)) {
      return super.equals(obj);
    }
    com.google.identity.accesscontextmanager.v1.BasicLevel other =
        (com.google.identity.accesscontextmanager.v1.BasicLevel) obj;

    if (!getConditionsList().equals(other.getConditionsList())) return false;
    if (combiningFunction_ != other.combiningFunction_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getConditionsCount() > 0) {
      hash = (37 * hash) + CONDITIONS_FIELD_NUMBER;
      hash = (53 * hash) + getConditionsList().hashCode();
    }
    hash = (37 * hash) + COMBINING_FUNCTION_FIELD_NUMBER;
    hash = (53 * hash) + combiningFunction_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.identity.accesscontextmanager.v1.BasicLevel prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * `BasicLevel` is an `AccessLevel` using a set of recommended features.
   * </pre>
   *
   * Protobuf type {@code google.identity.accesscontextmanager.v1.BasicLevel}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.identity.accesscontextmanager.v1.BasicLevel)
      com.google.identity.accesscontextmanager.v1.BasicLevelOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.identity.accesscontextmanager.v1.AccessLevelProto
          .internal_static_google_identity_accesscontextmanager_v1_BasicLevel_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.identity.accesscontextmanager.v1.AccessLevelProto
          .internal_static_google_identity_accesscontextmanager_v1_BasicLevel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.identity.accesscontextmanager.v1.BasicLevel.class,
              com.google.identity.accesscontextmanager.v1.BasicLevel.Builder.class);
    }

    // Construct using com.google.identity.accesscontextmanager.v1.BasicLevel.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (conditionsBuilder_ == null) {
        conditions_ = java.util.Collections.emptyList();
      } else {
        conditions_ = null;
        conditionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      combiningFunction_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.identity.accesscontextmanager.v1.AccessLevelProto
          .internal_static_google_identity_accesscontextmanager_v1_BasicLevel_descriptor;
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.BasicLevel getDefaultInstanceForType() {
      return com.google.identity.accesscontextmanager.v1.BasicLevel.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.BasicLevel build() {
      com.google.identity.accesscontextmanager.v1.BasicLevel result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.BasicLevel buildPartial() {
      com.google.identity.accesscontextmanager.v1.BasicLevel result =
          new com.google.identity.accesscontextmanager.v1.BasicLevel(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(
        com.google.identity.accesscontextmanager.v1.BasicLevel result) {
      if (conditionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          conditions_ = java.util.Collections.unmodifiableList(conditions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.conditions_ = conditions_;
      } else {
        result.conditions_ = conditionsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.identity.accesscontextmanager.v1.BasicLevel result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.combiningFunction_ = combiningFunction_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.identity.accesscontextmanager.v1.BasicLevel) {
        return mergeFrom((com.google.identity.accesscontextmanager.v1.BasicLevel) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.identity.accesscontextmanager.v1.BasicLevel other) {
      if (other == com.google.identity.accesscontextmanager.v1.BasicLevel.getDefaultInstance())
        return this;
      if (conditionsBuilder_ == null) {
        if (!other.conditions_.isEmpty()) {
          if (conditions_.isEmpty()) {
            conditions_ = other.conditions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureConditionsIsMutable();
            conditions_.addAll(other.conditions_);
          }
          onChanged();
        }
      } else {
        if (!other.conditions_.isEmpty()) {
          if (conditionsBuilder_.isEmpty()) {
            conditionsBuilder_.dispose();
            conditionsBuilder_ = null;
            conditions_ = other.conditions_;
            bitField0_ = (bitField0_ & ~0x00000001);
            conditionsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getConditionsFieldBuilder()
                    : null;
          } else {
            conditionsBuilder_.addAllMessages(other.conditions_);
          }
        }
      }
      if (other.combiningFunction_ != 0) {
        setCombiningFunctionValue(other.getCombiningFunctionValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.identity.accesscontextmanager.v1.Condition m =
                    input.readMessage(
                        com.google.identity.accesscontextmanager.v1.Condition.parser(),
                        extensionRegistry);
                if (conditionsBuilder_ == null) {
                  ensureConditionsIsMutable();
                  conditions_.add(m);
                } else {
                  conditionsBuilder_.addMessage(m);
                }
                break;
              } // case 10
            case 16:
              {
                combiningFunction_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.identity.accesscontextmanager.v1.Condition> conditions_ =
        java.util.Collections.emptyList();

    private void ensureConditionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        conditions_ =
            new java.util.ArrayList<com.google.identity.accesscontextmanager.v1.Condition>(
                conditions_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.Condition,
            com.google.identity.accesscontextmanager.v1.Condition.Builder,
            com.google.identity.accesscontextmanager.v1.ConditionOrBuilder>
        conditionsBuilder_;

    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public java.util.List<com.google.identity.accesscontextmanager.v1.Condition>
        getConditionsList() {
      if (conditionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(conditions_);
      } else {
        return conditionsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public int getConditionsCount() {
      if (conditionsBuilder_ == null) {
        return conditions_.size();
      } else {
        return conditionsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public com.google.identity.accesscontextmanager.v1.Condition getConditions(int index) {
      if (conditionsBuilder_ == null) {
        return conditions_.get(index);
      } else {
        return conditionsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder setConditions(
        int index, com.google.identity.accesscontextmanager.v1.Condition value) {
      if (conditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConditionsIsMutable();
        conditions_.set(index, value);
        onChanged();
      } else {
        conditionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder setConditions(
        int index, com.google.identity.accesscontextmanager.v1.Condition.Builder builderForValue) {
      if (conditionsBuilder_ == null) {
        ensureConditionsIsMutable();
        conditions_.set(index, builderForValue.build());
        onChanged();
      } else {
        conditionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder addConditions(com.google.identity.accesscontextmanager.v1.Condition value) {
      if (conditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConditionsIsMutable();
        conditions_.add(value);
        onChanged();
      } else {
        conditionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder addConditions(
        int index, com.google.identity.accesscontextmanager.v1.Condition value) {
      if (conditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConditionsIsMutable();
        conditions_.add(index, value);
        onChanged();
      } else {
        conditionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder addConditions(
        com.google.identity.accesscontextmanager.v1.Condition.Builder builderForValue) {
      if (conditionsBuilder_ == null) {
        ensureConditionsIsMutable();
        conditions_.add(builderForValue.build());
        onChanged();
      } else {
        conditionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder addConditions(
        int index, com.google.identity.accesscontextmanager.v1.Condition.Builder builderForValue) {
      if (conditionsBuilder_ == null) {
        ensureConditionsIsMutable();
        conditions_.add(index, builderForValue.build());
        onChanged();
      } else {
        conditionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder addAllConditions(
        java.lang.Iterable<? extends com.google.identity.accesscontextmanager.v1.Condition>
            values) {
      if (conditionsBuilder_ == null) {
        ensureConditionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, conditions_);
        onChanged();
      } else {
        conditionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder clearConditions() {
      if (conditionsBuilder_ == null) {
        conditions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        conditionsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public Builder removeConditions(int index) {
      if (conditionsBuilder_ == null) {
        ensureConditionsIsMutable();
        conditions_.remove(index);
        onChanged();
      } else {
        conditionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public com.google.identity.accesscontextmanager.v1.Condition.Builder getConditionsBuilder(
        int index) {
      return getConditionsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public com.google.identity.accesscontextmanager.v1.ConditionOrBuilder getConditionsOrBuilder(
        int index) {
      if (conditionsBuilder_ == null) {
        return conditions_.get(index);
      } else {
        return conditionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public java.util.List<? extends com.google.identity.accesscontextmanager.v1.ConditionOrBuilder>
        getConditionsOrBuilderList() {
      if (conditionsBuilder_ != null) {
        return conditionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(conditions_);
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public com.google.identity.accesscontextmanager.v1.Condition.Builder addConditionsBuilder() {
      return getConditionsFieldBuilder()
          .addBuilder(com.google.identity.accesscontextmanager.v1.Condition.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public com.google.identity.accesscontextmanager.v1.Condition.Builder addConditionsBuilder(
        int index) {
      return getConditionsFieldBuilder()
          .addBuilder(
              index, com.google.identity.accesscontextmanager.v1.Condition.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Required. A list of requirements for the `AccessLevel` to be granted.
     * </pre>
     *
     * <code>repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;</code>
     */
    public java.util.List<com.google.identity.accesscontextmanager.v1.Condition.Builder>
        getConditionsBuilderList() {
      return getConditionsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.Condition,
            com.google.identity.accesscontextmanager.v1.Condition.Builder,
            com.google.identity.accesscontextmanager.v1.ConditionOrBuilder>
        getConditionsFieldBuilder() {
      if (conditionsBuilder_ == null) {
        conditionsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.identity.accesscontextmanager.v1.Condition,
                com.google.identity.accesscontextmanager.v1.Condition.Builder,
                com.google.identity.accesscontextmanager.v1.ConditionOrBuilder>(
                conditions_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        conditions_ = null;
      }
      return conditionsBuilder_;
    }

    private int combiningFunction_ = 0;
    /**
     *
     *
     * <pre>
     * How the `conditions` list should be combined to determine if a request is
     * granted this `AccessLevel`. If AND is used, each `Condition` in
     * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
     * is used, at least one `Condition` in `conditions` must be satisfied for the
     * `AccessLevel` to be applied. Default behavior is AND.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
     * </code>
     *
     * @return The enum numeric value on the wire for combiningFunction.
     */
    @java.lang.Override
    public int getCombiningFunctionValue() {
      return combiningFunction_;
    }
    /**
     *
     *
     * <pre>
     * How the `conditions` list should be combined to determine if a request is
     * granted this `AccessLevel`. If AND is used, each `Condition` in
     * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
     * is used, at least one `Condition` in `conditions` must be satisfied for the
     * `AccessLevel` to be applied. Default behavior is AND.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
     * </code>
     *
     * @param value The enum numeric value on the wire for combiningFunction to set.
     * @return This builder for chaining.
     */
    public Builder setCombiningFunctionValue(int value) {
      combiningFunction_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * How the `conditions` list should be combined to determine if a request is
     * granted this `AccessLevel`. If AND is used, each `Condition` in
     * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
     * is used, at least one `Condition` in `conditions` must be satisfied for the
     * `AccessLevel` to be applied. Default behavior is AND.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
     * </code>
     *
     * @return The combiningFunction.
     */
    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction
        getCombiningFunction() {
      com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction result =
          com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction
              .forNumber(combiningFunction_);
      return result == null
          ? com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction
              .UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * How the `conditions` list should be combined to determine if a request is
     * granted this `AccessLevel`. If AND is used, each `Condition` in
     * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
     * is used, at least one `Condition` in `conditions` must be satisfied for the
     * `AccessLevel` to be applied. Default behavior is AND.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
     * </code>
     *
     * @param value The combiningFunction to set.
     * @return This builder for chaining.
     */
    public Builder setCombiningFunction(
        com.google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      combiningFunction_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * How the `conditions` list should be combined to determine if a request is
     * granted this `AccessLevel`. If AND is used, each `Condition` in
     * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
     * is used, at least one `Condition` in `conditions` must be satisfied for the
     * `AccessLevel` to be applied. Default behavior is AND.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCombiningFunction() {
      bitField0_ = (bitField0_ & ~0x00000002);
      combiningFunction_ = 0;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.identity.accesscontextmanager.v1.BasicLevel)
  }

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.BasicLevel)
  private static final com.google.identity.accesscontextmanager.v1.BasicLevel DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.identity.accesscontextmanager.v1.BasicLevel();
  }

  public static com.google.identity.accesscontextmanager.v1.BasicLevel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BasicLevel> PARSER =
      new com.google.protobuf.AbstractParser<BasicLevel>() {
        @java.lang.Override
        public BasicLevel parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<BasicLevel> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BasicLevel> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.identity.accesscontextmanager.v1.BasicLevel getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
