/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/oracledatabase/v1/autonomous_database.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.oracledatabase.v1;

/**
 *
 *
 * <pre>
 * The various lifecycle states of the Autonomous Database.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.oracledatabase.v1.State}
 */
public enum State implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Default unspecified value.
   * </pre>
   *
   * <code>STATE_UNSPECIFIED = 0;</code>
   */
  STATE_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in provisioning state.
   * </pre>
   *
   * <code>PROVISIONING = 1;</code>
   */
  PROVISIONING(1),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in available state.
   * </pre>
   *
   * <code>AVAILABLE = 2;</code>
   */
  AVAILABLE(2),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in stopping state.
   * </pre>
   *
   * <code>STOPPING = 3;</code>
   */
  STOPPING(3),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in stopped state.
   * </pre>
   *
   * <code>STOPPED = 4;</code>
   */
  STOPPED(4),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in starting state.
   * </pre>
   *
   * <code>STARTING = 5;</code>
   */
  STARTING(5),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in terminating state.
   * </pre>
   *
   * <code>TERMINATING = 6;</code>
   */
  TERMINATING(6),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in terminated state.
   * </pre>
   *
   * <code>TERMINATED = 7;</code>
   */
  TERMINATED(7),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in unavailable state.
   * </pre>
   *
   * <code>UNAVAILABLE = 8;</code>
   */
  UNAVAILABLE(8),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database restore is in progress.
   * </pre>
   *
   * <code>RESTORE_IN_PROGRESS = 9;</code>
   */
  RESTORE_IN_PROGRESS(9),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database failed to restore.
   * </pre>
   *
   * <code>RESTORE_FAILED = 10;</code>
   */
  RESTORE_FAILED(10),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database backup is in progress.
   * </pre>
   *
   * <code>BACKUP_IN_PROGRESS = 11;</code>
   */
  BACKUP_IN_PROGRESS(11),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database scale is in progress.
   * </pre>
   *
   * <code>SCALE_IN_PROGRESS = 12;</code>
   */
  SCALE_IN_PROGRESS(12),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is available but needs attention
   * state.
   * </pre>
   *
   * <code>AVAILABLE_NEEDS_ATTENTION = 13;</code>
   */
  AVAILABLE_NEEDS_ATTENTION(13),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in updating state.
   * </pre>
   *
   * <code>UPDATING = 14;</code>
   */
  UPDATING(14),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database's maintenance is in progress state.
   * </pre>
   *
   * <code>MAINTENANCE_IN_PROGRESS = 15;</code>
   */
  MAINTENANCE_IN_PROGRESS(15),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in restarting state.
   * </pre>
   *
   * <code>RESTARTING = 16;</code>
   */
  RESTARTING(16),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in recreating state.
   * </pre>
   *
   * <code>RECREATING = 17;</code>
   */
  RECREATING(17),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database's role change is in progress state.
   * </pre>
   *
   * <code>ROLE_CHANGE_IN_PROGRESS = 18;</code>
   */
  ROLE_CHANGE_IN_PROGRESS(18),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in upgrading state.
   * </pre>
   *
   * <code>UPGRADING = 19;</code>
   */
  UPGRADING(19),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in inaccessible state.
   * </pre>
   *
   * <code>INACCESSIBLE = 20;</code>
   */
  INACCESSIBLE(20),
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in standby state.
   * </pre>
   *
   * <code>STANDBY = 21;</code>
   */
  STANDBY(21),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Default unspecified value.
   * </pre>
   *
   * <code>STATE_UNSPECIFIED = 0;</code>
   */
  public static final int STATE_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in provisioning state.
   * </pre>
   *
   * <code>PROVISIONING = 1;</code>
   */
  public static final int PROVISIONING_VALUE = 1;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in available state.
   * </pre>
   *
   * <code>AVAILABLE = 2;</code>
   */
  public static final int AVAILABLE_VALUE = 2;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in stopping state.
   * </pre>
   *
   * <code>STOPPING = 3;</code>
   */
  public static final int STOPPING_VALUE = 3;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in stopped state.
   * </pre>
   *
   * <code>STOPPED = 4;</code>
   */
  public static final int STOPPED_VALUE = 4;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in starting state.
   * </pre>
   *
   * <code>STARTING = 5;</code>
   */
  public static final int STARTING_VALUE = 5;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in terminating state.
   * </pre>
   *
   * <code>TERMINATING = 6;</code>
   */
  public static final int TERMINATING_VALUE = 6;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in terminated state.
   * </pre>
   *
   * <code>TERMINATED = 7;</code>
   */
  public static final int TERMINATED_VALUE = 7;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in unavailable state.
   * </pre>
   *
   * <code>UNAVAILABLE = 8;</code>
   */
  public static final int UNAVAILABLE_VALUE = 8;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database restore is in progress.
   * </pre>
   *
   * <code>RESTORE_IN_PROGRESS = 9;</code>
   */
  public static final int RESTORE_IN_PROGRESS_VALUE = 9;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database failed to restore.
   * </pre>
   *
   * <code>RESTORE_FAILED = 10;</code>
   */
  public static final int RESTORE_FAILED_VALUE = 10;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database backup is in progress.
   * </pre>
   *
   * <code>BACKUP_IN_PROGRESS = 11;</code>
   */
  public static final int BACKUP_IN_PROGRESS_VALUE = 11;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database scale is in progress.
   * </pre>
   *
   * <code>SCALE_IN_PROGRESS = 12;</code>
   */
  public static final int SCALE_IN_PROGRESS_VALUE = 12;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is available but needs attention
   * state.
   * </pre>
   *
   * <code>AVAILABLE_NEEDS_ATTENTION = 13;</code>
   */
  public static final int AVAILABLE_NEEDS_ATTENTION_VALUE = 13;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in updating state.
   * </pre>
   *
   * <code>UPDATING = 14;</code>
   */
  public static final int UPDATING_VALUE = 14;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database's maintenance is in progress state.
   * </pre>
   *
   * <code>MAINTENANCE_IN_PROGRESS = 15;</code>
   */
  public static final int MAINTENANCE_IN_PROGRESS_VALUE = 15;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in restarting state.
   * </pre>
   *
   * <code>RESTARTING = 16;</code>
   */
  public static final int RESTARTING_VALUE = 16;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in recreating state.
   * </pre>
   *
   * <code>RECREATING = 17;</code>
   */
  public static final int RECREATING_VALUE = 17;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database's role change is in progress state.
   * </pre>
   *
   * <code>ROLE_CHANGE_IN_PROGRESS = 18;</code>
   */
  public static final int ROLE_CHANGE_IN_PROGRESS_VALUE = 18;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in upgrading state.
   * </pre>
   *
   * <code>UPGRADING = 19;</code>
   */
  public static final int UPGRADING_VALUE = 19;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in inaccessible state.
   * </pre>
   *
   * <code>INACCESSIBLE = 20;</code>
   */
  public static final int INACCESSIBLE_VALUE = 20;
  /**
   *
   *
   * <pre>
   * Indicates that the Autonomous Database is in standby state.
   * </pre>
   *
   * <code>STANDBY = 21;</code>
   */
  public static final int STANDBY_VALUE = 21;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static State valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static State forNumber(int value) {
    switch (value) {
      case 0:
        return STATE_UNSPECIFIED;
      case 1:
        return PROVISIONING;
      case 2:
        return AVAILABLE;
      case 3:
        return STOPPING;
      case 4:
        return STOPPED;
      case 5:
        return STARTING;
      case 6:
        return TERMINATING;
      case 7:
        return TERMINATED;
      case 8:
        return UNAVAILABLE;
      case 9:
        return RESTORE_IN_PROGRESS;
      case 10:
        return RESTORE_FAILED;
      case 11:
        return BACKUP_IN_PROGRESS;
      case 12:
        return SCALE_IN_PROGRESS;
      case 13:
        return AVAILABLE_NEEDS_ATTENTION;
      case 14:
        return UPDATING;
      case 15:
        return MAINTENANCE_IN_PROGRESS;
      case 16:
        return RESTARTING;
      case 17:
        return RECREATING;
      case 18:
        return ROLE_CHANGE_IN_PROGRESS;
      case 19:
        return UPGRADING;
      case 20:
        return INACCESSIBLE;
      case 21:
        return STANDBY;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<State> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<State> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<State>() {
        public State findValueByNumber(int number) {
          return State.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.oracledatabase.v1.AutonomousDatabaseProto.getDescriptor()
        .getEnumTypes()
        .get(1);
  }

  private static final State[] VALUES = values();

  public static State valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private State(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.oracledatabase.v1.State)
}
