/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/oracledatabase/v1/exadata_infra.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.oracledatabase.v1;

public interface MaintenanceWindowOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.oracledatabase.v1.MaintenanceWindow)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. The maintenance window scheduling preference.
   * </pre>
   *
   * <code>
   * .google.cloud.oracledatabase.v1.MaintenanceWindow.MaintenanceWindowPreference preference = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for preference.
   */
  int getPreferenceValue();
  /**
   *
   *
   * <pre>
   * Optional. The maintenance window scheduling preference.
   * </pre>
   *
   * <code>
   * .google.cloud.oracledatabase.v1.MaintenanceWindow.MaintenanceWindowPreference preference = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The preference.
   */
  com.google.cloud.oracledatabase.v1.MaintenanceWindow.MaintenanceWindowPreference getPreference();

  /**
   *
   *
   * <pre>
   * Optional. Months during the year when maintenance should be performed.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the months.
   */
  java.util.List<com.google.type.Month> getMonthsList();
  /**
   *
   *
   * <pre>
   * Optional. Months during the year when maintenance should be performed.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The count of months.
   */
  int getMonthsCount();
  /**
   *
   *
   * <pre>
   * Optional. Months during the year when maintenance should be performed.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the element to return.
   * @return The months at the given index.
   */
  com.google.type.Month getMonths(int index);
  /**
   *
   *
   * <pre>
   * Optional. Months during the year when maintenance should be performed.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the enum numeric values on the wire for months.
   */
  java.util.List<java.lang.Integer> getMonthsValueList();
  /**
   *
   *
   * <pre>
   * Optional. Months during the year when maintenance should be performed.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of months at the given index.
   */
  int getMonthsValue(int index);

  /**
   *
   *
   * <pre>
   * Optional. Weeks during the month when maintenance should be performed.
   * Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a
   * duration of 7 days. Weeks start and end based on calendar dates, not days
   * of the week.
   * </pre>
   *
   * <code>repeated int32 weeks_of_month = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the weeksOfMonth.
   */
  java.util.List<java.lang.Integer> getWeeksOfMonthList();
  /**
   *
   *
   * <pre>
   * Optional. Weeks during the month when maintenance should be performed.
   * Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a
   * duration of 7 days. Weeks start and end based on calendar dates, not days
   * of the week.
   * </pre>
   *
   * <code>repeated int32 weeks_of_month = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The count of weeksOfMonth.
   */
  int getWeeksOfMonthCount();
  /**
   *
   *
   * <pre>
   * Optional. Weeks during the month when maintenance should be performed.
   * Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a
   * duration of 7 days. Weeks start and end based on calendar dates, not days
   * of the week.
   * </pre>
   *
   * <code>repeated int32 weeks_of_month = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the element to return.
   * @return The weeksOfMonth at the given index.
   */
  int getWeeksOfMonth(int index);

  /**
   *
   *
   * <pre>
   * Optional. Days during the week when maintenance should be performed.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the daysOfWeek.
   */
  java.util.List<com.google.type.DayOfWeek> getDaysOfWeekList();
  /**
   *
   *
   * <pre>
   * Optional. Days during the week when maintenance should be performed.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of daysOfWeek.
   */
  int getDaysOfWeekCount();
  /**
   *
   *
   * <pre>
   * Optional. Days during the week when maintenance should be performed.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The daysOfWeek at the given index.
   */
  com.google.type.DayOfWeek getDaysOfWeek(int index);
  /**
   *
   *
   * <pre>
   * Optional. Days during the week when maintenance should be performed.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for daysOfWeek.
   */
  java.util.List<java.lang.Integer> getDaysOfWeekValueList();
  /**
   *
   *
   * <pre>
   * Optional. Days during the week when maintenance should be performed.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of daysOfWeek at the given index.
   */
  int getDaysOfWeekValue(int index);

  /**
   *
   *
   * <pre>
   * Optional. The window of hours during the day when maintenance should be
   * performed. The window is a 4 hour slot. Valid values are:
   *   0 - represents time slot 0:00 - 3:59 UTC
   *   4 - represents time slot 4:00 - 7:59 UTC
   *   8 - represents time slot 8:00 - 11:59 UTC
   *   12 - represents time slot 12:00 - 15:59 UTC
   *   16 - represents time slot 16:00 - 19:59 UTC
   *   20 - represents time slot 20:00 - 23:59 UTC
   * </pre>
   *
   * <code>repeated int32 hours_of_day = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the hoursOfDay.
   */
  java.util.List<java.lang.Integer> getHoursOfDayList();
  /**
   *
   *
   * <pre>
   * Optional. The window of hours during the day when maintenance should be
   * performed. The window is a 4 hour slot. Valid values are:
   *   0 - represents time slot 0:00 - 3:59 UTC
   *   4 - represents time slot 4:00 - 7:59 UTC
   *   8 - represents time slot 8:00 - 11:59 UTC
   *   12 - represents time slot 12:00 - 15:59 UTC
   *   16 - represents time slot 16:00 - 19:59 UTC
   *   20 - represents time slot 20:00 - 23:59 UTC
   * </pre>
   *
   * <code>repeated int32 hours_of_day = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The count of hoursOfDay.
   */
  int getHoursOfDayCount();
  /**
   *
   *
   * <pre>
   * Optional. The window of hours during the day when maintenance should be
   * performed. The window is a 4 hour slot. Valid values are:
   *   0 - represents time slot 0:00 - 3:59 UTC
   *   4 - represents time slot 4:00 - 7:59 UTC
   *   8 - represents time slot 8:00 - 11:59 UTC
   *   12 - represents time slot 12:00 - 15:59 UTC
   *   16 - represents time slot 16:00 - 19:59 UTC
   *   20 - represents time slot 20:00 - 23:59 UTC
   * </pre>
   *
   * <code>repeated int32 hours_of_day = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the element to return.
   * @return The hoursOfDay at the given index.
   */
  int getHoursOfDay(int index);

  /**
   *
   *
   * <pre>
   * Optional. Lead time window allows user to set a lead time to prepare for a
   * down time. The lead time is in weeks and valid value is between 1 to 4.
   * </pre>
   *
   * <code>int32 lead_time_week = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The leadTimeWeek.
   */
  int getLeadTimeWeek();

  /**
   *
   *
   * <pre>
   * Optional. Cloud CloudExadataInfrastructure node patching method, either
   * "ROLLING" or "NONROLLING". Default value is ROLLING.
   * </pre>
   *
   * <code>
   * .google.cloud.oracledatabase.v1.MaintenanceWindow.PatchingMode patching_mode = 7 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enum numeric value on the wire for patchingMode.
   */
  int getPatchingModeValue();
  /**
   *
   *
   * <pre>
   * Optional. Cloud CloudExadataInfrastructure node patching method, either
   * "ROLLING" or "NONROLLING". Default value is ROLLING.
   * </pre>
   *
   * <code>
   * .google.cloud.oracledatabase.v1.MaintenanceWindow.PatchingMode patching_mode = 7 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The patchingMode.
   */
  com.google.cloud.oracledatabase.v1.MaintenanceWindow.PatchingMode getPatchingMode();

  /**
   *
   *
   * <pre>
   * Optional. Determines the amount of time the system will wait before the
   * start of each database server patching operation. Custom action timeout is
   * in minutes and valid value is between 15 to 120 (inclusive).
   * </pre>
   *
   * <code>int32 custom_action_timeout_mins = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The customActionTimeoutMins.
   */
  int getCustomActionTimeoutMins();

  /**
   *
   *
   * <pre>
   * Optional. If true, enables the configuration of a custom action timeout
   * (waiting period) between database server patching operations.
   * </pre>
   *
   * <code>bool is_custom_action_timeout_enabled = 9 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The isCustomActionTimeoutEnabled.
   */
  boolean getIsCustomActionTimeoutEnabled();
}
