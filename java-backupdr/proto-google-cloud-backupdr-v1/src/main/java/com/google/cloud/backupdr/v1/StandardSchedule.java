/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/backupdr/v1/backupplan.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.backupdr.v1;

/**
 *
 *
 * <pre>
 * `StandardSchedule` defines a schedule that run within the confines of a
 * defined window of days. We can define recurrence type for schedule as
 * HOURLY, DAILY, WEEKLY, MONTHLY or YEARLY.
 * </pre>
 *
 * Protobuf type {@code google.cloud.backupdr.v1.StandardSchedule}
 */
public final class StandardSchedule extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.backupdr.v1.StandardSchedule)
    StandardScheduleOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use StandardSchedule.newBuilder() to construct.
  private StandardSchedule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private StandardSchedule() {
    recurrenceType_ = 0;
    daysOfWeek_ = java.util.Collections.emptyList();
    daysOfMonth_ = emptyIntList();
    months_ = java.util.Collections.emptyList();
    timeZone_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new StandardSchedule();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.backupdr.v1.BackupPlanProto
        .internal_static_google_cloud_backupdr_v1_StandardSchedule_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.backupdr.v1.BackupPlanProto
        .internal_static_google_cloud_backupdr_v1_StandardSchedule_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.backupdr.v1.StandardSchedule.class,
            com.google.cloud.backupdr.v1.StandardSchedule.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * `RecurrenceTypes` enumerates the applicable periodicity for the schedule.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.backupdr.v1.StandardSchedule.RecurrenceType}
   */
  public enum RecurrenceType implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * recurrence type not set
     * </pre>
     *
     * <code>RECURRENCE_TYPE_UNSPECIFIED = 0;</code>
     */
    RECURRENCE_TYPE_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied hourly.
     * </pre>
     *
     * <code>HOURLY = 1;</code>
     */
    HOURLY(1),
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied daily.
     * </pre>
     *
     * <code>DAILY = 2;</code>
     */
    DAILY(2),
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied weekly.
     * </pre>
     *
     * <code>WEEKLY = 3;</code>
     */
    WEEKLY(3),
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied monthly.
     * </pre>
     *
     * <code>MONTHLY = 4;</code>
     */
    MONTHLY(4),
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied yearly.
     * </pre>
     *
     * <code>YEARLY = 5;</code>
     */
    YEARLY(5),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * recurrence type not set
     * </pre>
     *
     * <code>RECURRENCE_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int RECURRENCE_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied hourly.
     * </pre>
     *
     * <code>HOURLY = 1;</code>
     */
    public static final int HOURLY_VALUE = 1;
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied daily.
     * </pre>
     *
     * <code>DAILY = 2;</code>
     */
    public static final int DAILY_VALUE = 2;
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied weekly.
     * </pre>
     *
     * <code>WEEKLY = 3;</code>
     */
    public static final int WEEKLY_VALUE = 3;
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied monthly.
     * </pre>
     *
     * <code>MONTHLY = 4;</code>
     */
    public static final int MONTHLY_VALUE = 4;
    /**
     *
     *
     * <pre>
     * The `BackupRule` is to be applied yearly.
     * </pre>
     *
     * <code>YEARLY = 5;</code>
     */
    public static final int YEARLY_VALUE = 5;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RecurrenceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RecurrenceType forNumber(int value) {
      switch (value) {
        case 0:
          return RECURRENCE_TYPE_UNSPECIFIED;
        case 1:
          return HOURLY;
        case 2:
          return DAILY;
        case 3:
          return WEEKLY;
        case 4:
          return MONTHLY;
        case 5:
          return YEARLY;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RecurrenceType> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<RecurrenceType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<RecurrenceType>() {
          public RecurrenceType findValueByNumber(int number) {
            return RecurrenceType.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.cloud.backupdr.v1.StandardSchedule.getDescriptor().getEnumTypes().get(0);
    }

    private static final RecurrenceType[] VALUES = values();

    public static RecurrenceType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RecurrenceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.backupdr.v1.StandardSchedule.RecurrenceType)
  }

  private int bitField0_;
  public static final int RECURRENCE_TYPE_FIELD_NUMBER = 1;
  private int recurrenceType_ = 0;
  /**
   *
   *
   * <pre>
   * Required. Specifies the `RecurrenceType` for the schedule.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The enum numeric value on the wire for recurrenceType.
   */
  @java.lang.Override
  public int getRecurrenceTypeValue() {
    return recurrenceType_;
  }
  /**
   *
   *
   * <pre>
   * Required. Specifies the `RecurrenceType` for the schedule.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The recurrenceType.
   */
  @java.lang.Override
  public com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType getRecurrenceType() {
    com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType result =
        com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.forNumber(recurrenceType_);
    return result == null
        ? com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.UNRECOGNIZED
        : result;
  }

  public static final int HOURLY_FREQUENCY_FIELD_NUMBER = 2;
  private int hourlyFrequency_ = 0;
  /**
   *
   *
   * <pre>
   * Optional. Specifies frequency for hourly backups. A hourly frequency of 2
   * means jobs will run every 2 hours from start time till end time defined.
   *
   * This is required for `recurrence_type`, `HOURLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `HOURLY`.
   *
   * Value of hourly frequency should be between 6 and 23.
   *
   * Reason for limit : We found that there is bandwidth limitation of 3GB/S for
   * GMI while taking a backup and 5GB/S while doing a restore. Given the amount
   * of parallel backups and restore we are targeting, this will potentially
   * take the backup time to mins and hours (in worst case scenario).
   * </pre>
   *
   * <code>int32 hourly_frequency = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The hourlyFrequency.
   */
  @java.lang.Override
  public int getHourlyFrequency() {
    return hourlyFrequency_;
  }

  public static final int DAYS_OF_WEEK_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> daysOfWeek_;

  private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.google.type.DayOfWeek>
      daysOfWeek_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.google.type.DayOfWeek>() {
            public com.google.type.DayOfWeek convert(java.lang.Integer from) {
              com.google.type.DayOfWeek result = com.google.type.DayOfWeek.forNumber(from);
              return result == null ? com.google.type.DayOfWeek.UNRECOGNIZED : result;
            }
          };
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
   * will run.
   *
   * This is required for `recurrence_type`, `WEEKLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `WEEKLY`.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the daysOfWeek.
   */
  @java.lang.Override
  public java.util.List<com.google.type.DayOfWeek> getDaysOfWeekList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.google.type.DayOfWeek>(daysOfWeek_, daysOfWeek_converter_);
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
   * will run.
   *
   * This is required for `recurrence_type`, `WEEKLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `WEEKLY`.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The count of daysOfWeek.
   */
  @java.lang.Override
  public int getDaysOfWeekCount() {
    return daysOfWeek_.size();
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
   * will run.
   *
   * This is required for `recurrence_type`, `WEEKLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `WEEKLY`.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the element to return.
   * @return The daysOfWeek at the given index.
   */
  @java.lang.Override
  public com.google.type.DayOfWeek getDaysOfWeek(int index) {
    return daysOfWeek_converter_.convert(daysOfWeek_.get(index));
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
   * will run.
   *
   * This is required for `recurrence_type`, `WEEKLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `WEEKLY`.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for daysOfWeek.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getDaysOfWeekValueList() {
    return daysOfWeek_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
   * will run.
   *
   * This is required for `recurrence_type`, `WEEKLY` and is not applicable
   * otherwise. A validation error will occur if a value is supplied and
   * `recurrence_type` is not `WEEKLY`.
   * </pre>
   *
   * <code>
   * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of daysOfWeek at the given index.
   */
  @java.lang.Override
  public int getDaysOfWeekValue(int index) {
    return daysOfWeek_.get(index);
  }

  private int daysOfWeekMemoizedSerializedSize;

  public static final int DAYS_OF_MONTH_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList daysOfMonth_ = emptyIntList();
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
   *
   * Values for `days_of_month` are only applicable for `recurrence_type`,
   * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
   * supplied.
   * </pre>
   *
   * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the daysOfMonth.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getDaysOfMonthList() {
    return daysOfMonth_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
   *
   * Values for `days_of_month` are only applicable for `recurrence_type`,
   * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
   * supplied.
   * </pre>
   *
   * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The count of daysOfMonth.
   */
  public int getDaysOfMonthCount() {
    return daysOfMonth_.size();
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
   *
   * Values for `days_of_month` are only applicable for `recurrence_type`,
   * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
   * supplied.
   * </pre>
   *
   * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the element to return.
   * @return The daysOfMonth at the given index.
   */
  public int getDaysOfMonth(int index) {
    return daysOfMonth_.getInt(index);
  }

  private int daysOfMonthMemoizedSerializedSize = -1;

  public static final int WEEK_DAY_OF_MONTH_FIELD_NUMBER = 5;
  private com.google.cloud.backupdr.v1.WeekDayOfMonth weekDayOfMonth_;
  /**
   *
   *
   * <pre>
   * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
   * MONDAY, on which jobs will run. This will be specified by two fields in
   * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
   * e.g. `LAST`.
   *
   * This field is only applicable for `recurrence_type`, `MONTHLY` and
   * `YEARLY`. A validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the weekDayOfMonth field is set.
   */
  @java.lang.Override
  public boolean hasWeekDayOfMonth() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
   * MONDAY, on which jobs will run. This will be specified by two fields in
   * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
   * e.g. `LAST`.
   *
   * This field is only applicable for `recurrence_type`, `MONTHLY` and
   * `YEARLY`. A validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The weekDayOfMonth.
   */
  @java.lang.Override
  public com.google.cloud.backupdr.v1.WeekDayOfMonth getWeekDayOfMonth() {
    return weekDayOfMonth_ == null
        ? com.google.cloud.backupdr.v1.WeekDayOfMonth.getDefaultInstance()
        : weekDayOfMonth_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
   * MONDAY, on which jobs will run. This will be specified by two fields in
   * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
   * e.g. `LAST`.
   *
   * This field is only applicable for `recurrence_type`, `MONTHLY` and
   * `YEARLY`. A validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.backupdr.v1.WeekDayOfMonthOrBuilder getWeekDayOfMonthOrBuilder() {
    return weekDayOfMonth_ == null
        ? com.google.cloud.backupdr.v1.WeekDayOfMonth.getDefaultInstance()
        : weekDayOfMonth_;
  }

  public static final int MONTHS_FIELD_NUMBER = 6;

  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> months_;

  private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.google.type.Month>
      months_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.google.type.Month>() {
            public com.google.type.Month convert(java.lang.Integer from) {
              com.google.type.Month result = com.google.type.Month.forNumber(from);
              return result == null ? com.google.type.Month.UNRECOGNIZED : result;
            }
          };
  /**
   *
   *
   * <pre>
   * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
   * which jobs will run.
   *
   * This field is only applicable when `recurrence_type` is `YEARLY`. A
   * validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the months.
   */
  @java.lang.Override
  public java.util.List<com.google.type.Month> getMonthsList() {
    return new com.google.protobuf.Internal.ListAdapter<java.lang.Integer, com.google.type.Month>(
        months_, months_converter_);
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
   * which jobs will run.
   *
   * This field is only applicable when `recurrence_type` is `YEARLY`. A
   * validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The count of months.
   */
  @java.lang.Override
  public int getMonthsCount() {
    return months_.size();
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
   * which jobs will run.
   *
   * This field is only applicable when `recurrence_type` is `YEARLY`. A
   * validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the element to return.
   * @return The months at the given index.
   */
  @java.lang.Override
  public com.google.type.Month getMonths(int index) {
    return months_converter_.convert(months_.get(index));
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
   * which jobs will run.
   *
   * This field is only applicable when `recurrence_type` is `YEARLY`. A
   * validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return A list containing the enum numeric values on the wire for months.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer> getMonthsValueList() {
    return months_;
  }
  /**
   *
   *
   * <pre>
   * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
   * which jobs will run.
   *
   * This field is only applicable when `recurrence_type` is `YEARLY`. A
   * validation error will occur if other values are supplied.
   * </pre>
   *
   * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of months at the given index.
   */
  @java.lang.Override
  public int getMonthsValue(int index) {
    return months_.get(index);
  }

  private int monthsMemoizedSerializedSize;

  public static final int BACKUP_WINDOW_FIELD_NUMBER = 7;
  private com.google.cloud.backupdr.v1.BackupWindow backupWindow_;
  /**
   *
   *
   * <pre>
   * Required. A BackupWindow defines the window of day during which backup jobs
   * will run. Jobs are queued at the beginning of the window and will be marked
   * as `NOT_RUN` if they do not start by the end of the window.
   *
   * Note: running jobs will not be cancelled at the end of the window.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the backupWindow field is set.
   */
  @java.lang.Override
  public boolean hasBackupWindow() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Required. A BackupWindow defines the window of day during which backup jobs
   * will run. Jobs are queued at the beginning of the window and will be marked
   * as `NOT_RUN` if they do not start by the end of the window.
   *
   * Note: running jobs will not be cancelled at the end of the window.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The backupWindow.
   */
  @java.lang.Override
  public com.google.cloud.backupdr.v1.BackupWindow getBackupWindow() {
    return backupWindow_ == null
        ? com.google.cloud.backupdr.v1.BackupWindow.getDefaultInstance()
        : backupWindow_;
  }
  /**
   *
   *
   * <pre>
   * Required. A BackupWindow defines the window of day during which backup jobs
   * will run. Jobs are queued at the beginning of the window and will be marked
   * as `NOT_RUN` if they do not start by the end of the window.
   *
   * Note: running jobs will not be cancelled at the end of the window.
   * </pre>
   *
   * <code>
   * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.backupdr.v1.BackupWindowOrBuilder getBackupWindowOrBuilder() {
    return backupWindow_ == null
        ? com.google.cloud.backupdr.v1.BackupWindow.getDefaultInstance()
        : backupWindow_;
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 8;

  @SuppressWarnings("serial")
  private volatile java.lang.Object timeZone_ = "";
  /**
   *
   *
   * <pre>
   * Required. The time zone to be used when interpreting the schedule.
   * The value of this field must be a time zone name from the IANA tz database.
   * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
   * list of valid timezone names. For e.g., Europe/Paris.
   * </pre>
   *
   * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The timeZone.
   */
  @java.lang.Override
  public java.lang.String getTimeZone() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      timeZone_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. The time zone to be used when interpreting the schedule.
   * The value of this field must be a time zone name from the IANA tz database.
   * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
   * list of valid timezone names. For e.g., Europe/Paris.
   * </pre>
   *
   * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for timeZone.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTimeZoneBytes() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      timeZone_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    getSerializedSize();
    if (recurrenceType_
        != com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.RECURRENCE_TYPE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(1, recurrenceType_);
    }
    if (hourlyFrequency_ != 0) {
      output.writeInt32(2, hourlyFrequency_);
    }
    if (getDaysOfWeekList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(daysOfWeekMemoizedSerializedSize);
    }
    for (int i = 0; i < daysOfWeek_.size(); i++) {
      output.writeEnumNoTag(daysOfWeek_.get(i));
    }
    if (getDaysOfMonthList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(daysOfMonthMemoizedSerializedSize);
    }
    for (int i = 0; i < daysOfMonth_.size(); i++) {
      output.writeInt32NoTag(daysOfMonth_.getInt(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getWeekDayOfMonth());
    }
    if (getMonthsList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(monthsMemoizedSerializedSize);
    }
    for (int i = 0; i < months_.size(); i++) {
      output.writeEnumNoTag(months_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(7, getBackupWindow());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeZone_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, timeZone_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (recurrenceType_
        != com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.RECURRENCE_TYPE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, recurrenceType_);
    }
    if (hourlyFrequency_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, hourlyFrequency_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < daysOfWeek_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(daysOfWeek_.get(i));
      }
      size += dataSize;
      if (!getDaysOfWeekList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataSize);
      }
      daysOfWeekMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < daysOfMonth_.size(); i++) {
        dataSize +=
            com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(daysOfMonth_.getInt(i));
      }
      size += dataSize;
      if (!getDaysOfMonthList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
      }
      daysOfMonthMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getWeekDayOfMonth());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < months_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(months_.get(i));
      }
      size += dataSize;
      if (!getMonthsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataSize);
      }
      monthsMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, getBackupWindow());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timeZone_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, timeZone_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.backupdr.v1.StandardSchedule)) {
      return super.equals(obj);
    }
    com.google.cloud.backupdr.v1.StandardSchedule other =
        (com.google.cloud.backupdr.v1.StandardSchedule) obj;

    if (recurrenceType_ != other.recurrenceType_) return false;
    if (getHourlyFrequency() != other.getHourlyFrequency()) return false;
    if (!daysOfWeek_.equals(other.daysOfWeek_)) return false;
    if (!getDaysOfMonthList().equals(other.getDaysOfMonthList())) return false;
    if (hasWeekDayOfMonth() != other.hasWeekDayOfMonth()) return false;
    if (hasWeekDayOfMonth()) {
      if (!getWeekDayOfMonth().equals(other.getWeekDayOfMonth())) return false;
    }
    if (!months_.equals(other.months_)) return false;
    if (hasBackupWindow() != other.hasBackupWindow()) return false;
    if (hasBackupWindow()) {
      if (!getBackupWindow().equals(other.getBackupWindow())) return false;
    }
    if (!getTimeZone().equals(other.getTimeZone())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + RECURRENCE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + recurrenceType_;
    hash = (37 * hash) + HOURLY_FREQUENCY_FIELD_NUMBER;
    hash = (53 * hash) + getHourlyFrequency();
    if (getDaysOfWeekCount() > 0) {
      hash = (37 * hash) + DAYS_OF_WEEK_FIELD_NUMBER;
      hash = (53 * hash) + daysOfWeek_.hashCode();
    }
    if (getDaysOfMonthCount() > 0) {
      hash = (37 * hash) + DAYS_OF_MONTH_FIELD_NUMBER;
      hash = (53 * hash) + getDaysOfMonthList().hashCode();
    }
    if (hasWeekDayOfMonth()) {
      hash = (37 * hash) + WEEK_DAY_OF_MONTH_FIELD_NUMBER;
      hash = (53 * hash) + getWeekDayOfMonth().hashCode();
    }
    if (getMonthsCount() > 0) {
      hash = (37 * hash) + MONTHS_FIELD_NUMBER;
      hash = (53 * hash) + months_.hashCode();
    }
    if (hasBackupWindow()) {
      hash = (37 * hash) + BACKUP_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + getBackupWindow().hashCode();
    }
    hash = (37 * hash) + TIME_ZONE_FIELD_NUMBER;
    hash = (53 * hash) + getTimeZone().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.backupdr.v1.StandardSchedule prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * `StandardSchedule` defines a schedule that run within the confines of a
   * defined window of days. We can define recurrence type for schedule as
   * HOURLY, DAILY, WEEKLY, MONTHLY or YEARLY.
   * </pre>
   *
   * Protobuf type {@code google.cloud.backupdr.v1.StandardSchedule}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.backupdr.v1.StandardSchedule)
      com.google.cloud.backupdr.v1.StandardScheduleOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.backupdr.v1.BackupPlanProto
          .internal_static_google_cloud_backupdr_v1_StandardSchedule_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.backupdr.v1.BackupPlanProto
          .internal_static_google_cloud_backupdr_v1_StandardSchedule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.backupdr.v1.StandardSchedule.class,
              com.google.cloud.backupdr.v1.StandardSchedule.Builder.class);
    }

    // Construct using com.google.cloud.backupdr.v1.StandardSchedule.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getWeekDayOfMonthFieldBuilder();
        getBackupWindowFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      recurrenceType_ = 0;
      hourlyFrequency_ = 0;
      daysOfWeek_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      daysOfMonth_ = emptyIntList();
      weekDayOfMonth_ = null;
      if (weekDayOfMonthBuilder_ != null) {
        weekDayOfMonthBuilder_.dispose();
        weekDayOfMonthBuilder_ = null;
      }
      months_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      backupWindow_ = null;
      if (backupWindowBuilder_ != null) {
        backupWindowBuilder_.dispose();
        backupWindowBuilder_ = null;
      }
      timeZone_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.backupdr.v1.BackupPlanProto
          .internal_static_google_cloud_backupdr_v1_StandardSchedule_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.backupdr.v1.StandardSchedule getDefaultInstanceForType() {
      return com.google.cloud.backupdr.v1.StandardSchedule.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.backupdr.v1.StandardSchedule build() {
      com.google.cloud.backupdr.v1.StandardSchedule result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.backupdr.v1.StandardSchedule buildPartial() {
      com.google.cloud.backupdr.v1.StandardSchedule result =
          new com.google.cloud.backupdr.v1.StandardSchedule(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.cloud.backupdr.v1.StandardSchedule result) {
      if (((bitField0_ & 0x00000004) != 0)) {
        daysOfWeek_ = java.util.Collections.unmodifiableList(daysOfWeek_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.daysOfWeek_ = daysOfWeek_;
      if (((bitField0_ & 0x00000020) != 0)) {
        months_ = java.util.Collections.unmodifiableList(months_);
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.months_ = months_;
    }

    private void buildPartial0(com.google.cloud.backupdr.v1.StandardSchedule result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.recurrenceType_ = recurrenceType_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.hourlyFrequency_ = hourlyFrequency_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        daysOfMonth_.makeImmutable();
        result.daysOfMonth_ = daysOfMonth_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.weekDayOfMonth_ =
            weekDayOfMonthBuilder_ == null ? weekDayOfMonth_ : weekDayOfMonthBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.backupWindow_ =
            backupWindowBuilder_ == null ? backupWindow_ : backupWindowBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.timeZone_ = timeZone_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.backupdr.v1.StandardSchedule) {
        return mergeFrom((com.google.cloud.backupdr.v1.StandardSchedule) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.backupdr.v1.StandardSchedule other) {
      if (other == com.google.cloud.backupdr.v1.StandardSchedule.getDefaultInstance()) return this;
      if (other.recurrenceType_ != 0) {
        setRecurrenceTypeValue(other.getRecurrenceTypeValue());
      }
      if (other.getHourlyFrequency() != 0) {
        setHourlyFrequency(other.getHourlyFrequency());
      }
      if (!other.daysOfWeek_.isEmpty()) {
        if (daysOfWeek_.isEmpty()) {
          daysOfWeek_ = other.daysOfWeek_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureDaysOfWeekIsMutable();
          daysOfWeek_.addAll(other.daysOfWeek_);
        }
        onChanged();
      }
      if (!other.daysOfMonth_.isEmpty()) {
        if (daysOfMonth_.isEmpty()) {
          daysOfMonth_ = other.daysOfMonth_;
          daysOfMonth_.makeImmutable();
          bitField0_ |= 0x00000008;
        } else {
          ensureDaysOfMonthIsMutable();
          daysOfMonth_.addAll(other.daysOfMonth_);
        }
        onChanged();
      }
      if (other.hasWeekDayOfMonth()) {
        mergeWeekDayOfMonth(other.getWeekDayOfMonth());
      }
      if (!other.months_.isEmpty()) {
        if (months_.isEmpty()) {
          months_ = other.months_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureMonthsIsMutable();
          months_.addAll(other.months_);
        }
        onChanged();
      }
      if (other.hasBackupWindow()) {
        mergeBackupWindow(other.getBackupWindow());
      }
      if (!other.getTimeZone().isEmpty()) {
        timeZone_ = other.timeZone_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                recurrenceType_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 16:
              {
                hourlyFrequency_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
            case 24:
              {
                int tmpRaw = input.readEnum();
                ensureDaysOfWeekIsMutable();
                daysOfWeek_.add(tmpRaw);
                break;
              } // case 24
            case 26:
              {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureDaysOfWeekIsMutable();
                  daysOfWeek_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 26
            case 32:
              {
                int v = input.readInt32();
                ensureDaysOfMonthIsMutable();
                daysOfMonth_.addInt(v);
                break;
              } // case 32
            case 34:
              {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDaysOfMonthIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  daysOfMonth_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getWeekDayOfMonthFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 48:
              {
                int tmpRaw = input.readEnum();
                ensureMonthsIsMutable();
                months_.add(tmpRaw);
                break;
              } // case 48
            case 50:
              {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureMonthsIsMutable();
                  months_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 50
            case 58:
              {
                input.readMessage(getBackupWindowFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
            case 66:
              {
                timeZone_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private int recurrenceType_ = 0;
    /**
     *
     *
     * <pre>
     * Required. Specifies the `RecurrenceType` for the schedule.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for recurrenceType.
     */
    @java.lang.Override
    public int getRecurrenceTypeValue() {
      return recurrenceType_;
    }
    /**
     *
     *
     * <pre>
     * Required. Specifies the `RecurrenceType` for the schedule.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for recurrenceType to set.
     * @return This builder for chaining.
     */
    public Builder setRecurrenceTypeValue(int value) {
      recurrenceType_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Specifies the `RecurrenceType` for the schedule.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The recurrenceType.
     */
    @java.lang.Override
    public com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType getRecurrenceType() {
      com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType result =
          com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.forNumber(recurrenceType_);
      return result == null
          ? com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Required. Specifies the `RecurrenceType` for the schedule.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The recurrenceType to set.
     * @return This builder for chaining.
     */
    public Builder setRecurrenceType(
        com.google.cloud.backupdr.v1.StandardSchedule.RecurrenceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      recurrenceType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Specifies the `RecurrenceType` for the schedule.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.StandardSchedule.RecurrenceType recurrence_type = 1 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRecurrenceType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      recurrenceType_ = 0;
      onChanged();
      return this;
    }

    private int hourlyFrequency_;
    /**
     *
     *
     * <pre>
     * Optional. Specifies frequency for hourly backups. A hourly frequency of 2
     * means jobs will run every 2 hours from start time till end time defined.
     *
     * This is required for `recurrence_type`, `HOURLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `HOURLY`.
     *
     * Value of hourly frequency should be between 6 and 23.
     *
     * Reason for limit : We found that there is bandwidth limitation of 3GB/S for
     * GMI while taking a backup and 5GB/S while doing a restore. Given the amount
     * of parallel backups and restore we are targeting, this will potentially
     * take the backup time to mins and hours (in worst case scenario).
     * </pre>
     *
     * <code>int32 hourly_frequency = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The hourlyFrequency.
     */
    @java.lang.Override
    public int getHourlyFrequency() {
      return hourlyFrequency_;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies frequency for hourly backups. A hourly frequency of 2
     * means jobs will run every 2 hours from start time till end time defined.
     *
     * This is required for `recurrence_type`, `HOURLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `HOURLY`.
     *
     * Value of hourly frequency should be between 6 and 23.
     *
     * Reason for limit : We found that there is bandwidth limitation of 3GB/S for
     * GMI while taking a backup and 5GB/S while doing a restore. Given the amount
     * of parallel backups and restore we are targeting, this will potentially
     * take the backup time to mins and hours (in worst case scenario).
     * </pre>
     *
     * <code>int32 hourly_frequency = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The hourlyFrequency to set.
     * @return This builder for chaining.
     */
    public Builder setHourlyFrequency(int value) {

      hourlyFrequency_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies frequency for hourly backups. A hourly frequency of 2
     * means jobs will run every 2 hours from start time till end time defined.
     *
     * This is required for `recurrence_type`, `HOURLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `HOURLY`.
     *
     * Value of hourly frequency should be between 6 and 23.
     *
     * Reason for limit : We found that there is bandwidth limitation of 3GB/S for
     * GMI while taking a backup and 5GB/S while doing a restore. Given the amount
     * of parallel backups and restore we are targeting, this will potentially
     * take the backup time to mins and hours (in worst case scenario).
     * </pre>
     *
     * <code>int32 hourly_frequency = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearHourlyFrequency() {
      bitField0_ = (bitField0_ & ~0x00000002);
      hourlyFrequency_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> daysOfWeek_ = java.util.Collections.emptyList();

    private void ensureDaysOfWeekIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        daysOfWeek_ = new java.util.ArrayList<java.lang.Integer>(daysOfWeek_);
        bitField0_ |= 0x00000004;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the daysOfWeek.
     */
    public java.util.List<com.google.type.DayOfWeek> getDaysOfWeekList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.type.DayOfWeek>(daysOfWeek_, daysOfWeek_converter_);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of daysOfWeek.
     */
    public int getDaysOfWeekCount() {
      return daysOfWeek_.size();
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The daysOfWeek at the given index.
     */
    public com.google.type.DayOfWeek getDaysOfWeek(int index) {
      return daysOfWeek_converter_.convert(daysOfWeek_.get(index));
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The daysOfWeek to set.
     * @return This builder for chaining.
     */
    public Builder setDaysOfWeek(int index, com.google.type.DayOfWeek value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDaysOfWeekIsMutable();
      daysOfWeek_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The daysOfWeek to add.
     * @return This builder for chaining.
     */
    public Builder addDaysOfWeek(com.google.type.DayOfWeek value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDaysOfWeekIsMutable();
      daysOfWeek_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The daysOfWeek to add.
     * @return This builder for chaining.
     */
    public Builder addAllDaysOfWeek(
        java.lang.Iterable<? extends com.google.type.DayOfWeek> values) {
      ensureDaysOfWeekIsMutable();
      for (com.google.type.DayOfWeek value : values) {
        daysOfWeek_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDaysOfWeek() {
      daysOfWeek_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the enum numeric values on the wire for daysOfWeek.
     */
    public java.util.List<java.lang.Integer> getDaysOfWeekValueList() {
      return java.util.Collections.unmodifiableList(daysOfWeek_);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of daysOfWeek at the given index.
     */
    public int getDaysOfWeekValue(int index) {
      return daysOfWeek_.get(index);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for daysOfWeek to set.
     * @return This builder for chaining.
     */
    public Builder setDaysOfWeekValue(int index, int value) {
      ensureDaysOfWeekIsMutable();
      daysOfWeek_.set(index, value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for daysOfWeek to add.
     * @return This builder for chaining.
     */
    public Builder addDaysOfWeekValue(int value) {
      ensureDaysOfWeekIsMutable();
      daysOfWeek_.add(value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs
     * will run.
     *
     * This is required for `recurrence_type`, `WEEKLY` and is not applicable
     * otherwise. A validation error will occur if a value is supplied and
     * `recurrence_type` is not `WEEKLY`.
     * </pre>
     *
     * <code>
     * repeated .google.type.DayOfWeek days_of_week = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The enum numeric values on the wire for daysOfWeek to add.
     * @return This builder for chaining.
     */
    public Builder addAllDaysOfWeekValue(java.lang.Iterable<java.lang.Integer> values) {
      ensureDaysOfWeekIsMutable();
      for (int value : values) {
        daysOfWeek_.add(value);
      }
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList daysOfMonth_ = emptyIntList();

    private void ensureDaysOfMonthIsMutable() {
      if (!daysOfMonth_.isModifiable()) {
        daysOfMonth_ = makeMutableCopy(daysOfMonth_);
      }
      bitField0_ |= 0x00000008;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return A list containing the daysOfMonth.
     */
    public java.util.List<java.lang.Integer> getDaysOfMonthList() {
      daysOfMonth_.makeImmutable();
      return daysOfMonth_;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The count of daysOfMonth.
     */
    public int getDaysOfMonthCount() {
      return daysOfMonth_.size();
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param index The index of the element to return.
     * @return The daysOfMonth at the given index.
     */
    public int getDaysOfMonth(int index) {
      return daysOfMonth_.getInt(index);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param index The index to set the value at.
     * @param value The daysOfMonth to set.
     * @return This builder for chaining.
     */
    public Builder setDaysOfMonth(int index, int value) {

      ensureDaysOfMonthIsMutable();
      daysOfMonth_.setInt(index, value);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The daysOfMonth to add.
     * @return This builder for chaining.
     */
    public Builder addDaysOfMonth(int value) {

      ensureDaysOfMonthIsMutable();
      daysOfMonth_.addInt(value);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param values The daysOfMonth to add.
     * @return This builder for chaining.
     */
    public Builder addAllDaysOfMonth(java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDaysOfMonthIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, daysOfMonth_);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
     *
     * Values for `days_of_month` are only applicable for `recurrence_type`,
     * `MONTHLY` and `YEARLY`. A validation error will occur if other values are
     * supplied.
     * </pre>
     *
     * <code>repeated int32 days_of_month = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDaysOfMonth() {
      daysOfMonth_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private com.google.cloud.backupdr.v1.WeekDayOfMonth weekDayOfMonth_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.backupdr.v1.WeekDayOfMonth,
            com.google.cloud.backupdr.v1.WeekDayOfMonth.Builder,
            com.google.cloud.backupdr.v1.WeekDayOfMonthOrBuilder>
        weekDayOfMonthBuilder_;
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the weekDayOfMonth field is set.
     */
    public boolean hasWeekDayOfMonth() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The weekDayOfMonth.
     */
    public com.google.cloud.backupdr.v1.WeekDayOfMonth getWeekDayOfMonth() {
      if (weekDayOfMonthBuilder_ == null) {
        return weekDayOfMonth_ == null
            ? com.google.cloud.backupdr.v1.WeekDayOfMonth.getDefaultInstance()
            : weekDayOfMonth_;
      } else {
        return weekDayOfMonthBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setWeekDayOfMonth(com.google.cloud.backupdr.v1.WeekDayOfMonth value) {
      if (weekDayOfMonthBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        weekDayOfMonth_ = value;
      } else {
        weekDayOfMonthBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setWeekDayOfMonth(
        com.google.cloud.backupdr.v1.WeekDayOfMonth.Builder builderForValue) {
      if (weekDayOfMonthBuilder_ == null) {
        weekDayOfMonth_ = builderForValue.build();
      } else {
        weekDayOfMonthBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeWeekDayOfMonth(com.google.cloud.backupdr.v1.WeekDayOfMonth value) {
      if (weekDayOfMonthBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && weekDayOfMonth_ != null
            && weekDayOfMonth_
                != com.google.cloud.backupdr.v1.WeekDayOfMonth.getDefaultInstance()) {
          getWeekDayOfMonthBuilder().mergeFrom(value);
        } else {
          weekDayOfMonth_ = value;
        }
      } else {
        weekDayOfMonthBuilder_.mergeFrom(value);
      }
      if (weekDayOfMonth_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearWeekDayOfMonth() {
      bitField0_ = (bitField0_ & ~0x00000010);
      weekDayOfMonth_ = null;
      if (weekDayOfMonthBuilder_ != null) {
        weekDayOfMonthBuilder_.dispose();
        weekDayOfMonthBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.backupdr.v1.WeekDayOfMonth.Builder getWeekDayOfMonthBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getWeekDayOfMonthFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.backupdr.v1.WeekDayOfMonthOrBuilder getWeekDayOfMonthOrBuilder() {
      if (weekDayOfMonthBuilder_ != null) {
        return weekDayOfMonthBuilder_.getMessageOrBuilder();
      } else {
        return weekDayOfMonth_ == null
            ? com.google.cloud.backupdr.v1.WeekDayOfMonth.getDefaultInstance()
            : weekDayOfMonth_;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
     * MONDAY, on which jobs will run. This will be specified by two fields in
     * `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week,
     * e.g. `LAST`.
     *
     * This field is only applicable for `recurrence_type`, `MONTHLY` and
     * `YEARLY`. A validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.WeekDayOfMonth week_day_of_month = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.backupdr.v1.WeekDayOfMonth,
            com.google.cloud.backupdr.v1.WeekDayOfMonth.Builder,
            com.google.cloud.backupdr.v1.WeekDayOfMonthOrBuilder>
        getWeekDayOfMonthFieldBuilder() {
      if (weekDayOfMonthBuilder_ == null) {
        weekDayOfMonthBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.backupdr.v1.WeekDayOfMonth,
                com.google.cloud.backupdr.v1.WeekDayOfMonth.Builder,
                com.google.cloud.backupdr.v1.WeekDayOfMonthOrBuilder>(
                getWeekDayOfMonth(), getParentForChildren(), isClean());
        weekDayOfMonth_ = null;
      }
      return weekDayOfMonthBuilder_;
    }

    private java.util.List<java.lang.Integer> months_ = java.util.Collections.emptyList();

    private void ensureMonthsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        months_ = new java.util.ArrayList<java.lang.Integer>(months_);
        bitField0_ |= 0x00000020;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the months.
     */
    public java.util.List<com.google.type.Month> getMonthsList() {
      return new com.google.protobuf.Internal.ListAdapter<java.lang.Integer, com.google.type.Month>(
          months_, months_converter_);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The count of months.
     */
    public int getMonthsCount() {
      return months_.size();
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the element to return.
     * @return The months at the given index.
     */
    public com.google.type.Month getMonths(int index) {
      return months_converter_.convert(months_.get(index));
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The months to set.
     * @return This builder for chaining.
     */
    public Builder setMonths(int index, com.google.type.Month value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureMonthsIsMutable();
      months_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The months to add.
     * @return This builder for chaining.
     */
    public Builder addMonths(com.google.type.Month value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureMonthsIsMutable();
      months_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The months to add.
     * @return This builder for chaining.
     */
    public Builder addAllMonths(java.lang.Iterable<? extends com.google.type.Month> values) {
      ensureMonthsIsMutable();
      for (com.google.type.Month value : values) {
        months_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMonths() {
      months_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return A list containing the enum numeric values on the wire for months.
     */
    public java.util.List<java.lang.Integer> getMonthsValueList() {
      return java.util.Collections.unmodifiableList(months_);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of months at the given index.
     */
    public int getMonthsValue(int index) {
      return months_.get(index);
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for months to set.
     * @return This builder for chaining.
     */
    public Builder setMonthsValue(int index, int value) {
      ensureMonthsIsMutable();
      months_.set(index, value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param value The enum numeric value on the wire for months to add.
     * @return This builder for chaining.
     */
    public Builder addMonthsValue(int value) {
      ensureMonthsIsMutable();
      months_.add(value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
     * which jobs will run.
     *
     * This field is only applicable when `recurrence_type` is `YEARLY`. A
     * validation error will occur if other values are supplied.
     * </pre>
     *
     * <code>repeated .google.type.Month months = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @param values The enum numeric values on the wire for months to add.
     * @return This builder for chaining.
     */
    public Builder addAllMonthsValue(java.lang.Iterable<java.lang.Integer> values) {
      ensureMonthsIsMutable();
      for (int value : values) {
        months_.add(value);
      }
      onChanged();
      return this;
    }

    private com.google.cloud.backupdr.v1.BackupWindow backupWindow_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.backupdr.v1.BackupWindow,
            com.google.cloud.backupdr.v1.BackupWindow.Builder,
            com.google.cloud.backupdr.v1.BackupWindowOrBuilder>
        backupWindowBuilder_;
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the backupWindow field is set.
     */
    public boolean hasBackupWindow() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The backupWindow.
     */
    public com.google.cloud.backupdr.v1.BackupWindow getBackupWindow() {
      if (backupWindowBuilder_ == null) {
        return backupWindow_ == null
            ? com.google.cloud.backupdr.v1.BackupWindow.getDefaultInstance()
            : backupWindow_;
      } else {
        return backupWindowBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setBackupWindow(com.google.cloud.backupdr.v1.BackupWindow value) {
      if (backupWindowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        backupWindow_ = value;
      } else {
        backupWindowBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setBackupWindow(
        com.google.cloud.backupdr.v1.BackupWindow.Builder builderForValue) {
      if (backupWindowBuilder_ == null) {
        backupWindow_ = builderForValue.build();
      } else {
        backupWindowBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeBackupWindow(com.google.cloud.backupdr.v1.BackupWindow value) {
      if (backupWindowBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)
            && backupWindow_ != null
            && backupWindow_ != com.google.cloud.backupdr.v1.BackupWindow.getDefaultInstance()) {
          getBackupWindowBuilder().mergeFrom(value);
        } else {
          backupWindow_ = value;
        }
      } else {
        backupWindowBuilder_.mergeFrom(value);
      }
      if (backupWindow_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearBackupWindow() {
      bitField0_ = (bitField0_ & ~0x00000040);
      backupWindow_ = null;
      if (backupWindowBuilder_ != null) {
        backupWindowBuilder_.dispose();
        backupWindowBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.backupdr.v1.BackupWindow.Builder getBackupWindowBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getBackupWindowFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.backupdr.v1.BackupWindowOrBuilder getBackupWindowOrBuilder() {
      if (backupWindowBuilder_ != null) {
        return backupWindowBuilder_.getMessageOrBuilder();
      } else {
        return backupWindow_ == null
            ? com.google.cloud.backupdr.v1.BackupWindow.getDefaultInstance()
            : backupWindow_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. A BackupWindow defines the window of day during which backup jobs
     * will run. Jobs are queued at the beginning of the window and will be marked
     * as `NOT_RUN` if they do not start by the end of the window.
     *
     * Note: running jobs will not be cancelled at the end of the window.
     * </pre>
     *
     * <code>
     * .google.cloud.backupdr.v1.BackupWindow backup_window = 7 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.backupdr.v1.BackupWindow,
            com.google.cloud.backupdr.v1.BackupWindow.Builder,
            com.google.cloud.backupdr.v1.BackupWindowOrBuilder>
        getBackupWindowFieldBuilder() {
      if (backupWindowBuilder_ == null) {
        backupWindowBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.backupdr.v1.BackupWindow,
                com.google.cloud.backupdr.v1.BackupWindow.Builder,
                com.google.cloud.backupdr.v1.BackupWindowOrBuilder>(
                getBackupWindow(), getParentForChildren(), isClean());
        backupWindow_ = null;
      }
      return backupWindowBuilder_;
    }

    private java.lang.Object timeZone_ = "";
    /**
     *
     *
     * <pre>
     * Required. The time zone to be used when interpreting the schedule.
     * The value of this field must be a time zone name from the IANA tz database.
     * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
     * list of valid timezone names. For e.g., Europe/Paris.
     * </pre>
     *
     * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The timeZone.
     */
    public java.lang.String getTimeZone() {
      java.lang.Object ref = timeZone_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timeZone_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The time zone to be used when interpreting the schedule.
     * The value of this field must be a time zone name from the IANA tz database.
     * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
     * list of valid timezone names. For e.g., Europe/Paris.
     * </pre>
     *
     * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The bytes for timeZone.
     */
    public com.google.protobuf.ByteString getTimeZoneBytes() {
      java.lang.Object ref = timeZone_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        timeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The time zone to be used when interpreting the schedule.
     * The value of this field must be a time zone name from the IANA tz database.
     * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
     * list of valid timezone names. For e.g., Europe/Paris.
     * </pre>
     *
     * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZone(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      timeZone_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The time zone to be used when interpreting the schedule.
     * The value of this field must be a time zone name from the IANA tz database.
     * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
     * list of valid timezone names. For e.g., Europe/Paris.
     * </pre>
     *
     * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimeZone() {
      timeZone_ = getDefaultInstance().getTimeZone();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The time zone to be used when interpreting the schedule.
     * The value of this field must be a time zone name from the IANA tz database.
     * See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the
     * list of valid timezone names. For e.g., Europe/Paris.
     * </pre>
     *
     * <code>string time_zone = 8 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The bytes for timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZoneBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      timeZone_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.backupdr.v1.StandardSchedule)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.backupdr.v1.StandardSchedule)
  private static final com.google.cloud.backupdr.v1.StandardSchedule DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.backupdr.v1.StandardSchedule();
  }

  public static com.google.cloud.backupdr.v1.StandardSchedule getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StandardSchedule> PARSER =
      new com.google.protobuf.AbstractParser<StandardSchedule>() {
        @java.lang.Override
        public StandardSchedule parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<StandardSchedule> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StandardSchedule> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.backupdr.v1.StandardSchedule getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
