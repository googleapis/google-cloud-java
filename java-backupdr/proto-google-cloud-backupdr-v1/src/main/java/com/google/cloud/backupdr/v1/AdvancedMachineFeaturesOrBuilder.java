/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/backupdr/v1/backupvault_gce.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.backupdr.v1;

public interface AdvancedMachineFeaturesOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.backupdr.v1.AdvancedMachineFeatures)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. Whether to enable nested virtualization or not (default is
   * false).
   * </pre>
   *
   * <code>optional bool enable_nested_virtualization = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the enableNestedVirtualization field is set.
   */
  boolean hasEnableNestedVirtualization();
  /**
   *
   *
   * <pre>
   * Optional. Whether to enable nested virtualization or not (default is
   * false).
   * </pre>
   *
   * <code>optional bool enable_nested_virtualization = 1 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enableNestedVirtualization.
   */
  boolean getEnableNestedVirtualization();

  /**
   *
   *
   * <pre>
   * Optional. The number of threads per physical core. To disable simultaneous
   * multithreading (SMT) set this to 1. If unset, the maximum number
   * of threads supported per core by the underlying processor is
   * assumed.
   * </pre>
   *
   * <code>optional int32 threads_per_core = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return Whether the threadsPerCore field is set.
   */
  boolean hasThreadsPerCore();
  /**
   *
   *
   * <pre>
   * Optional. The number of threads per physical core. To disable simultaneous
   * multithreading (SMT) set this to 1. If unset, the maximum number
   * of threads supported per core by the underlying processor is
   * assumed.
   * </pre>
   *
   * <code>optional int32 threads_per_core = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The threadsPerCore.
   */
  int getThreadsPerCore();

  /**
   *
   *
   * <pre>
   * Optional. The number of physical cores to expose to an instance. Multiply
   * by the number of threads per core to compute the total number of virtual
   * CPUs to expose to the instance. If unset, the number of cores is
   * inferred from the instance's nominal CPU count and the underlying
   * platform's SMT width.
   * </pre>
   *
   * <code>optional int32 visible_core_count = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return Whether the visibleCoreCount field is set.
   */
  boolean hasVisibleCoreCount();
  /**
   *
   *
   * <pre>
   * Optional. The number of physical cores to expose to an instance. Multiply
   * by the number of threads per core to compute the total number of virtual
   * CPUs to expose to the instance. If unset, the number of cores is
   * inferred from the instance's nominal CPU count and the underlying
   * platform's SMT width.
   * </pre>
   *
   * <code>optional int32 visible_core_count = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The visibleCoreCount.
   */
  int getVisibleCoreCount();

  /**
   *
   *
   * <pre>
   * Optional. Whether to enable UEFI networking for instance creation.
   * </pre>
   *
   * <code>optional bool enable_uefi_networking = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the enableUefiNetworking field is set.
   */
  boolean hasEnableUefiNetworking();
  /**
   *
   *
   * <pre>
   * Optional. Whether to enable UEFI networking for instance creation.
   * </pre>
   *
   * <code>optional bool enable_uefi_networking = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The enableUefiNetworking.
   */
  boolean getEnableUefiNetworking();
}
