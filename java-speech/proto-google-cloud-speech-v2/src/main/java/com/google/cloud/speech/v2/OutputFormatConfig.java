/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v2/cloud_speech.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.speech.v2;

/**
 *
 *
 * <pre>
 * Configuration for the format of the results stored to `output`.
 * </pre>
 *
 * Protobuf type {@code google.cloud.speech.v2.OutputFormatConfig}
 */
public final class OutputFormatConfig extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v2.OutputFormatConfig)
    OutputFormatConfigOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use OutputFormatConfig.newBuilder() to construct.
  private OutputFormatConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private OutputFormatConfig() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new OutputFormatConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.speech.v2.CloudSpeechProto
        .internal_static_google_cloud_speech_v2_OutputFormatConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.speech.v2.CloudSpeechProto
        .internal_static_google_cloud_speech_v2_OutputFormatConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.speech.v2.OutputFormatConfig.class,
            com.google.cloud.speech.v2.OutputFormatConfig.Builder.class);
  }

  private int bitField0_;
  public static final int NATIVE_FIELD_NUMBER = 1;
  private com.google.cloud.speech.v2.NativeOutputFileFormatConfig native_;
  /**
   *
   *
   * <pre>
   * Configuration for the native output format. If this field is set or if no
   * other output format field is set, then transcripts will be written to the
   * sink in the native format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
   *
   * @return Whether the native field is set.
   */
  @java.lang.Override
  public boolean hasNative() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Configuration for the native output format. If this field is set or if no
   * other output format field is set, then transcripts will be written to the
   * sink in the native format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
   *
   * @return The native.
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.NativeOutputFileFormatConfig getNative() {
    return native_ == null
        ? com.google.cloud.speech.v2.NativeOutputFileFormatConfig.getDefaultInstance()
        : native_;
  }
  /**
   *
   *
   * <pre>
   * Configuration for the native output format. If this field is set or if no
   * other output format field is set, then transcripts will be written to the
   * sink in the native format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.NativeOutputFileFormatConfigOrBuilder getNativeOrBuilder() {
    return native_ == null
        ? com.google.cloud.speech.v2.NativeOutputFileFormatConfig.getDefaultInstance()
        : native_;
  }

  public static final int VTT_FIELD_NUMBER = 2;
  private com.google.cloud.speech.v2.VttOutputFileFormatConfig vtt_;
  /**
   *
   *
   * <pre>
   * Configuration for the VTT output format. If this field is set, then
   * transcripts will be written to the sink in the VTT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
   *
   * @return Whether the vtt field is set.
   */
  @java.lang.Override
  public boolean hasVtt() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * Configuration for the VTT output format. If this field is set, then
   * transcripts will be written to the sink in the VTT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
   *
   * @return The vtt.
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.VttOutputFileFormatConfig getVtt() {
    return vtt_ == null
        ? com.google.cloud.speech.v2.VttOutputFileFormatConfig.getDefaultInstance()
        : vtt_;
  }
  /**
   *
   *
   * <pre>
   * Configuration for the VTT output format. If this field is set, then
   * transcripts will be written to the sink in the VTT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.VttOutputFileFormatConfigOrBuilder getVttOrBuilder() {
    return vtt_ == null
        ? com.google.cloud.speech.v2.VttOutputFileFormatConfig.getDefaultInstance()
        : vtt_;
  }

  public static final int SRT_FIELD_NUMBER = 3;
  private com.google.cloud.speech.v2.SrtOutputFileFormatConfig srt_;
  /**
   *
   *
   * <pre>
   * Configuration for the SRT output format. If this field is set, then
   * transcripts will be written to the sink in the SRT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
   *
   * @return Whether the srt field is set.
   */
  @java.lang.Override
  public boolean hasSrt() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   *
   *
   * <pre>
   * Configuration for the SRT output format. If this field is set, then
   * transcripts will be written to the sink in the SRT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
   *
   * @return The srt.
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.SrtOutputFileFormatConfig getSrt() {
    return srt_ == null
        ? com.google.cloud.speech.v2.SrtOutputFileFormatConfig.getDefaultInstance()
        : srt_;
  }
  /**
   *
   *
   * <pre>
   * Configuration for the SRT output format. If this field is set, then
   * transcripts will be written to the sink in the SRT format.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.speech.v2.SrtOutputFileFormatConfigOrBuilder getSrtOrBuilder() {
    return srt_ == null
        ? com.google.cloud.speech.v2.SrtOutputFileFormatConfig.getDefaultInstance()
        : srt_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getNative());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getVtt());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getSrt());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getNative());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getVtt());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getSrt());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.speech.v2.OutputFormatConfig)) {
      return super.equals(obj);
    }
    com.google.cloud.speech.v2.OutputFormatConfig other =
        (com.google.cloud.speech.v2.OutputFormatConfig) obj;

    if (hasNative() != other.hasNative()) return false;
    if (hasNative()) {
      if (!getNative().equals(other.getNative())) return false;
    }
    if (hasVtt() != other.hasVtt()) return false;
    if (hasVtt()) {
      if (!getVtt().equals(other.getVtt())) return false;
    }
    if (hasSrt() != other.hasSrt()) return false;
    if (hasSrt()) {
      if (!getSrt().equals(other.getSrt())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNative()) {
      hash = (37 * hash) + NATIVE_FIELD_NUMBER;
      hash = (53 * hash) + getNative().hashCode();
    }
    if (hasVtt()) {
      hash = (37 * hash) + VTT_FIELD_NUMBER;
      hash = (53 * hash) + getVtt().hashCode();
    }
    if (hasSrt()) {
      hash = (37 * hash) + SRT_FIELD_NUMBER;
      hash = (53 * hash) + getSrt().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.speech.v2.OutputFormatConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Configuration for the format of the results stored to `output`.
   * </pre>
   *
   * Protobuf type {@code google.cloud.speech.v2.OutputFormatConfig}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v2.OutputFormatConfig)
      com.google.cloud.speech.v2.OutputFormatConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.speech.v2.CloudSpeechProto
          .internal_static_google_cloud_speech_v2_OutputFormatConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.speech.v2.CloudSpeechProto
          .internal_static_google_cloud_speech_v2_OutputFormatConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.speech.v2.OutputFormatConfig.class,
              com.google.cloud.speech.v2.OutputFormatConfig.Builder.class);
    }

    // Construct using com.google.cloud.speech.v2.OutputFormatConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getNativeFieldBuilder();
        getVttFieldBuilder();
        getSrtFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      native_ = null;
      if (nativeBuilder_ != null) {
        nativeBuilder_.dispose();
        nativeBuilder_ = null;
      }
      vtt_ = null;
      if (vttBuilder_ != null) {
        vttBuilder_.dispose();
        vttBuilder_ = null;
      }
      srt_ = null;
      if (srtBuilder_ != null) {
        srtBuilder_.dispose();
        srtBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.speech.v2.CloudSpeechProto
          .internal_static_google_cloud_speech_v2_OutputFormatConfig_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.speech.v2.OutputFormatConfig getDefaultInstanceForType() {
      return com.google.cloud.speech.v2.OutputFormatConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.speech.v2.OutputFormatConfig build() {
      com.google.cloud.speech.v2.OutputFormatConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.speech.v2.OutputFormatConfig buildPartial() {
      com.google.cloud.speech.v2.OutputFormatConfig result =
          new com.google.cloud.speech.v2.OutputFormatConfig(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.speech.v2.OutputFormatConfig result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.native_ = nativeBuilder_ == null ? native_ : nativeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.vtt_ = vttBuilder_ == null ? vtt_ : vttBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.srt_ = srtBuilder_ == null ? srt_ : srtBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.speech.v2.OutputFormatConfig) {
        return mergeFrom((com.google.cloud.speech.v2.OutputFormatConfig) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.speech.v2.OutputFormatConfig other) {
      if (other == com.google.cloud.speech.v2.OutputFormatConfig.getDefaultInstance()) return this;
      if (other.hasNative()) {
        mergeNative(other.getNative());
      }
      if (other.hasVtt()) {
        mergeVtt(other.getVtt());
      }
      if (other.hasSrt()) {
        mergeSrt(other.getSrt());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getNativeFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getVttFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                input.readMessage(getSrtFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.cloud.speech.v2.NativeOutputFileFormatConfig native_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.NativeOutputFileFormatConfig,
            com.google.cloud.speech.v2.NativeOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.NativeOutputFileFormatConfigOrBuilder>
        nativeBuilder_;
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     *
     * @return Whether the native field is set.
     */
    public boolean hasNative() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     *
     * @return The native.
     */
    public com.google.cloud.speech.v2.NativeOutputFileFormatConfig getNative() {
      if (nativeBuilder_ == null) {
        return native_ == null
            ? com.google.cloud.speech.v2.NativeOutputFileFormatConfig.getDefaultInstance()
            : native_;
      } else {
        return nativeBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public Builder setNative(com.google.cloud.speech.v2.NativeOutputFileFormatConfig value) {
      if (nativeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        native_ = value;
      } else {
        nativeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public Builder setNative(
        com.google.cloud.speech.v2.NativeOutputFileFormatConfig.Builder builderForValue) {
      if (nativeBuilder_ == null) {
        native_ = builderForValue.build();
      } else {
        nativeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public Builder mergeNative(com.google.cloud.speech.v2.NativeOutputFileFormatConfig value) {
      if (nativeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && native_ != null
            && native_
                != com.google.cloud.speech.v2.NativeOutputFileFormatConfig.getDefaultInstance()) {
          getNativeBuilder().mergeFrom(value);
        } else {
          native_ = value;
        }
      } else {
        nativeBuilder_.mergeFrom(value);
      }
      if (native_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public Builder clearNative() {
      bitField0_ = (bitField0_ & ~0x00000001);
      native_ = null;
      if (nativeBuilder_ != null) {
        nativeBuilder_.dispose();
        nativeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public com.google.cloud.speech.v2.NativeOutputFileFormatConfig.Builder getNativeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getNativeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    public com.google.cloud.speech.v2.NativeOutputFileFormatConfigOrBuilder getNativeOrBuilder() {
      if (nativeBuilder_ != null) {
        return nativeBuilder_.getMessageOrBuilder();
      } else {
        return native_ == null
            ? com.google.cloud.speech.v2.NativeOutputFileFormatConfig.getDefaultInstance()
            : native_;
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the native output format. If this field is set or if no
     * other output format field is set, then transcripts will be written to the
     * sink in the native format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.NativeOutputFileFormatConfig native = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.NativeOutputFileFormatConfig,
            com.google.cloud.speech.v2.NativeOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.NativeOutputFileFormatConfigOrBuilder>
        getNativeFieldBuilder() {
      if (nativeBuilder_ == null) {
        nativeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.speech.v2.NativeOutputFileFormatConfig,
                com.google.cloud.speech.v2.NativeOutputFileFormatConfig.Builder,
                com.google.cloud.speech.v2.NativeOutputFileFormatConfigOrBuilder>(
                getNative(), getParentForChildren(), isClean());
        native_ = null;
      }
      return nativeBuilder_;
    }

    private com.google.cloud.speech.v2.VttOutputFileFormatConfig vtt_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.VttOutputFileFormatConfig,
            com.google.cloud.speech.v2.VttOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.VttOutputFileFormatConfigOrBuilder>
        vttBuilder_;
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     *
     * @return Whether the vtt field is set.
     */
    public boolean hasVtt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     *
     * @return The vtt.
     */
    public com.google.cloud.speech.v2.VttOutputFileFormatConfig getVtt() {
      if (vttBuilder_ == null) {
        return vtt_ == null
            ? com.google.cloud.speech.v2.VttOutputFileFormatConfig.getDefaultInstance()
            : vtt_;
      } else {
        return vttBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public Builder setVtt(com.google.cloud.speech.v2.VttOutputFileFormatConfig value) {
      if (vttBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vtt_ = value;
      } else {
        vttBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public Builder setVtt(
        com.google.cloud.speech.v2.VttOutputFileFormatConfig.Builder builderForValue) {
      if (vttBuilder_ == null) {
        vtt_ = builderForValue.build();
      } else {
        vttBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public Builder mergeVtt(com.google.cloud.speech.v2.VttOutputFileFormatConfig value) {
      if (vttBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && vtt_ != null
            && vtt_ != com.google.cloud.speech.v2.VttOutputFileFormatConfig.getDefaultInstance()) {
          getVttBuilder().mergeFrom(value);
        } else {
          vtt_ = value;
        }
      } else {
        vttBuilder_.mergeFrom(value);
      }
      if (vtt_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public Builder clearVtt() {
      bitField0_ = (bitField0_ & ~0x00000002);
      vtt_ = null;
      if (vttBuilder_ != null) {
        vttBuilder_.dispose();
        vttBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public com.google.cloud.speech.v2.VttOutputFileFormatConfig.Builder getVttBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getVttFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    public com.google.cloud.speech.v2.VttOutputFileFormatConfigOrBuilder getVttOrBuilder() {
      if (vttBuilder_ != null) {
        return vttBuilder_.getMessageOrBuilder();
      } else {
        return vtt_ == null
            ? com.google.cloud.speech.v2.VttOutputFileFormatConfig.getDefaultInstance()
            : vtt_;
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the VTT output format. If this field is set, then
     * transcripts will be written to the sink in the VTT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.VttOutputFileFormatConfig vtt = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.VttOutputFileFormatConfig,
            com.google.cloud.speech.v2.VttOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.VttOutputFileFormatConfigOrBuilder>
        getVttFieldBuilder() {
      if (vttBuilder_ == null) {
        vttBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.speech.v2.VttOutputFileFormatConfig,
                com.google.cloud.speech.v2.VttOutputFileFormatConfig.Builder,
                com.google.cloud.speech.v2.VttOutputFileFormatConfigOrBuilder>(
                getVtt(), getParentForChildren(), isClean());
        vtt_ = null;
      }
      return vttBuilder_;
    }

    private com.google.cloud.speech.v2.SrtOutputFileFormatConfig srt_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.SrtOutputFileFormatConfig,
            com.google.cloud.speech.v2.SrtOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.SrtOutputFileFormatConfigOrBuilder>
        srtBuilder_;
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     *
     * @return Whether the srt field is set.
     */
    public boolean hasSrt() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     *
     * @return The srt.
     */
    public com.google.cloud.speech.v2.SrtOutputFileFormatConfig getSrt() {
      if (srtBuilder_ == null) {
        return srt_ == null
            ? com.google.cloud.speech.v2.SrtOutputFileFormatConfig.getDefaultInstance()
            : srt_;
      } else {
        return srtBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public Builder setSrt(com.google.cloud.speech.v2.SrtOutputFileFormatConfig value) {
      if (srtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        srt_ = value;
      } else {
        srtBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public Builder setSrt(
        com.google.cloud.speech.v2.SrtOutputFileFormatConfig.Builder builderForValue) {
      if (srtBuilder_ == null) {
        srt_ = builderForValue.build();
      } else {
        srtBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public Builder mergeSrt(com.google.cloud.speech.v2.SrtOutputFileFormatConfig value) {
      if (srtBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)
            && srt_ != null
            && srt_ != com.google.cloud.speech.v2.SrtOutputFileFormatConfig.getDefaultInstance()) {
          getSrtBuilder().mergeFrom(value);
        } else {
          srt_ = value;
        }
      } else {
        srtBuilder_.mergeFrom(value);
      }
      if (srt_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public Builder clearSrt() {
      bitField0_ = (bitField0_ & ~0x00000004);
      srt_ = null;
      if (srtBuilder_ != null) {
        srtBuilder_.dispose();
        srtBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public com.google.cloud.speech.v2.SrtOutputFileFormatConfig.Builder getSrtBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getSrtFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    public com.google.cloud.speech.v2.SrtOutputFileFormatConfigOrBuilder getSrtOrBuilder() {
      if (srtBuilder_ != null) {
        return srtBuilder_.getMessageOrBuilder();
      } else {
        return srt_ == null
            ? com.google.cloud.speech.v2.SrtOutputFileFormatConfig.getDefaultInstance()
            : srt_;
      }
    }
    /**
     *
     *
     * <pre>
     * Configuration for the SRT output format. If this field is set, then
     * transcripts will be written to the sink in the SRT format.
     * </pre>
     *
     * <code>.google.cloud.speech.v2.SrtOutputFileFormatConfig srt = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.speech.v2.SrtOutputFileFormatConfig,
            com.google.cloud.speech.v2.SrtOutputFileFormatConfig.Builder,
            com.google.cloud.speech.v2.SrtOutputFileFormatConfigOrBuilder>
        getSrtFieldBuilder() {
      if (srtBuilder_ == null) {
        srtBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.speech.v2.SrtOutputFileFormatConfig,
                com.google.cloud.speech.v2.SrtOutputFileFormatConfig.Builder,
                com.google.cloud.speech.v2.SrtOutputFileFormatConfigOrBuilder>(
                getSrt(), getParentForChildren(), isClean());
        srt_ = null;
      }
      return srtBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v2.OutputFormatConfig)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.speech.v2.OutputFormatConfig)
  private static final com.google.cloud.speech.v2.OutputFormatConfig DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.speech.v2.OutputFormatConfig();
  }

  public static com.google.cloud.speech.v2.OutputFormatConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OutputFormatConfig> PARSER =
      new com.google.protobuf.AbstractParser<OutputFormatConfig>() {
        @java.lang.Override
        public OutputFormatConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<OutputFormatConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OutputFormatConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.speech.v2.OutputFormatConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
