/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/contentwarehouse/v1/filters.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.contentwarehouse.v1;

public interface PropertyFilterOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.contentwarehouse.v1.PropertyFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The Document schema name
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   * </pre>
   *
   * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The documentSchemaName.
   */
  java.lang.String getDocumentSchemaName();
  /**
   *
   *
   * <pre>
   * The Document schema name
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   * </pre>
   *
   * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The bytes for documentSchemaName.
   */
  com.google.protobuf.ByteString getDocumentSchemaNameBytes();

  /**
   *
   *
   * <pre>
   * The filter condition.
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
   * the left of the operator is a property name and the right of the operator
   * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
   * (&#92;") characters.
   *
   * `~~` is the LIKE operator. The right of the operator must be a string. The
   * only supported property data type for LIKE is text_values. It provides
   * semantic search functionality by parsing, stemming and doing synonyms
   * expansion against the input query. It matches if the property contains
   * semantic similar content to the query. It is not regex matching or wildcard
   * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
   * whose property `property.compnay` have values like "Google Inc.", "Google
   * LLC" or "Google Company".
   *
   * Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be &lt; 6000 bytes in length.
   *
   * Only properties that are marked filterable are allowed
   * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
   * Property names do not need to be prefixed by the document schema id (as is
   * the case with histograms), however property names will need to be prefixed
   * by its parent hierarchy, if any.  For example:
   * top_property_name.sub_property_name.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
   * driving_years &gt; 10`
   *
   *
   * CMEK compliant deployment only supports:
   *
   * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
   * * Boolean expressions: AND and OR.
   * </pre>
   *
   * <code>string condition = 2;</code>
   *
   * @return The condition.
   */
  java.lang.String getCondition();
  /**
   *
   *
   * <pre>
   * The filter condition.
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
   * the left of the operator is a property name and the right of the operator
   * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
   * (&#92;") characters.
   *
   * `~~` is the LIKE operator. The right of the operator must be a string. The
   * only supported property data type for LIKE is text_values. It provides
   * semantic search functionality by parsing, stemming and doing synonyms
   * expansion against the input query. It matches if the property contains
   * semantic similar content to the query. It is not regex matching or wildcard
   * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
   * whose property `property.compnay` have values like "Google Inc.", "Google
   * LLC" or "Google Company".
   *
   * Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be &lt; 6000 bytes in length.
   *
   * Only properties that are marked filterable are allowed
   * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
   * Property names do not need to be prefixed by the document schema id (as is
   * the case with histograms), however property names will need to be prefixed
   * by its parent hierarchy, if any.  For example:
   * top_property_name.sub_property_name.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
   * driving_years &gt; 10`
   *
   *
   * CMEK compliant deployment only supports:
   *
   * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
   * * Boolean expressions: AND and OR.
   * </pre>
   *
   * <code>string condition = 2;</code>
   *
   * @return The bytes for condition.
   */
  com.google.protobuf.ByteString getConditionBytes();
}
