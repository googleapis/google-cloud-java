/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/contentwarehouse/v1/filters.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.contentwarehouse.v1;

/** Protobuf type {@code google.cloud.contentwarehouse.v1.PropertyFilter} */
public final class PropertyFilter extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.contentwarehouse.v1.PropertyFilter)
    PropertyFilterOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use PropertyFilter.newBuilder() to construct.
  private PropertyFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private PropertyFilter() {
    documentSchemaName_ = "";
    condition_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new PropertyFilter();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.contentwarehouse.v1.FiltersProto
        .internal_static_google_cloud_contentwarehouse_v1_PropertyFilter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.contentwarehouse.v1.FiltersProto
        .internal_static_google_cloud_contentwarehouse_v1_PropertyFilter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.contentwarehouse.v1.PropertyFilter.class,
            com.google.cloud.contentwarehouse.v1.PropertyFilter.Builder.class);
  }

  public static final int DOCUMENT_SCHEMA_NAME_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object documentSchemaName_ = "";
  /**
   *
   *
   * <pre>
   * The Document schema name
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   * </pre>
   *
   * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The documentSchemaName.
   */
  @java.lang.Override
  public java.lang.String getDocumentSchemaName() {
    java.lang.Object ref = documentSchemaName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      documentSchemaName_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The Document schema name
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   * </pre>
   *
   * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The bytes for documentSchemaName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDocumentSchemaNameBytes() {
    java.lang.Object ref = documentSchemaName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      documentSchemaName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONDITION_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object condition_ = "";
  /**
   *
   *
   * <pre>
   * The filter condition.
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
   * the left of the operator is a property name and the right of the operator
   * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
   * (&#92;") characters.
   *
   * `~~` is the LIKE operator. The right of the operator must be a string. The
   * only supported property data type for LIKE is text_values. It provides
   * semantic search functionality by parsing, stemming and doing synonyms
   * expansion against the input query. It matches if the property contains
   * semantic similar content to the query. It is not regex matching or wildcard
   * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
   * whose property `property.compnay` have values like "Google Inc.", "Google
   * LLC" or "Google Company".
   *
   * Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be &lt; 6000 bytes in length.
   *
   * Only properties that are marked filterable are allowed
   * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
   * Property names do not need to be prefixed by the document schema id (as is
   * the case with histograms), however property names will need to be prefixed
   * by its parent hierarchy, if any.  For example:
   * top_property_name.sub_property_name.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
   * driving_years &gt; 10`
   *
   *
   * CMEK compliant deployment only supports:
   *
   * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
   * * Boolean expressions: AND and OR.
   * </pre>
   *
   * <code>string condition = 2;</code>
   *
   * @return The condition.
   */
  @java.lang.Override
  public java.lang.String getCondition() {
    java.lang.Object ref = condition_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      condition_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The filter condition.
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
   * the left of the operator is a property name and the right of the operator
   * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
   * (&#92;") characters.
   *
   * `~~` is the LIKE operator. The right of the operator must be a string. The
   * only supported property data type for LIKE is text_values. It provides
   * semantic search functionality by parsing, stemming and doing synonyms
   * expansion against the input query. It matches if the property contains
   * semantic similar content to the query. It is not regex matching or wildcard
   * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
   * whose property `property.compnay` have values like "Google Inc.", "Google
   * LLC" or "Google Company".
   *
   * Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be &lt; 6000 bytes in length.
   *
   * Only properties that are marked filterable are allowed
   * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
   * Property names do not need to be prefixed by the document schema id (as is
   * the case with histograms), however property names will need to be prefixed
   * by its parent hierarchy, if any.  For example:
   * top_property_name.sub_property_name.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
   * driving_years &gt; 10`
   *
   *
   * CMEK compliant deployment only supports:
   *
   * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
   * * Boolean expressions: AND and OR.
   * </pre>
   *
   * <code>string condition = 2;</code>
   *
   * @return The bytes for condition.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getConditionBytes() {
    java.lang.Object ref = condition_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      condition_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(documentSchemaName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, documentSchemaName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(condition_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, condition_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(documentSchemaName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, documentSchemaName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(condition_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, condition_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.contentwarehouse.v1.PropertyFilter)) {
      return super.equals(obj);
    }
    com.google.cloud.contentwarehouse.v1.PropertyFilter other =
        (com.google.cloud.contentwarehouse.v1.PropertyFilter) obj;

    if (!getDocumentSchemaName().equals(other.getDocumentSchemaName())) return false;
    if (!getCondition().equals(other.getCondition())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DOCUMENT_SCHEMA_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDocumentSchemaName().hashCode();
    hash = (37 * hash) + CONDITION_FIELD_NUMBER;
    hash = (53 * hash) + getCondition().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.contentwarehouse.v1.PropertyFilter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /** Protobuf type {@code google.cloud.contentwarehouse.v1.PropertyFilter} */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.contentwarehouse.v1.PropertyFilter)
      com.google.cloud.contentwarehouse.v1.PropertyFilterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.contentwarehouse.v1.FiltersProto
          .internal_static_google_cloud_contentwarehouse_v1_PropertyFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.contentwarehouse.v1.FiltersProto
          .internal_static_google_cloud_contentwarehouse_v1_PropertyFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.contentwarehouse.v1.PropertyFilter.class,
              com.google.cloud.contentwarehouse.v1.PropertyFilter.Builder.class);
    }

    // Construct using com.google.cloud.contentwarehouse.v1.PropertyFilter.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      documentSchemaName_ = "";
      condition_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.contentwarehouse.v1.FiltersProto
          .internal_static_google_cloud_contentwarehouse_v1_PropertyFilter_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.PropertyFilter getDefaultInstanceForType() {
      return com.google.cloud.contentwarehouse.v1.PropertyFilter.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.PropertyFilter build() {
      com.google.cloud.contentwarehouse.v1.PropertyFilter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.PropertyFilter buildPartial() {
      com.google.cloud.contentwarehouse.v1.PropertyFilter result =
          new com.google.cloud.contentwarehouse.v1.PropertyFilter(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.contentwarehouse.v1.PropertyFilter result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.documentSchemaName_ = documentSchemaName_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.condition_ = condition_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.contentwarehouse.v1.PropertyFilter) {
        return mergeFrom((com.google.cloud.contentwarehouse.v1.PropertyFilter) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.contentwarehouse.v1.PropertyFilter other) {
      if (other == com.google.cloud.contentwarehouse.v1.PropertyFilter.getDefaultInstance())
        return this;
      if (!other.getDocumentSchemaName().isEmpty()) {
        documentSchemaName_ = other.documentSchemaName_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getCondition().isEmpty()) {
        condition_ = other.condition_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                documentSchemaName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                condition_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object documentSchemaName_ = "";
    /**
     *
     *
     * <pre>
     * The Document schema name
     * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
     * Format:
     * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     * </pre>
     *
     * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return The documentSchemaName.
     */
    public java.lang.String getDocumentSchemaName() {
      java.lang.Object ref = documentSchemaName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        documentSchemaName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The Document schema name
     * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
     * Format:
     * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     * </pre>
     *
     * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return The bytes for documentSchemaName.
     */
    public com.google.protobuf.ByteString getDocumentSchemaNameBytes() {
      java.lang.Object ref = documentSchemaName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        documentSchemaName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The Document schema name
     * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
     * Format:
     * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     * </pre>
     *
     * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @param value The documentSchemaName to set.
     * @return This builder for chaining.
     */
    public Builder setDocumentSchemaName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      documentSchemaName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The Document schema name
     * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
     * Format:
     * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     * </pre>
     *
     * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDocumentSchemaName() {
      documentSchemaName_ = getDefaultInstance().getDocumentSchemaName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The Document schema name
     * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
     * Format:
     * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     * </pre>
     *
     * <code>string document_schema_name = 1 [(.google.api.resource_reference) = { ... }</code>
     *
     * @param value The bytes for documentSchemaName to set.
     * @return This builder for chaining.
     */
    public Builder setDocumentSchemaNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      documentSchemaName_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object condition_ = "";
    /**
     *
     *
     * <pre>
     * The filter condition.
     * The syntax for this expression is a subset of SQL syntax.
     *
     * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
     * the left of the operator is a property name and the right of the operator
     * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
     * (&#92;") characters.
     *
     * `~~` is the LIKE operator. The right of the operator must be a string. The
     * only supported property data type for LIKE is text_values. It provides
     * semantic search functionality by parsing, stemming and doing synonyms
     * expansion against the input query. It matches if the property contains
     * semantic similar content to the query. It is not regex matching or wildcard
     * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
     * whose property `property.compnay` have values like "Google Inc.", "Google
     * LLC" or "Google Company".
     *
     * Supported functions are `LOWER([property_name])` to perform a
     * case insensitive match and `EMPTY([property_name])` to filter on the
     * existence of a key.
     *
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
     * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
     * comparisons or functions are allowed in the expression. The expression must
     * be &lt; 6000 bytes in length.
     *
     * Only properties that are marked filterable are allowed
     * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
     * Property names do not need to be prefixed by the document schema id (as is
     * the case with histograms), however property names will need to be prefixed
     * by its parent hierarchy, if any.  For example:
     * top_property_name.sub_property_name.
     *
     * Sample Query:
     * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
     * driving_years &gt; 10`
     *
     *
     * CMEK compliant deployment only supports:
     *
     * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
     * * Boolean expressions: AND and OR.
     * </pre>
     *
     * <code>string condition = 2;</code>
     *
     * @return The condition.
     */
    public java.lang.String getCondition() {
      java.lang.Object ref = condition_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        condition_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The filter condition.
     * The syntax for this expression is a subset of SQL syntax.
     *
     * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
     * the left of the operator is a property name and the right of the operator
     * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
     * (&#92;") characters.
     *
     * `~~` is the LIKE operator. The right of the operator must be a string. The
     * only supported property data type for LIKE is text_values. It provides
     * semantic search functionality by parsing, stemming and doing synonyms
     * expansion against the input query. It matches if the property contains
     * semantic similar content to the query. It is not regex matching or wildcard
     * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
     * whose property `property.compnay` have values like "Google Inc.", "Google
     * LLC" or "Google Company".
     *
     * Supported functions are `LOWER([property_name])` to perform a
     * case insensitive match and `EMPTY([property_name])` to filter on the
     * existence of a key.
     *
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
     * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
     * comparisons or functions are allowed in the expression. The expression must
     * be &lt; 6000 bytes in length.
     *
     * Only properties that are marked filterable are allowed
     * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
     * Property names do not need to be prefixed by the document schema id (as is
     * the case with histograms), however property names will need to be prefixed
     * by its parent hierarchy, if any.  For example:
     * top_property_name.sub_property_name.
     *
     * Sample Query:
     * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
     * driving_years &gt; 10`
     *
     *
     * CMEK compliant deployment only supports:
     *
     * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
     * * Boolean expressions: AND and OR.
     * </pre>
     *
     * <code>string condition = 2;</code>
     *
     * @return The bytes for condition.
     */
    public com.google.protobuf.ByteString getConditionBytes() {
      java.lang.Object ref = condition_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        condition_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The filter condition.
     * The syntax for this expression is a subset of SQL syntax.
     *
     * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
     * the left of the operator is a property name and the right of the operator
     * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
     * (&#92;") characters.
     *
     * `~~` is the LIKE operator. The right of the operator must be a string. The
     * only supported property data type for LIKE is text_values. It provides
     * semantic search functionality by parsing, stemming and doing synonyms
     * expansion against the input query. It matches if the property contains
     * semantic similar content to the query. It is not regex matching or wildcard
     * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
     * whose property `property.compnay` have values like "Google Inc.", "Google
     * LLC" or "Google Company".
     *
     * Supported functions are `LOWER([property_name])` to perform a
     * case insensitive match and `EMPTY([property_name])` to filter on the
     * existence of a key.
     *
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
     * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
     * comparisons or functions are allowed in the expression. The expression must
     * be &lt; 6000 bytes in length.
     *
     * Only properties that are marked filterable are allowed
     * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
     * Property names do not need to be prefixed by the document schema id (as is
     * the case with histograms), however property names will need to be prefixed
     * by its parent hierarchy, if any.  For example:
     * top_property_name.sub_property_name.
     *
     * Sample Query:
     * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
     * driving_years &gt; 10`
     *
     *
     * CMEK compliant deployment only supports:
     *
     * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
     * * Boolean expressions: AND and OR.
     * </pre>
     *
     * <code>string condition = 2;</code>
     *
     * @param value The condition to set.
     * @return This builder for chaining.
     */
    public Builder setCondition(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      condition_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The filter condition.
     * The syntax for this expression is a subset of SQL syntax.
     *
     * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
     * the left of the operator is a property name and the right of the operator
     * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
     * (&#92;") characters.
     *
     * `~~` is the LIKE operator. The right of the operator must be a string. The
     * only supported property data type for LIKE is text_values. It provides
     * semantic search functionality by parsing, stemming and doing synonyms
     * expansion against the input query. It matches if the property contains
     * semantic similar content to the query. It is not regex matching or wildcard
     * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
     * whose property `property.compnay` have values like "Google Inc.", "Google
     * LLC" or "Google Company".
     *
     * Supported functions are `LOWER([property_name])` to perform a
     * case insensitive match and `EMPTY([property_name])` to filter on the
     * existence of a key.
     *
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
     * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
     * comparisons or functions are allowed in the expression. The expression must
     * be &lt; 6000 bytes in length.
     *
     * Only properties that are marked filterable are allowed
     * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
     * Property names do not need to be prefixed by the document schema id (as is
     * the case with histograms), however property names will need to be prefixed
     * by its parent hierarchy, if any.  For example:
     * top_property_name.sub_property_name.
     *
     * Sample Query:
     * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
     * driving_years &gt; 10`
     *
     *
     * CMEK compliant deployment only supports:
     *
     * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
     * * Boolean expressions: AND and OR.
     * </pre>
     *
     * <code>string condition = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCondition() {
      condition_ = getDefaultInstance().getCondition();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The filter condition.
     * The syntax for this expression is a subset of SQL syntax.
     *
     * Supported operators are: `=`, `!=`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, and `~~` where
     * the left of the operator is a property name and the right of the operator
     * is a number or a quoted string. You must escape backslash (&#92;&#92;) and quote
     * (&#92;") characters.
     *
     * `~~` is the LIKE operator. The right of the operator must be a string. The
     * only supported property data type for LIKE is text_values. It provides
     * semantic search functionality by parsing, stemming and doing synonyms
     * expansion against the input query. It matches if the property contains
     * semantic similar content to the query. It is not regex matching or wildcard
     * matching. For example, "property.company ~~ &#92;"google&#92;"" will match records
     * whose property `property.compnay` have values like "Google Inc.", "Google
     * LLC" or "Google Company".
     *
     * Supported functions are `LOWER([property_name])` to perform a
     * case insensitive match and `EMPTY([property_name])` to filter on the
     * existence of a key.
     *
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
     * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
     * comparisons or functions are allowed in the expression. The expression must
     * be &lt; 6000 bytes in length.
     *
     * Only properties that are marked filterable are allowed
     * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
     * Property names do not need to be prefixed by the document schema id (as is
     * the case with histograms), however property names will need to be prefixed
     * by its parent hierarchy, if any.  For example:
     * top_property_name.sub_property_name.
     *
     * Sample Query:
     * `(LOWER(driving_license)="class &#92;"a&#92;"" OR EMPTY(driving_license)) AND
     * driving_years &gt; 10`
     *
     *
     * CMEK compliant deployment only supports:
     *
     * * Operators: `=`, `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.
     * * Boolean expressions: AND and OR.
     * </pre>
     *
     * <code>string condition = 2;</code>
     *
     * @param value The bytes for condition to set.
     * @return This builder for chaining.
     */
    public Builder setConditionBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      condition_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.contentwarehouse.v1.PropertyFilter)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.contentwarehouse.v1.PropertyFilter)
  private static final com.google.cloud.contentwarehouse.v1.PropertyFilter DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.contentwarehouse.v1.PropertyFilter();
  }

  public static com.google.cloud.contentwarehouse.v1.PropertyFilter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PropertyFilter> PARSER =
      new com.google.protobuf.AbstractParser<PropertyFilter>() {
        @java.lang.Override
        public PropertyFilter parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<PropertyFilter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PropertyFilter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.contentwarehouse.v1.PropertyFilter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
