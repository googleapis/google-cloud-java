/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/webrisk/v1/webrisk.proto

// Protobuf Java Version: 3.25.5
package com.google.webrisk.v1;

/**
 *
 *
 * <pre>
 * Contains the set of entries to add to a local database.
 * May contain a combination of compressed and raw data in a single response.
 * </pre>
 *
 * Protobuf type {@code google.cloud.webrisk.v1.ThreatEntryAdditions}
 */
public final class ThreatEntryAdditions extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.webrisk.v1.ThreatEntryAdditions)
    ThreatEntryAdditionsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ThreatEntryAdditions.newBuilder() to construct.
  private ThreatEntryAdditions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ThreatEntryAdditions() {
    rawHashes_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ThreatEntryAdditions();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.webrisk.v1.WebRiskProto
        .internal_static_google_cloud_webrisk_v1_ThreatEntryAdditions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.webrisk.v1.WebRiskProto
        .internal_static_google_cloud_webrisk_v1_ThreatEntryAdditions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.webrisk.v1.ThreatEntryAdditions.class,
            com.google.webrisk.v1.ThreatEntryAdditions.Builder.class);
  }

  private int bitField0_;
  public static final int RAW_HASHES_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private java.util.List<com.google.webrisk.v1.RawHashes> rawHashes_;
  /**
   *
   *
   * <pre>
   * The raw SHA256-formatted entries.
   * Repeated to allow returning sets of hashes with different prefix sizes.
   * </pre>
   *
   * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.webrisk.v1.RawHashes> getRawHashesList() {
    return rawHashes_;
  }
  /**
   *
   *
   * <pre>
   * The raw SHA256-formatted entries.
   * Repeated to allow returning sets of hashes with different prefix sizes.
   * </pre>
   *
   * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.webrisk.v1.RawHashesOrBuilder>
      getRawHashesOrBuilderList() {
    return rawHashes_;
  }
  /**
   *
   *
   * <pre>
   * The raw SHA256-formatted entries.
   * Repeated to allow returning sets of hashes with different prefix sizes.
   * </pre>
   *
   * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
   */
  @java.lang.Override
  public int getRawHashesCount() {
    return rawHashes_.size();
  }
  /**
   *
   *
   * <pre>
   * The raw SHA256-formatted entries.
   * Repeated to allow returning sets of hashes with different prefix sizes.
   * </pre>
   *
   * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
   */
  @java.lang.Override
  public com.google.webrisk.v1.RawHashes getRawHashes(int index) {
    return rawHashes_.get(index);
  }
  /**
   *
   *
   * <pre>
   * The raw SHA256-formatted entries.
   * Repeated to allow returning sets of hashes with different prefix sizes.
   * </pre>
   *
   * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
   */
  @java.lang.Override
  public com.google.webrisk.v1.RawHashesOrBuilder getRawHashesOrBuilder(int index) {
    return rawHashes_.get(index);
  }

  public static final int RICE_HASHES_FIELD_NUMBER = 2;
  private com.google.webrisk.v1.RiceDeltaEncoding riceHashes_;
  /**
   *
   *
   * <pre>
   * The encoded 4-byte prefixes of SHA256-formatted entries, using a
   * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
   * ascending order, then delta encoded and stored as encoded_data.
   * </pre>
   *
   * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
   *
   * @return Whether the riceHashes field is set.
   */
  @java.lang.Override
  public boolean hasRiceHashes() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * The encoded 4-byte prefixes of SHA256-formatted entries, using a
   * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
   * ascending order, then delta encoded and stored as encoded_data.
   * </pre>
   *
   * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
   *
   * @return The riceHashes.
   */
  @java.lang.Override
  public com.google.webrisk.v1.RiceDeltaEncoding getRiceHashes() {
    return riceHashes_ == null
        ? com.google.webrisk.v1.RiceDeltaEncoding.getDefaultInstance()
        : riceHashes_;
  }
  /**
   *
   *
   * <pre>
   * The encoded 4-byte prefixes of SHA256-formatted entries, using a
   * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
   * ascending order, then delta encoded and stored as encoded_data.
   * </pre>
   *
   * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
   */
  @java.lang.Override
  public com.google.webrisk.v1.RiceDeltaEncodingOrBuilder getRiceHashesOrBuilder() {
    return riceHashes_ == null
        ? com.google.webrisk.v1.RiceDeltaEncoding.getDefaultInstance()
        : riceHashes_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < rawHashes_.size(); i++) {
      output.writeMessage(1, rawHashes_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getRiceHashes());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < rawHashes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, rawHashes_.get(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getRiceHashes());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.webrisk.v1.ThreatEntryAdditions)) {
      return super.equals(obj);
    }
    com.google.webrisk.v1.ThreatEntryAdditions other =
        (com.google.webrisk.v1.ThreatEntryAdditions) obj;

    if (!getRawHashesList().equals(other.getRawHashesList())) return false;
    if (hasRiceHashes() != other.hasRiceHashes()) return false;
    if (hasRiceHashes()) {
      if (!getRiceHashes().equals(other.getRiceHashes())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getRawHashesCount() > 0) {
      hash = (37 * hash) + RAW_HASHES_FIELD_NUMBER;
      hash = (53 * hash) + getRawHashesList().hashCode();
    }
    if (hasRiceHashes()) {
      hash = (37 * hash) + RICE_HASHES_FIELD_NUMBER;
      hash = (53 * hash) + getRiceHashes().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.webrisk.v1.ThreatEntryAdditions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Contains the set of entries to add to a local database.
   * May contain a combination of compressed and raw data in a single response.
   * </pre>
   *
   * Protobuf type {@code google.cloud.webrisk.v1.ThreatEntryAdditions}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.webrisk.v1.ThreatEntryAdditions)
      com.google.webrisk.v1.ThreatEntryAdditionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.webrisk.v1.WebRiskProto
          .internal_static_google_cloud_webrisk_v1_ThreatEntryAdditions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.webrisk.v1.WebRiskProto
          .internal_static_google_cloud_webrisk_v1_ThreatEntryAdditions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.webrisk.v1.ThreatEntryAdditions.class,
              com.google.webrisk.v1.ThreatEntryAdditions.Builder.class);
    }

    // Construct using com.google.webrisk.v1.ThreatEntryAdditions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getRawHashesFieldBuilder();
        getRiceHashesFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (rawHashesBuilder_ == null) {
        rawHashes_ = java.util.Collections.emptyList();
      } else {
        rawHashes_ = null;
        rawHashesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      riceHashes_ = null;
      if (riceHashesBuilder_ != null) {
        riceHashesBuilder_.dispose();
        riceHashesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.webrisk.v1.WebRiskProto
          .internal_static_google_cloud_webrisk_v1_ThreatEntryAdditions_descriptor;
    }

    @java.lang.Override
    public com.google.webrisk.v1.ThreatEntryAdditions getDefaultInstanceForType() {
      return com.google.webrisk.v1.ThreatEntryAdditions.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.webrisk.v1.ThreatEntryAdditions build() {
      com.google.webrisk.v1.ThreatEntryAdditions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.webrisk.v1.ThreatEntryAdditions buildPartial() {
      com.google.webrisk.v1.ThreatEntryAdditions result =
          new com.google.webrisk.v1.ThreatEntryAdditions(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.webrisk.v1.ThreatEntryAdditions result) {
      if (rawHashesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          rawHashes_ = java.util.Collections.unmodifiableList(rawHashes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.rawHashes_ = rawHashes_;
      } else {
        result.rawHashes_ = rawHashesBuilder_.build();
      }
    }

    private void buildPartial0(com.google.webrisk.v1.ThreatEntryAdditions result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.riceHashes_ = riceHashesBuilder_ == null ? riceHashes_ : riceHashesBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.webrisk.v1.ThreatEntryAdditions) {
        return mergeFrom((com.google.webrisk.v1.ThreatEntryAdditions) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.webrisk.v1.ThreatEntryAdditions other) {
      if (other == com.google.webrisk.v1.ThreatEntryAdditions.getDefaultInstance()) return this;
      if (rawHashesBuilder_ == null) {
        if (!other.rawHashes_.isEmpty()) {
          if (rawHashes_.isEmpty()) {
            rawHashes_ = other.rawHashes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRawHashesIsMutable();
            rawHashes_.addAll(other.rawHashes_);
          }
          onChanged();
        }
      } else {
        if (!other.rawHashes_.isEmpty()) {
          if (rawHashesBuilder_.isEmpty()) {
            rawHashesBuilder_.dispose();
            rawHashesBuilder_ = null;
            rawHashes_ = other.rawHashes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            rawHashesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getRawHashesFieldBuilder()
                    : null;
          } else {
            rawHashesBuilder_.addAllMessages(other.rawHashes_);
          }
        }
      }
      if (other.hasRiceHashes()) {
        mergeRiceHashes(other.getRiceHashes());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                com.google.webrisk.v1.RawHashes m =
                    input.readMessage(com.google.webrisk.v1.RawHashes.parser(), extensionRegistry);
                if (rawHashesBuilder_ == null) {
                  ensureRawHashesIsMutable();
                  rawHashes_.add(m);
                } else {
                  rawHashesBuilder_.addMessage(m);
                }
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getRiceHashesFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.webrisk.v1.RawHashes> rawHashes_ =
        java.util.Collections.emptyList();

    private void ensureRawHashesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        rawHashes_ = new java.util.ArrayList<com.google.webrisk.v1.RawHashes>(rawHashes_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.webrisk.v1.RawHashes,
            com.google.webrisk.v1.RawHashes.Builder,
            com.google.webrisk.v1.RawHashesOrBuilder>
        rawHashesBuilder_;

    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public java.util.List<com.google.webrisk.v1.RawHashes> getRawHashesList() {
      if (rawHashesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(rawHashes_);
      } else {
        return rawHashesBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public int getRawHashesCount() {
      if (rawHashesBuilder_ == null) {
        return rawHashes_.size();
      } else {
        return rawHashesBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public com.google.webrisk.v1.RawHashes getRawHashes(int index) {
      if (rawHashesBuilder_ == null) {
        return rawHashes_.get(index);
      } else {
        return rawHashesBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder setRawHashes(int index, com.google.webrisk.v1.RawHashes value) {
      if (rawHashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRawHashesIsMutable();
        rawHashes_.set(index, value);
        onChanged();
      } else {
        rawHashesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder setRawHashes(
        int index, com.google.webrisk.v1.RawHashes.Builder builderForValue) {
      if (rawHashesBuilder_ == null) {
        ensureRawHashesIsMutable();
        rawHashes_.set(index, builderForValue.build());
        onChanged();
      } else {
        rawHashesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder addRawHashes(com.google.webrisk.v1.RawHashes value) {
      if (rawHashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRawHashesIsMutable();
        rawHashes_.add(value);
        onChanged();
      } else {
        rawHashesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder addRawHashes(int index, com.google.webrisk.v1.RawHashes value) {
      if (rawHashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRawHashesIsMutable();
        rawHashes_.add(index, value);
        onChanged();
      } else {
        rawHashesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder addRawHashes(com.google.webrisk.v1.RawHashes.Builder builderForValue) {
      if (rawHashesBuilder_ == null) {
        ensureRawHashesIsMutable();
        rawHashes_.add(builderForValue.build());
        onChanged();
      } else {
        rawHashesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder addRawHashes(
        int index, com.google.webrisk.v1.RawHashes.Builder builderForValue) {
      if (rawHashesBuilder_ == null) {
        ensureRawHashesIsMutable();
        rawHashes_.add(index, builderForValue.build());
        onChanged();
      } else {
        rawHashesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder addAllRawHashes(
        java.lang.Iterable<? extends com.google.webrisk.v1.RawHashes> values) {
      if (rawHashesBuilder_ == null) {
        ensureRawHashesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, rawHashes_);
        onChanged();
      } else {
        rawHashesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder clearRawHashes() {
      if (rawHashesBuilder_ == null) {
        rawHashes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        rawHashesBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public Builder removeRawHashes(int index) {
      if (rawHashesBuilder_ == null) {
        ensureRawHashesIsMutable();
        rawHashes_.remove(index);
        onChanged();
      } else {
        rawHashesBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public com.google.webrisk.v1.RawHashes.Builder getRawHashesBuilder(int index) {
      return getRawHashesFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public com.google.webrisk.v1.RawHashesOrBuilder getRawHashesOrBuilder(int index) {
      if (rawHashesBuilder_ == null) {
        return rawHashes_.get(index);
      } else {
        return rawHashesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public java.util.List<? extends com.google.webrisk.v1.RawHashesOrBuilder>
        getRawHashesOrBuilderList() {
      if (rawHashesBuilder_ != null) {
        return rawHashesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(rawHashes_);
      }
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public com.google.webrisk.v1.RawHashes.Builder addRawHashesBuilder() {
      return getRawHashesFieldBuilder()
          .addBuilder(com.google.webrisk.v1.RawHashes.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public com.google.webrisk.v1.RawHashes.Builder addRawHashesBuilder(int index) {
      return getRawHashesFieldBuilder()
          .addBuilder(index, com.google.webrisk.v1.RawHashes.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * The raw SHA256-formatted entries.
     * Repeated to allow returning sets of hashes with different prefix sizes.
     * </pre>
     *
     * <code>repeated .google.cloud.webrisk.v1.RawHashes raw_hashes = 1;</code>
     */
    public java.util.List<com.google.webrisk.v1.RawHashes.Builder> getRawHashesBuilderList() {
      return getRawHashesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.webrisk.v1.RawHashes,
            com.google.webrisk.v1.RawHashes.Builder,
            com.google.webrisk.v1.RawHashesOrBuilder>
        getRawHashesFieldBuilder() {
      if (rawHashesBuilder_ == null) {
        rawHashesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.webrisk.v1.RawHashes,
                com.google.webrisk.v1.RawHashes.Builder,
                com.google.webrisk.v1.RawHashesOrBuilder>(
                rawHashes_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        rawHashes_ = null;
      }
      return rawHashesBuilder_;
    }

    private com.google.webrisk.v1.RiceDeltaEncoding riceHashes_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.webrisk.v1.RiceDeltaEncoding,
            com.google.webrisk.v1.RiceDeltaEncoding.Builder,
            com.google.webrisk.v1.RiceDeltaEncodingOrBuilder>
        riceHashesBuilder_;
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     *
     * @return Whether the riceHashes field is set.
     */
    public boolean hasRiceHashes() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     *
     * @return The riceHashes.
     */
    public com.google.webrisk.v1.RiceDeltaEncoding getRiceHashes() {
      if (riceHashesBuilder_ == null) {
        return riceHashes_ == null
            ? com.google.webrisk.v1.RiceDeltaEncoding.getDefaultInstance()
            : riceHashes_;
      } else {
        return riceHashesBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public Builder setRiceHashes(com.google.webrisk.v1.RiceDeltaEncoding value) {
      if (riceHashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        riceHashes_ = value;
      } else {
        riceHashesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public Builder setRiceHashes(com.google.webrisk.v1.RiceDeltaEncoding.Builder builderForValue) {
      if (riceHashesBuilder_ == null) {
        riceHashes_ = builderForValue.build();
      } else {
        riceHashesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public Builder mergeRiceHashes(com.google.webrisk.v1.RiceDeltaEncoding value) {
      if (riceHashesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && riceHashes_ != null
            && riceHashes_ != com.google.webrisk.v1.RiceDeltaEncoding.getDefaultInstance()) {
          getRiceHashesBuilder().mergeFrom(value);
        } else {
          riceHashes_ = value;
        }
      } else {
        riceHashesBuilder_.mergeFrom(value);
      }
      if (riceHashes_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public Builder clearRiceHashes() {
      bitField0_ = (bitField0_ & ~0x00000002);
      riceHashes_ = null;
      if (riceHashesBuilder_ != null) {
        riceHashesBuilder_.dispose();
        riceHashesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public com.google.webrisk.v1.RiceDeltaEncoding.Builder getRiceHashesBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getRiceHashesFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    public com.google.webrisk.v1.RiceDeltaEncodingOrBuilder getRiceHashesOrBuilder() {
      if (riceHashesBuilder_ != null) {
        return riceHashesBuilder_.getMessageOrBuilder();
      } else {
        return riceHashes_ == null
            ? com.google.webrisk.v1.RiceDeltaEncoding.getDefaultInstance()
            : riceHashes_;
      }
    }
    /**
     *
     *
     * <pre>
     * The encoded 4-byte prefixes of SHA256-formatted entries, using a
     * Golomb-Rice encoding. The hashes are converted to uint32, sorted in
     * ascending order, then delta encoded and stored as encoded_data.
     * </pre>
     *
     * <code>.google.cloud.webrisk.v1.RiceDeltaEncoding rice_hashes = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.webrisk.v1.RiceDeltaEncoding,
            com.google.webrisk.v1.RiceDeltaEncoding.Builder,
            com.google.webrisk.v1.RiceDeltaEncodingOrBuilder>
        getRiceHashesFieldBuilder() {
      if (riceHashesBuilder_ == null) {
        riceHashesBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.webrisk.v1.RiceDeltaEncoding,
                com.google.webrisk.v1.RiceDeltaEncoding.Builder,
                com.google.webrisk.v1.RiceDeltaEncodingOrBuilder>(
                getRiceHashes(), getParentForChildren(), isClean());
        riceHashes_ = null;
      }
      return riceHashesBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.webrisk.v1.ThreatEntryAdditions)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.webrisk.v1.ThreatEntryAdditions)
  private static final com.google.webrisk.v1.ThreatEntryAdditions DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.webrisk.v1.ThreatEntryAdditions();
  }

  public static com.google.webrisk.v1.ThreatEntryAdditions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ThreatEntryAdditions> PARSER =
      new com.google.protobuf.AbstractParser<ThreatEntryAdditions>() {
        @java.lang.Override
        public ThreatEntryAdditions parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ThreatEntryAdditions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ThreatEntryAdditions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.webrisk.v1.ThreatEntryAdditions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
