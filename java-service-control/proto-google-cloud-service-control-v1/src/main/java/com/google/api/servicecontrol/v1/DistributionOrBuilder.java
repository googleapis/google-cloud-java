/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/distribution.proto

// Protobuf Java Version: 3.25.5
package com.google.api.servicecontrol.v1;

public interface DistributionOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.api.servicecontrol.v1.Distribution)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The total number of samples in the distribution. Must be &gt;= 0.
   * </pre>
   *
   * <code>int64 count = 1;</code>
   *
   * @return The count.
   */
  long getCount();

  /**
   *
   *
   * <pre>
   * The arithmetic mean of the samples in the distribution. If `count` is
   * zero then this field must be zero.
   * </pre>
   *
   * <code>double mean = 2;</code>
   *
   * @return The mean.
   */
  double getMean();

  /**
   *
   *
   * <pre>
   * The minimum of the population of values. Ignored if `count` is zero.
   * </pre>
   *
   * <code>double minimum = 3;</code>
   *
   * @return The minimum.
   */
  double getMinimum();

  /**
   *
   *
   * <pre>
   * The maximum of the population of values. Ignored if `count` is zero.
   * </pre>
   *
   * <code>double maximum = 4;</code>
   *
   * @return The maximum.
   */
  double getMaximum();

  /**
   *
   *
   * <pre>
   * The sum of squared deviations from the mean:
   *   Sum[i=1..count]((x_i - mean)^2)
   * where each x_i is a sample values. If `count` is zero then this field
   * must be zero, otherwise validation of the request fails.
   * </pre>
   *
   * <code>double sum_of_squared_deviation = 5;</code>
   *
   * @return The sumOfSquaredDeviation.
   */
  double getSumOfSquaredDeviation();

  /**
   *
   *
   * <pre>
   * The number of samples in each histogram bucket. `bucket_counts` are
   * optional. If present, they must sum to the `count` value.
   *
   * The buckets are defined below in `bucket_option`. There are N buckets.
   * `bucket_counts[0]` is the number of samples in the underflow bucket.
   * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
   * in each of the finite buckets. And `bucket_counts[N] is the number
   * of samples in the overflow bucket. See the comments of `bucket_option`
   * below for more details.
   *
   * Any suffix of trailing zeros may be omitted.
   * </pre>
   *
   * <code>repeated int64 bucket_counts = 6;</code>
   *
   * @return A list containing the bucketCounts.
   */
  java.util.List<java.lang.Long> getBucketCountsList();
  /**
   *
   *
   * <pre>
   * The number of samples in each histogram bucket. `bucket_counts` are
   * optional. If present, they must sum to the `count` value.
   *
   * The buckets are defined below in `bucket_option`. There are N buckets.
   * `bucket_counts[0]` is the number of samples in the underflow bucket.
   * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
   * in each of the finite buckets. And `bucket_counts[N] is the number
   * of samples in the overflow bucket. See the comments of `bucket_option`
   * below for more details.
   *
   * Any suffix of trailing zeros may be omitted.
   * </pre>
   *
   * <code>repeated int64 bucket_counts = 6;</code>
   *
   * @return The count of bucketCounts.
   */
  int getBucketCountsCount();
  /**
   *
   *
   * <pre>
   * The number of samples in each histogram bucket. `bucket_counts` are
   * optional. If present, they must sum to the `count` value.
   *
   * The buckets are defined below in `bucket_option`. There are N buckets.
   * `bucket_counts[0]` is the number of samples in the underflow bucket.
   * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
   * in each of the finite buckets. And `bucket_counts[N] is the number
   * of samples in the overflow bucket. See the comments of `bucket_option`
   * below for more details.
   *
   * Any suffix of trailing zeros may be omitted.
   * </pre>
   *
   * <code>repeated int64 bucket_counts = 6;</code>
   *
   * @param index The index of the element to return.
   * @return The bucketCounts at the given index.
   */
  long getBucketCounts(int index);

  /**
   *
   *
   * <pre>
   * Buckets with constant width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;</code>
   *
   * @return Whether the linearBuckets field is set.
   */
  boolean hasLinearBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with constant width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;</code>
   *
   * @return The linearBuckets.
   */
  com.google.api.servicecontrol.v1.Distribution.LinearBuckets getLinearBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with constant width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;</code>
   */
  com.google.api.servicecontrol.v1.Distribution.LinearBucketsOrBuilder getLinearBucketsOrBuilder();

  /**
   *
   *
   * <pre>
   * Buckets with exponentially growing width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
   * </code>
   *
   * @return Whether the exponentialBuckets field is set.
   */
  boolean hasExponentialBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with exponentially growing width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
   * </code>
   *
   * @return The exponentialBuckets.
   */
  com.google.api.servicecontrol.v1.Distribution.ExponentialBuckets getExponentialBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with exponentially growing width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
   * </code>
   */
  com.google.api.servicecontrol.v1.Distribution.ExponentialBucketsOrBuilder
      getExponentialBucketsOrBuilder();

  /**
   *
   *
   * <pre>
   * Buckets with arbitrary user-provided width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;</code>
   *
   * @return Whether the explicitBuckets field is set.
   */
  boolean hasExplicitBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with arbitrary user-provided width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;</code>
   *
   * @return The explicitBuckets.
   */
  com.google.api.servicecontrol.v1.Distribution.ExplicitBuckets getExplicitBuckets();
  /**
   *
   *
   * <pre>
   * Buckets with arbitrary user-provided width.
   * </pre>
   *
   * <code>.google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;</code>
   */
  com.google.api.servicecontrol.v1.Distribution.ExplicitBucketsOrBuilder
      getExplicitBucketsOrBuilder();

  /**
   *
   *
   * <pre>
   * Example points. Must be in increasing order of `value` field.
   * </pre>
   *
   * <code>repeated .google.api.Distribution.Exemplar exemplars = 10;</code>
   */
  java.util.List<com.google.api.Distribution.Exemplar> getExemplarsList();
  /**
   *
   *
   * <pre>
   * Example points. Must be in increasing order of `value` field.
   * </pre>
   *
   * <code>repeated .google.api.Distribution.Exemplar exemplars = 10;</code>
   */
  com.google.api.Distribution.Exemplar getExemplars(int index);
  /**
   *
   *
   * <pre>
   * Example points. Must be in increasing order of `value` field.
   * </pre>
   *
   * <code>repeated .google.api.Distribution.Exemplar exemplars = 10;</code>
   */
  int getExemplarsCount();
  /**
   *
   *
   * <pre>
   * Example points. Must be in increasing order of `value` field.
   * </pre>
   *
   * <code>repeated .google.api.Distribution.Exemplar exemplars = 10;</code>
   */
  java.util.List<? extends com.google.api.Distribution.ExemplarOrBuilder>
      getExemplarsOrBuilderList();
  /**
   *
   *
   * <pre>
   * Example points. Must be in increasing order of `value` field.
   * </pre>
   *
   * <code>repeated .google.api.Distribution.Exemplar exemplars = 10;</code>
   */
  com.google.api.Distribution.ExemplarOrBuilder getExemplarsOrBuilder(int index);

  com.google.api.servicecontrol.v1.Distribution.BucketOptionCase getBucketOptionCase();
}
