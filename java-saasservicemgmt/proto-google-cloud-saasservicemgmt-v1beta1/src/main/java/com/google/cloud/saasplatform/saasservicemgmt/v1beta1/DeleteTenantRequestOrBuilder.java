/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/saasplatform/saasservicemgmt/v1beta1/deployments_service.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.saasplatform.saasservicemgmt.v1beta1;

public interface DeleteTenantRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.saasplatform.saasservicemgmt.v1beta1.DeleteTenantRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The resource name of the resource within a service.
   * </pre>
   *
   * <code>
   * string name = 10001 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The name.
   */
  java.lang.String getName();

  /**
   *
   *
   * <pre>
   * Required. The resource name of the resource within a service.
   * </pre>
   *
   * <code>
   * string name = 10001 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * The etag known to the client for the expected state of the tenant. This is
   * used with state-changing methods to prevent accidental overwrites when
   * multiple user agents might be acting in parallel on the same resource.
   *
   * An etag wildcard provide optimistic concurrency based on the expected
   * existence of the tenant. The Any wildcard (`*`) requires that the resource
   * must already exists, and the Not Any wildcard (`!*`) requires that it must
   * not.
   * </pre>
   *
   * <code>string etag = 10202;</code>
   *
   * @return The etag.
   */
  java.lang.String getEtag();

  /**
   *
   *
   * <pre>
   * The etag known to the client for the expected state of the tenant. This is
   * used with state-changing methods to prevent accidental overwrites when
   * multiple user agents might be acting in parallel on the same resource.
   *
   * An etag wildcard provide optimistic concurrency based on the expected
   * existence of the tenant. The Any wildcard (`*`) requires that the resource
   * must already exists, and the Not Any wildcard (`!*`) requires that it must
   * not.
   * </pre>
   *
   * <code>string etag = 10202;</code>
   *
   * @return The bytes for etag.
   */
  com.google.protobuf.ByteString getEtagBytes();

  /**
   *
   *
   * <pre>
   * If "validate_only" is set to true, the service will try to validate
   * that this request would succeed, but will not actually make changes.
   * </pre>
   *
   * <code>bool validate_only = 10501;</code>
   *
   * @return The validateOnly.
   */
  boolean getValidateOnly();

  /**
   *
   *
   * <pre>
   * An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   * </pre>
   *
   * <code>string request_id = 10502;</code>
   *
   * @return The requestId.
   */
  java.lang.String getRequestId();

  /**
   *
   *
   * <pre>
   * An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   * </pre>
   *
   * <code>string request_id = 10502;</code>
   *
   * @return The bytes for requestId.
   */
  com.google.protobuf.ByteString getRequestIdBytes();
}
