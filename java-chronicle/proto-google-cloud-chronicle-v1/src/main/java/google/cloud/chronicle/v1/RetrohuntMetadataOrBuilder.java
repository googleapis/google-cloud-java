/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/chronicle/v1/rule.proto

// Protobuf Java Version: 3.25.5
package google.cloud.chronicle.v1;

public interface RetrohuntMetadataOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.chronicle.v1.RetrohuntMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The name of the retrohunt.
   * Format:
   * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
   * </pre>
   *
   * <code>string retrohunt = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The retrohunt.
   */
  java.lang.String getRetrohunt();

  /**
   *
   *
   * <pre>
   * The name of the retrohunt.
   * Format:
   * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
   * </pre>
   *
   * <code>string retrohunt = 1 [(.google.api.resource_reference) = { ... }</code>
   *
   * @return The bytes for retrohunt.
   */
  com.google.protobuf.ByteString getRetrohuntBytes();

  /**
   *
   *
   * <pre>
   * The start and end time of the retrohunt execution. If the retrohunt is not
   * yet finished, the end time of the interval will not be filled.
   * </pre>
   *
   * <code>.google.type.Interval execution_interval = 2;</code>
   *
   * @return Whether the executionInterval field is set.
   */
  boolean hasExecutionInterval();

  /**
   *
   *
   * <pre>
   * The start and end time of the retrohunt execution. If the retrohunt is not
   * yet finished, the end time of the interval will not be filled.
   * </pre>
   *
   * <code>.google.type.Interval execution_interval = 2;</code>
   *
   * @return The executionInterval.
   */
  com.google.type.Interval getExecutionInterval();

  /**
   *
   *
   * <pre>
   * The start and end time of the retrohunt execution. If the retrohunt is not
   * yet finished, the end time of the interval will not be filled.
   * </pre>
   *
   * <code>.google.type.Interval execution_interval = 2;</code>
   */
  com.google.type.IntervalOrBuilder getExecutionIntervalOrBuilder();

  /**
   *
   *
   * <pre>
   * Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
   * </pre>
   *
   * <code>float progress_percentage = 3;</code>
   *
   * @return The progressPercentage.
   */
  float getProgressPercentage();
}
