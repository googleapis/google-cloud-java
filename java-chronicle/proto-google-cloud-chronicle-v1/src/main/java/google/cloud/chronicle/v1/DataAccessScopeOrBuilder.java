/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/chronicle/v1/data_access_control.proto

// Protobuf Java Version: 3.25.5
package google.cloud.chronicle.v1;

public interface DataAccessScopeOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.chronicle.v1.DataAccessScope)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The unique full name of the data access scope.
   * The name should comply with https://google.aip.dev/122 standards.
   * </pre>
   *
   * <code>
   * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The name.
   */
  java.lang.String getName();

  /**
   *
   *
   * <pre>
   * Required. The unique full name of the data access scope.
   * The name should comply with https://google.aip.dev/122 standards.
   * </pre>
   *
   * <code>
   * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<google.cloud.chronicle.v1.DataAccessLabelReference>
      getAllowedDataAccessLabelsList();

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  google.cloud.chronicle.v1.DataAccessLabelReference getAllowedDataAccessLabels(int index);

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getAllowedDataAccessLabelsCount();

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<? extends google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
      getAllowedDataAccessLabelsOrBuilderList();

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder getAllowedDataAccessLabelsOrBuilder(
      int index);

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<google.cloud.chronicle.v1.DataAccessLabelReference>
      getDeniedDataAccessLabelsList();

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  google.cloud.chronicle.v1.DataAccessLabelReference getDeniedDataAccessLabels(int index);

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  int getDeniedDataAccessLabelsCount();

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  java.util.List<? extends google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
      getDeniedDataAccessLabelsOrBuilderList();

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder getDeniedDataAccessLabelsOrBuilder(
      int index);

  /**
   *
   *
   * <pre>
   * Output only. The name to be used for display to customers of the data
   * access scope.
   * </pre>
   *
   * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The displayName.
   */
  java.lang.String getDisplayName();

  /**
   *
   *
   * <pre>
   * Output only. The name to be used for display to customers of the data
   * access scope.
   * </pre>
   *
   * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for displayName.
   */
  com.google.protobuf.ByteString getDisplayNameBytes();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. The user who created the data access scope.
   * </pre>
   *
   * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The author.
   */
  java.lang.String getAuthor();

  /**
   *
   *
   * <pre>
   * Output only. The user who created the data access scope.
   * </pre>
   *
   * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for author.
   */
  com.google.protobuf.ByteString getAuthorBytes();

  /**
   *
   *
   * <pre>
   * Output only. The user who last updated the data access scope.
   * </pre>
   *
   * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The lastEditor.
   */
  java.lang.String getLastEditor();

  /**
   *
   *
   * <pre>
   * Output only. The user who last updated the data access scope.
   * </pre>
   *
   * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for lastEditor.
   */
  com.google.protobuf.ByteString getLastEditorBytes();

  /**
   *
   *
   * <pre>
   * Optional. A description of the data access scope for a human reader.
   * </pre>
   *
   * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The description.
   */
  java.lang.String getDescription();

  /**
   *
   *
   * <pre>
   * Optional. A description of the data access scope for a human reader.
   * </pre>
   *
   * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString getDescriptionBytes();

  /**
   *
   *
   * <pre>
   * Optional. Whether or not the scope allows all labels, allow_all and
   * allowed_data_access_labels are mutually exclusive and one of them must be
   * present. denied_data_access_labels can still be used along with allow_all.
   * When combined with denied_data_access_labels, access will be granted to all
   * data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
   * A customer with scope with denied labels A and B and allow_all will be able
   * to see all data except data labeled with A and data labeled with B and data
   * with labels A and B.
   * </pre>
   *
   * <code>bool allow_all = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The allowAll.
   */
  boolean getAllowAll();
}
