/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/chronicle/v1/data_access_control.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.chronicle.v1;

/**
 *
 *
 * <pre>
 * A DataAccessScope is a boolean expression of data access labels used
 * to restrict access to data for users.
 * </pre>
 *
 * Protobuf type {@code google.cloud.chronicle.v1.DataAccessScope}
 */
public final class DataAccessScope extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.chronicle.v1.DataAccessScope)
    DataAccessScopeOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use DataAccessScope.newBuilder() to construct.
  private DataAccessScope(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private DataAccessScope() {
    name_ = "";
    allowedDataAccessLabels_ = java.util.Collections.emptyList();
    deniedDataAccessLabels_ = java.util.Collections.emptyList();
    displayName_ = "";
    author_ = "";
    lastEditor_ = "";
    description_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new DataAccessScope();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.chronicle.v1.DataAccessProto
        .internal_static_google_cloud_chronicle_v1_DataAccessScope_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.chronicle.v1.DataAccessProto
        .internal_static_google_cloud_chronicle_v1_DataAccessScope_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.chronicle.v1.DataAccessScope.class,
            com.google.cloud.chronicle.v1.DataAccessScope.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";

  /**
   *
   *
   * <pre>
   * Required. The unique full name of the data access scope.
   * The name should comply with https://google.aip.dev/122 standards.
   * </pre>
   *
   * <code>
   * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Required. The unique full name of the data access scope.
   * The name should comply with https://google.aip.dev/122 standards.
   * </pre>
   *
   * <code>
   * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ALLOWED_DATA_ACCESS_LABELS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
      allowedDataAccessLabels_;

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
      getAllowedDataAccessLabelsList() {
    return allowedDataAccessLabels_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
      getAllowedDataAccessLabelsOrBuilderList() {
    return allowedDataAccessLabels_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public int getAllowedDataAccessLabelsCount() {
    return allowedDataAccessLabels_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.chronicle.v1.DataAccessLabelReference getAllowedDataAccessLabels(
      int index) {
    return allowedDataAccessLabels_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Optional. The allowed labels for the scope.
   * Either allow_all or allowed_data_access_labels needs to be provided.
   * When provided, there has to be at least one label allowed for the scope to
   * be valid.
   * The logical operator for evaluation of the allowed labels is OR.
   * E.g.: A customer with scope with allowed labels A and B will be able
   * to see data with labeled with A or B or (A and B).
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder
      getAllowedDataAccessLabelsOrBuilder(int index) {
    return allowedDataAccessLabels_.get(index);
  }

  public static final int DENIED_DATA_ACCESS_LABELS_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
      deniedDataAccessLabels_;

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
      getDeniedDataAccessLabelsList() {
    return deniedDataAccessLabels_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
      getDeniedDataAccessLabelsOrBuilderList() {
    return deniedDataAccessLabels_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public int getDeniedDataAccessLabelsCount() {
    return deniedDataAccessLabels_.size();
  }

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.chronicle.v1.DataAccessLabelReference getDeniedDataAccessLabels(
      int index) {
    return deniedDataAccessLabels_.get(index);
  }

  /**
   *
   *
   * <pre>
   * Optional. The denied labels for the scope.
   * The logical operator for evaluation of the denied labels is AND.
   * E.g.: A customer with scope with denied labels A and B won't be able
   * to see data labeled with A and data labeled with B
   * and data with labels A and B.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder
      getDeniedDataAccessLabelsOrBuilder(int index) {
    return deniedDataAccessLabels_.get(index);
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object displayName_ = "";

  /**
   *
   *
   * <pre>
   * Output only. The name to be used for display to customers of the data
   * access scope.
   * </pre>
   *
   * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      displayName_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Output only. The name to be used for display to customers of the data
   * access scope.
   * </pre>
   *
   * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDisplayNameBytes() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      displayName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CREATE_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp createTime_;

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return Whether the createTime field is set.
   */
  @java.lang.Override
  public boolean hasCreateTime() {
    return ((bitField0_ & 0x00000001) != 0);
  }

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The createTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getCreateTime() {
    return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
  }

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
    return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
  }

  public static final int UPDATE_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp updateTime_;

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return Whether the updateTime field is set.
   */
  @java.lang.Override
  public boolean hasUpdateTime() {
    return ((bitField0_ & 0x00000002) != 0);
  }

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The updateTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getUpdateTime() {
    return updateTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : updateTime_;
  }

  /**
   *
   *
   * <pre>
   * Output only. The time at which the data access scope was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder() {
    return updateTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : updateTime_;
  }

  public static final int AUTHOR_FIELD_NUMBER = 7;

  @SuppressWarnings("serial")
  private volatile java.lang.Object author_ = "";

  /**
   *
   *
   * <pre>
   * Output only. The user who created the data access scope.
   * </pre>
   *
   * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The author.
   */
  @java.lang.Override
  public java.lang.String getAuthor() {
    java.lang.Object ref = author_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      author_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Output only. The user who created the data access scope.
   * </pre>
   *
   * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for author.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getAuthorBytes() {
    java.lang.Object ref = author_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      author_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LAST_EDITOR_FIELD_NUMBER = 8;

  @SuppressWarnings("serial")
  private volatile java.lang.Object lastEditor_ = "";

  /**
   *
   *
   * <pre>
   * Output only. The user who last updated the data access scope.
   * </pre>
   *
   * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The lastEditor.
   */
  @java.lang.Override
  public java.lang.String getLastEditor() {
    java.lang.Object ref = lastEditor_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      lastEditor_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Output only. The user who last updated the data access scope.
   * </pre>
   *
   * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for lastEditor.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getLastEditorBytes() {
    java.lang.Object ref = lastEditor_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      lastEditor_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 9;

  @SuppressWarnings("serial")
  private volatile java.lang.Object description_ = "";

  /**
   *
   *
   * <pre>
   * Optional. A description of the data access scope for a human reader.
   * </pre>
   *
   * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      description_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. A description of the data access scope for a human reader.
   * </pre>
   *
   * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDescriptionBytes() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      description_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ALLOW_ALL_FIELD_NUMBER = 10;
  private boolean allowAll_ = false;

  /**
   *
   *
   * <pre>
   * Optional. Whether or not the scope allows all labels, allow_all and
   * allowed_data_access_labels are mutually exclusive and one of them must be
   * present. denied_data_access_labels can still be used along with allow_all.
   * When combined with denied_data_access_labels, access will be granted to all
   * data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
   * A customer with scope with denied labels A and B and allow_all will be able
   * to see all data except data labeled with A and data labeled with B and data
   * with labels A and B.
   * </pre>
   *
   * <code>bool allow_all = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The allowAll.
   */
  @java.lang.Override
  public boolean getAllowAll() {
    return allowAll_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < allowedDataAccessLabels_.size(); i++) {
      output.writeMessage(2, allowedDataAccessLabels_.get(i));
    }
    for (int i = 0; i < deniedDataAccessLabels_.size(); i++) {
      output.writeMessage(3, deniedDataAccessLabels_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, displayName_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getCreateTime());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(6, getUpdateTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(author_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, author_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(lastEditor_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, lastEditor_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, description_);
    }
    if (allowAll_ != false) {
      output.writeBool(10, allowAll_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    for (int i = 0; i < allowedDataAccessLabels_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, allowedDataAccessLabels_.get(i));
    }
    for (int i = 0; i < deniedDataAccessLabels_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              3, deniedDataAccessLabels_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(displayName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, displayName_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getCreateTime());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getUpdateTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(author_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, author_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(lastEditor_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, lastEditor_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, description_);
    }
    if (allowAll_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(10, allowAll_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.chronicle.v1.DataAccessScope)) {
      return super.equals(obj);
    }
    com.google.cloud.chronicle.v1.DataAccessScope other =
        (com.google.cloud.chronicle.v1.DataAccessScope) obj;

    if (!getName().equals(other.getName())) return false;
    if (!getAllowedDataAccessLabelsList().equals(other.getAllowedDataAccessLabelsList()))
      return false;
    if (!getDeniedDataAccessLabelsList().equals(other.getDeniedDataAccessLabelsList()))
      return false;
    if (!getDisplayName().equals(other.getDisplayName())) return false;
    if (hasCreateTime() != other.hasCreateTime()) return false;
    if (hasCreateTime()) {
      if (!getCreateTime().equals(other.getCreateTime())) return false;
    }
    if (hasUpdateTime() != other.hasUpdateTime()) return false;
    if (hasUpdateTime()) {
      if (!getUpdateTime().equals(other.getUpdateTime())) return false;
    }
    if (!getAuthor().equals(other.getAuthor())) return false;
    if (!getLastEditor().equals(other.getLastEditor())) return false;
    if (!getDescription().equals(other.getDescription())) return false;
    if (getAllowAll() != other.getAllowAll()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getAllowedDataAccessLabelsCount() > 0) {
      hash = (37 * hash) + ALLOWED_DATA_ACCESS_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + getAllowedDataAccessLabelsList().hashCode();
    }
    if (getDeniedDataAccessLabelsCount() > 0) {
      hash = (37 * hash) + DENIED_DATA_ACCESS_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + getDeniedDataAccessLabelsList().hashCode();
    }
    hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDisplayName().hashCode();
    if (hasCreateTime()) {
      hash = (37 * hash) + CREATE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getCreateTime().hashCode();
    }
    if (hasUpdateTime()) {
      hash = (37 * hash) + UPDATE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateTime().hashCode();
    }
    hash = (37 * hash) + AUTHOR_FIELD_NUMBER;
    hash = (53 * hash) + getAuthor().hashCode();
    hash = (37 * hash) + LAST_EDITOR_FIELD_NUMBER;
    hash = (53 * hash) + getLastEditor().hashCode();
    hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
    hash = (53 * hash) + getDescription().hashCode();
    hash = (37 * hash) + ALLOW_ALL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getAllowAll());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.chronicle.v1.DataAccessScope prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * A DataAccessScope is a boolean expression of data access labels used
   * to restrict access to data for users.
   * </pre>
   *
   * Protobuf type {@code google.cloud.chronicle.v1.DataAccessScope}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.chronicle.v1.DataAccessScope)
      com.google.cloud.chronicle.v1.DataAccessScopeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.chronicle.v1.DataAccessProto
          .internal_static_google_cloud_chronicle_v1_DataAccessScope_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.chronicle.v1.DataAccessProto
          .internal_static_google_cloud_chronicle_v1_DataAccessScope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.chronicle.v1.DataAccessScope.class,
              com.google.cloud.chronicle.v1.DataAccessScope.Builder.class);
    }

    // Construct using com.google.cloud.chronicle.v1.DataAccessScope.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getAllowedDataAccessLabelsFieldBuilder();
        getDeniedDataAccessLabelsFieldBuilder();
        getCreateTimeFieldBuilder();
        getUpdateTimeFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      if (allowedDataAccessLabelsBuilder_ == null) {
        allowedDataAccessLabels_ = java.util.Collections.emptyList();
      } else {
        allowedDataAccessLabels_ = null;
        allowedDataAccessLabelsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (deniedDataAccessLabelsBuilder_ == null) {
        deniedDataAccessLabels_ = java.util.Collections.emptyList();
      } else {
        deniedDataAccessLabels_ = null;
        deniedDataAccessLabelsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      displayName_ = "";
      createTime_ = null;
      if (createTimeBuilder_ != null) {
        createTimeBuilder_.dispose();
        createTimeBuilder_ = null;
      }
      updateTime_ = null;
      if (updateTimeBuilder_ != null) {
        updateTimeBuilder_.dispose();
        updateTimeBuilder_ = null;
      }
      author_ = "";
      lastEditor_ = "";
      description_ = "";
      allowAll_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.chronicle.v1.DataAccessProto
          .internal_static_google_cloud_chronicle_v1_DataAccessScope_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.chronicle.v1.DataAccessScope getDefaultInstanceForType() {
      return com.google.cloud.chronicle.v1.DataAccessScope.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.chronicle.v1.DataAccessScope build() {
      com.google.cloud.chronicle.v1.DataAccessScope result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.chronicle.v1.DataAccessScope buildPartial() {
      com.google.cloud.chronicle.v1.DataAccessScope result =
          new com.google.cloud.chronicle.v1.DataAccessScope(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.cloud.chronicle.v1.DataAccessScope result) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          allowedDataAccessLabels_ =
              java.util.Collections.unmodifiableList(allowedDataAccessLabels_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.allowedDataAccessLabels_ = allowedDataAccessLabels_;
      } else {
        result.allowedDataAccessLabels_ = allowedDataAccessLabelsBuilder_.build();
      }
      if (deniedDataAccessLabelsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          deniedDataAccessLabels_ = java.util.Collections.unmodifiableList(deniedDataAccessLabels_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.deniedDataAccessLabels_ = deniedDataAccessLabels_;
      } else {
        result.deniedDataAccessLabels_ = deniedDataAccessLabelsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.cloud.chronicle.v1.DataAccessScope result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.displayName_ = displayName_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.createTime_ = createTimeBuilder_ == null ? createTime_ : createTimeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.updateTime_ = updateTimeBuilder_ == null ? updateTime_ : updateTimeBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.author_ = author_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.lastEditor_ = lastEditor_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.description_ = description_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.allowAll_ = allowAll_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.chronicle.v1.DataAccessScope) {
        return mergeFrom((com.google.cloud.chronicle.v1.DataAccessScope) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.chronicle.v1.DataAccessScope other) {
      if (other == com.google.cloud.chronicle.v1.DataAccessScope.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (allowedDataAccessLabelsBuilder_ == null) {
        if (!other.allowedDataAccessLabels_.isEmpty()) {
          if (allowedDataAccessLabels_.isEmpty()) {
            allowedDataAccessLabels_ = other.allowedDataAccessLabels_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAllowedDataAccessLabelsIsMutable();
            allowedDataAccessLabels_.addAll(other.allowedDataAccessLabels_);
          }
          onChanged();
        }
      } else {
        if (!other.allowedDataAccessLabels_.isEmpty()) {
          if (allowedDataAccessLabelsBuilder_.isEmpty()) {
            allowedDataAccessLabelsBuilder_.dispose();
            allowedDataAccessLabelsBuilder_ = null;
            allowedDataAccessLabels_ = other.allowedDataAccessLabels_;
            bitField0_ = (bitField0_ & ~0x00000002);
            allowedDataAccessLabelsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getAllowedDataAccessLabelsFieldBuilder()
                    : null;
          } else {
            allowedDataAccessLabelsBuilder_.addAllMessages(other.allowedDataAccessLabels_);
          }
        }
      }
      if (deniedDataAccessLabelsBuilder_ == null) {
        if (!other.deniedDataAccessLabels_.isEmpty()) {
          if (deniedDataAccessLabels_.isEmpty()) {
            deniedDataAccessLabels_ = other.deniedDataAccessLabels_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDeniedDataAccessLabelsIsMutable();
            deniedDataAccessLabels_.addAll(other.deniedDataAccessLabels_);
          }
          onChanged();
        }
      } else {
        if (!other.deniedDataAccessLabels_.isEmpty()) {
          if (deniedDataAccessLabelsBuilder_.isEmpty()) {
            deniedDataAccessLabelsBuilder_.dispose();
            deniedDataAccessLabelsBuilder_ = null;
            deniedDataAccessLabels_ = other.deniedDataAccessLabels_;
            bitField0_ = (bitField0_ & ~0x00000004);
            deniedDataAccessLabelsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getDeniedDataAccessLabelsFieldBuilder()
                    : null;
          } else {
            deniedDataAccessLabelsBuilder_.addAllMessages(other.deniedDataAccessLabels_);
          }
        }
      }
      if (!other.getDisplayName().isEmpty()) {
        displayName_ = other.displayName_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasCreateTime()) {
        mergeCreateTime(other.getCreateTime());
      }
      if (other.hasUpdateTime()) {
        mergeUpdateTime(other.getUpdateTime());
      }
      if (!other.getAuthor().isEmpty()) {
        author_ = other.author_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      if (!other.getLastEditor().isEmpty()) {
        lastEditor_ = other.lastEditor_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (!other.getDescription().isEmpty()) {
        description_ = other.description_;
        bitField0_ |= 0x00000100;
        onChanged();
      }
      if (other.getAllowAll() != false) {
        setAllowAll(other.getAllowAll());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                com.google.cloud.chronicle.v1.DataAccessLabelReference m =
                    input.readMessage(
                        com.google.cloud.chronicle.v1.DataAccessLabelReference.parser(),
                        extensionRegistry);
                if (allowedDataAccessLabelsBuilder_ == null) {
                  ensureAllowedDataAccessLabelsIsMutable();
                  allowedDataAccessLabels_.add(m);
                } else {
                  allowedDataAccessLabelsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            case 26:
              {
                com.google.cloud.chronicle.v1.DataAccessLabelReference m =
                    input.readMessage(
                        com.google.cloud.chronicle.v1.DataAccessLabelReference.parser(),
                        extensionRegistry);
                if (deniedDataAccessLabelsBuilder_ == null) {
                  ensureDeniedDataAccessLabelsIsMutable();
                  deniedDataAccessLabels_.add(m);
                } else {
                  deniedDataAccessLabelsBuilder_.addMessage(m);
                }
                break;
              } // case 26
            case 34:
              {
                displayName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getCreateTimeFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(getUpdateTimeFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            case 58:
              {
                author_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
            case 66:
              {
                lastEditor_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
            case 74:
              {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000100;
                break;
              } // case 74
            case 80:
              {
                allowAll_ = input.readBool();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object name_ = "";

    /**
     *
     *
     * <pre>
     * Required. The unique full name of the data access scope.
     * The name should comply with https://google.aip.dev/122 standards.
     * </pre>
     *
     * <code>
     * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The unique full name of the data access scope.
     * The name should comply with https://google.aip.dev/122 standards.
     * </pre>
     *
     * <code>
     * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. The unique full name of the data access scope.
     * The name should comply with https://google.aip.dev/122 standards.
     * </pre>
     *
     * <code>
     * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The unique full name of the data access scope.
     * The name should comply with https://google.aip.dev/122 standards.
     * </pre>
     *
     * <code>
     * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The unique full name of the data access scope.
     * The name should comply with https://google.aip.dev/122 standards.
     * </pre>
     *
     * <code>
     * string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
        allowedDataAccessLabels_ = java.util.Collections.emptyList();

    private void ensureAllowedDataAccessLabelsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        allowedDataAccessLabels_ =
            new java.util.ArrayList<com.google.cloud.chronicle.v1.DataAccessLabelReference>(
                allowedDataAccessLabels_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.chronicle.v1.DataAccessLabelReference,
            com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
            com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        allowedDataAccessLabelsBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
        getAllowedDataAccessLabelsList() {
      if (allowedDataAccessLabelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(allowedDataAccessLabels_);
      } else {
        return allowedDataAccessLabelsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public int getAllowedDataAccessLabelsCount() {
      if (allowedDataAccessLabelsBuilder_ == null) {
        return allowedDataAccessLabels_.size();
      } else {
        return allowedDataAccessLabelsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference getAllowedDataAccessLabels(
        int index) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        return allowedDataAccessLabels_.get(index);
      } else {
        return allowedDataAccessLabelsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setAllowedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.set(index, value);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setAllowedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.set(index, builderForValue.build());
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllowedDataAccessLabels(
        com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.add(value);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllowedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.add(index, value);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllowedDataAccessLabels(
        com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.add(builderForValue.build());
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllowedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.add(index, builderForValue.build());
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllAllowedDataAccessLabels(
        java.lang.Iterable<? extends com.google.cloud.chronicle.v1.DataAccessLabelReference>
            values) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        ensureAllowedDataAccessLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, allowedDataAccessLabels_);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearAllowedDataAccessLabels() {
      if (allowedDataAccessLabelsBuilder_ == null) {
        allowedDataAccessLabels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeAllowedDataAccessLabels(int index) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        ensureAllowedDataAccessLabelsIsMutable();
        allowedDataAccessLabels_.remove(index);
        onChanged();
      } else {
        allowedDataAccessLabelsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        getAllowedDataAccessLabelsBuilder(int index) {
      return getAllowedDataAccessLabelsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder
        getAllowedDataAccessLabelsOrBuilder(int index) {
      if (allowedDataAccessLabelsBuilder_ == null) {
        return allowedDataAccessLabels_.get(index);
      } else {
        return allowedDataAccessLabelsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<? extends com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        getAllowedDataAccessLabelsOrBuilderList() {
      if (allowedDataAccessLabelsBuilder_ != null) {
        return allowedDataAccessLabelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(allowedDataAccessLabels_);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        addAllowedDataAccessLabelsBuilder() {
      return getAllowedDataAccessLabelsFieldBuilder()
          .addBuilder(com.google.cloud.chronicle.v1.DataAccessLabelReference.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        addAllowedDataAccessLabelsBuilder(int index) {
      return getAllowedDataAccessLabelsFieldBuilder()
          .addBuilder(
              index, com.google.cloud.chronicle.v1.DataAccessLabelReference.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The allowed labels for the scope.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * When provided, there has to be at least one label allowed for the scope to
     * be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference allowed_data_access_labels = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder>
        getAllowedDataAccessLabelsBuilderList() {
      return getAllowedDataAccessLabelsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.chronicle.v1.DataAccessLabelReference,
            com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
            com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        getAllowedDataAccessLabelsFieldBuilder() {
      if (allowedDataAccessLabelsBuilder_ == null) {
        allowedDataAccessLabelsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.chronicle.v1.DataAccessLabelReference,
                com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
                com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>(
                allowedDataAccessLabels_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        allowedDataAccessLabels_ = null;
      }
      return allowedDataAccessLabelsBuilder_;
    }

    private java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
        deniedDataAccessLabels_ = java.util.Collections.emptyList();

    private void ensureDeniedDataAccessLabelsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        deniedDataAccessLabels_ =
            new java.util.ArrayList<com.google.cloud.chronicle.v1.DataAccessLabelReference>(
                deniedDataAccessLabels_);
        bitField0_ |= 0x00000004;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.chronicle.v1.DataAccessLabelReference,
            com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
            com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        deniedDataAccessLabelsBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference>
        getDeniedDataAccessLabelsList() {
      if (deniedDataAccessLabelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(deniedDataAccessLabels_);
      } else {
        return deniedDataAccessLabelsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public int getDeniedDataAccessLabelsCount() {
      if (deniedDataAccessLabelsBuilder_ == null) {
        return deniedDataAccessLabels_.size();
      } else {
        return deniedDataAccessLabelsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference getDeniedDataAccessLabels(
        int index) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        return deniedDataAccessLabels_.get(index);
      } else {
        return deniedDataAccessLabelsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setDeniedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.set(index, value);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setDeniedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.set(index, builderForValue.build());
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addDeniedDataAccessLabels(
        com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.add(value);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addDeniedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference value) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.add(index, value);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addDeniedDataAccessLabels(
        com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.add(builderForValue.build());
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addDeniedDataAccessLabels(
        int index, com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder builderForValue) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.add(index, builderForValue.build());
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder addAllDeniedDataAccessLabels(
        java.lang.Iterable<? extends com.google.cloud.chronicle.v1.DataAccessLabelReference>
            values) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        ensureDeniedDataAccessLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, deniedDataAccessLabels_);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearDeniedDataAccessLabels() {
      if (deniedDataAccessLabelsBuilder_ == null) {
        deniedDataAccessLabels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeDeniedDataAccessLabels(int index) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        ensureDeniedDataAccessLabelsIsMutable();
        deniedDataAccessLabels_.remove(index);
        onChanged();
      } else {
        deniedDataAccessLabelsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        getDeniedDataAccessLabelsBuilder(int index) {
      return getDeniedDataAccessLabelsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder
        getDeniedDataAccessLabelsOrBuilder(int index) {
      if (deniedDataAccessLabelsBuilder_ == null) {
        return deniedDataAccessLabels_.get(index);
      } else {
        return deniedDataAccessLabelsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<? extends com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        getDeniedDataAccessLabelsOrBuilderList() {
      if (deniedDataAccessLabelsBuilder_ != null) {
        return deniedDataAccessLabelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(deniedDataAccessLabels_);
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        addDeniedDataAccessLabelsBuilder() {
      return getDeniedDataAccessLabelsFieldBuilder()
          .addBuilder(com.google.cloud.chronicle.v1.DataAccessLabelReference.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder
        addDeniedDataAccessLabelsBuilder(int index) {
      return getDeniedDataAccessLabelsFieldBuilder()
          .addBuilder(
              index, com.google.cloud.chronicle.v1.DataAccessLabelReference.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won't be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.chronicle.v1.DataAccessLabelReference denied_data_access_labels = 3 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public java.util.List<com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder>
        getDeniedDataAccessLabelsBuilderList() {
      return getDeniedDataAccessLabelsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.chronicle.v1.DataAccessLabelReference,
            com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
            com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>
        getDeniedDataAccessLabelsFieldBuilder() {
      if (deniedDataAccessLabelsBuilder_ == null) {
        deniedDataAccessLabelsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.chronicle.v1.DataAccessLabelReference,
                com.google.cloud.chronicle.v1.DataAccessLabelReference.Builder,
                com.google.cloud.chronicle.v1.DataAccessLabelReferenceOrBuilder>(
                deniedDataAccessLabels_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        deniedDataAccessLabels_ = null;
      }
      return deniedDataAccessLabelsBuilder_;
    }

    private java.lang.Object displayName_ = "";

    /**
     *
     *
     * <pre>
     * Output only. The name to be used for display to customers of the data
     * access scope.
     * </pre>
     *
     * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The displayName.
     */
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The name to be used for display to customers of the data
     * access scope.
     * </pre>
     *
     * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The bytes for displayName.
     */
    public com.google.protobuf.ByteString getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The name to be used for display to customers of the data
     * access scope.
     * </pre>
     *
     * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      displayName_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The name to be used for display to customers of the data
     * access scope.
     * </pre>
     *
     * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      displayName_ = getDefaultInstance().getDisplayName();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The name to be used for display to customers of the data
     * access scope.
     * </pre>
     *
     * <code>string display_name = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      displayName_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp createTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        createTimeBuilder_;

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     *
     * @return Whether the createTime field is set.
     */
    public boolean hasCreateTime() {
      return ((bitField0_ & 0x00000010) != 0);
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     *
     * @return The createTime.
     */
    public com.google.protobuf.Timestamp getCreateTime() {
      if (createTimeBuilder_ == null) {
        return createTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : createTime_;
      } else {
        return createTimeBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setCreateTime(com.google.protobuf.Timestamp value) {
      if (createTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        createTime_ = value;
      } else {
        createTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setCreateTime(com.google.protobuf.Timestamp.Builder builderForValue) {
      if (createTimeBuilder_ == null) {
        createTime_ = builderForValue.build();
      } else {
        createTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder mergeCreateTime(com.google.protobuf.Timestamp value) {
      if (createTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && createTime_ != null
            && createTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getCreateTimeBuilder().mergeFrom(value);
        } else {
          createTime_ = value;
        }
      } else {
        createTimeBuilder_.mergeFrom(value);
      }
      if (createTime_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder clearCreateTime() {
      bitField0_ = (bitField0_ & ~0x00000010);
      createTime_ = null;
      if (createTimeBuilder_ != null) {
        createTimeBuilder_.dispose();
        createTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.protobuf.Timestamp.Builder getCreateTimeBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getCreateTimeFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
      if (createTimeBuilder_ != null) {
        return createTimeBuilder_.getMessageOrBuilder();
      } else {
        return createTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : createTime_;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was created.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp create_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        getCreateTimeFieldBuilder() {
      if (createTimeBuilder_ == null) {
        createTimeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Timestamp,
                com.google.protobuf.Timestamp.Builder,
                com.google.protobuf.TimestampOrBuilder>(
                getCreateTime(), getParentForChildren(), isClean());
        createTime_ = null;
      }
      return createTimeBuilder_;
    }

    private com.google.protobuf.Timestamp updateTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        updateTimeBuilder_;

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     *
     * @return Whether the updateTime field is set.
     */
    public boolean hasUpdateTime() {
      return ((bitField0_ & 0x00000020) != 0);
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     *
     * @return The updateTime.
     */
    public com.google.protobuf.Timestamp getUpdateTime() {
      if (updateTimeBuilder_ == null) {
        return updateTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : updateTime_;
      } else {
        return updateTimeBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setUpdateTime(com.google.protobuf.Timestamp value) {
      if (updateTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        updateTime_ = value;
      } else {
        updateTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setUpdateTime(com.google.protobuf.Timestamp.Builder builderForValue) {
      if (updateTimeBuilder_ == null) {
        updateTime_ = builderForValue.build();
      } else {
        updateTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder mergeUpdateTime(com.google.protobuf.Timestamp value) {
      if (updateTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)
            && updateTime_ != null
            && updateTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getUpdateTimeBuilder().mergeFrom(value);
        } else {
          updateTime_ = value;
        }
      } else {
        updateTimeBuilder_.mergeFrom(value);
      }
      if (updateTime_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder clearUpdateTime() {
      bitField0_ = (bitField0_ & ~0x00000020);
      updateTime_ = null;
      if (updateTimeBuilder_ != null) {
        updateTimeBuilder_.dispose();
        updateTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.protobuf.Timestamp.Builder getUpdateTimeBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getUpdateTimeFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder() {
      if (updateTimeBuilder_ != null) {
        return updateTimeBuilder_.getMessageOrBuilder();
      } else {
        return updateTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : updateTime_;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The time at which the data access scope was last updated.
     * </pre>
     *
     * <code>
     * .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        getUpdateTimeFieldBuilder() {
      if (updateTimeBuilder_ == null) {
        updateTimeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Timestamp,
                com.google.protobuf.Timestamp.Builder,
                com.google.protobuf.TimestampOrBuilder>(
                getUpdateTime(), getParentForChildren(), isClean());
        updateTime_ = null;
      }
      return updateTimeBuilder_;
    }

    private java.lang.Object author_ = "";

    /**
     *
     *
     * <pre>
     * Output only. The user who created the data access scope.
     * </pre>
     *
     * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The author.
     */
    public java.lang.String getAuthor() {
      java.lang.Object ref = author_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        author_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who created the data access scope.
     * </pre>
     *
     * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The bytes for author.
     */
    public com.google.protobuf.ByteString getAuthorBytes() {
      java.lang.Object ref = author_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        author_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who created the data access scope.
     * </pre>
     *
     * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The author to set.
     * @return This builder for chaining.
     */
    public Builder setAuthor(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      author_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who created the data access scope.
     * </pre>
     *
     * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAuthor() {
      author_ = getDefaultInstance().getAuthor();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who created the data access scope.
     * </pre>
     *
     * <code>string author = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The bytes for author to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      author_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    private java.lang.Object lastEditor_ = "";

    /**
     *
     *
     * <pre>
     * Output only. The user who last updated the data access scope.
     * </pre>
     *
     * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The lastEditor.
     */
    public java.lang.String getLastEditor() {
      java.lang.Object ref = lastEditor_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        lastEditor_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who last updated the data access scope.
     * </pre>
     *
     * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The bytes for lastEditor.
     */
    public com.google.protobuf.ByteString getLastEditorBytes() {
      java.lang.Object ref = lastEditor_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        lastEditor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who last updated the data access scope.
     * </pre>
     *
     * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The lastEditor to set.
     * @return This builder for chaining.
     */
    public Builder setLastEditor(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      lastEditor_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who last updated the data access scope.
     * </pre>
     *
     * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearLastEditor() {
      lastEditor_ = getDefaultInstance().getLastEditor();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Output only. The user who last updated the data access scope.
     * </pre>
     *
     * <code>string last_editor = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The bytes for lastEditor to set.
     * @return This builder for chaining.
     */
    public Builder setLastEditorBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      lastEditor_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private java.lang.Object description_ = "";

    /**
     *
     *
     * <pre>
     * Optional. A description of the data access scope for a human reader.
     * </pre>
     *
     * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The description.
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. A description of the data access scope for a human reader.
     * </pre>
     *
     * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for description.
     */
    public com.google.protobuf.ByteString getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. A description of the data access scope for a human reader.
     * </pre>
     *
     * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      description_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. A description of the data access scope for a human reader.
     * </pre>
     *
     * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      description_ = getDefaultInstance().getDescription();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. A description of the data access scope for a human reader.
     * </pre>
     *
     * <code>string description = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      description_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    private boolean allowAll_;

    /**
     *
     *
     * <pre>
     * Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * </pre>
     *
     * <code>bool allow_all = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The allowAll.
     */
    @java.lang.Override
    public boolean getAllowAll() {
      return allowAll_;
    }

    /**
     *
     *
     * <pre>
     * Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * </pre>
     *
     * <code>bool allow_all = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The allowAll to set.
     * @return This builder for chaining.
     */
    public Builder setAllowAll(boolean value) {

      allowAll_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * </pre>
     *
     * <code>bool allow_all = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAllowAll() {
      bitField0_ = (bitField0_ & ~0x00000200);
      allowAll_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.chronicle.v1.DataAccessScope)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.chronicle.v1.DataAccessScope)
  private static final com.google.cloud.chronicle.v1.DataAccessScope DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.chronicle.v1.DataAccessScope();
  }

  public static com.google.cloud.chronicle.v1.DataAccessScope getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DataAccessScope> PARSER =
      new com.google.protobuf.AbstractParser<DataAccessScope>() {
        @java.lang.Override
        public DataAccessScope parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<DataAccessScope> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DataAccessScope> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.chronicle.v1.DataAccessScope getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
