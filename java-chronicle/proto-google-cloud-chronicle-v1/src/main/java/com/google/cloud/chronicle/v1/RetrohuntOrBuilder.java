/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/chronicle/v1/rule.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.chronicle.v1;

public interface RetrohuntOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.chronicle.v1.Retrohunt)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The resource name of the retrohunt.
   * Retrohunt is the child of a rule revision. {rule} in the format below is
   * structured as {rule_id&#64;revision_id}.
   * Format:
   * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  java.lang.String getName();

  /**
   *
   *
   * <pre>
   * The resource name of the retrohunt.
   * Retrohunt is the child of a rule revision. {rule} in the format below is
   * structured as {rule_id&#64;revision_id}.
   * Format:
   * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Required. The start and end time of the event time range this retrohunt
   * processes.
   * </pre>
   *
   * <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the processInterval field is set.
   */
  boolean hasProcessInterval();

  /**
   *
   *
   * <pre>
   * Required. The start and end time of the event time range this retrohunt
   * processes.
   * </pre>
   *
   * <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The processInterval.
   */
  com.google.type.Interval getProcessInterval();

  /**
   *
   *
   * <pre>
   * Required. The start and end time of the event time range this retrohunt
   * processes.
   * </pre>
   *
   * <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  com.google.type.IntervalOrBuilder getProcessIntervalOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. The start and end time of the retrohunt execution. If the
   * retrohunt is not yet finished, the end time of the interval will not be
   * populated.
   * </pre>
   *
   * <code>
   * .google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return Whether the executionInterval field is set.
   */
  boolean hasExecutionInterval();

  /**
   *
   *
   * <pre>
   * Output only. The start and end time of the retrohunt execution. If the
   * retrohunt is not yet finished, the end time of the interval will not be
   * populated.
   * </pre>
   *
   * <code>
   * .google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The executionInterval.
   */
  com.google.type.Interval getExecutionInterval();

  /**
   *
   *
   * <pre>
   * Output only. The start and end time of the retrohunt execution. If the
   * retrohunt is not yet finished, the end time of the interval will not be
   * populated.
   * </pre>
   *
   * <code>
   * .google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  com.google.type.IntervalOrBuilder getExecutionIntervalOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. The state of the retrohunt.
   * </pre>
   *
   * <code>
   * .google.cloud.chronicle.v1.Retrohunt.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();

  /**
   *
   *
   * <pre>
   * Output only. The state of the retrohunt.
   * </pre>
   *
   * <code>
   * .google.cloud.chronicle.v1.Retrohunt.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The state.
   */
  com.google.cloud.chronicle.v1.Retrohunt.State getState();

  /**
   *
   *
   * <pre>
   * Output only. Percent progress of the retrohunt towards completion, from
   * 0.00 to 100.00.
   * </pre>
   *
   * <code>float progress_percentage = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The progressPercentage.
   */
  float getProgressPercentage();
}
