/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/clouddms/v1/conversionworkspace_resources.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.clouddms.v1;

/**
 *
 *
 * <pre>
 * The type of database entities supported,
 * </pre>
 *
 * Protobuf enum {@code google.cloud.clouddms.v1.DatabaseEntityType}
 */
public enum DatabaseEntityType implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Unspecified database entity type.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_UNSPECIFIED = 0;</code>
   */
  DATABASE_ENTITY_TYPE_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Schema.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SCHEMA = 1;</code>
   */
  DATABASE_ENTITY_TYPE_SCHEMA(1),
  /**
   *
   *
   * <pre>
   * Table.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_TABLE = 2;</code>
   */
  DATABASE_ENTITY_TYPE_TABLE(2),
  /**
   *
   *
   * <pre>
   * Column.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_COLUMN = 3;</code>
   */
  DATABASE_ENTITY_TYPE_COLUMN(3),
  /**
   *
   *
   * <pre>
   * Constraint.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_CONSTRAINT = 4;</code>
   */
  DATABASE_ENTITY_TYPE_CONSTRAINT(4),
  /**
   *
   *
   * <pre>
   * Index.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_INDEX = 5;</code>
   */
  DATABASE_ENTITY_TYPE_INDEX(5),
  /**
   *
   *
   * <pre>
   * Trigger.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_TRIGGER = 6;</code>
   */
  DATABASE_ENTITY_TYPE_TRIGGER(6),
  /**
   *
   *
   * <pre>
   * View.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_VIEW = 7;</code>
   */
  DATABASE_ENTITY_TYPE_VIEW(7),
  /**
   *
   *
   * <pre>
   * Sequence.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SEQUENCE = 8;</code>
   */
  DATABASE_ENTITY_TYPE_SEQUENCE(8),
  /**
   *
   *
   * <pre>
   * Stored Procedure.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_STORED_PROCEDURE = 9;</code>
   */
  DATABASE_ENTITY_TYPE_STORED_PROCEDURE(9),
  /**
   *
   *
   * <pre>
   * Function.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_FUNCTION = 10;</code>
   */
  DATABASE_ENTITY_TYPE_FUNCTION(10),
  /**
   *
   *
   * <pre>
   * Synonym.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SYNONYM = 11;</code>
   */
  DATABASE_ENTITY_TYPE_SYNONYM(11),
  /**
   *
   *
   * <pre>
   * Package.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_DATABASE_PACKAGE = 12;</code>
   */
  DATABASE_ENTITY_TYPE_DATABASE_PACKAGE(12),
  /**
   *
   *
   * <pre>
   * UDT.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_UDT = 13;</code>
   */
  DATABASE_ENTITY_TYPE_UDT(13),
  /**
   *
   *
   * <pre>
   * Materialized View.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW = 14;</code>
   */
  DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW(14),
  /**
   *
   *
   * <pre>
   * Database.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_DATABASE = 15;</code>
   */
  DATABASE_ENTITY_TYPE_DATABASE(15),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Unspecified database entity type.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * Schema.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SCHEMA = 1;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_SCHEMA_VALUE = 1;
  /**
   *
   *
   * <pre>
   * Table.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_TABLE = 2;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_TABLE_VALUE = 2;
  /**
   *
   *
   * <pre>
   * Column.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_COLUMN = 3;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_COLUMN_VALUE = 3;
  /**
   *
   *
   * <pre>
   * Constraint.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_CONSTRAINT = 4;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_CONSTRAINT_VALUE = 4;
  /**
   *
   *
   * <pre>
   * Index.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_INDEX = 5;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_INDEX_VALUE = 5;
  /**
   *
   *
   * <pre>
   * Trigger.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_TRIGGER = 6;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_TRIGGER_VALUE = 6;
  /**
   *
   *
   * <pre>
   * View.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_VIEW = 7;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_VIEW_VALUE = 7;
  /**
   *
   *
   * <pre>
   * Sequence.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SEQUENCE = 8;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_SEQUENCE_VALUE = 8;
  /**
   *
   *
   * <pre>
   * Stored Procedure.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_STORED_PROCEDURE = 9;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_STORED_PROCEDURE_VALUE = 9;
  /**
   *
   *
   * <pre>
   * Function.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_FUNCTION = 10;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_FUNCTION_VALUE = 10;
  /**
   *
   *
   * <pre>
   * Synonym.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_SYNONYM = 11;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_SYNONYM_VALUE = 11;
  /**
   *
   *
   * <pre>
   * Package.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_DATABASE_PACKAGE = 12;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_DATABASE_PACKAGE_VALUE = 12;
  /**
   *
   *
   * <pre>
   * UDT.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_UDT = 13;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_UDT_VALUE = 13;
  /**
   *
   *
   * <pre>
   * Materialized View.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW = 14;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW_VALUE = 14;
  /**
   *
   *
   * <pre>
   * Database.
   * </pre>
   *
   * <code>DATABASE_ENTITY_TYPE_DATABASE = 15;</code>
   */
  public static final int DATABASE_ENTITY_TYPE_DATABASE_VALUE = 15;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DatabaseEntityType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DatabaseEntityType forNumber(int value) {
    switch (value) {
      case 0:
        return DATABASE_ENTITY_TYPE_UNSPECIFIED;
      case 1:
        return DATABASE_ENTITY_TYPE_SCHEMA;
      case 2:
        return DATABASE_ENTITY_TYPE_TABLE;
      case 3:
        return DATABASE_ENTITY_TYPE_COLUMN;
      case 4:
        return DATABASE_ENTITY_TYPE_CONSTRAINT;
      case 5:
        return DATABASE_ENTITY_TYPE_INDEX;
      case 6:
        return DATABASE_ENTITY_TYPE_TRIGGER;
      case 7:
        return DATABASE_ENTITY_TYPE_VIEW;
      case 8:
        return DATABASE_ENTITY_TYPE_SEQUENCE;
      case 9:
        return DATABASE_ENTITY_TYPE_STORED_PROCEDURE;
      case 10:
        return DATABASE_ENTITY_TYPE_FUNCTION;
      case 11:
        return DATABASE_ENTITY_TYPE_SYNONYM;
      case 12:
        return DATABASE_ENTITY_TYPE_DATABASE_PACKAGE;
      case 13:
        return DATABASE_ENTITY_TYPE_UDT;
      case 14:
        return DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW;
      case 15:
        return DATABASE_ENTITY_TYPE_DATABASE;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DatabaseEntityType> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<DatabaseEntityType>
      internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DatabaseEntityType>() {
            public DatabaseEntityType findValueByNumber(int number) {
              return DatabaseEntityType.forNumber(number);
            }
          };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.clouddms.v1.ConversionWorkspaceResourcesProto.getDescriptor()
        .getEnumTypes()
        .get(1);
  }

  private static final DatabaseEntityType[] VALUES = values();

  public static DatabaseEntityType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DatabaseEntityType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.clouddms.v1.DatabaseEntityType)
}
