/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/lifesciences/v2beta/workflows.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.lifesciences.v2beta;

public interface ContainerStartedEventOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.lifesciences.v2beta.ContainerStartedEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The numeric ID of the action that started this container.
   * </pre>
   *
   * <code>int32 action_id = 1;</code>
   *
   * @return The actionId.
   */
  int getActionId();

  /**
   *
   *
   * <pre>
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   * </pre>
   *
   * <code>map&lt;int32, int32&gt; port_mappings = 2;</code>
   */
  int getPortMappingsCount();
  /**
   *
   *
   * <pre>
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   * </pre>
   *
   * <code>map&lt;int32, int32&gt; port_mappings = 2;</code>
   */
  boolean containsPortMappings(int key);
  /** Use {@link #getPortMappingsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer> getPortMappings();
  /**
   *
   *
   * <pre>
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   * </pre>
   *
   * <code>map&lt;int32, int32&gt; port_mappings = 2;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer> getPortMappingsMap();
  /**
   *
   *
   * <pre>
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   * </pre>
   *
   * <code>map&lt;int32, int32&gt; port_mappings = 2;</code>
   */
  int getPortMappingsOrDefault(int key, int defaultValue);
  /**
   *
   *
   * <pre>
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   * </pre>
   *
   * <code>map&lt;int32, int32&gt; port_mappings = 2;</code>
   */
  int getPortMappingsOrThrow(int key);

  /**
   *
   *
   * <pre>
   * The public IP address that can be used to connect to the container. This
   * field is only populated when at least one port mapping is present. If the
   * instance was created with a private address, this field will be empty even
   * if port mappings exist.
   * </pre>
   *
   * <code>string ip_address = 3;</code>
   *
   * @return The ipAddress.
   */
  java.lang.String getIpAddress();
  /**
   *
   *
   * <pre>
   * The public IP address that can be used to connect to the container. This
   * field is only populated when at least one port mapping is present. If the
   * instance was created with a private address, this field will be empty even
   * if port mappings exist.
   * </pre>
   *
   * <code>string ip_address = 3;</code>
   *
   * @return The bytes for ipAddress.
   */
  com.google.protobuf.ByteString getIpAddressBytes();
}
