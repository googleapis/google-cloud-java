/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

// Protobuf Java Version: 3.25.5
package com.google.privacy.dlp.v2;

/**
 *
 *
 * <pre>
 * Target used to match against for Discovery.
 * </pre>
 *
 * Protobuf type {@code google.privacy.dlp.v2.DiscoveryTarget}
 */
public final class DiscoveryTarget extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.DiscoveryTarget)
    DiscoveryTargetOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use DiscoveryTarget.newBuilder() to construct.
  private DiscoveryTarget(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private DiscoveryTarget() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new DiscoveryTarget();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.privacy.dlp.v2.DlpProto
        .internal_static_google_privacy_dlp_v2_DiscoveryTarget_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.privacy.dlp.v2.DlpProto
        .internal_static_google_privacy_dlp_v2_DiscoveryTarget_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.privacy.dlp.v2.DiscoveryTarget.class,
            com.google.privacy.dlp.v2.DiscoveryTarget.Builder.class);
  }

  private int targetCase_ = 0;

  @SuppressWarnings("serial")
  private java.lang.Object target_;

  public enum TargetCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    BIG_QUERY_TARGET(1),
    CLOUD_SQL_TARGET(2),
    SECRETS_TARGET(3),
    CLOUD_STORAGE_TARGET(4),
    OTHER_CLOUD_TARGET(5),
    VERTEX_DATASET_TARGET(7),
    TARGET_NOT_SET(0);
    private final int value;

    private TargetCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TargetCase valueOf(int value) {
      return forNumber(value);
    }

    public static TargetCase forNumber(int value) {
      switch (value) {
        case 1:
          return BIG_QUERY_TARGET;
        case 2:
          return CLOUD_SQL_TARGET;
        case 3:
          return SECRETS_TARGET;
        case 4:
          return CLOUD_STORAGE_TARGET;
        case 5:
          return OTHER_CLOUD_TARGET;
        case 7:
          return VERTEX_DATASET_TARGET;
        case 0:
          return TARGET_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public TargetCase getTargetCase() {
    return TargetCase.forNumber(targetCase_);
  }

  public static final int BIG_QUERY_TARGET_FIELD_NUMBER = 1;
  /**
   *
   *
   * <pre>
   * BigQuery target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
   *
   * @return Whether the bigQueryTarget field is set.
   */
  @java.lang.Override
  public boolean hasBigQueryTarget() {
    return targetCase_ == 1;
  }
  /**
   *
   *
   * <pre>
   * BigQuery target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
   *
   * @return The bigQueryTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.BigQueryDiscoveryTarget getBigQueryTarget() {
    if (targetCase_ == 1) {
      return (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * BigQuery target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.BigQueryDiscoveryTargetOrBuilder getBigQueryTargetOrBuilder() {
    if (targetCase_ == 1) {
      return (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
  }

  public static final int CLOUD_SQL_TARGET_FIELD_NUMBER = 2;
  /**
   *
   *
   * <pre>
   * Cloud SQL target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
   *
   * @return Whether the cloudSqlTarget field is set.
   */
  @java.lang.Override
  public boolean hasCloudSqlTarget() {
    return targetCase_ == 2;
  }
  /**
   *
   *
   * <pre>
   * Cloud SQL target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
   *
   * @return The cloudSqlTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget getCloudSqlTarget() {
    if (targetCase_ == 2) {
      return (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Cloud SQL target for Discovery. The first target to match a table will be
   * the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.CloudSqlDiscoveryTargetOrBuilder getCloudSqlTargetOrBuilder() {
    if (targetCase_ == 2) {
      return (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
  }

  public static final int SECRETS_TARGET_FIELD_NUMBER = 3;
  /**
   *
   *
   * <pre>
   * Discovery target that looks for credentials and secrets stored in cloud
   * resource metadata and reports them as vulnerabilities to Security Command
   * Center. Only one target of this type is allowed.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
   *
   * @return Whether the secretsTarget field is set.
   */
  @java.lang.Override
  public boolean hasSecretsTarget() {
    return targetCase_ == 3;
  }
  /**
   *
   *
   * <pre>
   * Discovery target that looks for credentials and secrets stored in cloud
   * resource metadata and reports them as vulnerabilities to Security Command
   * Center. Only one target of this type is allowed.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
   *
   * @return The secretsTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.SecretsDiscoveryTarget getSecretsTarget() {
    if (targetCase_ == 3) {
      return (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Discovery target that looks for credentials and secrets stored in cloud
   * resource metadata and reports them as vulnerabilities to Security Command
   * Center. Only one target of this type is allowed.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.SecretsDiscoveryTargetOrBuilder getSecretsTargetOrBuilder() {
    if (targetCase_ == 3) {
      return (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
  }

  public static final int CLOUD_STORAGE_TARGET_FIELD_NUMBER = 4;
  /**
   *
   *
   * <pre>
   * Cloud Storage target for Discovery. The first target to match a table
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
   *
   * @return Whether the cloudStorageTarget field is set.
   */
  @java.lang.Override
  public boolean hasCloudStorageTarget() {
    return targetCase_ == 4;
  }
  /**
   *
   *
   * <pre>
   * Cloud Storage target for Discovery. The first target to match a table
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
   *
   * @return The cloudStorageTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget getCloudStorageTarget() {
    if (targetCase_ == 4) {
      return (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Cloud Storage target for Discovery. The first target to match a table
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.CloudStorageDiscoveryTargetOrBuilder
      getCloudStorageTargetOrBuilder() {
    if (targetCase_ == 4) {
      return (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
  }

  public static final int OTHER_CLOUD_TARGET_FIELD_NUMBER = 5;
  /**
   *
   *
   * <pre>
   * Other clouds target for discovery. The first target to match a resource
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
   *
   * @return Whether the otherCloudTarget field is set.
   */
  @java.lang.Override
  public boolean hasOtherCloudTarget() {
    return targetCase_ == 5;
  }
  /**
   *
   *
   * <pre>
   * Other clouds target for discovery. The first target to match a resource
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
   *
   * @return The otherCloudTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget getOtherCloudTarget() {
    if (targetCase_ == 5) {
      return (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Other clouds target for discovery. The first target to match a resource
   * will be the one applied.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.OtherCloudDiscoveryTargetOrBuilder
      getOtherCloudTargetOrBuilder() {
    if (targetCase_ == 5) {
      return (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
  }

  public static final int VERTEX_DATASET_TARGET_FIELD_NUMBER = 7;
  /**
   *
   *
   * <pre>
   * Vertex AI dataset target for Discovery. The first target to match a
   * dataset will be the one applied. Note that discovery for Vertex AI can
   * incur Cloud Storage Class B operation charges for storage.objects.get
   * operations and retrieval fees. For more information, see [Cloud Storage
   * pricing](https://cloud.google.com/storage/pricing#price-tables).
   * Note that discovery for Vertex AI dataset will not be able to scan images
   * unless DiscoveryConfig.processing_location.image_fallback_location has
   * multi_region_processing or global_processing configured.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
   *
   * @return Whether the vertexDatasetTarget field is set.
   */
  @java.lang.Override
  public boolean hasVertexDatasetTarget() {
    return targetCase_ == 7;
  }
  /**
   *
   *
   * <pre>
   * Vertex AI dataset target for Discovery. The first target to match a
   * dataset will be the one applied. Note that discovery for Vertex AI can
   * incur Cloud Storage Class B operation charges for storage.objects.get
   * operations and retrieval fees. For more information, see [Cloud Storage
   * pricing](https://cloud.google.com/storage/pricing#price-tables).
   * Note that discovery for Vertex AI dataset will not be able to scan images
   * unless DiscoveryConfig.processing_location.image_fallback_location has
   * multi_region_processing or global_processing configured.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
   *
   * @return The vertexDatasetTarget.
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget getVertexDatasetTarget() {
    if (targetCase_ == 7) {
      return (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Vertex AI dataset target for Discovery. The first target to match a
   * dataset will be the one applied. Note that discovery for Vertex AI can
   * incur Cloud Storage Class B operation charges for storage.objects.get
   * operations and retrieval fees. For more information, see [Cloud Storage
   * pricing](https://cloud.google.com/storage/pricing#price-tables).
   * Note that discovery for Vertex AI dataset will not be able to scan images
   * unless DiscoveryConfig.processing_location.image_fallback_location has
   * multi_region_processing or global_processing configured.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.VertexDatasetDiscoveryTargetOrBuilder
      getVertexDatasetTargetOrBuilder() {
    if (targetCase_ == 7) {
      return (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_;
    }
    return com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (targetCase_ == 1) {
      output.writeMessage(1, (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_);
    }
    if (targetCase_ == 2) {
      output.writeMessage(2, (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_);
    }
    if (targetCase_ == 3) {
      output.writeMessage(3, (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_);
    }
    if (targetCase_ == 4) {
      output.writeMessage(4, (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_);
    }
    if (targetCase_ == 5) {
      output.writeMessage(5, (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_);
    }
    if (targetCase_ == 7) {
      output.writeMessage(7, (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (targetCase_ == 1) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              1, (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_);
    }
    if (targetCase_ == 2) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_);
    }
    if (targetCase_ == 3) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              3, (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_);
    }
    if (targetCase_ == 4) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              4, (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_);
    }
    if (targetCase_ == 5) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              5, (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_);
    }
    if (targetCase_ == 7) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              7, (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.privacy.dlp.v2.DiscoveryTarget)) {
      return super.equals(obj);
    }
    com.google.privacy.dlp.v2.DiscoveryTarget other =
        (com.google.privacy.dlp.v2.DiscoveryTarget) obj;

    if (!getTargetCase().equals(other.getTargetCase())) return false;
    switch (targetCase_) {
      case 1:
        if (!getBigQueryTarget().equals(other.getBigQueryTarget())) return false;
        break;
      case 2:
        if (!getCloudSqlTarget().equals(other.getCloudSqlTarget())) return false;
        break;
      case 3:
        if (!getSecretsTarget().equals(other.getSecretsTarget())) return false;
        break;
      case 4:
        if (!getCloudStorageTarget().equals(other.getCloudStorageTarget())) return false;
        break;
      case 5:
        if (!getOtherCloudTarget().equals(other.getOtherCloudTarget())) return false;
        break;
      case 7:
        if (!getVertexDatasetTarget().equals(other.getVertexDatasetTarget())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (targetCase_) {
      case 1:
        hash = (37 * hash) + BIG_QUERY_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getBigQueryTarget().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CLOUD_SQL_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getCloudSqlTarget().hashCode();
        break;
      case 3:
        hash = (37 * hash) + SECRETS_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getSecretsTarget().hashCode();
        break;
      case 4:
        hash = (37 * hash) + CLOUD_STORAGE_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getCloudStorageTarget().hashCode();
        break;
      case 5:
        hash = (37 * hash) + OTHER_CLOUD_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getOtherCloudTarget().hashCode();
        break;
      case 7:
        hash = (37 * hash) + VERTEX_DATASET_TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getVertexDatasetTarget().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.privacy.dlp.v2.DiscoveryTarget prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Target used to match against for Discovery.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2.DiscoveryTarget}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.DiscoveryTarget)
      com.google.privacy.dlp.v2.DiscoveryTargetOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_DiscoveryTarget_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_DiscoveryTarget_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2.DiscoveryTarget.class,
              com.google.privacy.dlp.v2.DiscoveryTarget.Builder.class);
    }

    // Construct using com.google.privacy.dlp.v2.DiscoveryTarget.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (bigQueryTargetBuilder_ != null) {
        bigQueryTargetBuilder_.clear();
      }
      if (cloudSqlTargetBuilder_ != null) {
        cloudSqlTargetBuilder_.clear();
      }
      if (secretsTargetBuilder_ != null) {
        secretsTargetBuilder_.clear();
      }
      if (cloudStorageTargetBuilder_ != null) {
        cloudStorageTargetBuilder_.clear();
      }
      if (otherCloudTargetBuilder_ != null) {
        otherCloudTargetBuilder_.clear();
      }
      if (vertexDatasetTargetBuilder_ != null) {
        vertexDatasetTargetBuilder_.clear();
      }
      targetCase_ = 0;
      target_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_DiscoveryTarget_descriptor;
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.DiscoveryTarget getDefaultInstanceForType() {
      return com.google.privacy.dlp.v2.DiscoveryTarget.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.DiscoveryTarget build() {
      com.google.privacy.dlp.v2.DiscoveryTarget result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.DiscoveryTarget buildPartial() {
      com.google.privacy.dlp.v2.DiscoveryTarget result =
          new com.google.privacy.dlp.v2.DiscoveryTarget(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.privacy.dlp.v2.DiscoveryTarget result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.google.privacy.dlp.v2.DiscoveryTarget result) {
      result.targetCase_ = targetCase_;
      result.target_ = this.target_;
      if (targetCase_ == 1 && bigQueryTargetBuilder_ != null) {
        result.target_ = bigQueryTargetBuilder_.build();
      }
      if (targetCase_ == 2 && cloudSqlTargetBuilder_ != null) {
        result.target_ = cloudSqlTargetBuilder_.build();
      }
      if (targetCase_ == 3 && secretsTargetBuilder_ != null) {
        result.target_ = secretsTargetBuilder_.build();
      }
      if (targetCase_ == 4 && cloudStorageTargetBuilder_ != null) {
        result.target_ = cloudStorageTargetBuilder_.build();
      }
      if (targetCase_ == 5 && otherCloudTargetBuilder_ != null) {
        result.target_ = otherCloudTargetBuilder_.build();
      }
      if (targetCase_ == 7 && vertexDatasetTargetBuilder_ != null) {
        result.target_ = vertexDatasetTargetBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.privacy.dlp.v2.DiscoveryTarget) {
        return mergeFrom((com.google.privacy.dlp.v2.DiscoveryTarget) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.privacy.dlp.v2.DiscoveryTarget other) {
      if (other == com.google.privacy.dlp.v2.DiscoveryTarget.getDefaultInstance()) return this;
      switch (other.getTargetCase()) {
        case BIG_QUERY_TARGET:
          {
            mergeBigQueryTarget(other.getBigQueryTarget());
            break;
          }
        case CLOUD_SQL_TARGET:
          {
            mergeCloudSqlTarget(other.getCloudSqlTarget());
            break;
          }
        case SECRETS_TARGET:
          {
            mergeSecretsTarget(other.getSecretsTarget());
            break;
          }
        case CLOUD_STORAGE_TARGET:
          {
            mergeCloudStorageTarget(other.getCloudStorageTarget());
            break;
          }
        case OTHER_CLOUD_TARGET:
          {
            mergeOtherCloudTarget(other.getOtherCloudTarget());
            break;
          }
        case VERTEX_DATASET_TARGET:
          {
            mergeVertexDatasetTarget(other.getVertexDatasetTarget());
            break;
          }
        case TARGET_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getBigQueryTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 1;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getCloudSqlTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 2;
                break;
              } // case 18
            case 26:
              {
                input.readMessage(getSecretsTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 3;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(
                    getCloudStorageTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 4;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(
                    getOtherCloudTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 5;
                break;
              } // case 42
            case 58:
              {
                input.readMessage(
                    getVertexDatasetTargetFieldBuilder().getBuilder(), extensionRegistry);
                targetCase_ = 7;
                break;
              } // case 58
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int targetCase_ = 0;
    private java.lang.Object target_;

    public TargetCase getTargetCase() {
      return TargetCase.forNumber(targetCase_);
    }

    public Builder clearTarget() {
      targetCase_ = 0;
      target_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.BigQueryDiscoveryTarget,
            com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.BigQueryDiscoveryTargetOrBuilder>
        bigQueryTargetBuilder_;
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     *
     * @return Whether the bigQueryTarget field is set.
     */
    @java.lang.Override
    public boolean hasBigQueryTarget() {
      return targetCase_ == 1;
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     *
     * @return The bigQueryTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.BigQueryDiscoveryTarget getBigQueryTarget() {
      if (bigQueryTargetBuilder_ == null) {
        if (targetCase_ == 1) {
          return (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 1) {
          return bigQueryTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    public Builder setBigQueryTarget(com.google.privacy.dlp.v2.BigQueryDiscoveryTarget value) {
      if (bigQueryTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        bigQueryTargetBuilder_.setMessage(value);
      }
      targetCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    public Builder setBigQueryTarget(
        com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.Builder builderForValue) {
      if (bigQueryTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        bigQueryTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    public Builder mergeBigQueryTarget(com.google.privacy.dlp.v2.BigQueryDiscoveryTarget value) {
      if (bigQueryTargetBuilder_ == null) {
        if (targetCase_ == 1
            && target_ != com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 1) {
          bigQueryTargetBuilder_.mergeFrom(value);
        } else {
          bigQueryTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 1;
      return this;
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    public Builder clearBigQueryTarget() {
      if (bigQueryTargetBuilder_ == null) {
        if (targetCase_ == 1) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 1) {
          targetCase_ = 0;
          target_ = null;
        }
        bigQueryTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    public com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.Builder getBigQueryTargetBuilder() {
      return getBigQueryTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.BigQueryDiscoveryTargetOrBuilder getBigQueryTargetOrBuilder() {
      if ((targetCase_ == 1) && (bigQueryTargetBuilder_ != null)) {
        return bigQueryTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 1) {
          return (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.BigQueryDiscoveryTarget,
            com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.BigQueryDiscoveryTargetOrBuilder>
        getBigQueryTargetFieldBuilder() {
      if (bigQueryTargetBuilder_ == null) {
        if (!(targetCase_ == 1)) {
          target_ = com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.getDefaultInstance();
        }
        bigQueryTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.BigQueryDiscoveryTarget,
                com.google.privacy.dlp.v2.BigQueryDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.BigQueryDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.BigQueryDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 1;
      onChanged();
      return bigQueryTargetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget,
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTargetOrBuilder>
        cloudSqlTargetBuilder_;
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     *
     * @return Whether the cloudSqlTarget field is set.
     */
    @java.lang.Override
    public boolean hasCloudSqlTarget() {
      return targetCase_ == 2;
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     *
     * @return The cloudSqlTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget getCloudSqlTarget() {
      if (cloudSqlTargetBuilder_ == null) {
        if (targetCase_ == 2) {
          return (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 2) {
          return cloudSqlTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    public Builder setCloudSqlTarget(com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget value) {
      if (cloudSqlTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        cloudSqlTargetBuilder_.setMessage(value);
      }
      targetCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    public Builder setCloudSqlTarget(
        com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.Builder builderForValue) {
      if (cloudSqlTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        cloudSqlTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    public Builder mergeCloudSqlTarget(com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget value) {
      if (cloudSqlTargetBuilder_ == null) {
        if (targetCase_ == 2
            && target_ != com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 2) {
          cloudSqlTargetBuilder_.mergeFrom(value);
        } else {
          cloudSqlTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 2;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    public Builder clearCloudSqlTarget() {
      if (cloudSqlTargetBuilder_ == null) {
        if (targetCase_ == 2) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 2) {
          targetCase_ = 0;
          target_ = null;
        }
        cloudSqlTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    public com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.Builder getCloudSqlTargetBuilder() {
      return getCloudSqlTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.CloudSqlDiscoveryTargetOrBuilder getCloudSqlTargetOrBuilder() {
      if ((targetCase_ == 2) && (cloudSqlTargetBuilder_ != null)) {
        return cloudSqlTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 2) {
          return (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget,
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.CloudSqlDiscoveryTargetOrBuilder>
        getCloudSqlTargetFieldBuilder() {
      if (cloudSqlTargetBuilder_ == null) {
        if (!(targetCase_ == 2)) {
          target_ = com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.getDefaultInstance();
        }
        cloudSqlTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget,
                com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.CloudSqlDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.CloudSqlDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 2;
      onChanged();
      return cloudSqlTargetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.SecretsDiscoveryTarget,
            com.google.privacy.dlp.v2.SecretsDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.SecretsDiscoveryTargetOrBuilder>
        secretsTargetBuilder_;
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     *
     * @return Whether the secretsTarget field is set.
     */
    @java.lang.Override
    public boolean hasSecretsTarget() {
      return targetCase_ == 3;
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     *
     * @return The secretsTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.SecretsDiscoveryTarget getSecretsTarget() {
      if (secretsTargetBuilder_ == null) {
        if (targetCase_ == 3) {
          return (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 3) {
          return secretsTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    public Builder setSecretsTarget(com.google.privacy.dlp.v2.SecretsDiscoveryTarget value) {
      if (secretsTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        secretsTargetBuilder_.setMessage(value);
      }
      targetCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    public Builder setSecretsTarget(
        com.google.privacy.dlp.v2.SecretsDiscoveryTarget.Builder builderForValue) {
      if (secretsTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        secretsTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    public Builder mergeSecretsTarget(com.google.privacy.dlp.v2.SecretsDiscoveryTarget value) {
      if (secretsTargetBuilder_ == null) {
        if (targetCase_ == 3
            && target_ != com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.SecretsDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 3) {
          secretsTargetBuilder_.mergeFrom(value);
        } else {
          secretsTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 3;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    public Builder clearSecretsTarget() {
      if (secretsTargetBuilder_ == null) {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 3) {
          targetCase_ = 0;
          target_ = null;
        }
        secretsTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    public com.google.privacy.dlp.v2.SecretsDiscoveryTarget.Builder getSecretsTargetBuilder() {
      return getSecretsTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.SecretsDiscoveryTargetOrBuilder getSecretsTargetOrBuilder() {
      if ((targetCase_ == 3) && (secretsTargetBuilder_ != null)) {
        return secretsTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 3) {
          return (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.SecretsDiscoveryTarget,
            com.google.privacy.dlp.v2.SecretsDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.SecretsDiscoveryTargetOrBuilder>
        getSecretsTargetFieldBuilder() {
      if (secretsTargetBuilder_ == null) {
        if (!(targetCase_ == 3)) {
          target_ = com.google.privacy.dlp.v2.SecretsDiscoveryTarget.getDefaultInstance();
        }
        secretsTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.SecretsDiscoveryTarget,
                com.google.privacy.dlp.v2.SecretsDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.SecretsDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.SecretsDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 3;
      onChanged();
      return secretsTargetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget,
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTargetOrBuilder>
        cloudStorageTargetBuilder_;
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     *
     * @return Whether the cloudStorageTarget field is set.
     */
    @java.lang.Override
    public boolean hasCloudStorageTarget() {
      return targetCase_ == 4;
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     *
     * @return The cloudStorageTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget getCloudStorageTarget() {
      if (cloudStorageTargetBuilder_ == null) {
        if (targetCase_ == 4) {
          return (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 4) {
          return cloudStorageTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    public Builder setCloudStorageTarget(
        com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget value) {
      if (cloudStorageTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        cloudStorageTargetBuilder_.setMessage(value);
      }
      targetCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    public Builder setCloudStorageTarget(
        com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.Builder builderForValue) {
      if (cloudStorageTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        cloudStorageTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    public Builder mergeCloudStorageTarget(
        com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget value) {
      if (cloudStorageTargetBuilder_ == null) {
        if (targetCase_ == 4
            && target_
                != com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 4) {
          cloudStorageTargetBuilder_.mergeFrom(value);
        } else {
          cloudStorageTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 4;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    public Builder clearCloudStorageTarget() {
      if (cloudStorageTargetBuilder_ == null) {
        if (targetCase_ == 4) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 4) {
          targetCase_ = 0;
          target_ = null;
        }
        cloudStorageTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    public com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.Builder
        getCloudStorageTargetBuilder() {
      return getCloudStorageTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.CloudStorageDiscoveryTargetOrBuilder
        getCloudStorageTargetOrBuilder() {
      if ((targetCase_ == 4) && (cloudStorageTargetBuilder_ != null)) {
        return cloudStorageTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 4) {
          return (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget,
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.CloudStorageDiscoveryTargetOrBuilder>
        getCloudStorageTargetFieldBuilder() {
      if (cloudStorageTargetBuilder_ == null) {
        if (!(targetCase_ == 4)) {
          target_ = com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.getDefaultInstance();
        }
        cloudStorageTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget,
                com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.CloudStorageDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.CloudStorageDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 4;
      onChanged();
      return cloudStorageTargetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget,
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTargetOrBuilder>
        otherCloudTargetBuilder_;
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     *
     * @return Whether the otherCloudTarget field is set.
     */
    @java.lang.Override
    public boolean hasOtherCloudTarget() {
      return targetCase_ == 5;
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     *
     * @return The otherCloudTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget getOtherCloudTarget() {
      if (otherCloudTargetBuilder_ == null) {
        if (targetCase_ == 5) {
          return (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 5) {
          return otherCloudTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    public Builder setOtherCloudTarget(com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget value) {
      if (otherCloudTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        otherCloudTargetBuilder_.setMessage(value);
      }
      targetCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    public Builder setOtherCloudTarget(
        com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.Builder builderForValue) {
      if (otherCloudTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        otherCloudTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    public Builder mergeOtherCloudTarget(
        com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget value) {
      if (otherCloudTargetBuilder_ == null) {
        if (targetCase_ == 5
            && target_
                != com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 5) {
          otherCloudTargetBuilder_.mergeFrom(value);
        } else {
          otherCloudTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 5;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    public Builder clearOtherCloudTarget() {
      if (otherCloudTargetBuilder_ == null) {
        if (targetCase_ == 5) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 5) {
          targetCase_ = 0;
          target_ = null;
        }
        otherCloudTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    public com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.Builder
        getOtherCloudTargetBuilder() {
      return getOtherCloudTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.OtherCloudDiscoveryTargetOrBuilder
        getOtherCloudTargetOrBuilder() {
      if ((targetCase_ == 5) && (otherCloudTargetBuilder_ != null)) {
        return otherCloudTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 5) {
          return (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget,
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.OtherCloudDiscoveryTargetOrBuilder>
        getOtherCloudTargetFieldBuilder() {
      if (otherCloudTargetBuilder_ == null) {
        if (!(targetCase_ == 5)) {
          target_ = com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.getDefaultInstance();
        }
        otherCloudTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget,
                com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.OtherCloudDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.OtherCloudDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 5;
      onChanged();
      return otherCloudTargetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget,
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTargetOrBuilder>
        vertexDatasetTargetBuilder_;
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     *
     * @return Whether the vertexDatasetTarget field is set.
     */
    @java.lang.Override
    public boolean hasVertexDatasetTarget() {
      return targetCase_ == 7;
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     *
     * @return The vertexDatasetTarget.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget getVertexDatasetTarget() {
      if (vertexDatasetTargetBuilder_ == null) {
        if (targetCase_ == 7) {
          return (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
      } else {
        if (targetCase_ == 7) {
          return vertexDatasetTargetBuilder_.getMessage();
        }
        return com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    public Builder setVertexDatasetTarget(
        com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget value) {
      if (vertexDatasetTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        vertexDatasetTargetBuilder_.setMessage(value);
      }
      targetCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    public Builder setVertexDatasetTarget(
        com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.Builder builderForValue) {
      if (vertexDatasetTargetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        vertexDatasetTargetBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    public Builder mergeVertexDatasetTarget(
        com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget value) {
      if (vertexDatasetTargetBuilder_ == null) {
        if (targetCase_ == 7
            && target_
                != com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance()) {
          target_ =
              com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.newBuilder(
                      (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 7) {
          vertexDatasetTargetBuilder_.mergeFrom(value);
        } else {
          vertexDatasetTargetBuilder_.setMessage(value);
        }
      }
      targetCase_ = 7;
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    public Builder clearVertexDatasetTarget() {
      if (vertexDatasetTargetBuilder_ == null) {
        if (targetCase_ == 7) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 7) {
          targetCase_ = 0;
          target_ = null;
        }
        vertexDatasetTargetBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    public com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.Builder
        getVertexDatasetTargetBuilder() {
      return getVertexDatasetTargetFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.VertexDatasetDiscoveryTargetOrBuilder
        getVertexDatasetTargetOrBuilder() {
      if ((targetCase_ == 7) && (vertexDatasetTargetBuilder_ != null)) {
        return vertexDatasetTargetBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 7) {
          return (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_;
        }
        return com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
      }
    }
    /**
     *
     *
     * <pre>
     * Vertex AI dataset target for Discovery. The first target to match a
     * dataset will be the one applied. Note that discovery for Vertex AI can
     * incur Cloud Storage Class B operation charges for storage.objects.get
     * operations and retrieval fees. For more information, see [Cloud Storage
     * pricing](https://cloud.google.com/storage/pricing#price-tables).
     * Note that discovery for Vertex AI dataset will not be able to scan images
     * unless DiscoveryConfig.processing_location.image_fallback_location has
     * multi_region_processing or global_processing configured.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget vertex_dataset_target = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget,
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.Builder,
            com.google.privacy.dlp.v2.VertexDatasetDiscoveryTargetOrBuilder>
        getVertexDatasetTargetFieldBuilder() {
      if (vertexDatasetTargetBuilder_ == null) {
        if (!(targetCase_ == 7)) {
          target_ = com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.getDefaultInstance();
        }
        vertexDatasetTargetBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget,
                com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget.Builder,
                com.google.privacy.dlp.v2.VertexDatasetDiscoveryTargetOrBuilder>(
                (com.google.privacy.dlp.v2.VertexDatasetDiscoveryTarget) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 7;
      onChanged();
      return vertexDatasetTargetBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.DiscoveryTarget)
  }

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DiscoveryTarget)
  private static final com.google.privacy.dlp.v2.DiscoveryTarget DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.privacy.dlp.v2.DiscoveryTarget();
  }

  public static com.google.privacy.dlp.v2.DiscoveryTarget getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DiscoveryTarget> PARSER =
      new com.google.protobuf.AbstractParser<DiscoveryTarget>() {
        @java.lang.Override
        public DiscoveryTarget parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<DiscoveryTarget> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DiscoveryTarget> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.privacy.dlp.v2.DiscoveryTarget getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
