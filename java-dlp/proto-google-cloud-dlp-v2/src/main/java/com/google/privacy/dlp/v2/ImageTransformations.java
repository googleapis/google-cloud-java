/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

// Protobuf Java Version: 3.25.5
package com.google.privacy.dlp.v2;

/**
 *
 *
 * <pre>
 * A type of transformation that is applied over images.
 * </pre>
 *
 * Protobuf type {@code google.privacy.dlp.v2.ImageTransformations}
 */
public final class ImageTransformations extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.ImageTransformations)
    ImageTransformationsOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ImageTransformations.newBuilder() to construct.
  private ImageTransformations(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ImageTransformations() {
    transforms_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ImageTransformations();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.privacy.dlp.v2.DlpProto
        .internal_static_google_privacy_dlp_v2_ImageTransformations_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.privacy.dlp.v2.DlpProto
        .internal_static_google_privacy_dlp_v2_ImageTransformations_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.privacy.dlp.v2.ImageTransformations.class,
            com.google.privacy.dlp.v2.ImageTransformations.Builder.class);
  }

  public interface ImageTransformationOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.ImageTransformations.ImageTransformation)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     *
     * @return Whether the selectedInfoTypes field is set.
     */
    boolean hasSelectedInfoTypes();
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     *
     * @return The selectedInfoTypes.
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
        getSelectedInfoTypes();
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypesOrBuilder
        getSelectedInfoTypesOrBuilder();

    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     *
     * @return Whether the allInfoTypes field is set.
     */
    boolean hasAllInfoTypes();
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     *
     * @return The allInfoTypes.
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
        getAllInfoTypes();
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypesOrBuilder
        getAllInfoTypesOrBuilder();

    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     *
     * @return Whether the allText field is set.
     */
    boolean hasAllText();
    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     *
     * @return The allText.
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText getAllText();
    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     */
    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder
        getAllTextOrBuilder();

    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     *
     * @return Whether the redactionColor field is set.
     */
    boolean hasRedactionColor();
    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     *
     * @return The redactionColor.
     */
    com.google.privacy.dlp.v2.Color getRedactionColor();
    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     */
    com.google.privacy.dlp.v2.ColorOrBuilder getRedactionColorOrBuilder();

    com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.TargetCase getTargetCase();
  }
  /**
   *
   *
   * <pre>
   * Configuration for determining how redaction of images should occur.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2.ImageTransformations.ImageTransformation}
   */
  public static final class ImageTransformation extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation)
      ImageTransformationOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use ImageTransformation.newBuilder() to construct.
    private ImageTransformation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private ImageTransformation() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new ImageTransformation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.class,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder.class);
    }

    public interface SelectedInfoTypesOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
        com.google.protobuf.MessageOrBuilder {

      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<com.google.privacy.dlp.v2.InfoType> getInfoTypesList();
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.privacy.dlp.v2.InfoType getInfoTypes(int index);
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      int getInfoTypesCount();
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      java.util.List<? extends com.google.privacy.dlp.v2.InfoTypeOrBuilder>
          getInfoTypesOrBuilderList();
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      com.google.privacy.dlp.v2.InfoTypeOrBuilder getInfoTypesOrBuilder(int index);
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * Protobuf type {@code
     * google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes}
     */
    public static final class SelectedInfoTypes extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
        SelectedInfoTypesOrBuilder {
      private static final long serialVersionUID = 0L;
      // Use SelectedInfoTypes.newBuilder() to construct.
      private SelectedInfoTypes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private SelectedInfoTypes() {
        infoTypes_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new SelectedInfoTypes();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_SelectedInfoTypes_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_SelectedInfoTypes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                    .class,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                    .Builder.class);
      }

      public static final int INFO_TYPES_FIELD_NUMBER = 5;

      @SuppressWarnings("serial")
      private java.util.List<com.google.privacy.dlp.v2.InfoType> infoTypes_;
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<com.google.privacy.dlp.v2.InfoType> getInfoTypesList() {
        return infoTypes_;
      }
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public java.util.List<? extends com.google.privacy.dlp.v2.InfoTypeOrBuilder>
          getInfoTypesOrBuilderList() {
        return infoTypes_;
      }
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public int getInfoTypesCount() {
        return infoTypes_.size();
      }
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.InfoType getInfoTypes(int index) {
        return infoTypes_.get(index);
      }
      /**
       *
       *
       * <pre>
       * Required. InfoTypes to apply the transformation to. Required. Provided
       * InfoType must be unique within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
       * </code>
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.InfoTypeOrBuilder getInfoTypesOrBuilder(int index) {
        return infoTypes_.get(index);
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        for (int i = 0; i < infoTypes_.size(); i++) {
          output.writeMessage(5, infoTypes_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < infoTypes_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, infoTypes_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj
            instanceof
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)) {
          return super.equals(obj);
        }
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes other =
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
                obj;

        if (!getInfoTypesList().equals(other.getInfoTypesList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getInfoTypesCount() > 0) {
          hash = (37 * hash) + INFO_TYPES_FIELD_NUMBER;
          hash = (53 * hash) + getInfoTypesList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(
              java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * Protobuf type {@code
       * google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_SelectedInfoTypes_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_SelectedInfoTypes_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes.class,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes.Builder.class);
        }

        // Construct using
        // com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes.newBuilder()
        private Builder() {}

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          if (infoTypesBuilder_ == null) {
            infoTypes_ = java.util.Collections.emptyList();
          } else {
            infoTypes_ = null;
            infoTypesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_SelectedInfoTypes_descriptor;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
            getDefaultInstanceForType() {
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes.getDefaultInstance();
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
            build() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
            buildPartial() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              result =
                  new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes(this);
          buildPartialRepeatedFields(result);
          if (bitField0_ != 0) {
            buildPartial0(result);
          }
          onBuilt();
          return result;
        }

        private void buildPartialRepeatedFields(
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                result) {
          if (infoTypesBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              infoTypes_ = java.util.Collections.unmodifiableList(infoTypes_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.infoTypes_ = infoTypes_;
          } else {
            result.infoTypes_ = infoTypesBuilder_.build();
          }
        }

        private void buildPartial0(
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                result) {
          int from_bitField0_ = bitField0_;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other
              instanceof
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .SelectedInfoTypes) {
            return mergeFrom(
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                        .SelectedInfoTypes)
                    other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                other) {
          if (other
              == com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .SelectedInfoTypes.getDefaultInstance()) return this;
          if (infoTypesBuilder_ == null) {
            if (!other.infoTypes_.isEmpty()) {
              if (infoTypes_.isEmpty()) {
                infoTypes_ = other.infoTypes_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureInfoTypesIsMutable();
                infoTypes_.addAll(other.infoTypes_);
              }
              onChanged();
            }
          } else {
            if (!other.infoTypes_.isEmpty()) {
              if (infoTypesBuilder_.isEmpty()) {
                infoTypesBuilder_.dispose();
                infoTypesBuilder_ = null;
                infoTypes_ = other.infoTypes_;
                bitField0_ = (bitField0_ & ~0x00000001);
                infoTypesBuilder_ =
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                        ? getInfoTypesFieldBuilder()
                        : null;
              } else {
                infoTypesBuilder_.addAllMessages(other.infoTypes_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 42:
                  {
                    com.google.privacy.dlp.v2.InfoType m =
                        input.readMessage(
                            com.google.privacy.dlp.v2.InfoType.parser(), extensionRegistry);
                    if (infoTypesBuilder_ == null) {
                      ensureInfoTypesIsMutable();
                      infoTypes_.add(m);
                    } else {
                      infoTypesBuilder_.addMessage(m);
                    }
                    break;
                  } // case 42
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int bitField0_;

        private java.util.List<com.google.privacy.dlp.v2.InfoType> infoTypes_ =
            java.util.Collections.emptyList();

        private void ensureInfoTypesIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            infoTypes_ = new java.util.ArrayList<com.google.privacy.dlp.v2.InfoType>(infoTypes_);
            bitField0_ |= 0x00000001;
          }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.privacy.dlp.v2.InfoType,
                com.google.privacy.dlp.v2.InfoType.Builder,
                com.google.privacy.dlp.v2.InfoTypeOrBuilder>
            infoTypesBuilder_;

        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.privacy.dlp.v2.InfoType> getInfoTypesList() {
          if (infoTypesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(infoTypes_);
          } else {
            return infoTypesBuilder_.getMessageList();
          }
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public int getInfoTypesCount() {
          if (infoTypesBuilder_ == null) {
            return infoTypes_.size();
          } else {
            return infoTypesBuilder_.getCount();
          }
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.privacy.dlp.v2.InfoType getInfoTypes(int index) {
          if (infoTypesBuilder_ == null) {
            return infoTypes_.get(index);
          } else {
            return infoTypesBuilder_.getMessage(index);
          }
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setInfoTypes(int index, com.google.privacy.dlp.v2.InfoType value) {
          if (infoTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInfoTypesIsMutable();
            infoTypes_.set(index, value);
            onChanged();
          } else {
            infoTypesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder setInfoTypes(
            int index, com.google.privacy.dlp.v2.InfoType.Builder builderForValue) {
          if (infoTypesBuilder_ == null) {
            ensureInfoTypesIsMutable();
            infoTypes_.set(index, builderForValue.build());
            onChanged();
          } else {
            infoTypesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addInfoTypes(com.google.privacy.dlp.v2.InfoType value) {
          if (infoTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInfoTypesIsMutable();
            infoTypes_.add(value);
            onChanged();
          } else {
            infoTypesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addInfoTypes(int index, com.google.privacy.dlp.v2.InfoType value) {
          if (infoTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureInfoTypesIsMutable();
            infoTypes_.add(index, value);
            onChanged();
          } else {
            infoTypesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addInfoTypes(com.google.privacy.dlp.v2.InfoType.Builder builderForValue) {
          if (infoTypesBuilder_ == null) {
            ensureInfoTypesIsMutable();
            infoTypes_.add(builderForValue.build());
            onChanged();
          } else {
            infoTypesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addInfoTypes(
            int index, com.google.privacy.dlp.v2.InfoType.Builder builderForValue) {
          if (infoTypesBuilder_ == null) {
            ensureInfoTypesIsMutable();
            infoTypes_.add(index, builderForValue.build());
            onChanged();
          } else {
            infoTypesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder addAllInfoTypes(
            java.lang.Iterable<? extends com.google.privacy.dlp.v2.InfoType> values) {
          if (infoTypesBuilder_ == null) {
            ensureInfoTypesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(values, infoTypes_);
            onChanged();
          } else {
            infoTypesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder clearInfoTypes() {
          if (infoTypesBuilder_ == null) {
            infoTypes_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            infoTypesBuilder_.clear();
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public Builder removeInfoTypes(int index) {
          if (infoTypesBuilder_ == null) {
            ensureInfoTypesIsMutable();
            infoTypes_.remove(index);
            onChanged();
          } else {
            infoTypesBuilder_.remove(index);
          }
          return this;
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.privacy.dlp.v2.InfoType.Builder getInfoTypesBuilder(int index) {
          return getInfoTypesFieldBuilder().getBuilder(index);
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.privacy.dlp.v2.InfoTypeOrBuilder getInfoTypesOrBuilder(int index) {
          if (infoTypesBuilder_ == null) {
            return infoTypes_.get(index);
          } else {
            return infoTypesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<? extends com.google.privacy.dlp.v2.InfoTypeOrBuilder>
            getInfoTypesOrBuilderList() {
          if (infoTypesBuilder_ != null) {
            return infoTypesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(infoTypes_);
          }
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.privacy.dlp.v2.InfoType.Builder addInfoTypesBuilder() {
          return getInfoTypesFieldBuilder()
              .addBuilder(com.google.privacy.dlp.v2.InfoType.getDefaultInstance());
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public com.google.privacy.dlp.v2.InfoType.Builder addInfoTypesBuilder(int index) {
          return getInfoTypesFieldBuilder()
              .addBuilder(index, com.google.privacy.dlp.v2.InfoType.getDefaultInstance());
        }
        /**
         *
         *
         * <pre>
         * Required. InfoTypes to apply the transformation to. Required. Provided
         * InfoType must be unique within the ImageTransformations message.
         * </pre>
         *
         * <code>
         * repeated .google.privacy.dlp.v2.InfoType info_types = 5 [(.google.api.field_behavior) = REQUIRED];
         * </code>
         */
        public java.util.List<com.google.privacy.dlp.v2.InfoType.Builder>
            getInfoTypesBuilderList() {
          return getInfoTypesFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.privacy.dlp.v2.InfoType,
                com.google.privacy.dlp.v2.InfoType.Builder,
                com.google.privacy.dlp.v2.InfoTypeOrBuilder>
            getInfoTypesFieldBuilder() {
          if (infoTypesBuilder_ == null) {
            infoTypesBuilder_ =
                new com.google.protobuf.RepeatedFieldBuilderV3<
                    com.google.privacy.dlp.v2.InfoType,
                    com.google.privacy.dlp.v2.InfoType.Builder,
                    com.google.privacy.dlp.v2.InfoTypeOrBuilder>(
                    infoTypes_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            infoTypes_ = null;
          }
          return infoTypesBuilder_;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
      }

      // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
      private static final com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE =
            new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                .SelectedInfoTypes();
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<SelectedInfoTypes> PARSER =
          new com.google.protobuf.AbstractParser<SelectedInfoTypes>() {
            @java.lang.Override
            public SelectedInfoTypes parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<SelectedInfoTypes> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SelectedInfoTypes> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    public interface AllInfoTypesOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
        com.google.protobuf.MessageOrBuilder {}
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings.
     * </pre>
     *
     * Protobuf type {@code
     * google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes}
     */
    public static final class AllInfoTypes extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
        AllInfoTypesOrBuilder {
      private static final long serialVersionUID = 0L;
      // Use AllInfoTypes.newBuilder() to construct.
      private AllInfoTypes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private AllInfoTypes() {}

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new AllInfoTypes();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllInfoTypes_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllInfoTypes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                    .class,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                    .Builder.class);
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj
            instanceof
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)) {
          return super.equals(obj);
        }
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes other =
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes) obj;

        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(
              java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
              prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings.
       * </pre>
       *
       * Protobuf type {@code
       * google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllInfoTypes_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllInfoTypes_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                      .class,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                      .Builder.class);
        }

        // Construct using
        // com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes.newBuilder()
        private Builder() {}

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllInfoTypes_descriptor;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
            getDefaultInstanceForType() {
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
              .getDefaultInstance();
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
            build() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes result =
              buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
            buildPartial() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes result =
              new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes(
                  this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other
              instanceof
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes) {
            return mergeFrom(
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                    other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes other) {
          if (other
              == com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                  .getDefaultInstance()) return this;
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
      }

      // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
      private static final com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .AllInfoTypes
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE =
            new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes();
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<AllInfoTypes> PARSER =
          new com.google.protobuf.AbstractParser<AllInfoTypes>() {
            @java.lang.Override
            public AllInfoTypes parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<AllInfoTypes> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AllInfoTypes> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    public interface AllTextOrBuilder
        extends
        // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
        com.google.protobuf.MessageOrBuilder {}
    /**
     *
     *
     * <pre>
     * Apply to all text.
     * </pre>
     *
     * Protobuf type {@code google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText}
     */
    public static final class AllText extends com.google.protobuf.GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
        AllTextOrBuilder {
      private static final long serialVersionUID = 0L;
      // Use AllText.newBuilder() to construct.
      private AllText(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }

      private AllText() {}

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
        return new AllText();
      }

      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllText_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllText_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.class,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder
                    .class);
      }

      private byte memoizedIsInitialized = -1;

      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
          return true;
        }
        if (!(obj
            instanceof
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)) {
          return super.equals(obj);
        }
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText other =
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) obj;

        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(
              java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
            PARSER, input, extensionRegistry);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
            PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       *
       *
       * <pre>
       * Apply to all text.
       * </pre>
       *
       * Protobuf type {@code
       * google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText}
       */
      public static final class Builder
          extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
          // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllText_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllText_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.class,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder
                      .class);
        }

        // Construct using
        // com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.newBuilder()
        private Builder() {}

        private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
        }

        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
          return com.google.privacy.dlp.v2.DlpProto
              .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_AllText_descriptor;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
            getDefaultInstanceForType() {
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
              .getDefaultInstance();
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText build() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText result =
              buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
            buildPartial() {
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText result =
              new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText(this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }

        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index,
            java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other
              instanceof
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) {
            return mergeFrom(
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText other) {
          if (other
              == com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
                  .getDefaultInstance()) return this;
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default:
                  {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
      }

      // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
      private static final com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .AllText
          DEFAULT_INSTANCE;

      static {
        DEFAULT_INSTANCE =
            new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText();
      }

      public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<AllText> PARSER =
          new com.google.protobuf.AbstractParser<AllText>() {
            @java.lang.Override
            public AllText parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException()
                    .setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

      public static com.google.protobuf.Parser<AllText> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AllText> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }
    }

    private int bitField0_;
    private int targetCase_ = 0;

    @SuppressWarnings("serial")
    private java.lang.Object target_;

    public enum TargetCase
        implements
            com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SELECTED_INFO_TYPES(4),
      ALL_INFO_TYPES(5),
      ALL_TEXT(6),
      TARGET_NOT_SET(0);
      private final int value;

      private TargetCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetCase valueOf(int value) {
        return forNumber(value);
      }

      public static TargetCase forNumber(int value) {
        switch (value) {
          case 4:
            return SELECTED_INFO_TYPES;
          case 5:
            return ALL_INFO_TYPES;
          case 6:
            return ALL_TEXT;
          case 0:
            return TARGET_NOT_SET;
          default:
            return null;
        }
      }

      public int getNumber() {
        return this.value;
      }
    };

    public TargetCase getTargetCase() {
      return TargetCase.forNumber(targetCase_);
    }

    public static final int SELECTED_INFO_TYPES_FIELD_NUMBER = 4;
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     *
     * @return Whether the selectedInfoTypes field is set.
     */
    @java.lang.Override
    public boolean hasSelectedInfoTypes() {
      return targetCase_ == 4;
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     *
     * @return The selectedInfoTypes.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
        getSelectedInfoTypes() {
      if (targetCase_ == 4) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                .SelectedInfoTypes)
            target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
          .getDefaultInstance();
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to the selected info_types.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     * </code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
            .SelectedInfoTypesOrBuilder
        getSelectedInfoTypesOrBuilder() {
      if (targetCase_ == 4) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                .SelectedInfoTypes)
            target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
          .getDefaultInstance();
    }

    public static final int ALL_INFO_TYPES_FIELD_NUMBER = 5;
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     *
     * @return Whether the allInfoTypes field is set.
     */
    @java.lang.Override
    public boolean hasAllInfoTypes() {
      return targetCase_ == 5;
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     *
     * @return The allInfoTypes.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
        getAllInfoTypes() {
      if (targetCase_ == 5) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
            target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          .getDefaultInstance();
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     * </pre>
     *
     * <code>
     * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     * </code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypesOrBuilder
        getAllInfoTypesOrBuilder() {
      if (targetCase_ == 5) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
            target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          .getDefaultInstance();
    }

    public static final int ALL_TEXT_FIELD_NUMBER = 6;
    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     *
     * @return Whether the allText field is set.
     */
    @java.lang.Override
    public boolean hasAllText() {
      return targetCase_ == 6;
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     *
     * @return The allText.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText getAllText() {
      if (targetCase_ == 6) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          .getDefaultInstance();
    }
    /**
     *
     *
     * <pre>
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     * </code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder
        getAllTextOrBuilder() {
      if (targetCase_ == 6) {
        return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) target_;
      }
      return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          .getDefaultInstance();
    }

    public static final int REDACTION_COLOR_FIELD_NUMBER = 3;
    private com.google.privacy.dlp.v2.Color redactionColor_;
    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     *
     * @return Whether the redactionColor field is set.
     */
    @java.lang.Override
    public boolean hasRedactionColor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     *
     * @return The redactionColor.
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.Color getRedactionColor() {
      return redactionColor_ == null
          ? com.google.privacy.dlp.v2.Color.getDefaultInstance()
          : redactionColor_;
    }
    /**
     *
     *
     * <pre>
     * The color to use when redacting content from an image. If not
     * specified, the default is black.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
     */
    @java.lang.Override
    public com.google.privacy.dlp.v2.ColorOrBuilder getRedactionColorOrBuilder() {
      return redactionColor_ == null
          ? com.google.privacy.dlp.v2.Color.getDefaultInstance()
          : redactionColor_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getRedactionColor());
      }
      if (targetCase_ == 4) {
        output.writeMessage(
            4,
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes)
                target_);
      }
      if (targetCase_ == 5) {
        output.writeMessage(
            5,
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                target_);
      }
      if (targetCase_ == 6) {
        output.writeMessage(
            6,
            (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText) target_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getRedactionColor());
      }
      if (targetCase_ == 4) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                4,
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                        .SelectedInfoTypes)
                    target_);
      }
      if (targetCase_ == 5) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                5,
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                    target_);
      }
      if (targetCase_ == 6) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(
                6,
                (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
                    target_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation)) {
        return super.equals(obj);
      }
      com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation other =
          (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation) obj;

      if (hasRedactionColor() != other.hasRedactionColor()) return false;
      if (hasRedactionColor()) {
        if (!getRedactionColor().equals(other.getRedactionColor())) return false;
      }
      if (!getTargetCase().equals(other.getTargetCase())) return false;
      switch (targetCase_) {
        case 4:
          if (!getSelectedInfoTypes().equals(other.getSelectedInfoTypes())) return false;
          break;
        case 5:
          if (!getAllInfoTypes().equals(other.getAllInfoTypes())) return false;
          break;
        case 6:
          if (!getAllText().equals(other.getAllText())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRedactionColor()) {
        hash = (37 * hash) + REDACTION_COLOR_FIELD_NUMBER;
        hash = (53 * hash) + getRedactionColor().hashCode();
      }
      switch (targetCase_) {
        case 4:
          hash = (37 * hash) + SELECTED_INFO_TYPES_FIELD_NUMBER;
          hash = (53 * hash) + getSelectedInfoTypes().hashCode();
          break;
        case 5:
          hash = (37 * hash) + ALL_INFO_TYPES_FIELD_NUMBER;
          hash = (53 * hash) + getAllInfoTypes().hashCode();
          break;
        case 6:
          hash = (37 * hash) + ALL_TEXT_FIELD_NUMBER;
          hash = (53 * hash) + getAllText().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
        parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
        parseDelimitedFrom(
            java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * Configuration for determining how redaction of images should occur.
     * </pre>
     *
     * Protobuf type {@code google.privacy.dlp.v2.ImageTransformations.ImageTransformation}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.ImageTransformations.ImageTransformation)
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.class,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder.class);
      }

      // Construct using
      // com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getRedactionColorFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (selectedInfoTypesBuilder_ != null) {
          selectedInfoTypesBuilder_.clear();
        }
        if (allInfoTypesBuilder_ != null) {
          allInfoTypesBuilder_.clear();
        }
        if (allTextBuilder_ != null) {
          allTextBuilder_.clear();
        }
        redactionColor_ = null;
        if (redactionColorBuilder_ != null) {
          redactionColorBuilder_.dispose();
          redactionColorBuilder_ = null;
        }
        targetCase_ = 0;
        target_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.privacy.dlp.v2.DlpProto
            .internal_static_google_privacy_dlp_v2_ImageTransformations_ImageTransformation_descriptor;
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
          getDefaultInstanceForType() {
        return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
            .getDefaultInstance();
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation build() {
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation buildPartial() {
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation result =
            new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.redactionColor_ =
              redactionColorBuilder_ == null ? redactionColor_ : redactionColorBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation result) {
        result.targetCase_ = targetCase_;
        result.target_ = this.target_;
        if (targetCase_ == 4 && selectedInfoTypesBuilder_ != null) {
          result.target_ = selectedInfoTypesBuilder_.build();
        }
        if (targetCase_ == 5 && allInfoTypesBuilder_ != null) {
          result.target_ = allInfoTypesBuilder_.build();
        }
        if (targetCase_ == 6 && allTextBuilder_ != null) {
          result.target_ = allTextBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation) {
          return mergeFrom(
              (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation other) {
        if (other
            == com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                .getDefaultInstance()) return this;
        if (other.hasRedactionColor()) {
          mergeRedactionColor(other.getRedactionColor());
        }
        switch (other.getTargetCase()) {
          case SELECTED_INFO_TYPES:
            {
              mergeSelectedInfoTypes(other.getSelectedInfoTypes());
              break;
            }
          case ALL_INFO_TYPES:
            {
              mergeAllInfoTypes(other.getAllInfoTypes());
              break;
            }
          case ALL_TEXT:
            {
              mergeAllText(other.getAllText());
              break;
            }
          case TARGET_NOT_SET:
            {
              break;
            }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 26:
                {
                  input.readMessage(
                      getRedactionColorFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000008;
                  break;
                } // case 26
              case 34:
                {
                  input.readMessage(
                      getSelectedInfoTypesFieldBuilder().getBuilder(), extensionRegistry);
                  targetCase_ = 4;
                  break;
                } // case 34
              case 42:
                {
                  input.readMessage(getAllInfoTypesFieldBuilder().getBuilder(), extensionRegistry);
                  targetCase_ = 5;
                  break;
                } // case 42
              case 50:
                {
                  input.readMessage(getAllTextFieldBuilder().getBuilder(), extensionRegistry);
                  targetCase_ = 6;
                  break;
                } // case 50
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int targetCase_ = 0;
      private java.lang.Object target_;

      public TargetCase getTargetCase() {
        return TargetCase.forNumber(targetCase_);
      }

      public Builder clearTarget() {
        targetCase_ = 0;
        target_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                  .Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .SelectedInfoTypesOrBuilder>
          selectedInfoTypesBuilder_;
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       *
       * @return Whether the selectedInfoTypes field is set.
       */
      @java.lang.Override
      public boolean hasSelectedInfoTypes() {
        return targetCase_ == 4;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       *
       * @return The selectedInfoTypes.
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
          getSelectedInfoTypes() {
        if (selectedInfoTypesBuilder_ == null) {
          if (targetCase_ == 4) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                    .SelectedInfoTypes)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes.getDefaultInstance();
        } else {
          if (targetCase_ == 4) {
            return selectedInfoTypesBuilder_.getMessage();
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes.getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      public Builder setSelectedInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              value) {
        if (selectedInfoTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          selectedInfoTypesBuilder_.setMessage(value);
        }
        targetCase_ = 4;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      public Builder setSelectedInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                  .Builder
              builderForValue) {
        if (selectedInfoTypesBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          selectedInfoTypesBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 4;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      public Builder mergeSelectedInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              value) {
        if (selectedInfoTypesBuilder_ == null) {
          if (targetCase_ == 4
              && target_
                  != com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes.getDefaultInstance()) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                    .newBuilder(
                        (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                                .SelectedInfoTypes)
                            target_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 4) {
            selectedInfoTypesBuilder_.mergeFrom(value);
          } else {
            selectedInfoTypesBuilder_.setMessage(value);
          }
        }
        targetCase_ = 4;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      public Builder clearSelectedInfoTypes() {
        if (selectedInfoTypesBuilder_ == null) {
          if (targetCase_ == 4) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 4) {
            targetCase_ = 0;
            target_ = null;
          }
          selectedInfoTypesBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
              .Builder
          getSelectedInfoTypesBuilder() {
        return getSelectedInfoTypesFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypesOrBuilder
          getSelectedInfoTypesOrBuilder() {
        if ((targetCase_ == 4) && (selectedInfoTypesBuilder_ != null)) {
          return selectedInfoTypesBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 4) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                    .SelectedInfoTypes)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .SelectedInfoTypes.getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to the selected info_types.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                  .Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .SelectedInfoTypesOrBuilder>
          getSelectedInfoTypesFieldBuilder() {
        if (selectedInfoTypesBuilder_ == null) {
          if (!(targetCase_ == 4)) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
                    .getDefaultInstance();
          }
          selectedInfoTypesBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypes.Builder,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .SelectedInfoTypesOrBuilder>(
                  (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                          .SelectedInfoTypes)
                      target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 4;
        onChanged();
        return selectedInfoTypesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                  .Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .AllInfoTypesOrBuilder>
          allInfoTypesBuilder_;
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       *
       * @return Whether the allInfoTypes field is set.
       */
      @java.lang.Override
      public boolean hasAllInfoTypes() {
        return targetCase_ == 5;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       *
       * @return The allInfoTypes.
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
          getAllInfoTypes() {
        if (allInfoTypesBuilder_ == null) {
          if (targetCase_ == 5) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
              .getDefaultInstance();
        } else {
          if (targetCase_ == 5) {
            return allInfoTypesBuilder_.getMessage();
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
              .getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      public Builder setAllInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes value) {
        if (allInfoTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          allInfoTypesBuilder_.setMessage(value);
        }
        targetCase_ = 5;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      public Builder setAllInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes.Builder
              builderForValue) {
        if (allInfoTypesBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          allInfoTypesBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 5;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      public Builder mergeAllInfoTypes(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes value) {
        if (allInfoTypesBuilder_ == null) {
          if (targetCase_ == 5
              && target_
                  != com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                      .getDefaultInstance()) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                    .newBuilder(
                        (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                                .AllInfoTypes)
                            target_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 5) {
            allInfoTypesBuilder_.mergeFrom(value);
          } else {
            allInfoTypesBuilder_.setMessage(value);
          }
        }
        targetCase_ = 5;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      public Builder clearAllInfoTypes() {
        if (allInfoTypesBuilder_ == null) {
          if (targetCase_ == 5) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 5) {
            targetCase_ = 0;
            target_ = null;
          }
          allInfoTypesBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes.Builder
          getAllInfoTypesBuilder() {
        return getAllInfoTypesFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
              .AllInfoTypesOrBuilder
          getAllInfoTypesOrBuilder() {
        if ((targetCase_ == 5) && (allInfoTypesBuilder_ != null)) {
          return allInfoTypesBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 5) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
              .getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all findings not specified in other
       * ImageTransformation's selected_info_types. Only one instance is allowed
       * within the ImageTransformations message.
       * </pre>
       *
       * <code>
       * .google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                  .Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .AllInfoTypesOrBuilder>
          getAllInfoTypesFieldBuilder() {
        if (allInfoTypesBuilder_ == null) {
          if (!(targetCase_ == 5)) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                    .getDefaultInstance();
          }
          allInfoTypesBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
                      .Builder,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .AllInfoTypesOrBuilder>(
                  (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes)
                      target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 5;
        onChanged();
        return allInfoTypesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder>
          allTextBuilder_;
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       *
       * @return Whether the allText field is set.
       */
      @java.lang.Override
      public boolean hasAllText() {
        return targetCase_ == 6;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       *
       * @return The allText.
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
          getAllText() {
        if (allTextBuilder_ == null) {
          if (targetCase_ == 6) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
              .getDefaultInstance();
        } else {
          if (targetCase_ == 6) {
            return allTextBuilder_.getMessage();
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
              .getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      public Builder setAllText(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText value) {
        if (allTextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          allTextBuilder_.setMessage(value);
        }
        targetCase_ = 6;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      public Builder setAllText(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder
              builderForValue) {
        if (allTextBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          allTextBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 6;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      public Builder mergeAllText(
          com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText value) {
        if (allTextBuilder_ == null) {
          if (targetCase_ == 6
              && target_
                  != com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
                      .getDefaultInstance()) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
                    .newBuilder(
                        (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
                            target_)
                    .mergeFrom(value)
                    .buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 6) {
            allTextBuilder_.mergeFrom(value);
          } else {
            allTextBuilder_.setMessage(value);
          }
        }
        targetCase_ = 6;
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      public Builder clearAllText() {
        if (allTextBuilder_ == null) {
          if (targetCase_ == 6) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 6) {
            targetCase_ = 0;
            target_ = null;
          }
          allTextBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder
          getAllTextBuilder() {
        return getAllTextFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      @java.lang.Override
      public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder
          getAllTextOrBuilder() {
        if ((targetCase_ == 6) && (allTextBuilder_ != null)) {
          return allTextBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 6) {
            return (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
                target_;
          }
          return com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
              .getDefaultInstance();
        }
      }
      /**
       *
       *
       * <pre>
       * Apply transformation to all text that doesn't match an infoType. Only
       * one instance is allowed within the ImageTransformations message.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
       * </code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.Builder,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllTextOrBuilder>
          getAllTextFieldBuilder() {
        if (allTextBuilder_ == null) {
          if (!(targetCase_ == 6)) {
            target_ =
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
                    .getDefaultInstance();
          }
          allTextBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
                      .Builder,
                  com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                      .AllTextOrBuilder>(
                  (com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText)
                      target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 6;
        onChanged();
        return allTextBuilder_;
      }

      private com.google.privacy.dlp.v2.Color redactionColor_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.Color,
              com.google.privacy.dlp.v2.Color.Builder,
              com.google.privacy.dlp.v2.ColorOrBuilder>
          redactionColorBuilder_;
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       *
       * @return Whether the redactionColor field is set.
       */
      public boolean hasRedactionColor() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       *
       * @return The redactionColor.
       */
      public com.google.privacy.dlp.v2.Color getRedactionColor() {
        if (redactionColorBuilder_ == null) {
          return redactionColor_ == null
              ? com.google.privacy.dlp.v2.Color.getDefaultInstance()
              : redactionColor_;
        } else {
          return redactionColorBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public Builder setRedactionColor(com.google.privacy.dlp.v2.Color value) {
        if (redactionColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          redactionColor_ = value;
        } else {
          redactionColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public Builder setRedactionColor(com.google.privacy.dlp.v2.Color.Builder builderForValue) {
        if (redactionColorBuilder_ == null) {
          redactionColor_ = builderForValue.build();
        } else {
          redactionColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public Builder mergeRedactionColor(com.google.privacy.dlp.v2.Color value) {
        if (redactionColorBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)
              && redactionColor_ != null
              && redactionColor_ != com.google.privacy.dlp.v2.Color.getDefaultInstance()) {
            getRedactionColorBuilder().mergeFrom(value);
          } else {
            redactionColor_ = value;
          }
        } else {
          redactionColorBuilder_.mergeFrom(value);
        }
        if (redactionColor_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public Builder clearRedactionColor() {
        bitField0_ = (bitField0_ & ~0x00000008);
        redactionColor_ = null;
        if (redactionColorBuilder_ != null) {
          redactionColorBuilder_.dispose();
          redactionColorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public com.google.privacy.dlp.v2.Color.Builder getRedactionColorBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRedactionColorFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      public com.google.privacy.dlp.v2.ColorOrBuilder getRedactionColorOrBuilder() {
        if (redactionColorBuilder_ != null) {
          return redactionColorBuilder_.getMessageOrBuilder();
        } else {
          return redactionColor_ == null
              ? com.google.privacy.dlp.v2.Color.getDefaultInstance()
              : redactionColor_;
        }
      }
      /**
       *
       *
       * <pre>
       * The color to use when redacting content from an image. If not
       * specified, the default is black.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2.Color redaction_color = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2.Color,
              com.google.privacy.dlp.v2.Color.Builder,
              com.google.privacy.dlp.v2.ColorOrBuilder>
          getRedactionColorFieldBuilder() {
        if (redactionColorBuilder_ == null) {
          redactionColorBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.privacy.dlp.v2.Color,
                  com.google.privacy.dlp.v2.Color.Builder,
                  com.google.privacy.dlp.v2.ColorOrBuilder>(
                  getRedactionColor(), getParentForChildren(), isClean());
          redactionColor_ = null;
        }
        return redactionColorBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation)
    }

    // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageTransformations.ImageTransformation)
    private static final com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
        DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation();
    }

    public static com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
        getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImageTransformation> PARSER =
        new com.google.protobuf.AbstractParser<ImageTransformation>() {
          @java.lang.Override
          public ImageTransformation parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<ImageTransformation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImageTransformation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
        getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public static final int TRANSFORMS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>
      transforms_;
  /**
   *
   *
   * <pre>
   * List of transforms to make.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>
      getTransformsList() {
    return transforms_;
  }
  /**
   *
   *
   * <pre>
   * List of transforms to make.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   * </code>
   */
  @java.lang.Override
  public java.util.List<
          ? extends com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder>
      getTransformsOrBuilderList() {
    return transforms_;
  }
  /**
   *
   *
   * <pre>
   * List of transforms to make.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   * </code>
   */
  @java.lang.Override
  public int getTransformsCount() {
    return transforms_.size();
  }
  /**
   *
   *
   * <pre>
   * List of transforms to make.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   * </code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation getTransforms(
      int index) {
    return transforms_.get(index);
  }
  /**
   *
   *
   * <pre>
   * List of transforms to make.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   * </code>
   */
  @java.lang.Override
  public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder
      getTransformsOrBuilder(int index) {
    return transforms_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < transforms_.size(); i++) {
      output.writeMessage(2, transforms_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < transforms_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, transforms_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.privacy.dlp.v2.ImageTransformations)) {
      return super.equals(obj);
    }
    com.google.privacy.dlp.v2.ImageTransformations other =
        (com.google.privacy.dlp.v2.ImageTransformations) obj;

    if (!getTransformsList().equals(other.getTransformsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTransformsCount() > 0) {
      hash = (37 * hash) + TRANSFORMS_FIELD_NUMBER;
      hash = (53 * hash) + getTransformsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.privacy.dlp.v2.ImageTransformations parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.privacy.dlp.v2.ImageTransformations prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A type of transformation that is applied over images.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2.ImageTransformations}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2.ImageTransformations)
      com.google.privacy.dlp.v2.ImageTransformationsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_ImageTransformations_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_ImageTransformations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2.ImageTransformations.class,
              com.google.privacy.dlp.v2.ImageTransformations.Builder.class);
    }

    // Construct using com.google.privacy.dlp.v2.ImageTransformations.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (transformsBuilder_ == null) {
        transforms_ = java.util.Collections.emptyList();
      } else {
        transforms_ = null;
        transformsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.privacy.dlp.v2.DlpProto
          .internal_static_google_privacy_dlp_v2_ImageTransformations_descriptor;
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations getDefaultInstanceForType() {
      return com.google.privacy.dlp.v2.ImageTransformations.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations build() {
      com.google.privacy.dlp.v2.ImageTransformations result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.privacy.dlp.v2.ImageTransformations buildPartial() {
      com.google.privacy.dlp.v2.ImageTransformations result =
          new com.google.privacy.dlp.v2.ImageTransformations(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.privacy.dlp.v2.ImageTransformations result) {
      if (transformsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          transforms_ = java.util.Collections.unmodifiableList(transforms_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.transforms_ = transforms_;
      } else {
        result.transforms_ = transformsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.privacy.dlp.v2.ImageTransformations result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.privacy.dlp.v2.ImageTransformations) {
        return mergeFrom((com.google.privacy.dlp.v2.ImageTransformations) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.privacy.dlp.v2.ImageTransformations other) {
      if (other == com.google.privacy.dlp.v2.ImageTransformations.getDefaultInstance()) return this;
      if (transformsBuilder_ == null) {
        if (!other.transforms_.isEmpty()) {
          if (transforms_.isEmpty()) {
            transforms_ = other.transforms_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTransformsIsMutable();
            transforms_.addAll(other.transforms_);
          }
          onChanged();
        }
      } else {
        if (!other.transforms_.isEmpty()) {
          if (transformsBuilder_.isEmpty()) {
            transformsBuilder_.dispose();
            transformsBuilder_ = null;
            transforms_ = other.transforms_;
            bitField0_ = (bitField0_ & ~0x00000001);
            transformsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getTransformsFieldBuilder()
                    : null;
          } else {
            transformsBuilder_.addAllMessages(other.transforms_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18:
              {
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation m =
                    input.readMessage(
                        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.parser(),
                        extensionRegistry);
                if (transformsBuilder_ == null) {
                  ensureTransformsIsMutable();
                  transforms_.add(m);
                } else {
                  transformsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>
        transforms_ = java.util.Collections.emptyList();

    private void ensureTransformsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        transforms_ =
            new java.util.ArrayList<
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>(transforms_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation,
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder,
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder>
        transformsBuilder_;

    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public java.util.List<com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>
        getTransformsList() {
      if (transformsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(transforms_);
      } else {
        return transformsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public int getTransformsCount() {
      if (transformsBuilder_ == null) {
        return transforms_.size();
      } else {
        return transformsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation getTransforms(
        int index) {
      if (transformsBuilder_ == null) {
        return transforms_.get(index);
      } else {
        return transformsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder setTransforms(
        int index, com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation value) {
      if (transformsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransformsIsMutable();
        transforms_.set(index, value);
        onChanged();
      } else {
        transformsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder setTransforms(
        int index,
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
            builderForValue) {
      if (transformsBuilder_ == null) {
        ensureTransformsIsMutable();
        transforms_.set(index, builderForValue.build());
        onChanged();
      } else {
        transformsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder addTransforms(
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation value) {
      if (transformsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransformsIsMutable();
        transforms_.add(value);
        onChanged();
      } else {
        transformsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder addTransforms(
        int index, com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation value) {
      if (transformsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransformsIsMutable();
        transforms_.add(index, value);
        onChanged();
      } else {
        transformsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder addTransforms(
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
            builderForValue) {
      if (transformsBuilder_ == null) {
        ensureTransformsIsMutable();
        transforms_.add(builderForValue.build());
        onChanged();
      } else {
        transformsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder addTransforms(
        int index,
        com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
            builderForValue) {
      if (transformsBuilder_ == null) {
        ensureTransformsIsMutable();
        transforms_.add(index, builderForValue.build());
        onChanged();
      } else {
        transformsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder addAllTransforms(
        java.lang.Iterable<
                ? extends com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation>
            values) {
      if (transformsBuilder_ == null) {
        ensureTransformsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, transforms_);
        onChanged();
      } else {
        transformsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder clearTransforms() {
      if (transformsBuilder_ == null) {
        transforms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        transformsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public Builder removeTransforms(int index) {
      if (transformsBuilder_ == null) {
        ensureTransformsIsMutable();
        transforms_.remove(index);
        onChanged();
      } else {
        transformsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
        getTransformsBuilder(int index) {
      return getTransformsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder
        getTransformsOrBuilder(int index) {
      if (transformsBuilder_ == null) {
        return transforms_.get(index);
      } else {
        return transformsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public java.util.List<
            ? extends com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder>
        getTransformsOrBuilderList() {
      if (transformsBuilder_ != null) {
        return transformsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(transforms_);
      }
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
        addTransformsBuilder() {
      return getTransformsFieldBuilder()
          .addBuilder(
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder
        addTransformsBuilder(int index) {
      return getTransformsFieldBuilder()
          .addBuilder(
              index,
              com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation
                  .getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * List of transforms to make.
     * </pre>
     *
     * <code>
     * repeated .google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
     * </code>
     */
    public java.util.List<
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder>
        getTransformsBuilderList() {
      return getTransformsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation,
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder,
            com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder>
        getTransformsFieldBuilder() {
      if (transformsBuilder_ == null) {
        transformsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformation.Builder,
                com.google.privacy.dlp.v2.ImageTransformations.ImageTransformationOrBuilder>(
                transforms_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        transforms_ = null;
      }
      return transformsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2.ImageTransformations)
  }

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageTransformations)
  private static final com.google.privacy.dlp.v2.ImageTransformations DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.privacy.dlp.v2.ImageTransformations();
  }

  public static com.google.privacy.dlp.v2.ImageTransformations getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ImageTransformations> PARSER =
      new com.google.protobuf.AbstractParser<ImageTransformations>() {
        @java.lang.Override
        public ImageTransformations parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ImageTransformations> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ImageTransformations> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.privacy.dlp.v2.ImageTransformations getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
