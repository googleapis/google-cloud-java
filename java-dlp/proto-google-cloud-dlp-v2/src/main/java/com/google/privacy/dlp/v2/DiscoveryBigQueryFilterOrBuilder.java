/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

// Protobuf Java Version: 3.25.5
package com.google.privacy.dlp.v2;

public interface DiscoveryBigQueryFilterOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.DiscoveryBigQueryFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * A specific set of tables for this filter to apply to. A table collection
   * must be specified in only one filter per config.
   * If a table id or dataset is empty, Cloud DLP assumes all tables in that
   * collection must be profiled. Must specify a project ID.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTableCollection tables = 1;</code>
   *
   * @return Whether the tables field is set.
   */
  boolean hasTables();
  /**
   *
   *
   * <pre>
   * A specific set of tables for this filter to apply to. A table collection
   * must be specified in only one filter per config.
   * If a table id or dataset is empty, Cloud DLP assumes all tables in that
   * collection must be profiled. Must specify a project ID.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTableCollection tables = 1;</code>
   *
   * @return The tables.
   */
  com.google.privacy.dlp.v2.BigQueryTableCollection getTables();
  /**
   *
   *
   * <pre>
   * A specific set of tables for this filter to apply to. A table collection
   * must be specified in only one filter per config.
   * If a table id or dataset is empty, Cloud DLP assumes all tables in that
   * collection must be profiled. Must specify a project ID.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTableCollection tables = 1;</code>
   */
  com.google.privacy.dlp.v2.BigQueryTableCollectionOrBuilder getTablesOrBuilder();

  /**
   *
   *
   * <pre>
   * Catch-all. This should always be the last filter in the list because
   * anything above it will apply first. Should only appear once in a
   * configuration. If none is specified, a default one will be added
   * automatically.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables other_tables = 2;
   * </code>
   *
   * @return Whether the otherTables field is set.
   */
  boolean hasOtherTables();
  /**
   *
   *
   * <pre>
   * Catch-all. This should always be the last filter in the list because
   * anything above it will apply first. Should only appear once in a
   * configuration. If none is specified, a default one will be added
   * automatically.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables other_tables = 2;
   * </code>
   *
   * @return The otherTables.
   */
  com.google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables getOtherTables();
  /**
   *
   *
   * <pre>
   * Catch-all. This should always be the last filter in the list because
   * anything above it will apply first. Should only appear once in a
   * configuration. If none is specified, a default one will be added
   * automatically.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables other_tables = 2;
   * </code>
   */
  com.google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTablesOrBuilder
      getOtherTablesOrBuilder();

  /**
   *
   *
   * <pre>
   * The table to scan. Discovery configurations including this can only
   * include one DiscoveryTarget (the DiscoveryTarget with this
   * TableReference).
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TableReference table_reference = 3;</code>
   *
   * @return Whether the tableReference field is set.
   */
  boolean hasTableReference();
  /**
   *
   *
   * <pre>
   * The table to scan. Discovery configurations including this can only
   * include one DiscoveryTarget (the DiscoveryTarget with this
   * TableReference).
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TableReference table_reference = 3;</code>
   *
   * @return The tableReference.
   */
  com.google.privacy.dlp.v2.TableReference getTableReference();
  /**
   *
   *
   * <pre>
   * The table to scan. Discovery configurations including this can only
   * include one DiscoveryTarget (the DiscoveryTarget with this
   * TableReference).
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TableReference table_reference = 3;</code>
   */
  com.google.privacy.dlp.v2.TableReferenceOrBuilder getTableReferenceOrBuilder();

  com.google.privacy.dlp.v2.DiscoveryBigQueryFilter.FilterCase getFilterCase();
}
