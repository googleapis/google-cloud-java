/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/shopping/merchant/products/v1/products_common.proto

// Protobuf Java Version: 3.25.8
package com.google.shopping.merchant.products.v1;

/**
 *
 *
 * <pre>
 * Item store pickup timeline. For more information, see
 * [Pickup SLA](https://support.google.com/merchants/answer/14635400).
 * </pre>
 *
 * Protobuf enum {@code google.shopping.merchant.products.v1.PickupSla}
 */
public enum PickupSla implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Pickup SLA is not specified.
   * </pre>
   *
   * <code>PICKUP_SLA_UNSPECIFIED = 0;</code>
   */
  PICKUP_SLA_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Indicates that the product is available for pickup the same day that the
   * order is placed, subject to cut off times.
   * </pre>
   *
   * <code>SAME_DAY = 1;</code>
   */
  SAME_DAY(1),
  /**
   *
   *
   * <pre>
   * Indicates that the product is available for pickup the following day that
   * the order is placed.
   * </pre>
   *
   * <code>NEXT_DAY = 2;</code>
   */
  NEXT_DAY(2),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 2 days.
   * </pre>
   *
   * <code>TWO_DAY = 3;</code>
   */
  TWO_DAY(3),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 3 days.
   * </pre>
   *
   * <code>THREE_DAY = 4;</code>
   */
  THREE_DAY(4),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 4 days
   * </pre>
   *
   * <code>FOUR_DAY = 5;</code>
   */
  FOUR_DAY(5),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 5 days.
   * </pre>
   *
   * <code>FIVE_DAY = 6;</code>
   */
  FIVE_DAY(6),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 6 days.
   * </pre>
   *
   * <code>SIX_DAY = 7;</code>
   */
  SIX_DAY(7),
  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in one week or more.
   * </pre>
   *
   * <code>MULTI_WEEK = 8;</code>
   */
  MULTI_WEEK(8),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Pickup SLA is not specified.
   * </pre>
   *
   * <code>PICKUP_SLA_UNSPECIFIED = 0;</code>
   */
  public static final int PICKUP_SLA_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * Indicates that the product is available for pickup the same day that the
   * order is placed, subject to cut off times.
   * </pre>
   *
   * <code>SAME_DAY = 1;</code>
   */
  public static final int SAME_DAY_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Indicates that the product is available for pickup the following day that
   * the order is placed.
   * </pre>
   *
   * <code>NEXT_DAY = 2;</code>
   */
  public static final int NEXT_DAY_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 2 days.
   * </pre>
   *
   * <code>TWO_DAY = 3;</code>
   */
  public static final int TWO_DAY_VALUE = 3;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 3 days.
   * </pre>
   *
   * <code>THREE_DAY = 4;</code>
   */
  public static final int THREE_DAY_VALUE = 4;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 4 days
   * </pre>
   *
   * <code>FOUR_DAY = 5;</code>
   */
  public static final int FOUR_DAY_VALUE = 5;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 5 days.
   * </pre>
   *
   * <code>FIVE_DAY = 6;</code>
   */
  public static final int FIVE_DAY_VALUE = 6;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in 6 days.
   * </pre>
   *
   * <code>SIX_DAY = 7;</code>
   */
  public static final int SIX_DAY_VALUE = 7;

  /**
   *
   *
   * <pre>
   * Indicates that the product will be shipped to a store for a customer to
   * pick up in one week or more.
   * </pre>
   *
   * <code>MULTI_WEEK = 8;</code>
   */
  public static final int MULTI_WEEK_VALUE = 8;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PickupSla valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PickupSla forNumber(int value) {
    switch (value) {
      case 0:
        return PICKUP_SLA_UNSPECIFIED;
      case 1:
        return SAME_DAY;
      case 2:
        return NEXT_DAY;
      case 3:
        return TWO_DAY;
      case 4:
        return THREE_DAY;
      case 5:
        return FOUR_DAY;
      case 6:
        return FIVE_DAY;
      case 7:
        return SIX_DAY;
      case 8:
        return MULTI_WEEK;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PickupSla> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<PickupSla> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<PickupSla>() {
        public PickupSla findValueByNumber(int number) {
          return PickupSla.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.shopping.merchant.products.v1.ProductsCommonProto.getDescriptor()
        .getEnumTypes()
        .get(10);
  }

  private static final PickupSla[] VALUES = values();

  public static PickupSla valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PickupSla(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.shopping.merchant.products.v1.PickupSla)
}
