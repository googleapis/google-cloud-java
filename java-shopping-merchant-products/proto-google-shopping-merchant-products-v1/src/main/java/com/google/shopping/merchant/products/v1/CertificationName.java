/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/shopping/merchant/products/v1/products_common.proto

// Protobuf Java Version: 3.25.8
package com.google.shopping.merchant.products.v1;

/**
 *
 *
 * <pre>
 * The name of the certification.
 * </pre>
 *
 * Protobuf enum {@code google.shopping.merchant.products.v1.CertificationName}
 */
public enum CertificationName implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Certification name is not specified.
   * </pre>
   *
   * <code>CERTIFICATION_NAME_UNSPECIFIED = 0;</code>
   */
  CERTIFICATION_NAME_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Energy Star.
   * </pre>
   *
   * <code>ENERGY_STAR = 1;</code>
   */
  ENERGY_STAR(1),
  /**
   *
   *
   * <pre>
   * Energy Star Most Efficient.
   * </pre>
   *
   * <code>ENERGY_STAR_MOST_EFFICIENT = 2;</code>
   */
  ENERGY_STAR_MOST_EFFICIENT(2),
  /**
   *
   *
   * <pre>
   * Represents energy efficiency certifications in the EU European
   * Registry for Energy Labeling (EPREL) database.
   * </pre>
   *
   * <code>EPREL = 3;</code>
   */
  EPREL(3),
  /**
   *
   *
   * <pre>
   * EU Ecolabel.
   * </pre>
   *
   * <code>EU_ECOLABEL = 4;</code>
   */
  EU_ECOLABEL(4),
  /**
   *
   *
   * <pre>
   * The overall CO2 class of a vehicle
   * </pre>
   *
   * <code>VEHICLE_ENERGY_EFFICIENCY = 5;</code>
   */
  VEHICLE_ENERGY_EFFICIENCY(5),
  /**
   *
   *
   * <pre>
   * For the CO2 class of a vehicle with a discharged battery.
   * </pre>
   *
   * <code>VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY = 6;</code>
   */
  VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY(6),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Certification name is not specified.
   * </pre>
   *
   * <code>CERTIFICATION_NAME_UNSPECIFIED = 0;</code>
   */
  public static final int CERTIFICATION_NAME_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * Energy Star.
   * </pre>
   *
   * <code>ENERGY_STAR = 1;</code>
   */
  public static final int ENERGY_STAR_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Energy Star Most Efficient.
   * </pre>
   *
   * <code>ENERGY_STAR_MOST_EFFICIENT = 2;</code>
   */
  public static final int ENERGY_STAR_MOST_EFFICIENT_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Represents energy efficiency certifications in the EU European
   * Registry for Energy Labeling (EPREL) database.
   * </pre>
   *
   * <code>EPREL = 3;</code>
   */
  public static final int EPREL_VALUE = 3;

  /**
   *
   *
   * <pre>
   * EU Ecolabel.
   * </pre>
   *
   * <code>EU_ECOLABEL = 4;</code>
   */
  public static final int EU_ECOLABEL_VALUE = 4;

  /**
   *
   *
   * <pre>
   * The overall CO2 class of a vehicle
   * </pre>
   *
   * <code>VEHICLE_ENERGY_EFFICIENCY = 5;</code>
   */
  public static final int VEHICLE_ENERGY_EFFICIENCY_VALUE = 5;

  /**
   *
   *
   * <pre>
   * For the CO2 class of a vehicle with a discharged battery.
   * </pre>
   *
   * <code>VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY = 6;</code>
   */
  public static final int VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY_VALUE = 6;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CertificationName valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CertificationName forNumber(int value) {
    switch (value) {
      case 0:
        return CERTIFICATION_NAME_UNSPECIFIED;
      case 1:
        return ENERGY_STAR;
      case 2:
        return ENERGY_STAR_MOST_EFFICIENT;
      case 3:
        return EPREL;
      case 4:
        return EU_ECOLABEL;
      case 5:
        return VEHICLE_ENERGY_EFFICIENCY;
      case 6:
        return VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CertificationName> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<CertificationName>
      internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CertificationName>() {
            public CertificationName findValueByNumber(int number) {
              return CertificationName.forNumber(number);
            }
          };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.shopping.merchant.products.v1.ProductsCommonProto.getDescriptor()
        .getEnumTypes()
        .get(13);
  }

  private static final CertificationName[] VALUES = values();

  public static CertificationName valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CertificationName(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.shopping.merchant.products.v1.CertificationName)
}
