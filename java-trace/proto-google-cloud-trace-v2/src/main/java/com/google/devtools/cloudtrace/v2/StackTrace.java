/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/trace.proto

// Protobuf Java Version: 3.25.5
package com.google.devtools.cloudtrace.v2;

/**
 *
 *
 * <pre>
 * A call stack appearing in a trace.
 * </pre>
 *
 * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace}
 */
public final class StackTrace extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace)
    StackTraceOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use StackTrace.newBuilder() to construct.
  private StackTrace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private StackTrace() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new StackTrace();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.devtools.cloudtrace.v2.TraceProto
        .internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.cloudtrace.v2.TraceProto
        .internal_static_google_devtools_cloudtrace_v2_StackTrace_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.cloudtrace.v2.StackTrace.class,
            com.google.devtools.cloudtrace.v2.StackTrace.Builder.class);
  }

  public interface StackFrameOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     *
     * @return Whether the functionName field is set.
     */
    boolean hasFunctionName();
    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     *
     * @return The functionName.
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName();
    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFunctionNameOrBuilder();

    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     *
     * @return Whether the originalFunctionName field is set.
     */
    boolean hasOriginalFunctionName();
    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     *
     * @return The originalFunctionName.
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName();
    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getOriginalFunctionNameOrBuilder();

    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     *
     * @return Whether the fileName field is set.
     */
    boolean hasFileName();
    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     *
     * @return The fileName.
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getFileName();
    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder();

    /**
     *
     *
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     *
     * @return The lineNumber.
     */
    long getLineNumber();

    /**
     *
     *
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     *
     * @return The columnNumber.
     */
    long getColumnNumber();

    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     *
     * @return Whether the loadModule field is set.
     */
    boolean hasLoadModule();
    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     *
     * @return The loadModule.
     */
    com.google.devtools.cloudtrace.v2.Module getLoadModule();
    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder();

    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     *
     * @return Whether the sourceVersion field is set.
     */
    boolean hasSourceVersion();
    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     *
     * @return The sourceVersion.
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion();
    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getSourceVersionOrBuilder();
  }
  /**
   *
   *
   * <pre>
   * Represents a single stack frame in a stack trace.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrame}
   */
  public static final class StackFrame extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
      StackFrameOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use StackFrame.newBuilder() to construct.
    private StackFrame(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private StackFrame() {}

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new StackFrame();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.class,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder.class);
    }

    private int bitField0_;
    public static final int FUNCTION_NAME_FIELD_NUMBER = 1;
    private com.google.devtools.cloudtrace.v2.TruncatableString functionName_;
    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     *
     * @return Whether the functionName field is set.
     */
    @java.lang.Override
    public boolean hasFunctionName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     *
     * @return The functionName.
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName() {
      return functionName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : functionName_;
    }
    /**
     *
     *
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFunctionNameOrBuilder() {
      return functionName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : functionName_;
    }

    public static final int ORIGINAL_FUNCTION_NAME_FIELD_NUMBER = 2;
    private com.google.devtools.cloudtrace.v2.TruncatableString originalFunctionName_;
    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     *
     * @return Whether the originalFunctionName field is set.
     */
    @java.lang.Override
    public boolean hasOriginalFunctionName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     *
     * @return The originalFunctionName.
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName() {
      return originalFunctionName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : originalFunctionName_;
    }
    /**
     *
     *
     * <pre>
     * An un-mangled function name, if `function_name` is mangled.
     * To get information about name mangling, run
     * [this search](https://www.google.com/search?q=cxx+name+mangling).
     * The name can be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder
        getOriginalFunctionNameOrBuilder() {
      return originalFunctionName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : originalFunctionName_;
    }

    public static final int FILE_NAME_FIELD_NUMBER = 3;
    private com.google.devtools.cloudtrace.v2.TruncatableString fileName_;
    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     *
     * @return Whether the fileName field is set.
     */
    @java.lang.Override
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     *
     * @return The fileName.
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableString getFileName() {
      return fileName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : fileName_;
    }
    /**
     *
     *
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder() {
      return fileName_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : fileName_;
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 4;
    private long lineNumber_ = 0L;
    /**
     *
     *
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     *
     * @return The lineNumber.
     */
    @java.lang.Override
    public long getLineNumber() {
      return lineNumber_;
    }

    public static final int COLUMN_NUMBER_FIELD_NUMBER = 5;
    private long columnNumber_ = 0L;
    /**
     *
     *
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     *
     * @return The columnNumber.
     */
    @java.lang.Override
    public long getColumnNumber() {
      return columnNumber_;
    }

    public static final int LOAD_MODULE_FIELD_NUMBER = 6;
    private com.google.devtools.cloudtrace.v2.Module loadModule_;
    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     *
     * @return Whether the loadModule field is set.
     */
    @java.lang.Override
    public boolean hasLoadModule() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     *
     * @return The loadModule.
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.Module getLoadModule() {
      return loadModule_ == null
          ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance()
          : loadModule_;
    }
    /**
     *
     *
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder() {
      return loadModule_ == null
          ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance()
          : loadModule_;
    }

    public static final int SOURCE_VERSION_FIELD_NUMBER = 7;
    private com.google.devtools.cloudtrace.v2.TruncatableString sourceVersion_;
    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     *
     * @return Whether the sourceVersion field is set.
     */
    @java.lang.Override
    public boolean hasSourceVersion() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     *
     * @return The sourceVersion.
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion() {
      return sourceVersion_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : sourceVersion_;
    }
    /**
     *
     *
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder
        getSourceVersionOrBuilder() {
      return sourceVersion_ == null
          ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
          : sourceVersion_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFunctionName());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getOriginalFunctionName());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getFileName());
      }
      if (lineNumber_ != 0L) {
        output.writeInt64(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        output.writeInt64(5, columnNumber_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(6, getLoadModule());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(7, getSourceVersion());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getFunctionName());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size +=
            com.google.protobuf.CodedOutputStream.computeMessageSize(2, getOriginalFunctionName());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getFileName());
      }
      if (lineNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream.computeInt64Size(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream.computeInt64Size(5, columnNumber_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getLoadModule());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, getSourceVersion());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrame)) {
        return super.equals(obj);
      }
      com.google.devtools.cloudtrace.v2.StackTrace.StackFrame other =
          (com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) obj;

      if (hasFunctionName() != other.hasFunctionName()) return false;
      if (hasFunctionName()) {
        if (!getFunctionName().equals(other.getFunctionName())) return false;
      }
      if (hasOriginalFunctionName() != other.hasOriginalFunctionName()) return false;
      if (hasOriginalFunctionName()) {
        if (!getOriginalFunctionName().equals(other.getOriginalFunctionName())) return false;
      }
      if (hasFileName() != other.hasFileName()) return false;
      if (hasFileName()) {
        if (!getFileName().equals(other.getFileName())) return false;
      }
      if (getLineNumber() != other.getLineNumber()) return false;
      if (getColumnNumber() != other.getColumnNumber()) return false;
      if (hasLoadModule() != other.hasLoadModule()) return false;
      if (hasLoadModule()) {
        if (!getLoadModule().equals(other.getLoadModule())) return false;
      }
      if (hasSourceVersion() != other.hasSourceVersion()) return false;
      if (hasSourceVersion()) {
        if (!getSourceVersion().equals(other.getSourceVersion())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFunctionName()) {
        hash = (37 * hash) + FUNCTION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionName().hashCode();
      }
      if (hasOriginalFunctionName()) {
        hash = (37 * hash) + ORIGINAL_FUNCTION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalFunctionName().hashCode();
      }
      if (hasFileName()) {
        hash = (37 * hash) + FILE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFileName().hashCode();
      }
      hash = (37 * hash) + LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getLineNumber());
      hash = (37 * hash) + COLUMN_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getColumnNumber());
      if (hasLoadModule()) {
        hash = (37 * hash) + LOAD_MODULE_FIELD_NUMBER;
        hash = (53 * hash) + getLoadModule().hashCode();
      }
      if (hasSourceVersion()) {
        hash = (37 * hash) + SOURCE_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getSourceVersion().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * Represents a single stack frame in a stack trace.
     * </pre>
     *
     * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrame}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.class,
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder.class);
      }

      // Construct using com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
          getFunctionNameFieldBuilder();
          getOriginalFunctionNameFieldBuilder();
          getFileNameFieldBuilder();
          getLoadModuleFieldBuilder();
          getSourceVersionFieldBuilder();
        }
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        functionName_ = null;
        if (functionNameBuilder_ != null) {
          functionNameBuilder_.dispose();
          functionNameBuilder_ = null;
        }
        originalFunctionName_ = null;
        if (originalFunctionNameBuilder_ != null) {
          originalFunctionNameBuilder_.dispose();
          originalFunctionNameBuilder_ = null;
        }
        fileName_ = null;
        if (fileNameBuilder_ != null) {
          fileNameBuilder_.dispose();
          fileNameBuilder_ = null;
        }
        lineNumber_ = 0L;
        columnNumber_ = 0L;
        loadModule_ = null;
        if (loadModuleBuilder_ != null) {
          loadModuleBuilder_.dispose();
          loadModuleBuilder_ = null;
        }
        sourceVersion_ = null;
        if (sourceVersionBuilder_ != null) {
          sourceVersionBuilder_.dispose();
          sourceVersionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstanceForType() {
        return com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame build() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame buildPartial() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame result =
            new com.google.devtools.cloudtrace.v2.StackTrace.StackFrame(this);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.functionName_ =
              functionNameBuilder_ == null ? functionName_ : functionNameBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.originalFunctionName_ =
              originalFunctionNameBuilder_ == null
                  ? originalFunctionName_
                  : originalFunctionNameBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fileName_ = fileNameBuilder_ == null ? fileName_ : fileNameBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.lineNumber_ = lineNumber_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.columnNumber_ = columnNumber_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.loadModule_ =
              loadModuleBuilder_ == null ? loadModule_ : loadModuleBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.sourceVersion_ =
              sourceVersionBuilder_ == null ? sourceVersion_ : sourceVersionBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) {
          return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame other) {
        if (other == com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance())
          return this;
        if (other.hasFunctionName()) {
          mergeFunctionName(other.getFunctionName());
        }
        if (other.hasOriginalFunctionName()) {
          mergeOriginalFunctionName(other.getOriginalFunctionName());
        }
        if (other.hasFileName()) {
          mergeFileName(other.getFileName());
        }
        if (other.getLineNumber() != 0L) {
          setLineNumber(other.getLineNumber());
        }
        if (other.getColumnNumber() != 0L) {
          setColumnNumber(other.getColumnNumber());
        }
        if (other.hasLoadModule()) {
          mergeLoadModule(other.getLoadModule());
        }
        if (other.hasSourceVersion()) {
          mergeSourceVersion(other.getSourceVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  input.readMessage(getFunctionNameFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
              case 18:
                {
                  input.readMessage(
                      getOriginalFunctionNameFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
              case 26:
                {
                  input.readMessage(getFileNameFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
              case 32:
                {
                  lineNumber_ = input.readInt64();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
              case 40:
                {
                  columnNumber_ = input.readInt64();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
              case 50:
                {
                  input.readMessage(getLoadModuleFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000020;
                  break;
                } // case 50
              case 58:
                {
                  input.readMessage(getSourceVersionFieldBuilder().getBuilder(), extensionRegistry);
                  bitField0_ |= 0x00000040;
                  break;
                } // case 58
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private com.google.devtools.cloudtrace.v2.TruncatableString functionName_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          functionNameBuilder_;
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       *
       * @return Whether the functionName field is set.
       */
      public boolean hasFunctionName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       *
       * @return The functionName.
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName() {
        if (functionNameBuilder_ == null) {
          return functionName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : functionName_;
        } else {
          return functionNameBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (functionNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          functionName_ = value;
        } else {
          functionNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (functionNameBuilder_ == null) {
          functionName_ = builderForValue.build();
        } else {
          functionNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder mergeFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (functionNameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)
              && functionName_ != null
              && functionName_
                  != com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()) {
            getFunctionNameBuilder().mergeFrom(value);
          } else {
            functionName_ = value;
          }
        } else {
          functionNameBuilder_.mergeFrom(value);
        }
        if (functionName_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder clearFunctionName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        functionName_ = null;
        if (functionNameBuilder_ != null) {
          functionNameBuilder_.dispose();
          functionNameBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getFunctionNameBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFunctionNameFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder
          getFunctionNameOrBuilder() {
        if (functionNameBuilder_ != null) {
          return functionNameBuilder_.getMessageOrBuilder();
        } else {
          return functionName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : functionName_;
        }
      }
      /**
       *
       *
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          getFunctionNameFieldBuilder() {
        if (functionNameBuilder_ == null) {
          functionNameBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.TruncatableString,
                  com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
                  com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getFunctionName(), getParentForChildren(), isClean());
          functionName_ = null;
        }
        return functionNameBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString originalFunctionName_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          originalFunctionNameBuilder_;
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       *
       * @return Whether the originalFunctionName field is set.
       */
      public boolean hasOriginalFunctionName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       *
       * @return The originalFunctionName.
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName() {
        if (originalFunctionNameBuilder_ == null) {
          return originalFunctionName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : originalFunctionName_;
        } else {
          return originalFunctionNameBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (originalFunctionNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          originalFunctionName_ = value;
        } else {
          originalFunctionNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionName_ = builderForValue.build();
        } else {
          originalFunctionNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder mergeOriginalFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (originalFunctionNameBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)
              && originalFunctionName_ != null
              && originalFunctionName_
                  != com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()) {
            getOriginalFunctionNameBuilder().mergeFrom(value);
          } else {
            originalFunctionName_ = value;
          }
        } else {
          originalFunctionNameBuilder_.mergeFrom(value);
        }
        if (originalFunctionName_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder clearOriginalFunctionName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        originalFunctionName_ = null;
        if (originalFunctionNameBuilder_ != null) {
          originalFunctionNameBuilder_.dispose();
          originalFunctionNameBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder
          getOriginalFunctionNameBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOriginalFunctionNameFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder
          getOriginalFunctionNameOrBuilder() {
        if (originalFunctionNameBuilder_ != null) {
          return originalFunctionNameBuilder_.getMessageOrBuilder();
        } else {
          return originalFunctionName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : originalFunctionName_;
        }
      }
      /**
       *
       *
       * <pre>
       * An un-mangled function name, if `function_name` is mangled.
       * To get information about name mangling, run
       * [this search](https://www.google.com/search?q=cxx+name+mangling).
       * The name can be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          getOriginalFunctionNameFieldBuilder() {
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionNameBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.TruncatableString,
                  com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
                  com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getOriginalFunctionName(), getParentForChildren(), isClean());
          originalFunctionName_ = null;
        }
        return originalFunctionNameBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString fileName_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          fileNameBuilder_;
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       *
       * @return Whether the fileName field is set.
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       *
       * @return The fileName.
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getFileName() {
        if (fileNameBuilder_ == null) {
          return fileName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : fileName_;
        } else {
          return fileNameBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (fileNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fileName_ = value;
        } else {
          fileNameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (fileNameBuilder_ == null) {
          fileName_ = builderForValue.build();
        } else {
          fileNameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder mergeFileName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (fileNameBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)
              && fileName_ != null
              && fileName_
                  != com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()) {
            getFileNameBuilder().mergeFrom(value);
          } else {
            fileName_ = value;
          }
        } else {
          fileNameBuilder_.mergeFrom(value);
        }
        if (fileName_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fileName_ = null;
        if (fileNameBuilder_ != null) {
          fileNameBuilder_.dispose();
          fileNameBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getFileNameBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFileNameFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder() {
        if (fileNameBuilder_ != null) {
          return fileNameBuilder_.getMessageOrBuilder();
        } else {
          return fileName_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : fileName_;
        }
      }
      /**
       *
       *
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          getFileNameFieldBuilder() {
        if (fileNameBuilder_ == null) {
          fileNameBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.TruncatableString,
                  com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
                  com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getFileName(), getParentForChildren(), isClean());
          fileName_ = null;
        }
        return fileNameBuilder_;
      }

      private long lineNumber_;
      /**
       *
       *
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       *
       * @return The lineNumber.
       */
      @java.lang.Override
      public long getLineNumber() {
        return lineNumber_;
      }
      /**
       *
       *
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       *
       * @param value The lineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setLineNumber(long value) {

        lineNumber_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearLineNumber() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lineNumber_ = 0L;
        onChanged();
        return this;
      }

      private long columnNumber_;
      /**
       *
       *
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       *
       * @return The columnNumber.
       */
      @java.lang.Override
      public long getColumnNumber() {
        return columnNumber_;
      }
      /**
       *
       *
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       *
       * @param value The columnNumber to set.
       * @return This builder for chaining.
       */
      public Builder setColumnNumber(long value) {

        columnNumber_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearColumnNumber() {
        bitField0_ = (bitField0_ & ~0x00000010);
        columnNumber_ = 0L;
        onChanged();
        return this;
      }

      private com.google.devtools.cloudtrace.v2.Module loadModule_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.Module,
              com.google.devtools.cloudtrace.v2.Module.Builder,
              com.google.devtools.cloudtrace.v2.ModuleOrBuilder>
          loadModuleBuilder_;
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       *
       * @return Whether the loadModule field is set.
       */
      public boolean hasLoadModule() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       *
       * @return The loadModule.
       */
      public com.google.devtools.cloudtrace.v2.Module getLoadModule() {
        if (loadModuleBuilder_ == null) {
          return loadModule_ == null
              ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance()
              : loadModule_;
        } else {
          return loadModuleBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder setLoadModule(com.google.devtools.cloudtrace.v2.Module value) {
        if (loadModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loadModule_ = value;
        } else {
          loadModuleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder setLoadModule(
          com.google.devtools.cloudtrace.v2.Module.Builder builderForValue) {
        if (loadModuleBuilder_ == null) {
          loadModule_ = builderForValue.build();
        } else {
          loadModuleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder mergeLoadModule(com.google.devtools.cloudtrace.v2.Module value) {
        if (loadModuleBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)
              && loadModule_ != null
              && loadModule_ != com.google.devtools.cloudtrace.v2.Module.getDefaultInstance()) {
            getLoadModuleBuilder().mergeFrom(value);
          } else {
            loadModule_ = value;
          }
        } else {
          loadModuleBuilder_.mergeFrom(value);
        }
        if (loadModule_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder clearLoadModule() {
        bitField0_ = (bitField0_ & ~0x00000020);
        loadModule_ = null;
        if (loadModuleBuilder_ != null) {
          loadModuleBuilder_.dispose();
          loadModuleBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public com.google.devtools.cloudtrace.v2.Module.Builder getLoadModuleBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getLoadModuleFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder() {
        if (loadModuleBuilder_ != null) {
          return loadModuleBuilder_.getMessageOrBuilder();
        } else {
          return loadModule_ == null
              ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance()
              : loadModule_;
        }
      }
      /**
       *
       *
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.Module,
              com.google.devtools.cloudtrace.v2.Module.Builder,
              com.google.devtools.cloudtrace.v2.ModuleOrBuilder>
          getLoadModuleFieldBuilder() {
        if (loadModuleBuilder_ == null) {
          loadModuleBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.Module,
                  com.google.devtools.cloudtrace.v2.Module.Builder,
                  com.google.devtools.cloudtrace.v2.ModuleOrBuilder>(
                  getLoadModule(), getParentForChildren(), isClean());
          loadModule_ = null;
        }
        return loadModuleBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString sourceVersion_;
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          sourceVersionBuilder_;
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       *
       * @return Whether the sourceVersion field is set.
       */
      public boolean hasSourceVersion() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       *
       * @return The sourceVersion.
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion() {
        if (sourceVersionBuilder_ == null) {
          return sourceVersion_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : sourceVersion_;
        } else {
          return sourceVersionBuilder_.getMessage();
        }
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (sourceVersionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sourceVersion_ = value;
        } else {
          sourceVersionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (sourceVersionBuilder_ == null) {
          sourceVersion_ = builderForValue.build();
        } else {
          sourceVersionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder mergeSourceVersion(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (sourceVersionBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)
              && sourceVersion_ != null
              && sourceVersion_
                  != com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()) {
            getSourceVersionBuilder().mergeFrom(value);
          } else {
            sourceVersion_ = value;
          }
        } else {
          sourceVersionBuilder_.mergeFrom(value);
        }
        if (sourceVersion_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder clearSourceVersion() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sourceVersion_ = null;
        if (sourceVersionBuilder_ != null) {
          sourceVersionBuilder_.dispose();
          sourceVersionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getSourceVersionBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getSourceVersionFieldBuilder().getBuilder();
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder
          getSourceVersionOrBuilder() {
        if (sourceVersionBuilder_ != null) {
          return sourceVersionBuilder_.getMessageOrBuilder();
        } else {
          return sourceVersion_ == null
              ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance()
              : sourceVersion_;
        }
      }
      /**
       *
       *
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString,
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
              com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>
          getSourceVersionFieldBuilder() {
        if (sourceVersionBuilder_ == null) {
          sourceVersionBuilder_ =
              new com.google.protobuf.SingleFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.TruncatableString,
                  com.google.devtools.cloudtrace.v2.TruncatableString.Builder,
                  com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getSourceVersion(), getParentForChildren(), isClean());
          sourceVersion_ = null;
        }
        return sourceVersionBuilder_;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    private static final com.google.devtools.cloudtrace.v2.StackTrace.StackFrame DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrame();
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackFrame> PARSER =
        new com.google.protobuf.AbstractParser<StackFrame>() {
          @java.lang.Override
          public StackFrame parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<StackFrame> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StackFrame> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  public interface StackFramesOrBuilder
      extends
      // @@protoc_insertion_point(interface_extends:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
      com.google.protobuf.MessageOrBuilder {

    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> getFrameList();
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index);
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    int getFrameCount();
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    java.util.List<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>
        getFrameOrBuilderList();
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(int index);

    /**
     *
     *
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     *
     * @return The droppedFramesCount.
     */
    int getDroppedFramesCount();
  }
  /**
   *
   *
   * <pre>
   * A collection of stack frames, which can be truncated.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrames}
   */
  public static final class StackFrames extends com.google.protobuf.GeneratedMessageV3
      implements
      // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
      StackFramesOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use StackFrames.newBuilder() to construct.
    private StackFrames(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private StackFrames() {
      frame_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
      return new StackFrames();
    }

    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.class,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder.class);
    }

    public static final int FRAME_FIELD_NUMBER = 1;

    @SuppressWarnings("serial")
    private java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> frame_;
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> getFrameList() {
      return frame_;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public java.util.List<
            ? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>
        getFrameOrBuilderList() {
      return frame_;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public int getFrameCount() {
      return frame_.size();
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index) {
      return frame_.get(index);
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
        int index) {
      return frame_.get(index);
    }

    public static final int DROPPED_FRAMES_COUNT_FIELD_NUMBER = 2;
    private int droppedFramesCount_ = 0;
    /**
     *
     *
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     *
     * @return The droppedFramesCount.
     */
    @java.lang.Override
    public int getDroppedFramesCount() {
      return droppedFramesCount_;
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
      for (int i = 0; i < frame_.size(); i++) {
        output.writeMessage(1, frame_.get(i));
      }
      if (droppedFramesCount_ != 0) {
        output.writeInt32(2, droppedFramesCount_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < frame_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, frame_.get(i));
      }
      if (droppedFramesCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, droppedFramesCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrames)) {
        return super.equals(obj);
      }
      com.google.devtools.cloudtrace.v2.StackTrace.StackFrames other =
          (com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) obj;

      if (!getFrameList().equals(other.getFrameList())) return false;
      if (getDroppedFramesCount() != other.getDroppedFramesCount()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFrameCount() > 0) {
        hash = (37 * hash) + FRAME_FIELD_NUMBER;
        hash = (53 * hash) + getFrameList().hashCode();
      }
      hash = (37 * hash) + DROPPED_FRAMES_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDroppedFramesCount();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseDelimitedFrom(
        java.io.InputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseDelimitedFrom(
        java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
          PARSER, input, extensionRegistry);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input) throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
          PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     *
     *
     * <pre>
     * A collection of stack frames, which can be truncated.
     * </pre>
     *
     * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrames}
     */
    public static final class Builder
        extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
        implements
        // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
        com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.class,
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder.class);
      }

      // Construct using com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.newBuilder()
      private Builder() {}

      private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
      }

      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (frameBuilder_ == null) {
          frame_ = java.util.Collections.emptyList();
        } else {
          frame_ = null;
          frameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        droppedFramesCount_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
        return com.google.devtools.cloudtrace.v2.TraceProto
            .internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstanceForType() {
        return com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames build() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames buildPartial() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result =
            new com.google.devtools.cloudtrace.v2.StackTrace.StackFrames(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) {
          buildPartial0(result);
        }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result) {
        if (frameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            frame_ = java.util.Collections.unmodifiableList(frame_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.frame_ = frame_;
        } else {
          result.frame_ = frameBuilder_.build();
        }
      }

      private void buildPartial0(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.droppedFramesCount_ = droppedFramesCount_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }

      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.setField(field, value);
      }

      @java.lang.Override
      public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }

      @java.lang.Override
      public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }

      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index,
          java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }

      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) {
          return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames other) {
        if (other == com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance())
          return this;
        if (frameBuilder_ == null) {
          if (!other.frame_.isEmpty()) {
            if (frame_.isEmpty()) {
              frame_ = other.frame_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFrameIsMutable();
              frame_.addAll(other.frame_);
            }
            onChanged();
          }
        } else {
          if (!other.frame_.isEmpty()) {
            if (frameBuilder_.isEmpty()) {
              frameBuilder_.dispose();
              frameBuilder_ = null;
              frame_ = other.frame_;
              bitField0_ = (bitField0_ & ~0x00000001);
              frameBuilder_ =
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                      ? getFrameFieldBuilder()
                      : null;
            } else {
              frameBuilder_.addAllMessages(other.frame_);
            }
          }
        }
        if (other.getDroppedFramesCount() != 0) {
          setDroppedFramesCount(other.getDroppedFramesCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10:
                {
                  com.google.devtools.cloudtrace.v2.StackTrace.StackFrame m =
                      input.readMessage(
                          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.parser(),
                          extensionRegistry);
                  if (frameBuilder_ == null) {
                    ensureFrameIsMutable();
                    frame_.add(m);
                  } else {
                    frameBuilder_.addMessage(m);
                  }
                  break;
                } // case 10
              case 16:
                {
                  droppedFramesCount_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
              default:
                {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int bitField0_;

      private java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> frame_ =
          java.util.Collections.emptyList();

      private void ensureFrameIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          frame_ =
              new java.util.ArrayList<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame>(
                  frame_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>
          frameBuilder_;

      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame>
          getFrameList() {
        if (frameBuilder_ == null) {
          return java.util.Collections.unmodifiableList(frame_);
        } else {
          return frameBuilder_.getMessageList();
        }
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public int getFrameCount() {
        if (frameBuilder_ == null) {
          return frame_.size();
        } else {
          return frameBuilder_.getCount();
        }
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index) {
        if (frameBuilder_ == null) {
          return frame_.get(index);
        } else {
          return frameBuilder_.getMessage(index);
        }
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.set(index, value);
          onChanged();
        } else {
          frameBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index,
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.set(index, builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.add(value);
          onChanged();
        } else {
          frameBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.add(index, value);
          onChanged();
        } else {
          frameBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.add(builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index,
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.add(index, builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addAllFrame(
          java.lang.Iterable<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrame>
              values) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(values, frame_);
          onChanged();
        } else {
          frameBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder clearFrame() {
        if (frameBuilder_ == null) {
          frame_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          frameBuilder_.clear();
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder removeFrame(int index) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.remove(index);
          onChanged();
        } else {
          frameBuilder_.remove(index);
        }
        return this;
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder getFrameBuilder(
          int index) {
        return getFrameFieldBuilder().getBuilder(index);
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
          int index) {
        if (frameBuilder_ == null) {
          return frame_.get(index);
        } else {
          return frameBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<
              ? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>
          getFrameOrBuilderList() {
        if (frameBuilder_ != null) {
          return frameBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(frame_);
        }
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder addFrameBuilder() {
        return getFrameFieldBuilder()
            .addBuilder(
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder addFrameBuilder(
          int index) {
        return getFrameFieldBuilder()
            .addBuilder(
                index,
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance());
      }
      /**
       *
       *
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder>
          getFrameBuilderList() {
        return getFrameFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder,
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>
          getFrameFieldBuilder() {
        if (frameBuilder_ == null) {
          frameBuilder_ =
              new com.google.protobuf.RepeatedFieldBuilderV3<
                  com.google.devtools.cloudtrace.v2.StackTrace.StackFrame,
                  com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder,
                  com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>(
                  frame_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
          frame_ = null;
        }
        return frameBuilder_;
      }

      private int droppedFramesCount_;
      /**
       *
       *
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       *
       * @return The droppedFramesCount.
       */
      @java.lang.Override
      public int getDroppedFramesCount() {
        return droppedFramesCount_;
      }
      /**
       *
       *
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       *
       * @param value The droppedFramesCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedFramesCount(int value) {

        droppedFramesCount_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       *
       *
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       *
       * @return This builder for chaining.
       */
      public Builder clearDroppedFramesCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        droppedFramesCount_ = 0;
        onChanged();
        return this;
      }

      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }

      // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    private static final com.google.devtools.cloudtrace.v2.StackTrace.StackFrames DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrames();
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackFrames> PARSER =
        new com.google.protobuf.AbstractParser<StackFrames>() {
          @java.lang.Override
          public StackFrames parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException()
                  .setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

    public static com.google.protobuf.Parser<StackFrames> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StackFrames> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }
  }

  private int bitField0_;
  public static final int STACK_FRAMES_FIELD_NUMBER = 1;
  private com.google.devtools.cloudtrace.v2.StackTrace.StackFrames stackFrames_;
  /**
   *
   *
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   *
   * @return Whether the stackFrames field is set.
   */
  @java.lang.Override
  public boolean hasStackFrames() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   *
   * @return The stackFrames.
   */
  @java.lang.Override
  public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getStackFrames() {
    return stackFrames_ == null
        ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()
        : stackFrames_;
  }
  /**
   *
   *
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder
      getStackFramesOrBuilder() {
    return stackFrames_ == null
        ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()
        : stackFrames_;
  }

  public static final int STACK_TRACE_HASH_ID_FIELD_NUMBER = 2;
  private long stackTraceHashId_ = 0L;
  /**
   *
   *
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   *
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both the
   * `stackFrame` content and a value in `stackTraceHashId`.
   *
   * Subsequent spans within the same request can refer
   * to that stack trace by only setting `stackTraceHashId`.
   * </pre>
   *
   * <code>int64 stack_trace_hash_id = 2;</code>
   *
   * @return The stackTraceHashId.
   */
  @java.lang.Override
  public long getStackTraceHashId() {
    return stackTraceHashId_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getStackFrames());
    }
    if (stackTraceHashId_ != 0L) {
      output.writeInt64(2, stackTraceHashId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getStackFrames());
    }
    if (stackTraceHashId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeInt64Size(2, stackTraceHashId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace)) {
      return super.equals(obj);
    }
    com.google.devtools.cloudtrace.v2.StackTrace other =
        (com.google.devtools.cloudtrace.v2.StackTrace) obj;

    if (hasStackFrames() != other.hasStackFrames()) return false;
    if (hasStackFrames()) {
      if (!getStackFrames().equals(other.getStackFrames())) return false;
    }
    if (getStackTraceHashId() != other.getStackTraceHashId()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStackFrames()) {
      hash = (37 * hash) + STACK_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + getStackFrames().hashCode();
    }
    hash = (37 * hash) + STACK_TRACE_HASH_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getStackTraceHashId());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.devtools.cloudtrace.v2.StackTrace prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * A call stack appearing in a trace.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace)
      com.google.devtools.cloudtrace.v2.StackTraceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.class,
              com.google.devtools.cloudtrace.v2.StackTrace.Builder.class);
    }

    // Construct using com.google.devtools.cloudtrace.v2.StackTrace.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getStackFramesFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      stackFrames_ = null;
      if (stackFramesBuilder_ != null) {
        stackFramesBuilder_.dispose();
        stackFramesBuilder_ = null;
      }
      stackTraceHashId_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.devtools.cloudtrace.v2.TraceProto
          .internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstanceForType() {
      return com.google.devtools.cloudtrace.v2.StackTrace.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace build() {
      com.google.devtools.cloudtrace.v2.StackTrace result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.cloudtrace.v2.StackTrace buildPartial() {
      com.google.devtools.cloudtrace.v2.StackTrace result =
          new com.google.devtools.cloudtrace.v2.StackTrace(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.devtools.cloudtrace.v2.StackTrace result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.stackFrames_ =
            stackFramesBuilder_ == null ? stackFrames_ : stackFramesBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.stackTraceHashId_ = stackTraceHashId_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace) {
        return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace other) {
      if (other == com.google.devtools.cloudtrace.v2.StackTrace.getDefaultInstance()) return this;
      if (other.hasStackFrames()) {
        mergeStackFrames(other.getStackFrames());
      }
      if (other.getStackTraceHashId() != 0L) {
        setStackTraceHashId(other.getStackTraceHashId());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(getStackFramesFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 16:
              {
                stackTraceHashId_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.devtools.cloudtrace.v2.StackTrace.StackFrames stackFrames_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames,
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder,
            com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder>
        stackFramesBuilder_;
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     *
     * @return Whether the stackFrames field is set.
     */
    public boolean hasStackFrames() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     *
     * @return The stackFrames.
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getStackFrames() {
      if (stackFramesBuilder_ == null) {
        return stackFrames_ == null
            ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()
            : stackFrames_;
      } else {
        return stackFramesBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames value) {
      if (stackFramesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stackFrames_ = value;
      } else {
        stackFramesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder builderForValue) {
      if (stackFramesBuilder_ == null) {
        stackFrames_ = builderForValue.build();
      } else {
        stackFramesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder mergeStackFrames(
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames value) {
      if (stackFramesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && stackFrames_ != null
            && stackFrames_
                != com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()) {
          getStackFramesBuilder().mergeFrom(value);
        } else {
          stackFrames_ = value;
        }
      } else {
        stackFramesBuilder_.mergeFrom(value);
      }
      if (stackFrames_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder clearStackFrames() {
      bitField0_ = (bitField0_ & ~0x00000001);
      stackFrames_ = null;
      if (stackFramesBuilder_ != null) {
        stackFramesBuilder_.dispose();
        stackFramesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder
        getStackFramesBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getStackFramesFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder
        getStackFramesOrBuilder() {
      if (stackFramesBuilder_ != null) {
        return stackFramesBuilder_.getMessageOrBuilder();
      } else {
        return stackFrames_ == null
            ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()
            : stackFrames_;
      }
    }
    /**
     *
     *
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames,
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder,
            com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder>
        getStackFramesFieldBuilder() {
      if (stackFramesBuilder_ == null) {
        stackFramesBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrames,
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder,
                com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder>(
                getStackFrames(), getParentForChildren(), isClean());
        stackFrames_ = null;
      }
      return stackFramesBuilder_;
    }

    private long stackTraceHashId_;
    /**
     *
     *
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     *
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     *
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     *
     * @return The stackTraceHashId.
     */
    @java.lang.Override
    public long getStackTraceHashId() {
      return stackTraceHashId_;
    }
    /**
     *
     *
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     *
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     *
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     *
     * @param value The stackTraceHashId to set.
     * @return This builder for chaining.
     */
    public Builder setStackTraceHashId(long value) {

      stackTraceHashId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     *
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     *
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearStackTraceHashId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      stackTraceHashId_ = 0L;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace)
  private static final com.google.devtools.cloudtrace.v2.StackTrace DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace();
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StackTrace> PARSER =
      new com.google.protobuf.AbstractParser<StackTrace>() {
        @java.lang.Override
        public StackTrace parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<StackTrace> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StackTrace> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
