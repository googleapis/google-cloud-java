/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/admin/v1alpha/event_create_and_edit.proto

// Protobuf Java Version: 3.25.5
package com.google.analytics.admin.v1alpha;

/**
 *
 *
 * <pre>
 * Defines a condition for when an Event Edit or Event Creation rule applies to
 * an event.
 * </pre>
 *
 * Protobuf type {@code google.analytics.admin.v1alpha.MatchingCondition}
 */
public final class MatchingCondition extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.analytics.admin.v1alpha.MatchingCondition)
    MatchingConditionOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use MatchingCondition.newBuilder() to construct.
  private MatchingCondition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private MatchingCondition() {
    field_ = "";
    comparisonType_ = 0;
    value_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new MatchingCondition();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.analytics.admin.v1alpha.EventCreateAndEdit
        .internal_static_google_analytics_admin_v1alpha_MatchingCondition_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.analytics.admin.v1alpha.EventCreateAndEdit
        .internal_static_google_analytics_admin_v1alpha_MatchingCondition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.analytics.admin.v1alpha.MatchingCondition.class,
            com.google.analytics.admin.v1alpha.MatchingCondition.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Comparison type for matching condition
   * </pre>
   *
   * Protobuf enum {@code google.analytics.admin.v1alpha.MatchingCondition.ComparisonType}
   */
  public enum ComparisonType implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Unknown
     * </pre>
     *
     * <code>COMPARISON_TYPE_UNSPECIFIED = 0;</code>
     */
    COMPARISON_TYPE_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * Equals, case sensitive
     * </pre>
     *
     * <code>EQUALS = 1;</code>
     */
    EQUALS(1),
    /**
     *
     *
     * <pre>
     * Equals, case insensitive
     * </pre>
     *
     * <code>EQUALS_CASE_INSENSITIVE = 2;</code>
     */
    EQUALS_CASE_INSENSITIVE(2),
    /**
     *
     *
     * <pre>
     * Contains, case sensitive
     * </pre>
     *
     * <code>CONTAINS = 3;</code>
     */
    CONTAINS(3),
    /**
     *
     *
     * <pre>
     * Contains, case insensitive
     * </pre>
     *
     * <code>CONTAINS_CASE_INSENSITIVE = 4;</code>
     */
    CONTAINS_CASE_INSENSITIVE(4),
    /**
     *
     *
     * <pre>
     * Starts with, case sensitive
     * </pre>
     *
     * <code>STARTS_WITH = 5;</code>
     */
    STARTS_WITH(5),
    /**
     *
     *
     * <pre>
     * Starts with, case insensitive
     * </pre>
     *
     * <code>STARTS_WITH_CASE_INSENSITIVE = 6;</code>
     */
    STARTS_WITH_CASE_INSENSITIVE(6),
    /**
     *
     *
     * <pre>
     * Ends with, case sensitive
     * </pre>
     *
     * <code>ENDS_WITH = 7;</code>
     */
    ENDS_WITH(7),
    /**
     *
     *
     * <pre>
     * Ends with, case insensitive
     * </pre>
     *
     * <code>ENDS_WITH_CASE_INSENSITIVE = 8;</code>
     */
    ENDS_WITH_CASE_INSENSITIVE(8),
    /**
     *
     *
     * <pre>
     * Greater than
     * </pre>
     *
     * <code>GREATER_THAN = 9;</code>
     */
    GREATER_THAN(9),
    /**
     *
     *
     * <pre>
     * Greater than or equal
     * </pre>
     *
     * <code>GREATER_THAN_OR_EQUAL = 10;</code>
     */
    GREATER_THAN_OR_EQUAL(10),
    /**
     *
     *
     * <pre>
     * Less than
     * </pre>
     *
     * <code>LESS_THAN = 11;</code>
     */
    LESS_THAN(11),
    /**
     *
     *
     * <pre>
     * Less than or equal
     * </pre>
     *
     * <code>LESS_THAN_OR_EQUAL = 12;</code>
     */
    LESS_THAN_OR_EQUAL(12),
    /**
     *
     *
     * <pre>
     * regular expression. Only supported for web streams.
     * </pre>
     *
     * <code>REGULAR_EXPRESSION = 13;</code>
     */
    REGULAR_EXPRESSION(13),
    /**
     *
     *
     * <pre>
     * regular expression, case insensitive. Only supported for web streams.
     * </pre>
     *
     * <code>REGULAR_EXPRESSION_CASE_INSENSITIVE = 14;</code>
     */
    REGULAR_EXPRESSION_CASE_INSENSITIVE(14),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Unknown
     * </pre>
     *
     * <code>COMPARISON_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int COMPARISON_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     *
     *
     * <pre>
     * Equals, case sensitive
     * </pre>
     *
     * <code>EQUALS = 1;</code>
     */
    public static final int EQUALS_VALUE = 1;
    /**
     *
     *
     * <pre>
     * Equals, case insensitive
     * </pre>
     *
     * <code>EQUALS_CASE_INSENSITIVE = 2;</code>
     */
    public static final int EQUALS_CASE_INSENSITIVE_VALUE = 2;
    /**
     *
     *
     * <pre>
     * Contains, case sensitive
     * </pre>
     *
     * <code>CONTAINS = 3;</code>
     */
    public static final int CONTAINS_VALUE = 3;
    /**
     *
     *
     * <pre>
     * Contains, case insensitive
     * </pre>
     *
     * <code>CONTAINS_CASE_INSENSITIVE = 4;</code>
     */
    public static final int CONTAINS_CASE_INSENSITIVE_VALUE = 4;
    /**
     *
     *
     * <pre>
     * Starts with, case sensitive
     * </pre>
     *
     * <code>STARTS_WITH = 5;</code>
     */
    public static final int STARTS_WITH_VALUE = 5;
    /**
     *
     *
     * <pre>
     * Starts with, case insensitive
     * </pre>
     *
     * <code>STARTS_WITH_CASE_INSENSITIVE = 6;</code>
     */
    public static final int STARTS_WITH_CASE_INSENSITIVE_VALUE = 6;
    /**
     *
     *
     * <pre>
     * Ends with, case sensitive
     * </pre>
     *
     * <code>ENDS_WITH = 7;</code>
     */
    public static final int ENDS_WITH_VALUE = 7;
    /**
     *
     *
     * <pre>
     * Ends with, case insensitive
     * </pre>
     *
     * <code>ENDS_WITH_CASE_INSENSITIVE = 8;</code>
     */
    public static final int ENDS_WITH_CASE_INSENSITIVE_VALUE = 8;
    /**
     *
     *
     * <pre>
     * Greater than
     * </pre>
     *
     * <code>GREATER_THAN = 9;</code>
     */
    public static final int GREATER_THAN_VALUE = 9;
    /**
     *
     *
     * <pre>
     * Greater than or equal
     * </pre>
     *
     * <code>GREATER_THAN_OR_EQUAL = 10;</code>
     */
    public static final int GREATER_THAN_OR_EQUAL_VALUE = 10;
    /**
     *
     *
     * <pre>
     * Less than
     * </pre>
     *
     * <code>LESS_THAN = 11;</code>
     */
    public static final int LESS_THAN_VALUE = 11;
    /**
     *
     *
     * <pre>
     * Less than or equal
     * </pre>
     *
     * <code>LESS_THAN_OR_EQUAL = 12;</code>
     */
    public static final int LESS_THAN_OR_EQUAL_VALUE = 12;
    /**
     *
     *
     * <pre>
     * regular expression. Only supported for web streams.
     * </pre>
     *
     * <code>REGULAR_EXPRESSION = 13;</code>
     */
    public static final int REGULAR_EXPRESSION_VALUE = 13;
    /**
     *
     *
     * <pre>
     * regular expression, case insensitive. Only supported for web streams.
     * </pre>
     *
     * <code>REGULAR_EXPRESSION_CASE_INSENSITIVE = 14;</code>
     */
    public static final int REGULAR_EXPRESSION_CASE_INSENSITIVE_VALUE = 14;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ComparisonType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ComparisonType forNumber(int value) {
      switch (value) {
        case 0:
          return COMPARISON_TYPE_UNSPECIFIED;
        case 1:
          return EQUALS;
        case 2:
          return EQUALS_CASE_INSENSITIVE;
        case 3:
          return CONTAINS;
        case 4:
          return CONTAINS_CASE_INSENSITIVE;
        case 5:
          return STARTS_WITH;
        case 6:
          return STARTS_WITH_CASE_INSENSITIVE;
        case 7:
          return ENDS_WITH;
        case 8:
          return ENDS_WITH_CASE_INSENSITIVE;
        case 9:
          return GREATER_THAN;
        case 10:
          return GREATER_THAN_OR_EQUAL;
        case 11:
          return LESS_THAN;
        case 12:
          return LESS_THAN_OR_EQUAL;
        case 13:
          return REGULAR_EXPRESSION;
        case 14:
          return REGULAR_EXPRESSION_CASE_INSENSITIVE;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ComparisonType> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ComparisonType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ComparisonType>() {
          public ComparisonType findValueByNumber(int number) {
            return ComparisonType.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.analytics.admin.v1alpha.MatchingCondition.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final ComparisonType[] VALUES = values();

    public static ComparisonType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ComparisonType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.analytics.admin.v1alpha.MatchingCondition.ComparisonType)
  }

  public static final int FIELD_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object field_ = "";
  /**
   *
   *
   * <pre>
   * Required. The name of the field that is compared against for the condition.
   * If 'event_name' is specified this condition will apply to the name of the
   * event.  Otherwise the condition will apply to a parameter with the
   * specified name.
   *
   * This value cannot contain spaces.
   * </pre>
   *
   * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The field.
   */
  @java.lang.Override
  public java.lang.String getField() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      field_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. The name of the field that is compared against for the condition.
   * If 'event_name' is specified this condition will apply to the name of the
   * event.  Otherwise the condition will apply to a parameter with the
   * specified name.
   *
   * This value cannot contain spaces.
   * </pre>
   *
   * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for field.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getFieldBytes() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      field_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COMPARISON_TYPE_FIELD_NUMBER = 2;
  private int comparisonType_ = 0;
  /**
   *
   *
   * <pre>
   * Required. The type of comparison to be applied to the value.
   * </pre>
   *
   * <code>
   * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The enum numeric value on the wire for comparisonType.
   */
  @java.lang.Override
  public int getComparisonTypeValue() {
    return comparisonType_;
  }
  /**
   *
   *
   * <pre>
   * Required. The type of comparison to be applied to the value.
   * </pre>
   *
   * <code>
   * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The comparisonType.
   */
  @java.lang.Override
  public com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType getComparisonType() {
    com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType result =
        com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType.forNumber(
            comparisonType_);
    return result == null
        ? com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType.UNRECOGNIZED
        : result;
  }

  public static final int VALUE_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object value_ = "";
  /**
   *
   *
   * <pre>
   * Required. The value being compared against for this condition.  The runtime
   * implementation may perform type coercion of this value to evaluate this
   * condition based on the type of the parameter value.
   * </pre>
   *
   * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The value.
   */
  @java.lang.Override
  public java.lang.String getValue() {
    java.lang.Object ref = value_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      value_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. The value being compared against for this condition.  The runtime
   * implementation may perform type coercion of this value to evaluate this
   * condition based on the type of the parameter value.
   * </pre>
   *
   * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for value.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getValueBytes() {
    java.lang.Object ref = value_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      value_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NEGATED_FIELD_NUMBER = 4;
  private boolean negated_ = false;
  /**
   *
   *
   * <pre>
   * Whether or not the result of the comparison should be negated. For example,
   * if `negated` is true, then 'equals' comparisons would function as 'not
   * equals'.
   * </pre>
   *
   * <code>bool negated = 4;</code>
   *
   * @return The negated.
   */
  @java.lang.Override
  public boolean getNegated() {
    return negated_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, field_);
    }
    if (comparisonType_
        != com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType
            .COMPARISON_TYPE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(2, comparisonType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, value_);
    }
    if (negated_ != false) {
      output.writeBool(4, negated_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, field_);
    }
    if (comparisonType_
        != com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType
            .COMPARISON_TYPE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, comparisonType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, value_);
    }
    if (negated_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(4, negated_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.analytics.admin.v1alpha.MatchingCondition)) {
      return super.equals(obj);
    }
    com.google.analytics.admin.v1alpha.MatchingCondition other =
        (com.google.analytics.admin.v1alpha.MatchingCondition) obj;

    if (!getField().equals(other.getField())) return false;
    if (comparisonType_ != other.comparisonType_) return false;
    if (!getValue().equals(other.getValue())) return false;
    if (getNegated() != other.getNegated()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FIELD_FIELD_NUMBER;
    hash = (53 * hash) + getField().hashCode();
    hash = (37 * hash) + COMPARISON_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + comparisonType_;
    hash = (37 * hash) + VALUE_FIELD_NUMBER;
    hash = (53 * hash) + getValue().hashCode();
    hash = (37 * hash) + NEGATED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getNegated());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.analytics.admin.v1alpha.MatchingCondition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Defines a condition for when an Event Edit or Event Creation rule applies to
   * an event.
   * </pre>
   *
   * Protobuf type {@code google.analytics.admin.v1alpha.MatchingCondition}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.analytics.admin.v1alpha.MatchingCondition)
      com.google.analytics.admin.v1alpha.MatchingConditionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.analytics.admin.v1alpha.EventCreateAndEdit
          .internal_static_google_analytics_admin_v1alpha_MatchingCondition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.analytics.admin.v1alpha.EventCreateAndEdit
          .internal_static_google_analytics_admin_v1alpha_MatchingCondition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.analytics.admin.v1alpha.MatchingCondition.class,
              com.google.analytics.admin.v1alpha.MatchingCondition.Builder.class);
    }

    // Construct using com.google.analytics.admin.v1alpha.MatchingCondition.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      field_ = "";
      comparisonType_ = 0;
      value_ = "";
      negated_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.analytics.admin.v1alpha.EventCreateAndEdit
          .internal_static_google_analytics_admin_v1alpha_MatchingCondition_descriptor;
    }

    @java.lang.Override
    public com.google.analytics.admin.v1alpha.MatchingCondition getDefaultInstanceForType() {
      return com.google.analytics.admin.v1alpha.MatchingCondition.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.analytics.admin.v1alpha.MatchingCondition build() {
      com.google.analytics.admin.v1alpha.MatchingCondition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.analytics.admin.v1alpha.MatchingCondition buildPartial() {
      com.google.analytics.admin.v1alpha.MatchingCondition result =
          new com.google.analytics.admin.v1alpha.MatchingCondition(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.analytics.admin.v1alpha.MatchingCondition result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.field_ = field_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.comparisonType_ = comparisonType_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.value_ = value_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.negated_ = negated_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.analytics.admin.v1alpha.MatchingCondition) {
        return mergeFrom((com.google.analytics.admin.v1alpha.MatchingCondition) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.analytics.admin.v1alpha.MatchingCondition other) {
      if (other == com.google.analytics.admin.v1alpha.MatchingCondition.getDefaultInstance())
        return this;
      if (!other.getField().isEmpty()) {
        field_ = other.field_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.comparisonType_ != 0) {
        setComparisonTypeValue(other.getComparisonTypeValue());
      }
      if (!other.getValue().isEmpty()) {
        value_ = other.value_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.getNegated() != false) {
        setNegated(other.getNegated());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                field_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 16:
              {
                comparisonType_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
            case 26:
              {
                value_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 32:
              {
                negated_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object field_ = "";
    /**
     *
     *
     * <pre>
     * Required. The name of the field that is compared against for the condition.
     * If 'event_name' is specified this condition will apply to the name of the
     * event.  Otherwise the condition will apply to a parameter with the
     * specified name.
     *
     * This value cannot contain spaces.
     * </pre>
     *
     * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The field.
     */
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        field_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The name of the field that is compared against for the condition.
     * If 'event_name' is specified this condition will apply to the name of the
     * event.  Otherwise the condition will apply to a parameter with the
     * specified name.
     *
     * This value cannot contain spaces.
     * </pre>
     *
     * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The bytes for field.
     */
    public com.google.protobuf.ByteString getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The name of the field that is compared against for the condition.
     * If 'event_name' is specified this condition will apply to the name of the
     * event.  Otherwise the condition will apply to a parameter with the
     * specified name.
     *
     * This value cannot contain spaces.
     * </pre>
     *
     * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The field to set.
     * @return This builder for chaining.
     */
    public Builder setField(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      field_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The name of the field that is compared against for the condition.
     * If 'event_name' is specified this condition will apply to the name of the
     * event.  Otherwise the condition will apply to a parameter with the
     * specified name.
     *
     * This value cannot contain spaces.
     * </pre>
     *
     * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearField() {
      field_ = getDefaultInstance().getField();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The name of the field that is compared against for the condition.
     * If 'event_name' is specified this condition will apply to the name of the
     * event.  Otherwise the condition will apply to a parameter with the
     * specified name.
     *
     * This value cannot contain spaces.
     * </pre>
     *
     * <code>string field = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The bytes for field to set.
     * @return This builder for chaining.
     */
    public Builder setFieldBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      field_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int comparisonType_ = 0;
    /**
     *
     *
     * <pre>
     * Required. The type of comparison to be applied to the value.
     * </pre>
     *
     * <code>
     * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The enum numeric value on the wire for comparisonType.
     */
    @java.lang.Override
    public int getComparisonTypeValue() {
      return comparisonType_;
    }
    /**
     *
     *
     * <pre>
     * Required. The type of comparison to be applied to the value.
     * </pre>
     *
     * <code>
     * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The enum numeric value on the wire for comparisonType to set.
     * @return This builder for chaining.
     */
    public Builder setComparisonTypeValue(int value) {
      comparisonType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The type of comparison to be applied to the value.
     * </pre>
     *
     * <code>
     * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The comparisonType.
     */
    @java.lang.Override
    public com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType getComparisonType() {
      com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType result =
          com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType.forNumber(
              comparisonType_);
      return result == null
          ? com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Required. The type of comparison to be applied to the value.
     * </pre>
     *
     * <code>
     * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @param value The comparisonType to set.
     * @return This builder for chaining.
     */
    public Builder setComparisonType(
        com.google.analytics.admin.v1alpha.MatchingCondition.ComparisonType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      comparisonType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The type of comparison to be applied to the value.
     * </pre>
     *
     * <code>
     * .google.analytics.admin.v1alpha.MatchingCondition.ComparisonType comparison_type = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearComparisonType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      comparisonType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object value_ = "";
    /**
     *
     *
     * <pre>
     * Required. The value being compared against for this condition.  The runtime
     * implementation may perform type coercion of this value to evaluate this
     * condition based on the type of the parameter value.
     * </pre>
     *
     * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The value.
     */
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The value being compared against for this condition.  The runtime
     * implementation may perform type coercion of this value to evaluate this
     * condition based on the type of the parameter value.
     * </pre>
     *
     * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The bytes for value.
     */
    public com.google.protobuf.ByteString getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. The value being compared against for this condition.  The runtime
     * implementation may perform type coercion of this value to evaluate this
     * condition based on the type of the parameter value.
     * </pre>
     *
     * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The value to set.
     * @return This builder for chaining.
     */
    public Builder setValue(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      value_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The value being compared against for this condition.  The runtime
     * implementation may perform type coercion of this value to evaluate this
     * condition based on the type of the parameter value.
     * </pre>
     *
     * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearValue() {
      value_ = getDefaultInstance().getValue();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The value being compared against for this condition.  The runtime
     * implementation may perform type coercion of this value to evaluate this
     * condition based on the type of the parameter value.
     * </pre>
     *
     * <code>string value = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The bytes for value to set.
     * @return This builder for chaining.
     */
    public Builder setValueBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      value_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private boolean negated_;
    /**
     *
     *
     * <pre>
     * Whether or not the result of the comparison should be negated. For example,
     * if `negated` is true, then 'equals' comparisons would function as 'not
     * equals'.
     * </pre>
     *
     * <code>bool negated = 4;</code>
     *
     * @return The negated.
     */
    @java.lang.Override
    public boolean getNegated() {
      return negated_;
    }
    /**
     *
     *
     * <pre>
     * Whether or not the result of the comparison should be negated. For example,
     * if `negated` is true, then 'equals' comparisons would function as 'not
     * equals'.
     * </pre>
     *
     * <code>bool negated = 4;</code>
     *
     * @param value The negated to set.
     * @return This builder for chaining.
     */
    public Builder setNegated(boolean value) {

      negated_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether or not the result of the comparison should be negated. For example,
     * if `negated` is true, then 'equals' comparisons would function as 'not
     * equals'.
     * </pre>
     *
     * <code>bool negated = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearNegated() {
      bitField0_ = (bitField0_ & ~0x00000008);
      negated_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.analytics.admin.v1alpha.MatchingCondition)
  }

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.MatchingCondition)
  private static final com.google.analytics.admin.v1alpha.MatchingCondition DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.analytics.admin.v1alpha.MatchingCondition();
  }

  public static com.google.analytics.admin.v1alpha.MatchingCondition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MatchingCondition> PARSER =
      new com.google.protobuf.AbstractParser<MatchingCondition>() {
        @java.lang.Override
        public MatchingCondition parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<MatchingCondition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MatchingCondition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.analytics.admin.v1alpha.MatchingCondition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
