/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/routing/v2/routes_service.proto

// Protobuf Java Version: 3.25.5
package com.google.maps.routing.v2;

public interface ComputeRoutesResponseOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.maps.routing.v2.ComputeRoutesResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Contains an array of computed routes (up to three) when you specify
   * `compute_alternatives_routes`, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   * </pre>
   *
   * <code>repeated .google.maps.routing.v2.Route routes = 1;</code>
   */
  java.util.List<com.google.maps.routing.v2.Route> getRoutesList();
  /**
   *
   *
   * <pre>
   * Contains an array of computed routes (up to three) when you specify
   * `compute_alternatives_routes`, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   * </pre>
   *
   * <code>repeated .google.maps.routing.v2.Route routes = 1;</code>
   */
  com.google.maps.routing.v2.Route getRoutes(int index);
  /**
   *
   *
   * <pre>
   * Contains an array of computed routes (up to three) when you specify
   * `compute_alternatives_routes`, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   * </pre>
   *
   * <code>repeated .google.maps.routing.v2.Route routes = 1;</code>
   */
  int getRoutesCount();
  /**
   *
   *
   * <pre>
   * Contains an array of computed routes (up to three) when you specify
   * `compute_alternatives_routes`, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   * </pre>
   *
   * <code>repeated .google.maps.routing.v2.Route routes = 1;</code>
   */
  java.util.List<? extends com.google.maps.routing.v2.RouteOrBuilder> getRoutesOrBuilderList();
  /**
   *
   *
   * <pre>
   * Contains an array of computed routes (up to three) when you specify
   * `compute_alternatives_routes`, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   * </pre>
   *
   * <code>repeated .google.maps.routing.v2.Route routes = 1;</code>
   */
  com.google.maps.routing.v2.RouteOrBuilder getRoutesOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * In some cases when the server is not able to compute the route results with
   * all of the input preferences, it may fallback to using a different way of
   * computation. When fallback mode is used, this field contains detailed info
   * about the fallback response. Otherwise this field is unset.
   * </pre>
   *
   * <code>.google.maps.routing.v2.FallbackInfo fallback_info = 2;</code>
   *
   * @return Whether the fallbackInfo field is set.
   */
  boolean hasFallbackInfo();
  /**
   *
   *
   * <pre>
   * In some cases when the server is not able to compute the route results with
   * all of the input preferences, it may fallback to using a different way of
   * computation. When fallback mode is used, this field contains detailed info
   * about the fallback response. Otherwise this field is unset.
   * </pre>
   *
   * <code>.google.maps.routing.v2.FallbackInfo fallback_info = 2;</code>
   *
   * @return The fallbackInfo.
   */
  com.google.maps.routing.v2.FallbackInfo getFallbackInfo();
  /**
   *
   *
   * <pre>
   * In some cases when the server is not able to compute the route results with
   * all of the input preferences, it may fallback to using a different way of
   * computation. When fallback mode is used, this field contains detailed info
   * about the fallback response. Otherwise this field is unset.
   * </pre>
   *
   * <code>.google.maps.routing.v2.FallbackInfo fallback_info = 2;</code>
   */
  com.google.maps.routing.v2.FallbackInfoOrBuilder getFallbackInfoOrBuilder();

  /**
   *
   *
   * <pre>
   * Contains geocoding response info for waypoints specified as addresses.
   * </pre>
   *
   * <code>.google.maps.routing.v2.GeocodingResults geocoding_results = 3;</code>
   *
   * @return Whether the geocodingResults field is set.
   */
  boolean hasGeocodingResults();
  /**
   *
   *
   * <pre>
   * Contains geocoding response info for waypoints specified as addresses.
   * </pre>
   *
   * <code>.google.maps.routing.v2.GeocodingResults geocoding_results = 3;</code>
   *
   * @return The geocodingResults.
   */
  com.google.maps.routing.v2.GeocodingResults getGeocodingResults();
  /**
   *
   *
   * <pre>
   * Contains geocoding response info for waypoints specified as addresses.
   * </pre>
   *
   * <code>.google.maps.routing.v2.GeocodingResults geocoding_results = 3;</code>
   */
  com.google.maps.routing.v2.GeocodingResultsOrBuilder getGeocodingResultsOrBuilder();
}
