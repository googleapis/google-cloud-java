/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/developerconnect/v1/developer_connect.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.developerconnect.v1;

/**
 *
 *
 * <pre>
 * SystemProvider is a list of providers that are owned by Developer Connect.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.developerconnect.v1.SystemProvider}
 */
public enum SystemProvider implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * No system provider specified.
   * </pre>
   *
   * <code>SYSTEM_PROVIDER_UNSPECIFIED = 0;</code>
   */
  SYSTEM_PROVIDER_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * GitHub provider.
   * Scopes can be found at
   * https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes
   * </pre>
   *
   * <code>GITHUB = 1;</code>
   */
  GITHUB(1),
  /**
   *
   *
   * <pre>
   * GitLab provider.
   * Scopes can be found at
   * https://docs.gitlab.com/user/profile/personal_access_tokens/#personal-access-token-scopes
   * </pre>
   *
   * <code>GITLAB = 2;</code>
   */
  GITLAB(2),
  /**
   *
   *
   * <pre>
   * Google provider.
   * Recommended scopes:
   *   "https://www.googleapis.com/auth/drive.readonly",
   *   "https://www.googleapis.com/auth/documents.readonly"
   * </pre>
   *
   * <code>GOOGLE = 3;</code>
   */
  GOOGLE(3),
  /**
   *
   *
   * <pre>
   * Sentry provider.
   * Scopes can be found at
   * https://docs.sentry.io/api/permissions/
   * </pre>
   *
   * <code>SENTRY = 4;</code>
   */
  SENTRY(4),
  /**
   *
   *
   * <pre>
   * Rovo provider.
   * Must select the "rovo" scope.
   * </pre>
   *
   * <code>ROVO = 5;</code>
   */
  ROVO(5),
  /**
   *
   *
   * <pre>
   * New Relic provider.
   * No scopes are allowed.
   * </pre>
   *
   * <code>NEW_RELIC = 6;</code>
   */
  NEW_RELIC(6),
  /**
   *
   *
   * <pre>
   * Datastax provider.
   * No scopes are allowed.
   * </pre>
   *
   * <code>DATASTAX = 7;</code>
   */
  DATASTAX(7),
  /**
   *
   *
   * <pre>
   * Dynatrace provider.
   * </pre>
   *
   * <code>DYNATRACE = 8;</code>
   */
  DYNATRACE(8),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * No system provider specified.
   * </pre>
   *
   * <code>SYSTEM_PROVIDER_UNSPECIFIED = 0;</code>
   */
  public static final int SYSTEM_PROVIDER_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * GitHub provider.
   * Scopes can be found at
   * https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes
   * </pre>
   *
   * <code>GITHUB = 1;</code>
   */
  public static final int GITHUB_VALUE = 1;

  /**
   *
   *
   * <pre>
   * GitLab provider.
   * Scopes can be found at
   * https://docs.gitlab.com/user/profile/personal_access_tokens/#personal-access-token-scopes
   * </pre>
   *
   * <code>GITLAB = 2;</code>
   */
  public static final int GITLAB_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Google provider.
   * Recommended scopes:
   *   "https://www.googleapis.com/auth/drive.readonly",
   *   "https://www.googleapis.com/auth/documents.readonly"
   * </pre>
   *
   * <code>GOOGLE = 3;</code>
   */
  public static final int GOOGLE_VALUE = 3;

  /**
   *
   *
   * <pre>
   * Sentry provider.
   * Scopes can be found at
   * https://docs.sentry.io/api/permissions/
   * </pre>
   *
   * <code>SENTRY = 4;</code>
   */
  public static final int SENTRY_VALUE = 4;

  /**
   *
   *
   * <pre>
   * Rovo provider.
   * Must select the "rovo" scope.
   * </pre>
   *
   * <code>ROVO = 5;</code>
   */
  public static final int ROVO_VALUE = 5;

  /**
   *
   *
   * <pre>
   * New Relic provider.
   * No scopes are allowed.
   * </pre>
   *
   * <code>NEW_RELIC = 6;</code>
   */
  public static final int NEW_RELIC_VALUE = 6;

  /**
   *
   *
   * <pre>
   * Datastax provider.
   * No scopes are allowed.
   * </pre>
   *
   * <code>DATASTAX = 7;</code>
   */
  public static final int DATASTAX_VALUE = 7;

  /**
   *
   *
   * <pre>
   * Dynatrace provider.
   * </pre>
   *
   * <code>DYNATRACE = 8;</code>
   */
  public static final int DYNATRACE_VALUE = 8;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SystemProvider valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SystemProvider forNumber(int value) {
    switch (value) {
      case 0:
        return SYSTEM_PROVIDER_UNSPECIFIED;
      case 1:
        return GITHUB;
      case 2:
        return GITLAB;
      case 3:
        return GOOGLE;
      case 4:
        return SENTRY;
      case 5:
        return ROVO;
      case 6:
        return NEW_RELIC;
      case 7:
        return DATASTAX;
      case 8:
        return DYNATRACE;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SystemProvider> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<SystemProvider> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<SystemProvider>() {
        public SystemProvider findValueByNumber(int number) {
          return SystemProvider.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.developerconnect.v1.DeveloperConnectProto.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final SystemProvider[] VALUES = values();

  public static SystemProvider valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SystemProvider(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.developerconnect.v1.SystemProvider)
}
