/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/developerconnect/v1/developer_connect.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.developerconnect.v1;

/**
 *
 *
 * <pre>
 * Configuration for connections to github.com.
 * </pre>
 *
 * Protobuf type {@code google.cloud.developerconnect.v1.GitHubConfig}
 */
public final class GitHubConfig extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.developerconnect.v1.GitHubConfig)
    GitHubConfigOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use GitHubConfig.newBuilder() to construct.
  private GitHubConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private GitHubConfig() {
    githubApp_ = 0;
    installationUri_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new GitHubConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.developerconnect.v1.DeveloperConnectProto
        .internal_static_google_cloud_developerconnect_v1_GitHubConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.developerconnect.v1.DeveloperConnectProto
        .internal_static_google_cloud_developerconnect_v1_GitHubConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.developerconnect.v1.GitHubConfig.class,
            com.google.cloud.developerconnect.v1.GitHubConfig.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Represents the various GitHub Applications that can be installed to a
   * GitHub user or organization and used with Developer Connect.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.developerconnect.v1.GitHubConfig.GitHubApp}
   */
  public enum GitHubApp implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * GitHub App not specified.
     * </pre>
     *
     * <code>GIT_HUB_APP_UNSPECIFIED = 0;</code>
     */
    GIT_HUB_APP_UNSPECIFIED(0),
    /**
     *
     *
     * <pre>
     * The Developer Connect GitHub Application.
     * </pre>
     *
     * <code>DEVELOPER_CONNECT = 1;</code>
     */
    DEVELOPER_CONNECT(1),
    /**
     *
     *
     * <pre>
     * The Firebase GitHub Application.
     * </pre>
     *
     * <code>FIREBASE = 2;</code>
     */
    FIREBASE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * GitHub App not specified.
     * </pre>
     *
     * <code>GIT_HUB_APP_UNSPECIFIED = 0;</code>
     */
    public static final int GIT_HUB_APP_UNSPECIFIED_VALUE = 0;
    /**
     *
     *
     * <pre>
     * The Developer Connect GitHub Application.
     * </pre>
     *
     * <code>DEVELOPER_CONNECT = 1;</code>
     */
    public static final int DEVELOPER_CONNECT_VALUE = 1;
    /**
     *
     *
     * <pre>
     * The Firebase GitHub Application.
     * </pre>
     *
     * <code>FIREBASE = 2;</code>
     */
    public static final int FIREBASE_VALUE = 2;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GitHubApp valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GitHubApp forNumber(int value) {
      switch (value) {
        case 0:
          return GIT_HUB_APP_UNSPECIFIED;
        case 1:
          return DEVELOPER_CONNECT;
        case 2:
          return FIREBASE;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GitHubApp> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<GitHubApp> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GitHubApp>() {
          public GitHubApp findValueByNumber(int number) {
            return GitHubApp.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.cloud.developerconnect.v1.GitHubConfig.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final GitHubApp[] VALUES = values();

    public static GitHubApp valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GitHubApp(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.developerconnect.v1.GitHubConfig.GitHubApp)
  }

  private int bitField0_;
  public static final int GITHUB_APP_FIELD_NUMBER = 1;
  private int githubApp_ = 0;
  /**
   *
   *
   * <pre>
   * Required. Immutable. The GitHub Application that was installed to the
   * GitHub user or organization.
   * </pre>
   *
   * <code>
   * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
   * </code>
   *
   * @return The enum numeric value on the wire for githubApp.
   */
  @java.lang.Override
  public int getGithubAppValue() {
    return githubApp_;
  }
  /**
   *
   *
   * <pre>
   * Required. Immutable. The GitHub Application that was installed to the
   * GitHub user or organization.
   * </pre>
   *
   * <code>
   * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
   * </code>
   *
   * @return The githubApp.
   */
  @java.lang.Override
  public com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp getGithubApp() {
    com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp result =
        com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.forNumber(githubApp_);
    return result == null
        ? com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.UNRECOGNIZED
        : result;
  }

  public static final int AUTHORIZER_CREDENTIAL_FIELD_NUMBER = 2;
  private com.google.cloud.developerconnect.v1.OAuthCredential authorizerCredential_;
  /**
   *
   *
   * <pre>
   * Optional. OAuth credential of the account that authorized the GitHub App.
   * It is recommended to use a robot account instead of a human user account.
   * The OAuth token must be tied to the GitHub App of this config.
   * </pre>
   *
   * <code>
   * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the authorizerCredential field is set.
   */
  @java.lang.Override
  public boolean hasAuthorizerCredential() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Optional. OAuth credential of the account that authorized the GitHub App.
   * It is recommended to use a robot account instead of a human user account.
   * The OAuth token must be tied to the GitHub App of this config.
   * </pre>
   *
   * <code>
   * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The authorizerCredential.
   */
  @java.lang.Override
  public com.google.cloud.developerconnect.v1.OAuthCredential getAuthorizerCredential() {
    return authorizerCredential_ == null
        ? com.google.cloud.developerconnect.v1.OAuthCredential.getDefaultInstance()
        : authorizerCredential_;
  }
  /**
   *
   *
   * <pre>
   * Optional. OAuth credential of the account that authorized the GitHub App.
   * It is recommended to use a robot account instead of a human user account.
   * The OAuth token must be tied to the GitHub App of this config.
   * </pre>
   *
   * <code>
   * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.developerconnect.v1.OAuthCredentialOrBuilder
      getAuthorizerCredentialOrBuilder() {
    return authorizerCredential_ == null
        ? com.google.cloud.developerconnect.v1.OAuthCredential.getDefaultInstance()
        : authorizerCredential_;
  }

  public static final int APP_INSTALLATION_ID_FIELD_NUMBER = 3;
  private long appInstallationId_ = 0L;
  /**
   *
   *
   * <pre>
   * Optional. GitHub App installation id.
   * </pre>
   *
   * <code>int64 app_installation_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The appInstallationId.
   */
  @java.lang.Override
  public long getAppInstallationId() {
    return appInstallationId_;
  }

  public static final int INSTALLATION_URI_FIELD_NUMBER = 4;

  @SuppressWarnings("serial")
  private volatile java.lang.Object installationUri_ = "";
  /**
   *
   *
   * <pre>
   * Output only. The URI to navigate to in order to manage the installation
   * associated with this GitHubConfig.
   * </pre>
   *
   * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The installationUri.
   */
  @java.lang.Override
  public java.lang.String getInstallationUri() {
    java.lang.Object ref = installationUri_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      installationUri_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Output only. The URI to navigate to in order to manage the installation
   * associated with this GitHubConfig.
   * </pre>
   *
   * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for installationUri.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getInstallationUriBytes() {
    java.lang.Object ref = installationUri_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      installationUri_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (githubApp_
        != com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.GIT_HUB_APP_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(1, githubApp_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getAuthorizerCredential());
    }
    if (appInstallationId_ != 0L) {
      output.writeInt64(3, appInstallationId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(installationUri_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, installationUri_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (githubApp_
        != com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.GIT_HUB_APP_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, githubApp_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(2, getAuthorizerCredential());
    }
    if (appInstallationId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeInt64Size(3, appInstallationId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(installationUri_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, installationUri_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.developerconnect.v1.GitHubConfig)) {
      return super.equals(obj);
    }
    com.google.cloud.developerconnect.v1.GitHubConfig other =
        (com.google.cloud.developerconnect.v1.GitHubConfig) obj;

    if (githubApp_ != other.githubApp_) return false;
    if (hasAuthorizerCredential() != other.hasAuthorizerCredential()) return false;
    if (hasAuthorizerCredential()) {
      if (!getAuthorizerCredential().equals(other.getAuthorizerCredential())) return false;
    }
    if (getAppInstallationId() != other.getAppInstallationId()) return false;
    if (!getInstallationUri().equals(other.getInstallationUri())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GITHUB_APP_FIELD_NUMBER;
    hash = (53 * hash) + githubApp_;
    if (hasAuthorizerCredential()) {
      hash = (37 * hash) + AUTHORIZER_CREDENTIAL_FIELD_NUMBER;
      hash = (53 * hash) + getAuthorizerCredential().hashCode();
    }
    hash = (37 * hash) + APP_INSTALLATION_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getAppInstallationId());
    hash = (37 * hash) + INSTALLATION_URI_FIELD_NUMBER;
    hash = (53 * hash) + getInstallationUri().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.developerconnect.v1.GitHubConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Configuration for connections to github.com.
   * </pre>
   *
   * Protobuf type {@code google.cloud.developerconnect.v1.GitHubConfig}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.developerconnect.v1.GitHubConfig)
      com.google.cloud.developerconnect.v1.GitHubConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.developerconnect.v1.DeveloperConnectProto
          .internal_static_google_cloud_developerconnect_v1_GitHubConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.developerconnect.v1.DeveloperConnectProto
          .internal_static_google_cloud_developerconnect_v1_GitHubConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.developerconnect.v1.GitHubConfig.class,
              com.google.cloud.developerconnect.v1.GitHubConfig.Builder.class);
    }

    // Construct using com.google.cloud.developerconnect.v1.GitHubConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getAuthorizerCredentialFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      githubApp_ = 0;
      authorizerCredential_ = null;
      if (authorizerCredentialBuilder_ != null) {
        authorizerCredentialBuilder_.dispose();
        authorizerCredentialBuilder_ = null;
      }
      appInstallationId_ = 0L;
      installationUri_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.developerconnect.v1.DeveloperConnectProto
          .internal_static_google_cloud_developerconnect_v1_GitHubConfig_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.developerconnect.v1.GitHubConfig getDefaultInstanceForType() {
      return com.google.cloud.developerconnect.v1.GitHubConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.developerconnect.v1.GitHubConfig build() {
      com.google.cloud.developerconnect.v1.GitHubConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.developerconnect.v1.GitHubConfig buildPartial() {
      com.google.cloud.developerconnect.v1.GitHubConfig result =
          new com.google.cloud.developerconnect.v1.GitHubConfig(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.developerconnect.v1.GitHubConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.githubApp_ = githubApp_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.authorizerCredential_ =
            authorizerCredentialBuilder_ == null
                ? authorizerCredential_
                : authorizerCredentialBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.appInstallationId_ = appInstallationId_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.installationUri_ = installationUri_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.developerconnect.v1.GitHubConfig) {
        return mergeFrom((com.google.cloud.developerconnect.v1.GitHubConfig) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.developerconnect.v1.GitHubConfig other) {
      if (other == com.google.cloud.developerconnect.v1.GitHubConfig.getDefaultInstance())
        return this;
      if (other.githubApp_ != 0) {
        setGithubAppValue(other.getGithubAppValue());
      }
      if (other.hasAuthorizerCredential()) {
        mergeAuthorizerCredential(other.getAuthorizerCredential());
      }
      if (other.getAppInstallationId() != 0L) {
        setAppInstallationId(other.getAppInstallationId());
      }
      if (!other.getInstallationUri().isEmpty()) {
        installationUri_ = other.installationUri_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                githubApp_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 18:
              {
                input.readMessage(
                    getAuthorizerCredentialFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 24:
              {
                appInstallationId_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
            case 34:
              {
                installationUri_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private int githubApp_ = 0;
    /**
     *
     *
     * <pre>
     * Required. Immutable. The GitHub Application that was installed to the
     * GitHub user or organization.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
     * </code>
     *
     * @return The enum numeric value on the wire for githubApp.
     */
    @java.lang.Override
    public int getGithubAppValue() {
      return githubApp_;
    }
    /**
     *
     *
     * <pre>
     * Required. Immutable. The GitHub Application that was installed to the
     * GitHub user or organization.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
     * </code>
     *
     * @param value The enum numeric value on the wire for githubApp to set.
     * @return This builder for chaining.
     */
    public Builder setGithubAppValue(int value) {
      githubApp_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Immutable. The GitHub Application that was installed to the
     * GitHub user or organization.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
     * </code>
     *
     * @return The githubApp.
     */
    @java.lang.Override
    public com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp getGithubApp() {
      com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp result =
          com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.forNumber(githubApp_);
      return result == null
          ? com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Required. Immutable. The GitHub Application that was installed to the
     * GitHub user or organization.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
     * </code>
     *
     * @param value The githubApp to set.
     * @return This builder for chaining.
     */
    public Builder setGithubApp(com.google.cloud.developerconnect.v1.GitHubConfig.GitHubApp value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      githubApp_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Immutable. The GitHub Application that was installed to the
     * GitHub user or organization.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearGithubApp() {
      bitField0_ = (bitField0_ & ~0x00000001);
      githubApp_ = 0;
      onChanged();
      return this;
    }

    private com.google.cloud.developerconnect.v1.OAuthCredential authorizerCredential_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.developerconnect.v1.OAuthCredential,
            com.google.cloud.developerconnect.v1.OAuthCredential.Builder,
            com.google.cloud.developerconnect.v1.OAuthCredentialOrBuilder>
        authorizerCredentialBuilder_;
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the authorizerCredential field is set.
     */
    public boolean hasAuthorizerCredential() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The authorizerCredential.
     */
    public com.google.cloud.developerconnect.v1.OAuthCredential getAuthorizerCredential() {
      if (authorizerCredentialBuilder_ == null) {
        return authorizerCredential_ == null
            ? com.google.cloud.developerconnect.v1.OAuthCredential.getDefaultInstance()
            : authorizerCredential_;
      } else {
        return authorizerCredentialBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setAuthorizerCredential(
        com.google.cloud.developerconnect.v1.OAuthCredential value) {
      if (authorizerCredentialBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        authorizerCredential_ = value;
      } else {
        authorizerCredentialBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setAuthorizerCredential(
        com.google.cloud.developerconnect.v1.OAuthCredential.Builder builderForValue) {
      if (authorizerCredentialBuilder_ == null) {
        authorizerCredential_ = builderForValue.build();
      } else {
        authorizerCredentialBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeAuthorizerCredential(
        com.google.cloud.developerconnect.v1.OAuthCredential value) {
      if (authorizerCredentialBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)
            && authorizerCredential_ != null
            && authorizerCredential_
                != com.google.cloud.developerconnect.v1.OAuthCredential.getDefaultInstance()) {
          getAuthorizerCredentialBuilder().mergeFrom(value);
        } else {
          authorizerCredential_ = value;
        }
      } else {
        authorizerCredentialBuilder_.mergeFrom(value);
      }
      if (authorizerCredential_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearAuthorizerCredential() {
      bitField0_ = (bitField0_ & ~0x00000002);
      authorizerCredential_ = null;
      if (authorizerCredentialBuilder_ != null) {
        authorizerCredentialBuilder_.dispose();
        authorizerCredentialBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.developerconnect.v1.OAuthCredential.Builder
        getAuthorizerCredentialBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getAuthorizerCredentialFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.developerconnect.v1.OAuthCredentialOrBuilder
        getAuthorizerCredentialOrBuilder() {
      if (authorizerCredentialBuilder_ != null) {
        return authorizerCredentialBuilder_.getMessageOrBuilder();
      } else {
        return authorizerCredential_ == null
            ? com.google.cloud.developerconnect.v1.OAuthCredential.getDefaultInstance()
            : authorizerCredential_;
      }
    }
    /**
     *
     *
     * <pre>
     * Optional. OAuth credential of the account that authorized the GitHub App.
     * It is recommended to use a robot account instead of a human user account.
     * The OAuth token must be tied to the GitHub App of this config.
     * </pre>
     *
     * <code>
     * .google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.developerconnect.v1.OAuthCredential,
            com.google.cloud.developerconnect.v1.OAuthCredential.Builder,
            com.google.cloud.developerconnect.v1.OAuthCredentialOrBuilder>
        getAuthorizerCredentialFieldBuilder() {
      if (authorizerCredentialBuilder_ == null) {
        authorizerCredentialBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.developerconnect.v1.OAuthCredential,
                com.google.cloud.developerconnect.v1.OAuthCredential.Builder,
                com.google.cloud.developerconnect.v1.OAuthCredentialOrBuilder>(
                getAuthorizerCredential(), getParentForChildren(), isClean());
        authorizerCredential_ = null;
      }
      return authorizerCredentialBuilder_;
    }

    private long appInstallationId_;
    /**
     *
     *
     * <pre>
     * Optional. GitHub App installation id.
     * </pre>
     *
     * <code>int64 app_installation_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The appInstallationId.
     */
    @java.lang.Override
    public long getAppInstallationId() {
      return appInstallationId_;
    }
    /**
     *
     *
     * <pre>
     * Optional. GitHub App installation id.
     * </pre>
     *
     * <code>int64 app_installation_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The appInstallationId to set.
     * @return This builder for chaining.
     */
    public Builder setAppInstallationId(long value) {

      appInstallationId_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. GitHub App installation id.
     * </pre>
     *
     * <code>int64 app_installation_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAppInstallationId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      appInstallationId_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object installationUri_ = "";
    /**
     *
     *
     * <pre>
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * </pre>
     *
     * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The installationUri.
     */
    public java.lang.String getInstallationUri() {
      java.lang.Object ref = installationUri_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        installationUri_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * </pre>
     *
     * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return The bytes for installationUri.
     */
    public com.google.protobuf.ByteString getInstallationUriBytes() {
      java.lang.Object ref = installationUri_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        installationUri_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * </pre>
     *
     * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The installationUri to set.
     * @return This builder for chaining.
     */
    public Builder setInstallationUri(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      installationUri_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * </pre>
     *
     * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearInstallationUri() {
      installationUri_ = getDefaultInstance().getInstallationUri();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. The URI to navigate to in order to manage the installation
     * associated with this GitHubConfig.
     * </pre>
     *
     * <code>string installation_uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     *
     * @param value The bytes for installationUri to set.
     * @return This builder for chaining.
     */
    public Builder setInstallationUriBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      installationUri_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.developerconnect.v1.GitHubConfig)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.developerconnect.v1.GitHubConfig)
  private static final com.google.cloud.developerconnect.v1.GitHubConfig DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.developerconnect.v1.GitHubConfig();
  }

  public static com.google.cloud.developerconnect.v1.GitHubConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GitHubConfig> PARSER =
      new com.google.protobuf.AbstractParser<GitHubConfig>() {
        @java.lang.Override
        public GitHubConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<GitHubConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GitHubConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.developerconnect.v1.GitHubConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
