/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/notebooks/v2/instance.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.notebooks.v2;

/**
 *
 *
 * <pre>
 * The definition of the states of this instance.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.notebooks.v2.State}
 */
public enum State implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * State is not specified.
   * </pre>
   *
   * <code>STATE_UNSPECIFIED = 0;</code>
   */
  STATE_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * The control logic is starting the instance.
   * </pre>
   *
   * <code>STARTING = 1;</code>
   */
  STARTING(1),
  /**
   *
   *
   * <pre>
   * The control logic is installing required frameworks and registering the
   * instance with notebook proxy
   * </pre>
   *
   * <code>PROVISIONING = 2;</code>
   */
  PROVISIONING(2),
  /**
   *
   *
   * <pre>
   * The instance is running.
   * </pre>
   *
   * <code>ACTIVE = 3;</code>
   */
  ACTIVE(3),
  /**
   *
   *
   * <pre>
   * The control logic is stopping the instance.
   * </pre>
   *
   * <code>STOPPING = 4;</code>
   */
  STOPPING(4),
  /**
   *
   *
   * <pre>
   * The instance is stopped.
   * </pre>
   *
   * <code>STOPPED = 5;</code>
   */
  STOPPED(5),
  /**
   *
   *
   * <pre>
   * The instance is deleted.
   * </pre>
   *
   * <code>DELETED = 6;</code>
   */
  DELETED(6),
  /**
   *
   *
   * <pre>
   * The instance is upgrading.
   * </pre>
   *
   * <code>UPGRADING = 7;</code>
   */
  UPGRADING(7),
  /**
   *
   *
   * <pre>
   * The instance is being created.
   * </pre>
   *
   * <code>INITIALIZING = 8;</code>
   */
  INITIALIZING(8),
  /**
   *
   *
   * <pre>
   * The instance is suspending.
   * </pre>
   *
   * <code>SUSPENDING = 9;</code>
   */
  SUSPENDING(9),
  /**
   *
   *
   * <pre>
   * The instance is suspended.
   * </pre>
   *
   * <code>SUSPENDED = 10;</code>
   */
  SUSPENDED(10),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * State is not specified.
   * </pre>
   *
   * <code>STATE_UNSPECIFIED = 0;</code>
   */
  public static final int STATE_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * The control logic is starting the instance.
   * </pre>
   *
   * <code>STARTING = 1;</code>
   */
  public static final int STARTING_VALUE = 1;
  /**
   *
   *
   * <pre>
   * The control logic is installing required frameworks and registering the
   * instance with notebook proxy
   * </pre>
   *
   * <code>PROVISIONING = 2;</code>
   */
  public static final int PROVISIONING_VALUE = 2;
  /**
   *
   *
   * <pre>
   * The instance is running.
   * </pre>
   *
   * <code>ACTIVE = 3;</code>
   */
  public static final int ACTIVE_VALUE = 3;
  /**
   *
   *
   * <pre>
   * The control logic is stopping the instance.
   * </pre>
   *
   * <code>STOPPING = 4;</code>
   */
  public static final int STOPPING_VALUE = 4;
  /**
   *
   *
   * <pre>
   * The instance is stopped.
   * </pre>
   *
   * <code>STOPPED = 5;</code>
   */
  public static final int STOPPED_VALUE = 5;
  /**
   *
   *
   * <pre>
   * The instance is deleted.
   * </pre>
   *
   * <code>DELETED = 6;</code>
   */
  public static final int DELETED_VALUE = 6;
  /**
   *
   *
   * <pre>
   * The instance is upgrading.
   * </pre>
   *
   * <code>UPGRADING = 7;</code>
   */
  public static final int UPGRADING_VALUE = 7;
  /**
   *
   *
   * <pre>
   * The instance is being created.
   * </pre>
   *
   * <code>INITIALIZING = 8;</code>
   */
  public static final int INITIALIZING_VALUE = 8;
  /**
   *
   *
   * <pre>
   * The instance is suspending.
   * </pre>
   *
   * <code>SUSPENDING = 9;</code>
   */
  public static final int SUSPENDING_VALUE = 9;
  /**
   *
   *
   * <pre>
   * The instance is suspended.
   * </pre>
   *
   * <code>SUSPENDED = 10;</code>
   */
  public static final int SUSPENDED_VALUE = 10;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static State valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static State forNumber(int value) {
    switch (value) {
      case 0:
        return STATE_UNSPECIFIED;
      case 1:
        return STARTING;
      case 2:
        return PROVISIONING;
      case 3:
        return ACTIVE;
      case 4:
        return STOPPING;
      case 5:
        return STOPPED;
      case 6:
        return DELETED;
      case 7:
        return UPGRADING;
      case 8:
        return INITIALIZING;
      case 9:
        return SUSPENDING;
      case 10:
        return SUSPENDED;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<State> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<State> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<State>() {
        public State findValueByNumber(int number) {
          return State.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.notebooks.v2.InstanceProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final State[] VALUES = values();

  public static State valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private State(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.notebooks.v2.State)
}
