/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vmmigration/v1/vmmigration.proto

// Protobuf Java Version: 3.25.8
package com.google.cloud.vmmigration.v1;

/**
 *
 *
 * <pre>
 * Details for creation of a Persistent Disk.
 * </pre>
 *
 * Protobuf type {@code google.cloud.vmmigration.v1.PersistentDiskDefaults}
 */
public final class PersistentDiskDefaults extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.vmmigration.v1.PersistentDiskDefaults)
    PersistentDiskDefaultsOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use PersistentDiskDefaults.newBuilder() to construct.
  private PersistentDiskDefaults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private PersistentDiskDefaults() {
    diskName_ = "";
    diskType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new PersistentDiskDefaults();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.vmmigration.v1.VmMigrationProto
        .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 4:
        return internalGetAdditionalLabels();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.vmmigration.v1.VmMigrationProto
        .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.vmmigration.v1.PersistentDiskDefaults.class,
            com.google.cloud.vmmigration.v1.PersistentDiskDefaults.Builder.class);
  }

  private int bitField0_;
  public static final int SOURCE_DISK_NUMBER_FIELD_NUMBER = 1;
  private int sourceDiskNumber_ = 0;

  /**
   *
   *
   * <pre>
   * Required. The ordinal number of the source VM disk.
   * </pre>
   *
   * <code>int32 source_disk_number = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The sourceDiskNumber.
   */
  @java.lang.Override
  public int getSourceDiskNumber() {
    return sourceDiskNumber_;
  }

  public static final int DISK_NAME_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object diskName_ = "";

  /**
   *
   *
   * <pre>
   * Optional. The name of the Persistent Disk to create.
   * </pre>
   *
   * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The diskName.
   */
  @java.lang.Override
  public java.lang.String getDiskName() {
    java.lang.Object ref = diskName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      diskName_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Optional. The name of the Persistent Disk to create.
   * </pre>
   *
   * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for diskName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDiskNameBytes() {
    java.lang.Object ref = diskName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      diskName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISK_TYPE_FIELD_NUMBER = 3;
  private int diskType_ = 0;

  /**
   *
   *
   * <pre>
   * The disk type to use.
   * </pre>
   *
   * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
   *
   * @return The enum numeric value on the wire for diskType.
   */
  @java.lang.Override
  public int getDiskTypeValue() {
    return diskType_;
  }

  /**
   *
   *
   * <pre>
   * The disk type to use.
   * </pre>
   *
   * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
   *
   * @return The diskType.
   */
  @java.lang.Override
  public com.google.cloud.vmmigration.v1.ComputeEngineDiskType getDiskType() {
    com.google.cloud.vmmigration.v1.ComputeEngineDiskType result =
        com.google.cloud.vmmigration.v1.ComputeEngineDiskType.forNumber(diskType_);
    return result == null
        ? com.google.cloud.vmmigration.v1.ComputeEngineDiskType.UNRECOGNIZED
        : result;
  }

  public static final int ADDITIONAL_LABELS_FIELD_NUMBER = 4;

  private static final class AdditionalLabelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            com.google.cloud.vmmigration.v1.VmMigrationProto
                .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_AdditionalLabelsEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<java.lang.String, java.lang.String> additionalLabels_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAdditionalLabels() {
    if (additionalLabels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AdditionalLabelsDefaultEntryHolder.defaultEntry);
    }
    return additionalLabels_;
  }

  public int getAdditionalLabelsCount() {
    return internalGetAdditionalLabels().getMap().size();
  }

  /**
   *
   *
   * <pre>
   * A map of labels to associate with the Persistent Disk.
   * </pre>
   *
   * <code>map&lt;string, string&gt; additional_labels = 4;</code>
   */
  @java.lang.Override
  public boolean containsAdditionalLabels(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetAdditionalLabels().getMap().containsKey(key);
  }

  /** Use {@link #getAdditionalLabelsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getAdditionalLabels() {
    return getAdditionalLabelsMap();
  }

  /**
   *
   *
   * <pre>
   * A map of labels to associate with the Persistent Disk.
   * </pre>
   *
   * <code>map&lt;string, string&gt; additional_labels = 4;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getAdditionalLabelsMap() {
    return internalGetAdditionalLabels().getMap();
  }

  /**
   *
   *
   * <pre>
   * A map of labels to associate with the Persistent Disk.
   * </pre>
   *
   * <code>map&lt;string, string&gt; additional_labels = 4;</code>
   */
  @java.lang.Override
  public /* nullable */ java.lang.String getAdditionalLabelsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetAdditionalLabels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }

  /**
   *
   *
   * <pre>
   * A map of labels to associate with the Persistent Disk.
   * </pre>
   *
   * <code>map&lt;string, string&gt; additional_labels = 4;</code>
   */
  @java.lang.Override
  public java.lang.String getAdditionalLabelsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetAdditionalLabels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int ENCRYPTION_FIELD_NUMBER = 5;
  private com.google.cloud.vmmigration.v1.Encryption encryption_;

  /**
   *
   *
   * <pre>
   * Optional. The encryption to apply to the disk.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the encryption field is set.
   */
  @java.lang.Override
  public boolean hasEncryption() {
    return ((bitField0_ & 0x00000001) != 0);
  }

  /**
   *
   *
   * <pre>
   * Optional. The encryption to apply to the disk.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The encryption.
   */
  @java.lang.Override
  public com.google.cloud.vmmigration.v1.Encryption getEncryption() {
    return encryption_ == null
        ? com.google.cloud.vmmigration.v1.Encryption.getDefaultInstance()
        : encryption_;
  }

  /**
   *
   *
   * <pre>
   * Optional. The encryption to apply to the disk.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.vmmigration.v1.EncryptionOrBuilder getEncryptionOrBuilder() {
    return encryption_ == null
        ? com.google.cloud.vmmigration.v1.Encryption.getDefaultInstance()
        : encryption_;
  }

  public static final int VM_ATTACHMENT_DETAILS_FIELD_NUMBER = 6;
  private com.google.cloud.vmmigration.v1.VmAttachmentDetails vmAttachmentDetails_;

  /**
   *
   *
   * <pre>
   * Optional. Details for attachment of the disk to a VM.
   * Used when the disk is set to be attached to a target VM.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the vmAttachmentDetails field is set.
   */
  @java.lang.Override
  public boolean hasVmAttachmentDetails() {
    return ((bitField0_ & 0x00000002) != 0);
  }

  /**
   *
   *
   * <pre>
   * Optional. Details for attachment of the disk to a VM.
   * Used when the disk is set to be attached to a target VM.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The vmAttachmentDetails.
   */
  @java.lang.Override
  public com.google.cloud.vmmigration.v1.VmAttachmentDetails getVmAttachmentDetails() {
    return vmAttachmentDetails_ == null
        ? com.google.cloud.vmmigration.v1.VmAttachmentDetails.getDefaultInstance()
        : vmAttachmentDetails_;
  }

  /**
   *
   *
   * <pre>
   * Optional. Details for attachment of the disk to a VM.
   * Used when the disk is set to be attached to a target VM.
   * </pre>
   *
   * <code>
   * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.vmmigration.v1.VmAttachmentDetailsOrBuilder
      getVmAttachmentDetailsOrBuilder() {
    return vmAttachmentDetails_ == null
        ? com.google.cloud.vmmigration.v1.VmAttachmentDetails.getDefaultInstance()
        : vmAttachmentDetails_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (sourceDiskNumber_ != 0) {
      output.writeInt32(1, sourceDiskNumber_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(diskName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, diskName_);
    }
    if (diskType_
        != com.google.cloud.vmmigration.v1.ComputeEngineDiskType
            .COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED
            .getNumber()) {
      output.writeEnum(3, diskType_);
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetAdditionalLabels(), AdditionalLabelsDefaultEntryHolder.defaultEntry, 4);
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getEncryption());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(6, getVmAttachmentDetails());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sourceDiskNumber_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, sourceDiskNumber_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(diskName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, diskName_);
    }
    if (diskType_
        != com.google.cloud.vmmigration.v1.ComputeEngineDiskType
            .COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, diskType_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetAdditionalLabels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> additionalLabels__ =
          AdditionalLabelsDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, additionalLabels__);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getEncryption());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, getVmAttachmentDetails());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.vmmigration.v1.PersistentDiskDefaults)) {
      return super.equals(obj);
    }
    com.google.cloud.vmmigration.v1.PersistentDiskDefaults other =
        (com.google.cloud.vmmigration.v1.PersistentDiskDefaults) obj;

    if (getSourceDiskNumber() != other.getSourceDiskNumber()) return false;
    if (!getDiskName().equals(other.getDiskName())) return false;
    if (diskType_ != other.diskType_) return false;
    if (!internalGetAdditionalLabels().equals(other.internalGetAdditionalLabels())) return false;
    if (hasEncryption() != other.hasEncryption()) return false;
    if (hasEncryption()) {
      if (!getEncryption().equals(other.getEncryption())) return false;
    }
    if (hasVmAttachmentDetails() != other.hasVmAttachmentDetails()) return false;
    if (hasVmAttachmentDetails()) {
      if (!getVmAttachmentDetails().equals(other.getVmAttachmentDetails())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SOURCE_DISK_NUMBER_FIELD_NUMBER;
    hash = (53 * hash) + getSourceDiskNumber();
    hash = (37 * hash) + DISK_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDiskName().hashCode();
    hash = (37 * hash) + DISK_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + diskType_;
    if (!internalGetAdditionalLabels().getMap().isEmpty()) {
      hash = (37 * hash) + ADDITIONAL_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAdditionalLabels().hashCode();
    }
    if (hasEncryption()) {
      hash = (37 * hash) + ENCRYPTION_FIELD_NUMBER;
      hash = (53 * hash) + getEncryption().hashCode();
    }
    if (hasVmAttachmentDetails()) {
      hash = (37 * hash) + VM_ATTACHMENT_DETAILS_FIELD_NUMBER;
      hash = (53 * hash) + getVmAttachmentDetails().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.vmmigration.v1.PersistentDiskDefaults prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * Details for creation of a Persistent Disk.
   * </pre>
   *
   * Protobuf type {@code google.cloud.vmmigration.v1.PersistentDiskDefaults}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.vmmigration.v1.PersistentDiskDefaults)
      com.google.cloud.vmmigration.v1.PersistentDiskDefaultsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.vmmigration.v1.VmMigrationProto
          .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 4:
          return internalGetAdditionalLabels();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 4:
          return internalGetMutableAdditionalLabels();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.vmmigration.v1.VmMigrationProto
          .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.vmmigration.v1.PersistentDiskDefaults.class,
              com.google.cloud.vmmigration.v1.PersistentDiskDefaults.Builder.class);
    }

    // Construct using com.google.cloud.vmmigration.v1.PersistentDiskDefaults.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getEncryptionFieldBuilder();
        getVmAttachmentDetailsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sourceDiskNumber_ = 0;
      diskName_ = "";
      diskType_ = 0;
      internalGetMutableAdditionalLabels().clear();
      encryption_ = null;
      if (encryptionBuilder_ != null) {
        encryptionBuilder_.dispose();
        encryptionBuilder_ = null;
      }
      vmAttachmentDetails_ = null;
      if (vmAttachmentDetailsBuilder_ != null) {
        vmAttachmentDetailsBuilder_.dispose();
        vmAttachmentDetailsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.vmmigration.v1.VmMigrationProto
          .internal_static_google_cloud_vmmigration_v1_PersistentDiskDefaults_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.vmmigration.v1.PersistentDiskDefaults getDefaultInstanceForType() {
      return com.google.cloud.vmmigration.v1.PersistentDiskDefaults.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.vmmigration.v1.PersistentDiskDefaults build() {
      com.google.cloud.vmmigration.v1.PersistentDiskDefaults result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.vmmigration.v1.PersistentDiskDefaults buildPartial() {
      com.google.cloud.vmmigration.v1.PersistentDiskDefaults result =
          new com.google.cloud.vmmigration.v1.PersistentDiskDefaults(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.vmmigration.v1.PersistentDiskDefaults result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sourceDiskNumber_ = sourceDiskNumber_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.diskName_ = diskName_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.diskType_ = diskType_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.additionalLabels_ = internalGetAdditionalLabels();
        result.additionalLabels_.makeImmutable();
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.encryption_ = encryptionBuilder_ == null ? encryption_ : encryptionBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.vmAttachmentDetails_ =
            vmAttachmentDetailsBuilder_ == null
                ? vmAttachmentDetails_
                : vmAttachmentDetailsBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.vmmigration.v1.PersistentDiskDefaults) {
        return mergeFrom((com.google.cloud.vmmigration.v1.PersistentDiskDefaults) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.vmmigration.v1.PersistentDiskDefaults other) {
      if (other == com.google.cloud.vmmigration.v1.PersistentDiskDefaults.getDefaultInstance())
        return this;
      if (other.getSourceDiskNumber() != 0) {
        setSourceDiskNumber(other.getSourceDiskNumber());
      }
      if (!other.getDiskName().isEmpty()) {
        diskName_ = other.diskName_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.diskType_ != 0) {
        setDiskTypeValue(other.getDiskTypeValue());
      }
      internalGetMutableAdditionalLabels().mergeFrom(other.internalGetAdditionalLabels());
      bitField0_ |= 0x00000008;
      if (other.hasEncryption()) {
        mergeEncryption(other.getEncryption());
      }
      if (other.hasVmAttachmentDetails()) {
        mergeVmAttachmentDetails(other.getVmAttachmentDetails());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                sourceDiskNumber_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 18:
              {
                diskName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 24:
              {
                diskType_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
            case 34:
              {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                    additionalLabels__ =
                        input.readMessage(
                            AdditionalLabelsDefaultEntryHolder.defaultEntry.getParserForType(),
                            extensionRegistry);
                internalGetMutableAdditionalLabels()
                    .getMutableMap()
                    .put(additionalLabels__.getKey(), additionalLabels__.getValue());
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            case 42:
              {
                input.readMessage(getEncryptionFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 50:
              {
                input.readMessage(
                    getVmAttachmentDetailsFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private int sourceDiskNumber_;

    /**
     *
     *
     * <pre>
     * Required. The ordinal number of the source VM disk.
     * </pre>
     *
     * <code>int32 source_disk_number = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The sourceDiskNumber.
     */
    @java.lang.Override
    public int getSourceDiskNumber() {
      return sourceDiskNumber_;
    }

    /**
     *
     *
     * <pre>
     * Required. The ordinal number of the source VM disk.
     * </pre>
     *
     * <code>int32 source_disk_number = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The sourceDiskNumber to set.
     * @return This builder for chaining.
     */
    public Builder setSourceDiskNumber(int value) {

      sourceDiskNumber_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The ordinal number of the source VM disk.
     * </pre>
     *
     * <code>int32 source_disk_number = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSourceDiskNumber() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sourceDiskNumber_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object diskName_ = "";

    /**
     *
     *
     * <pre>
     * Optional. The name of the Persistent Disk to create.
     * </pre>
     *
     * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The diskName.
     */
    public java.lang.String getDiskName() {
      java.lang.Object ref = diskName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        diskName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The name of the Persistent Disk to create.
     * </pre>
     *
     * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return The bytes for diskName.
     */
    public com.google.protobuf.ByteString getDiskNameBytes() {
      java.lang.Object ref = diskName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        diskName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The name of the Persistent Disk to create.
     * </pre>
     *
     * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The diskName to set.
     * @return This builder for chaining.
     */
    public Builder setDiskName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      diskName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The name of the Persistent Disk to create.
     * </pre>
     *
     * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDiskName() {
      diskName_ = getDefaultInstance().getDiskName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The name of the Persistent Disk to create.
     * </pre>
     *
     * <code>string disk_name = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     *
     * @param value The bytes for diskName to set.
     * @return This builder for chaining.
     */
    public Builder setDiskNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      diskName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private int diskType_ = 0;

    /**
     *
     *
     * <pre>
     * The disk type to use.
     * </pre>
     *
     * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
     *
     * @return The enum numeric value on the wire for diskType.
     */
    @java.lang.Override
    public int getDiskTypeValue() {
      return diskType_;
    }

    /**
     *
     *
     * <pre>
     * The disk type to use.
     * </pre>
     *
     * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
     *
     * @param value The enum numeric value on the wire for diskType to set.
     * @return This builder for chaining.
     */
    public Builder setDiskTypeValue(int value) {
      diskType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The disk type to use.
     * </pre>
     *
     * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
     *
     * @return The diskType.
     */
    @java.lang.Override
    public com.google.cloud.vmmigration.v1.ComputeEngineDiskType getDiskType() {
      com.google.cloud.vmmigration.v1.ComputeEngineDiskType result =
          com.google.cloud.vmmigration.v1.ComputeEngineDiskType.forNumber(diskType_);
      return result == null
          ? com.google.cloud.vmmigration.v1.ComputeEngineDiskType.UNRECOGNIZED
          : result;
    }

    /**
     *
     *
     * <pre>
     * The disk type to use.
     * </pre>
     *
     * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
     *
     * @param value The diskType to set.
     * @return This builder for chaining.
     */
    public Builder setDiskType(com.google.cloud.vmmigration.v1.ComputeEngineDiskType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      diskType_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The disk type to use.
     * </pre>
     *
     * <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDiskType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      diskType_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> additionalLabels_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetAdditionalLabels() {
      if (additionalLabels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AdditionalLabelsDefaultEntryHolder.defaultEntry);
      }
      return additionalLabels_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableAdditionalLabels() {
      if (additionalLabels_ == null) {
        additionalLabels_ =
            com.google.protobuf.MapField.newMapField(
                AdditionalLabelsDefaultEntryHolder.defaultEntry);
      }
      if (!additionalLabels_.isMutable()) {
        additionalLabels_ = additionalLabels_.copy();
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return additionalLabels_;
    }

    public int getAdditionalLabelsCount() {
      return internalGetAdditionalLabels().getMap().size();
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    @java.lang.Override
    public boolean containsAdditionalLabels(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetAdditionalLabels().getMap().containsKey(key);
    }

    /** Use {@link #getAdditionalLabelsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAdditionalLabels() {
      return getAdditionalLabelsMap();
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getAdditionalLabelsMap() {
      return internalGetAdditionalLabels().getMap();
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    @java.lang.Override
    public /* nullable */ java.lang.String getAdditionalLabelsOrDefault(
        java.lang.String key,
        /* nullable */
        java.lang.String defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAdditionalLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getAdditionalLabelsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAdditionalLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAdditionalLabels() {
      bitField0_ = (bitField0_ & ~0x00000008);
      internalGetMutableAdditionalLabels().getMutableMap().clear();
      return this;
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    public Builder removeAdditionalLabels(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableAdditionalLabels().getMutableMap().remove(key);
      return this;
    }

    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableAdditionalLabels() {
      bitField0_ |= 0x00000008;
      return internalGetMutableAdditionalLabels().getMutableMap();
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    public Builder putAdditionalLabels(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }
      internalGetMutableAdditionalLabels().getMutableMap().put(key, value);
      bitField0_ |= 0x00000008;
      return this;
    }

    /**
     *
     *
     * <pre>
     * A map of labels to associate with the Persistent Disk.
     * </pre>
     *
     * <code>map&lt;string, string&gt; additional_labels = 4;</code>
     */
    public Builder putAllAdditionalLabels(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableAdditionalLabels().getMutableMap().putAll(values);
      bitField0_ |= 0x00000008;
      return this;
    }

    private com.google.cloud.vmmigration.v1.Encryption encryption_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.vmmigration.v1.Encryption,
            com.google.cloud.vmmigration.v1.Encryption.Builder,
            com.google.cloud.vmmigration.v1.EncryptionOrBuilder>
        encryptionBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the encryption field is set.
     */
    public boolean hasEncryption() {
      return ((bitField0_ & 0x00000010) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The encryption.
     */
    public com.google.cloud.vmmigration.v1.Encryption getEncryption() {
      if (encryptionBuilder_ == null) {
        return encryption_ == null
            ? com.google.cloud.vmmigration.v1.Encryption.getDefaultInstance()
            : encryption_;
      } else {
        return encryptionBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setEncryption(com.google.cloud.vmmigration.v1.Encryption value) {
      if (encryptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        encryption_ = value;
      } else {
        encryptionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setEncryption(
        com.google.cloud.vmmigration.v1.Encryption.Builder builderForValue) {
      if (encryptionBuilder_ == null) {
        encryption_ = builderForValue.build();
      } else {
        encryptionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeEncryption(com.google.cloud.vmmigration.v1.Encryption value) {
      if (encryptionBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)
            && encryption_ != null
            && encryption_ != com.google.cloud.vmmigration.v1.Encryption.getDefaultInstance()) {
          getEncryptionBuilder().mergeFrom(value);
        } else {
          encryption_ = value;
        }
      } else {
        encryptionBuilder_.mergeFrom(value);
      }
      if (encryption_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearEncryption() {
      bitField0_ = (bitField0_ & ~0x00000010);
      encryption_ = null;
      if (encryptionBuilder_ != null) {
        encryptionBuilder_.dispose();
        encryptionBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.vmmigration.v1.Encryption.Builder getEncryptionBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getEncryptionFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.vmmigration.v1.EncryptionOrBuilder getEncryptionOrBuilder() {
      if (encryptionBuilder_ != null) {
        return encryptionBuilder_.getMessageOrBuilder();
      } else {
        return encryption_ == null
            ? com.google.cloud.vmmigration.v1.Encryption.getDefaultInstance()
            : encryption_;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. The encryption to apply to the disk.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.vmmigration.v1.Encryption,
            com.google.cloud.vmmigration.v1.Encryption.Builder,
            com.google.cloud.vmmigration.v1.EncryptionOrBuilder>
        getEncryptionFieldBuilder() {
      if (encryptionBuilder_ == null) {
        encryptionBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.vmmigration.v1.Encryption,
                com.google.cloud.vmmigration.v1.Encryption.Builder,
                com.google.cloud.vmmigration.v1.EncryptionOrBuilder>(
                getEncryption(), getParentForChildren(), isClean());
        encryption_ = null;
      }
      return encryptionBuilder_;
    }

    private com.google.cloud.vmmigration.v1.VmAttachmentDetails vmAttachmentDetails_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.vmmigration.v1.VmAttachmentDetails,
            com.google.cloud.vmmigration.v1.VmAttachmentDetails.Builder,
            com.google.cloud.vmmigration.v1.VmAttachmentDetailsOrBuilder>
        vmAttachmentDetailsBuilder_;

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return Whether the vmAttachmentDetails field is set.
     */
    public boolean hasVmAttachmentDetails() {
      return ((bitField0_ & 0x00000020) != 0);
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     *
     * @return The vmAttachmentDetails.
     */
    public com.google.cloud.vmmigration.v1.VmAttachmentDetails getVmAttachmentDetails() {
      if (vmAttachmentDetailsBuilder_ == null) {
        return vmAttachmentDetails_ == null
            ? com.google.cloud.vmmigration.v1.VmAttachmentDetails.getDefaultInstance()
            : vmAttachmentDetails_;
      } else {
        return vmAttachmentDetailsBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setVmAttachmentDetails(
        com.google.cloud.vmmigration.v1.VmAttachmentDetails value) {
      if (vmAttachmentDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vmAttachmentDetails_ = value;
      } else {
        vmAttachmentDetailsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder setVmAttachmentDetails(
        com.google.cloud.vmmigration.v1.VmAttachmentDetails.Builder builderForValue) {
      if (vmAttachmentDetailsBuilder_ == null) {
        vmAttachmentDetails_ = builderForValue.build();
      } else {
        vmAttachmentDetailsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder mergeVmAttachmentDetails(
        com.google.cloud.vmmigration.v1.VmAttachmentDetails value) {
      if (vmAttachmentDetailsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)
            && vmAttachmentDetails_ != null
            && vmAttachmentDetails_
                != com.google.cloud.vmmigration.v1.VmAttachmentDetails.getDefaultInstance()) {
          getVmAttachmentDetailsBuilder().mergeFrom(value);
        } else {
          vmAttachmentDetails_ = value;
        }
      } else {
        vmAttachmentDetailsBuilder_.mergeFrom(value);
      }
      if (vmAttachmentDetails_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder clearVmAttachmentDetails() {
      bitField0_ = (bitField0_ & ~0x00000020);
      vmAttachmentDetails_ = null;
      if (vmAttachmentDetailsBuilder_ != null) {
        vmAttachmentDetailsBuilder_.dispose();
        vmAttachmentDetailsBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.vmmigration.v1.VmAttachmentDetails.Builder
        getVmAttachmentDetailsBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getVmAttachmentDetailsFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public com.google.cloud.vmmigration.v1.VmAttachmentDetailsOrBuilder
        getVmAttachmentDetailsOrBuilder() {
      if (vmAttachmentDetailsBuilder_ != null) {
        return vmAttachmentDetailsBuilder_.getMessageOrBuilder();
      } else {
        return vmAttachmentDetails_ == null
            ? com.google.cloud.vmmigration.v1.VmAttachmentDetails.getDefaultInstance()
            : vmAttachmentDetails_;
      }
    }

    /**
     *
     *
     * <pre>
     * Optional. Details for attachment of the disk to a VM.
     * Used when the disk is set to be attached to a target VM.
     * </pre>
     *
     * <code>
     * .google.cloud.vmmigration.v1.VmAttachmentDetails vm_attachment_details = 6 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.vmmigration.v1.VmAttachmentDetails,
            com.google.cloud.vmmigration.v1.VmAttachmentDetails.Builder,
            com.google.cloud.vmmigration.v1.VmAttachmentDetailsOrBuilder>
        getVmAttachmentDetailsFieldBuilder() {
      if (vmAttachmentDetailsBuilder_ == null) {
        vmAttachmentDetailsBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.vmmigration.v1.VmAttachmentDetails,
                com.google.cloud.vmmigration.v1.VmAttachmentDetails.Builder,
                com.google.cloud.vmmigration.v1.VmAttachmentDetailsOrBuilder>(
                getVmAttachmentDetails(), getParentForChildren(), isClean());
        vmAttachmentDetails_ = null;
      }
      return vmAttachmentDetailsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.vmmigration.v1.PersistentDiskDefaults)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.vmmigration.v1.PersistentDiskDefaults)
  private static final com.google.cloud.vmmigration.v1.PersistentDiskDefaults DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.vmmigration.v1.PersistentDiskDefaults();
  }

  public static com.google.cloud.vmmigration.v1.PersistentDiskDefaults getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PersistentDiskDefaults> PARSER =
      new com.google.protobuf.AbstractParser<PersistentDiskDefaults>() {
        @java.lang.Override
        public PersistentDiskDefaults parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<PersistentDiskDefaults> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PersistentDiskDefaults> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.vmmigration.v1.PersistentDiskDefaults getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
