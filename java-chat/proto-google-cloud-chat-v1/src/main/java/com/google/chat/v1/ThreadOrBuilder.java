/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/chat/v1/message.proto

// Protobuf Java Version: 3.25.5
package com.google.chat.v1;

public interface ThreadOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.chat.v1.Thread)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Identifier. Resource name of the thread.
   *
   * Example: `spaces/{space}/threads/{thread}`
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Identifier. Resource name of the thread.
   *
   * Example: `spaces/{space}/threads/{thread}`
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IDENTIFIER];</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Optional. Input for creating or updating a thread. Otherwise, output only.
   * ID for the thread. Supports up to 4000 characters.
   *
   * This ID is unique to the Chat app that sets it. For example, if
   * multiple Chat apps create a message using the same thread key,
   * the messages are posted in different threads. To reply in a
   * thread created by a person or another Chat app, specify the thread `name`
   * field instead.
   * </pre>
   *
   * <code>string thread_key = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The threadKey.
   */
  java.lang.String getThreadKey();
  /**
   *
   *
   * <pre>
   * Optional. Input for creating or updating a thread. Otherwise, output only.
   * ID for the thread. Supports up to 4000 characters.
   *
   * This ID is unique to the Chat app that sets it. For example, if
   * multiple Chat apps create a message using the same thread key,
   * the messages are posted in different threads. To reply in a
   * thread created by a person or another Chat app, specify the thread `name`
   * field instead.
   * </pre>
   *
   * <code>string thread_key = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for threadKey.
   */
  com.google.protobuf.ByteString getThreadKeyBytes();
}
