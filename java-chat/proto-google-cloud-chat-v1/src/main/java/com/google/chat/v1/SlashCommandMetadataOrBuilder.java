/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/chat/v1/annotation.proto

// Protobuf Java Version: 3.25.5
package com.google.chat.v1;

public interface SlashCommandMetadataOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.chat.v1.SlashCommandMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The Chat app whose command was invoked.
   * </pre>
   *
   * <code>.google.chat.v1.User bot = 1;</code>
   *
   * @return Whether the bot field is set.
   */
  boolean hasBot();
  /**
   *
   *
   * <pre>
   * The Chat app whose command was invoked.
   * </pre>
   *
   * <code>.google.chat.v1.User bot = 1;</code>
   *
   * @return The bot.
   */
  com.google.chat.v1.User getBot();
  /**
   *
   *
   * <pre>
   * The Chat app whose command was invoked.
   * </pre>
   *
   * <code>.google.chat.v1.User bot = 1;</code>
   */
  com.google.chat.v1.UserOrBuilder getBotOrBuilder();

  /**
   *
   *
   * <pre>
   * The type of slash command.
   * </pre>
   *
   * <code>.google.chat.v1.SlashCommandMetadata.Type type = 2;</code>
   *
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   *
   *
   * <pre>
   * The type of slash command.
   * </pre>
   *
   * <code>.google.chat.v1.SlashCommandMetadata.Type type = 2;</code>
   *
   * @return The type.
   */
  com.google.chat.v1.SlashCommandMetadata.Type getType();

  /**
   *
   *
   * <pre>
   * The name of the invoked slash command.
   * </pre>
   *
   * <code>string command_name = 3;</code>
   *
   * @return The commandName.
   */
  java.lang.String getCommandName();
  /**
   *
   *
   * <pre>
   * The name of the invoked slash command.
   * </pre>
   *
   * <code>string command_name = 3;</code>
   *
   * @return The bytes for commandName.
   */
  com.google.protobuf.ByteString getCommandNameBytes();

  /**
   *
   *
   * <pre>
   * The command ID of the invoked slash command.
   * </pre>
   *
   * <code>int64 command_id = 4;</code>
   *
   * @return The commandId.
   */
  long getCommandId();

  /**
   *
   *
   * <pre>
   * Indicates whether the slash command is for a dialog.
   * </pre>
   *
   * <code>bool triggers_dialog = 5;</code>
   *
   * @return The triggersDialog.
   */
  boolean getTriggersDialog();
}
