/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/chat/v1/space_read_state.proto

// Protobuf Java Version: 3.25.5
package com.google.chat.v1;

public interface UpdateSpaceReadStateRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.chat.v1.UpdateSpaceReadStateRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The space read state and fields to update.
   *
   * Only supports updating read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user&#64;example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   * </pre>
   *
   * <code>
   * .google.chat.v1.SpaceReadState space_read_state = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the spaceReadState field is set.
   */
  boolean hasSpaceReadState();
  /**
   *
   *
   * <pre>
   * Required. The space read state and fields to update.
   *
   * Only supports updating read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user&#64;example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   * </pre>
   *
   * <code>
   * .google.chat.v1.SpaceReadState space_read_state = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The spaceReadState.
   */
  com.google.chat.v1.SpaceReadState getSpaceReadState();
  /**
   *
   *
   * <pre>
   * Required. The space read state and fields to update.
   *
   * Only supports updating read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user&#64;example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   * </pre>
   *
   * <code>
   * .google.chat.v1.SpaceReadState space_read_state = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  com.google.chat.v1.SpaceReadStateOrBuilder getSpaceReadStateOrBuilder();

  /**
   *
   *
   * <pre>
   * Required. The field paths to update. Currently supported field paths:
   *
   * - `last_read_time`
   *
   * When the `last_read_time` is before the latest message create time, the
   * space appears as unread in the UI.
   *
   * To mark the space as read, set `last_read_time` to any value later (larger)
   * than the latest message create time. The `last_read_time` is coerced to
   * match the latest message create time. Note that the space read state only
   * affects the read state of messages that are visible in the space's
   * top-level conversation. Replies in threads are unaffected by this
   * timestamp, and instead rely on the thread read state.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the updateMask field is set.
   */
  boolean hasUpdateMask();
  /**
   *
   *
   * <pre>
   * Required. The field paths to update. Currently supported field paths:
   *
   * - `last_read_time`
   *
   * When the `last_read_time` is before the latest message create time, the
   * space appears as unread in the UI.
   *
   * To mark the space as read, set `last_read_time` to any value later (larger)
   * than the latest message create time. The `last_read_time` is coerced to
   * match the latest message create time. Note that the space read state only
   * affects the read state of messages that are visible in the space's
   * top-level conversation. Replies in threads are unaffected by this
   * timestamp, and instead rely on the thread read state.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The updateMask.
   */
  com.google.protobuf.FieldMask getUpdateMask();
  /**
   *
   *
   * <pre>
   * Required. The field paths to update. Currently supported field paths:
   *
   * - `last_read_time`
   *
   * When the `last_read_time` is before the latest message create time, the
   * space appears as unread in the UI.
   *
   * To mark the space as read, set `last_read_time` to any value later (larger)
   * than the latest message create time. The `last_read_time` is coerced to
   * match the latest message create time. Note that the space read state only
   * affects the read state of messages that are visible in the space's
   * top-level conversation. Replies in threads are unaffected by this
   * timestamp, and instead rely on the thread read state.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  com.google.protobuf.FieldMaskOrBuilder getUpdateMaskOrBuilder();
}
