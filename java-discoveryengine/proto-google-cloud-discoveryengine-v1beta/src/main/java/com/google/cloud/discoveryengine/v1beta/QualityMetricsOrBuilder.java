/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/discoveryengine/v1beta/evaluation.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.discoveryengine.v1beta;

public interface QualityMetricsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.discoveryengine.v1beta.QualityMetrics)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Recall per document, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant documents retrieved out of all
   * relevant documents.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 3 out
   *  of 5 relevant documents are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_recall = 1;</code>
   *
   * @return Whether the docRecall field is set.
   */
  boolean hasDocRecall();
  /**
   *
   *
   * <pre>
   * Recall per document, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant documents retrieved out of all
   * relevant documents.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 3 out
   *  of 5 relevant documents are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_recall = 1;</code>
   *
   * @return The docRecall.
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics getDocRecall();
  /**
   *
   *
   * <pre>
   * Recall per document, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant documents retrieved out of all
   * relevant documents.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 3 out
   *  of 5 relevant documents are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_recall = 1;</code>
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetricsOrBuilder
      getDocRecallOrBuilder();

  /**
   *
   *
   * <pre>
   * Precision per document, at various top-k cutoff levels.
   *
   * Precision is the fraction of retrieved documents that are relevant.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 4 out
   *  of 5 retrieved documents in the top-5 are relevant, precision&#64;5 = 4/5 =
   *  0.8
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_precision = 2;</code>
   *
   * @return Whether the docPrecision field is set.
   */
  boolean hasDocPrecision();
  /**
   *
   *
   * <pre>
   * Precision per document, at various top-k cutoff levels.
   *
   * Precision is the fraction of retrieved documents that are relevant.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 4 out
   *  of 5 retrieved documents in the top-5 are relevant, precision&#64;5 = 4/5 =
   *  0.8
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_precision = 2;</code>
   *
   * @return The docPrecision.
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics getDocPrecision();
  /**
   *
   *
   * <pre>
   * Precision per document, at various top-k cutoff levels.
   *
   * Precision is the fraction of retrieved documents that are relevant.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], If 4 out
   *  of 5 retrieved documents in the top-5 are relevant, precision&#64;5 = 4/5 =
   *  0.8
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_precision = 2;</code>
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetricsOrBuilder
      getDocPrecisionOrBuilder();

  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per document, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved documents (D1, D2, D3) and binary relevance
   *  judgements (1 for relevant, 0 for not relevant):
   *
   *   Retrieved:  [D3 (0), D1 (1), D2 (1)]
   *   Ideal:      [D1 (1), D2 (1), D3 (0)]
   *
   *   Calculate NDCG&#64;3 for each
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_ndcg = 3;</code>
   *
   * @return Whether the docNdcg field is set.
   */
  boolean hasDocNdcg();
  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per document, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved documents (D1, D2, D3) and binary relevance
   *  judgements (1 for relevant, 0 for not relevant):
   *
   *   Retrieved:  [D3 (0), D1 (1), D2 (1)]
   *   Ideal:      [D1 (1), D2 (1), D3 (0)]
   *
   *   Calculate NDCG&#64;3 for each
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_ndcg = 3;</code>
   *
   * @return The docNdcg.
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics getDocNdcg();
  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per document, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved documents (D1, D2, D3) and binary relevance
   *  judgements (1 for relevant, 0 for not relevant):
   *
   *   Retrieved:  [D3 (0), D1 (1), D2 (1)]
   *   Ideal:      [D1 (1), D2 (1), D3 (0)]
   *
   *   Calculate NDCG&#64;3 for each
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics doc_ndcg = 3;</code>
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetricsOrBuilder getDocNdcgOrBuilder();

  /**
   *
   *
   * <pre>
   * Recall per page, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant pages retrieved out of all relevant
   * pages.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], if 3 out
   *  of 5 relevant pages are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_recall = 4;</code>
   *
   * @return Whether the pageRecall field is set.
   */
  boolean hasPageRecall();
  /**
   *
   *
   * <pre>
   * Recall per page, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant pages retrieved out of all relevant
   * pages.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], if 3 out
   *  of 5 relevant pages are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_recall = 4;</code>
   *
   * @return The pageRecall.
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics getPageRecall();
  /**
   *
   *
   * <pre>
   * Recall per page, at various top-k cutoff levels.
   *
   * Recall is the fraction of relevant pages retrieved out of all relevant
   * pages.
   *
   * Example (top-5):
   *  * For a single
   *  [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], if 3 out
   *  of 5 relevant pages are retrieved in the top-5, recall&#64;5 = 3/5 = 0.6
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_recall = 4;</code>
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetricsOrBuilder
      getPageRecallOrBuilder();

  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per page, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved pages (P1, P2, P3) and binary relevance judgements (1
   *  for relevant, 0 for not relevant):
   *
   *   Retrieved:  [P3 (0), P1 (1), P2 (1)]
   *   Ideal:      [P1 (1), P2 (1), P3 (0)]
   *
   *   Calculate NDCG&#64;3 for
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_ndcg = 5;</code>
   *
   * @return Whether the pageNdcg field is set.
   */
  boolean hasPageNdcg();
  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per page, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved pages (P1, P2, P3) and binary relevance judgements (1
   *  for relevant, 0 for not relevant):
   *
   *   Retrieved:  [P3 (0), P1 (1), P2 (1)]
   *   Ideal:      [P1 (1), P2 (1), P3 (0)]
   *
   *   Calculate NDCG&#64;3 for
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_ndcg = 5;</code>
   *
   * @return The pageNdcg.
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics getPageNdcg();
  /**
   *
   *
   * <pre>
   * Normalized discounted cumulative gain (NDCG) per page, at various top-k
   * cutoff levels.
   *
   * NDCG measures the ranking quality, giving higher relevance to top
   * results.
   *
   * Example (top-3):
   *  Suppose [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]
   *  with three retrieved pages (P1, P2, P3) and binary relevance judgements (1
   *  for relevant, 0 for not relevant):
   *
   *   Retrieved:  [P3 (0), P1 (1), P2 (1)]
   *   Ideal:      [P1 (1), P2 (1), P3 (0)]
   *
   *   Calculate NDCG&#64;3 for
   *   [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]:
   *    * DCG&#64;3: 0/log2(1+1) + 1/log2(2+1) + 1/log2(3+1) = 1.13
   *    * Ideal DCG&#64;3: 1/log2(1+1) + 1/log2(2+1) + 0/log2(3+1) = 1.63
   *    * NDCG&#64;3: 1.13/1.63 = 0.693
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetrics page_ndcg = 5;</code>
   */
  com.google.cloud.discoveryengine.v1beta.QualityMetrics.TopkMetricsOrBuilder
      getPageNdcgOrBuilder();
}
