/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/discoveryengine/v1alpha/schema.proto

// Protobuf Java Version: 3.25.5
package com.google.cloud.discoveryengine.v1alpha;

public interface FieldConfigOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.discoveryengine.v1alpha.FieldConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. Field path of the schema field.
   * For example: `title`, `description`, `release_info.release_year`.
   * </pre>
   *
   * <code>string field_path = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The fieldPath.
   */
  java.lang.String getFieldPath();
  /**
   *
   *
   * <pre>
   * Required. Field path of the schema field.
   * For example: `title`, `description`, `release_info.release_year`.
   * </pre>
   *
   * <code>string field_path = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The bytes for fieldPath.
   */
  com.google.protobuf.ByteString getFieldPathBytes();

  /**
   *
   *
   * <pre>
   * Output only. Raw type of the field.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.FieldType field_type = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The enum numeric value on the wire for fieldType.
   */
  int getFieldTypeValue();
  /**
   *
   *
   * <pre>
   * Output only. Raw type of the field.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.FieldType field_type = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   *
   * @return The fieldType.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.FieldType getFieldType();

  /**
   *
   *
   * <pre>
   * If
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is
   * [INDEXABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_ENABLED],
   * field values are indexed so that it can be filtered or faceted in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search].
   *
   * If
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is unset, the server behavior defaults to
   * [INDEXABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_DISABLED]
   * for fields that support setting indexable options. For those fields that do
   * not support setting indexable options, such as `object` and `boolean` and
   * key properties, the server will skip
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * setting, and setting
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption indexable_option = 3;
   * </code>
   *
   * @return The enum numeric value on the wire for indexableOption.
   */
  int getIndexableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is
   * [INDEXABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_ENABLED],
   * field values are indexed so that it can be filtered or faceted in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search].
   *
   * If
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is unset, the server behavior defaults to
   * [INDEXABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_DISABLED]
   * for fields that support setting indexable options. For those fields that do
   * not support setting indexable options, such as `object` and `boolean` and
   * key properties, the server will skip
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * setting, and setting
   * [indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption indexable_option = 3;
   * </code>
   *
   * @return The indexableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption getIndexableOption();

  /**
   *
   *
   * <pre>
   * If
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * is
   * [DYNAMIC_FACETABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_ENABLED],
   * field values are available for dynamic facet. Could only be
   * [DYNAMIC_FACETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_DISABLED]
   * if
   * [FieldConfig.indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is
   * [INDEXABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_DISABLED].
   * Otherwise, an `INVALID_ARGUMENT` error will be returned.
   *
   * If
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * is unset, the server behavior defaults to
   * [DYNAMIC_FACETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_DISABLED]
   * for fields that support setting dynamic facetable options. For those fields
   * that do not support setting dynamic facetable options, such as `object` and
   * `boolean`, the server will skip dynamic facetable option setting, and
   * setting
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption dynamic_facetable_option = 4;
   * </code>
   *
   * @return The enum numeric value on the wire for dynamicFacetableOption.
   */
  int getDynamicFacetableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * is
   * [DYNAMIC_FACETABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_ENABLED],
   * field values are available for dynamic facet. Could only be
   * [DYNAMIC_FACETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_DISABLED]
   * if
   * [FieldConfig.indexable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.indexable_option]
   * is
   * [INDEXABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.IndexableOption.INDEXABLE_DISABLED].
   * Otherwise, an `INVALID_ARGUMENT` error will be returned.
   *
   * If
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * is unset, the server behavior defaults to
   * [DYNAMIC_FACETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption.DYNAMIC_FACETABLE_DISABLED]
   * for fields that support setting dynamic facetable options. For those fields
   * that do not support setting dynamic facetable options, such as `object` and
   * `boolean`, the server will skip dynamic facetable option setting, and
   * setting
   * [dynamic_facetable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.dynamic_facetable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption dynamic_facetable_option = 4;
   * </code>
   *
   * @return The dynamicFacetableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.DynamicFacetableOption
      getDynamicFacetableOption();

  /**
   *
   *
   * <pre>
   * If
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * is
   * [SEARCHABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_ENABLED],
   * field values are searchable by text queries in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search].
   *
   * If
   * [SEARCHABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_ENABLED]
   * but field type is numerical, field values will not be searchable by text
   * queries in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search],
   * as there are no text values associated to numerical fields.
   *
   * If
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * is unset, the server behavior defaults to
   * [SEARCHABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_DISABLED]
   * for fields that support setting searchable options. Only `string` fields
   * that have no key property mapping support setting
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option].
   *
   * For those fields that do not support setting searchable options, the server
   * will skip searchable option setting, and setting
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption searchable_option = 5;
   * </code>
   *
   * @return The enum numeric value on the wire for searchableOption.
   */
  int getSearchableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * is
   * [SEARCHABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_ENABLED],
   * field values are searchable by text queries in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search].
   *
   * If
   * [SEARCHABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_ENABLED]
   * but field type is numerical, field values will not be searchable by text
   * queries in
   * [SearchService.Search][google.cloud.discoveryengine.v1alpha.SearchService.Search],
   * as there are no text values associated to numerical fields.
   *
   * If
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * is unset, the server behavior defaults to
   * [SEARCHABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption.SEARCHABLE_DISABLED]
   * for fields that support setting searchable options. Only `string` fields
   * that have no key property mapping support setting
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option].
   *
   * For those fields that do not support setting searchable options, the server
   * will skip searchable option setting, and setting
   * [searchable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.searchable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>.google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption searchable_option = 5;
   * </code>
   *
   * @return The searchableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.SearchableOption getSearchableOption();

  /**
   *
   *
   * <pre>
   * If
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * is
   * [RETRIEVABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption.RETRIEVABLE_ENABLED],
   * field values are included in the search results.
   *
   * If
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * is unset, the server behavior defaults to
   * [RETRIEVABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption.RETRIEVABLE_DISABLED]
   * for fields that support setting retrievable options. For those fields
   * that do not support setting retrievable options, such as `object` and
   * `boolean`, the server will skip retrievable option setting, and setting
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption retrievable_option = 6;
   * </code>
   *
   * @return The enum numeric value on the wire for retrievableOption.
   */
  int getRetrievableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * is
   * [RETRIEVABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption.RETRIEVABLE_ENABLED],
   * field values are included in the search results.
   *
   * If
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * is unset, the server behavior defaults to
   * [RETRIEVABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption.RETRIEVABLE_DISABLED]
   * for fields that support setting retrievable options. For those fields
   * that do not support setting retrievable options, such as `object` and
   * `boolean`, the server will skip retrievable option setting, and setting
   * [retrievable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.retrievable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption retrievable_option = 6;
   * </code>
   *
   * @return The retrievableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.RetrievableOption getRetrievableOption();

  /**
   *
   *
   * <pre>
   * If
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * is
   * [COMPLETABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption.COMPLETABLE_ENABLED],
   * field values are directly used and returned as suggestions for Autocomplete
   * in
   * [CompletionService.CompleteQuery][google.cloud.discoveryengine.v1alpha.CompletionService.CompleteQuery].
   *
   * If
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * is unset, the server behavior defaults to
   * [COMPLETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption.COMPLETABLE_DISABLED]
   * for fields that support setting completable options, which are just
   * `string` fields. For those fields that do not support setting completable
   * options, the server will skip completable option setting, and setting
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption completable_option = 8;
   * </code>
   *
   * @return The enum numeric value on the wire for completableOption.
   */
  int getCompletableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * is
   * [COMPLETABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption.COMPLETABLE_ENABLED],
   * field values are directly used and returned as suggestions for Autocomplete
   * in
   * [CompletionService.CompleteQuery][google.cloud.discoveryengine.v1alpha.CompletionService.CompleteQuery].
   *
   * If
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * is unset, the server behavior defaults to
   * [COMPLETABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption.COMPLETABLE_DISABLED]
   * for fields that support setting completable options, which are just
   * `string` fields. For those fields that do not support setting completable
   * options, the server will skip completable option setting, and setting
   * [completable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.completable_option]
   * for those fields will throw `INVALID_ARGUMENT` error.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption completable_option = 8;
   * </code>
   *
   * @return The completableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.CompletableOption getCompletableOption();

  /**
   *
   *
   * <pre>
   * If
   * [recs_filterable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.recs_filterable_option]
   * is
   * [FILTERABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_ENABLED],
   * field values are filterable by filter expression in
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend].
   *
   * If
   * [FILTERABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_ENABLED]
   * but the field type is numerical, field values are not filterable by text
   * queries in
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend].
   * Only textual fields are supported.
   *
   * If
   * [recs_filterable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.recs_filterable_option]
   * is unset, the default setting is
   * [FILTERABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_DISABLED]
   * for fields that support setting filterable options.
   *
   * When a field set to [FILTERABLE_DISABLED] is filtered, a warning is
   * generated and an empty result is returned.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption recs_filterable_option = 9;
   * </code>
   *
   * @return The enum numeric value on the wire for recsFilterableOption.
   */
  int getRecsFilterableOptionValue();
  /**
   *
   *
   * <pre>
   * If
   * [recs_filterable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.recs_filterable_option]
   * is
   * [FILTERABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_ENABLED],
   * field values are filterable by filter expression in
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend].
   *
   * If
   * [FILTERABLE_ENABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_ENABLED]
   * but the field type is numerical, field values are not filterable by text
   * queries in
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend].
   * Only textual fields are supported.
   *
   * If
   * [recs_filterable_option][google.cloud.discoveryengine.v1alpha.FieldConfig.recs_filterable_option]
   * is unset, the default setting is
   * [FILTERABLE_DISABLED][google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption.FILTERABLE_DISABLED]
   * for fields that support setting filterable options.
   *
   * When a field set to [FILTERABLE_DISABLED] is filtered, a warning is
   * generated and an empty result is returned.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption recs_filterable_option = 9;
   * </code>
   *
   * @return The recsFilterableOption.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.FilterableOption getRecsFilterableOption();

  /**
   *
   *
   * <pre>
   * Output only. Type of the key property that this field is mapped to. Empty
   * string if this is not annotated as mapped to a key property.
   *
   * Example types are `title`, `description`. Full list is defined
   * by `keyPropertyMapping` in the schema field annotation.
   *
   * If the schema field has a `KeyPropertyMapping` annotation,
   * `indexable_option` and `searchable_option` of this field cannot be
   * modified.
   * </pre>
   *
   * <code>string key_property_type = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The keyPropertyType.
   */
  java.lang.String getKeyPropertyType();
  /**
   *
   *
   * <pre>
   * Output only. Type of the key property that this field is mapped to. Empty
   * string if this is not annotated as mapped to a key property.
   *
   * Example types are `title`, `description`. Full list is defined
   * by `keyPropertyMapping` in the schema field annotation.
   *
   * If the schema field has a `KeyPropertyMapping` annotation,
   * `indexable_option` and `searchable_option` of this field cannot be
   * modified.
   * </pre>
   *
   * <code>string key_property_type = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The bytes for keyPropertyType.
   */
  com.google.protobuf.ByteString getKeyPropertyTypeBytes();

  /**
   *
   *
   * <pre>
   * If this field is set, only the corresponding source will be indexed for
   * this field. Otherwise, the values from different sources are merged.
   *
   * Assuming a page with `&lt;author, a&gt;` in meta tag, and `&lt;author, b&gt;` in page
   * map:
   *  if this enum is set to METATAGS, we will only index `&lt;author, a&gt;`;
   *  if this enum is not set, we will merge them and index `&lt;author, [a, b]&gt;`.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource advanced_site_search_data_sources = 10;
   * </code>
   *
   * @return A list containing the advancedSiteSearchDataSources.
   */
  java.util.List<com.google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource>
      getAdvancedSiteSearchDataSourcesList();
  /**
   *
   *
   * <pre>
   * If this field is set, only the corresponding source will be indexed for
   * this field. Otherwise, the values from different sources are merged.
   *
   * Assuming a page with `&lt;author, a&gt;` in meta tag, and `&lt;author, b&gt;` in page
   * map:
   *  if this enum is set to METATAGS, we will only index `&lt;author, a&gt;`;
   *  if this enum is not set, we will merge them and index `&lt;author, [a, b]&gt;`.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource advanced_site_search_data_sources = 10;
   * </code>
   *
   * @return The count of advancedSiteSearchDataSources.
   */
  int getAdvancedSiteSearchDataSourcesCount();
  /**
   *
   *
   * <pre>
   * If this field is set, only the corresponding source will be indexed for
   * this field. Otherwise, the values from different sources are merged.
   *
   * Assuming a page with `&lt;author, a&gt;` in meta tag, and `&lt;author, b&gt;` in page
   * map:
   *  if this enum is set to METATAGS, we will only index `&lt;author, a&gt;`;
   *  if this enum is not set, we will merge them and index `&lt;author, [a, b]&gt;`.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource advanced_site_search_data_sources = 10;
   * </code>
   *
   * @param index The index of the element to return.
   * @return The advancedSiteSearchDataSources at the given index.
   */
  com.google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource
      getAdvancedSiteSearchDataSources(int index);
  /**
   *
   *
   * <pre>
   * If this field is set, only the corresponding source will be indexed for
   * this field. Otherwise, the values from different sources are merged.
   *
   * Assuming a page with `&lt;author, a&gt;` in meta tag, and `&lt;author, b&gt;` in page
   * map:
   *  if this enum is set to METATAGS, we will only index `&lt;author, a&gt;`;
   *  if this enum is not set, we will merge them and index `&lt;author, [a, b]&gt;`.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource advanced_site_search_data_sources = 10;
   * </code>
   *
   * @return A list containing the enum numeric values on the wire for
   *     advancedSiteSearchDataSources.
   */
  java.util.List<java.lang.Integer> getAdvancedSiteSearchDataSourcesValueList();
  /**
   *
   *
   * <pre>
   * If this field is set, only the corresponding source will be indexed for
   * this field. Otherwise, the values from different sources are merged.
   *
   * Assuming a page with `&lt;author, a&gt;` in meta tag, and `&lt;author, b&gt;` in page
   * map:
   *  if this enum is set to METATAGS, we will only index `&lt;author, a&gt;`;
   *  if this enum is not set, we will merge them and index `&lt;author, [a, b]&gt;`.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.discoveryengine.v1alpha.FieldConfig.AdvancedSiteSearchDataSource advanced_site_search_data_sources = 10;
   * </code>
   *
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of advancedSiteSearchDataSources at the given index.
   */
  int getAdvancedSiteSearchDataSourcesValue(int index);

  /**
   *
   *
   * <pre>
   * Field paths for indexing custom attribute from schema.org data. More
   * details of schema.org and its defined types can be found at
   * [schema.org](https://schema.org).
   *
   * It is only used on advanced site search schema.
   *
   * Currently only support full path from root. The full path to a field is
   * constructed by concatenating field names, starting from `_root`, with
   * a period `.` as the delimiter. Examples:
   *
   * * Publish date of the root: _root.datePublished
   * * Publish date of the reviews: _root.review.datePublished
   * </pre>
   *
   * <code>repeated string schema_org_paths = 11;</code>
   *
   * @return A list containing the schemaOrgPaths.
   */
  java.util.List<java.lang.String> getSchemaOrgPathsList();
  /**
   *
   *
   * <pre>
   * Field paths for indexing custom attribute from schema.org data. More
   * details of schema.org and its defined types can be found at
   * [schema.org](https://schema.org).
   *
   * It is only used on advanced site search schema.
   *
   * Currently only support full path from root. The full path to a field is
   * constructed by concatenating field names, starting from `_root`, with
   * a period `.` as the delimiter. Examples:
   *
   * * Publish date of the root: _root.datePublished
   * * Publish date of the reviews: _root.review.datePublished
   * </pre>
   *
   * <code>repeated string schema_org_paths = 11;</code>
   *
   * @return The count of schemaOrgPaths.
   */
  int getSchemaOrgPathsCount();
  /**
   *
   *
   * <pre>
   * Field paths for indexing custom attribute from schema.org data. More
   * details of schema.org and its defined types can be found at
   * [schema.org](https://schema.org).
   *
   * It is only used on advanced site search schema.
   *
   * Currently only support full path from root. The full path to a field is
   * constructed by concatenating field names, starting from `_root`, with
   * a period `.` as the delimiter. Examples:
   *
   * * Publish date of the root: _root.datePublished
   * * Publish date of the reviews: _root.review.datePublished
   * </pre>
   *
   * <code>repeated string schema_org_paths = 11;</code>
   *
   * @param index The index of the element to return.
   * @return The schemaOrgPaths at the given index.
   */
  java.lang.String getSchemaOrgPaths(int index);
  /**
   *
   *
   * <pre>
   * Field paths for indexing custom attribute from schema.org data. More
   * details of schema.org and its defined types can be found at
   * [schema.org](https://schema.org).
   *
   * It is only used on advanced site search schema.
   *
   * Currently only support full path from root. The full path to a field is
   * constructed by concatenating field names, starting from `_root`, with
   * a period `.` as the delimiter. Examples:
   *
   * * Publish date of the root: _root.datePublished
   * * Publish date of the reviews: _root.review.datePublished
   * </pre>
   *
   * <code>repeated string schema_org_paths = 11;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the schemaOrgPaths at the given index.
   */
  com.google.protobuf.ByteString getSchemaOrgPathsBytes(int index);
}
