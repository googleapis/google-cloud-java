/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/recaptchaenterprise/v1beta1/recaptchaenterprise.proto

// Protobuf Java Version: 3.25.5
package com.google.recaptchaenterprise.v1beta1;

public interface PasswordLeakVerificationOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. Scrypt hash of the username+password that the customer wants to
   * verify against a known password leak.
   * </pre>
   *
   * <code>bytes hashed_user_credentials = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The hashedUserCredentials.
   */
  com.google.protobuf.ByteString getHashedUserCredentials();

  /**
   *
   *
   * <pre>
   * Output only. Whether or not the user's credentials are present in a known
   * leak.
   * </pre>
   *
   * <code>bool credentials_leaked = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   *
   * @return The credentialsLeaked.
   */
  boolean getCredentialsLeaked();

  /**
   *
   *
   * <pre>
   * Optional. The username part of the user credentials for which we want to
   * trigger a leak check in canonicalized form. This is the same data used to
   * create the hashed_user_credentials on the customer side.
   * </pre>
   *
   * <code>string canonicalized_username = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The canonicalizedUsername.
   */
  java.lang.String getCanonicalizedUsername();
  /**
   *
   *
   * <pre>
   * Optional. The username part of the user credentials for which we want to
   * trigger a leak check in canonicalized form. This is the same data used to
   * create the hashed_user_credentials on the customer side.
   * </pre>
   *
   * <code>string canonicalized_username = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   *
   * @return The bytes for canonicalizedUsername.
   */
  com.google.protobuf.ByteString getCanonicalizedUsernameBytes();
}
